
sim7600.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08006a54  08006a54  00016a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800703c  0800703c  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007044  08007044  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800704c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f8  20000270  080072bc  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004568  080072bc  00024568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175f9  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f1  00000000  00000000  00037899  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  0003ae90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  0003c178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247b4  00000000  00000000  0003d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe4f  00000000  00000000  00061a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3d9c  00000000  00000000  000718cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005668  00000000  00000000  001456e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a3c 	.word	0x08006a3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08006a3c 	.word	0x08006a3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <netsimTask>:
const char *down_pro = "downstream/provision/608a78baaa969877dec4e6f4";

void netsimTask(void *arg);

void netsimTask(void *arg)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b08e      	sub	sp, #56	; 0x38
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
	//printf("\r\n netsimTask \r\n");
	xQueueControl_t xQueueControl;
	uint8_t uiSysState;
	xQueueControl.xTask = netSIMTask;
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <netsimTask+0xb4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
	/*Waiting for controller start this task*/
	do {
		osDelay(10);
 800058e:	200a      	movs	r0, #10
 8000590:	f003 f8a7 	bl	80036e2 <osDelay>
		xQueuePeek(xQueueMessageHandle, &uiSysState, 0);
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <netsimTask+0xb8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800059c:	2200      	movs	r2, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 fca0 	bl	8003ee4 <xQueuePeek>
	}
	while (uiSysState != SYS_SIM_TASK);
 80005a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d1f0      	bne.n	800058e <netsimTask+0xe>
	xQueueReceive(xQueueMessageHandle, &uiSysState, 0);
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <netsimTask+0xb8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80005b4:	2200      	movs	r2, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fbb8 	bl	8003d2c <xQueueReceive>
	//printf("\r\b SIM Service starting \r\n");
	/*Starting initial*/
	INIT_SIM7600();   // HERE
 80005bc:	f000 fc0e 	bl	8000ddc <INIT_SIM7600>
	sim7600_info_t sim7600_client;
	sim7600_client.client_id = mqtt_id;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <netsimTask+0xbc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	60bb      	str	r3, [r7, #8]
	sim7600_client.client_user = mqtt_user;
 80005c6:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <netsimTask+0xc0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	60fb      	str	r3, [r7, #12]
	sim7600_client.client_pass = mqtt_password;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <netsimTask+0xc4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	613b      	str	r3, [r7, #16]
	sim7600_client.port= u16_mqtt_port;
 80005d2:	f644 439d 	movw	r3, #19613	; 0x4c9d
 80005d6:	82bb      	strh	r3, [r7, #20]
	sim7600_client.keepalive = 1000;
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	82fb      	strh	r3, [r7, #22]
	sim7600_client.will_topic = NULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
	sim7600_client.qos = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	773b      	strb	r3, [r7, #28]
	sim7600_client.retain = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	777b      	strb	r3, [r7, #29]
	uint8_t state = SIM7600_NEW_CONNECTION(client,server,sim7600_client.client_user,sim7600_client.client_pass,sim7600_client.port,sim7600_client.keepalive);
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <netsimTask+0xc8>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <netsimTask+0xcc>)
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	68fc      	ldr	r4, [r7, #12]
 80005f4:	693d      	ldr	r5, [r7, #16]
 80005f6:	8abb      	ldrh	r3, [r7, #20]
 80005f8:	8afa      	ldrh	r2, [r7, #22]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	462b      	mov	r3, r5
 8000600:	4622      	mov	r2, r4
 8000602:	f000 fc0b 	bl	8000e1c <SIM7600_NEW_CONNECTION>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	SIM7600_PUBLISH_PACKET(tel_topic,sim7600_client.qos);
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <netsimTask+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	7f3a      	ldrb	r2, [r7, #28]
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fccb 	bl	8000fb0 <SIM7600_PUBLISH_PACKET>
	if (state == 1) {
	} else {
		//printf("\r\n Failed to connect to MQTT server with er: %d", er);
	}
	/*Notify controller the starting is successful*/
	xQueueControl.xState = TASK_RUNNING;
 800061a:	2302      	movs	r3, #2
 800061c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	xQueueSend(xQueueControlHandle, &xQueueControl, 10);
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <netsimTask+0xd4>)
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000628:	2300      	movs	r3, #0
 800062a:	220a      	movs	r2, #10
 800062c:	f003 fa84 	bl	8003b38 <xQueueGenericSend>
	#define port_DEFAULT_DELAY 	1000
	/*a loop in mqtt_modbus_thread_up(); function*/
	//MQTT_SIM7600_UPSTREAM(tel_topic, pro_topic, sim7600_client.qos);
//	SIM7600_PUBLISH_PACKET(tel_topic,sim7600_client.qos);
	while (1)
 8000630:	e7fe      	b.n	8000630 <netsimTask+0xb0>
 8000632:	bf00      	nop
 8000634:	20004264 	.word	0x20004264
 8000638:	200042e0 	.word	0x200042e0
 800063c:	20000008 	.word	0x20000008
 8000640:	2000000c 	.word	0x2000000c
 8000644:	20000010 	.word	0x20000010
 8000648:	20000000 	.word	0x20000000
 800064c:	20000004 	.word	0x20000004
 8000650:	20000014 	.word	0x20000014
 8000654:	200042cc 	.word	0x200042cc

08000658 <UARTIntHandler>:
uint8_t commandBuffer[100];
uint32_t commandBufferIndex = 0;
uint32_t gotCommandFlag = 0;
/***************************************Response from SIM7600**************************************************************/
void UARTIntHandler(void)
	{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
//				commandBuffer[commandBufferIndex] = receivedChar;
//				commandBufferIndex++;
//			}
//		gotCommandFlag = 1;
		uint8_t receivedChar;
		receivedChar = (uint8_t) ((huart2).Instance->DR & (uint8_t) 0x00FF);
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <UARTIntHandler+0x64>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	71fb      	strb	r3, [r7, #7]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <UARTIntHandler+0x64>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <UARTIntHandler+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f042 0220 	orr.w	r2, r2, #32
 8000674:	60da      	str	r2, [r3, #12]
		if (receivedChar != 13) {
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b0d      	cmp	r3, #13
 800067a:	d00a      	beq.n	8000692 <UARTIntHandler+0x3a>
			commandBuffer[commandBufferIndex] = receivedChar;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <UARTIntHandler+0x68>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4910      	ldr	r1, [pc, #64]	; (80006c4 <UARTIntHandler+0x6c>)
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	54ca      	strb	r2, [r1, r3]
			commandBufferIndex++;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <UARTIntHandler+0x68>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <UARTIntHandler+0x68>)
 800068e:	6013      	str	r3, [r2, #0]
				commandBuffer[commandBufferIndex] = 0;
				commandBufferIndex = 0;
				gotCommandFlag = 1;
			}
		}
	}
 8000690:	e00e      	b.n	80006b0 <UARTIntHandler+0x58>
			if (commandBufferIndex != 0) {
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <UARTIntHandler+0x68>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00a      	beq.n	80006b0 <UARTIntHandler+0x58>
				commandBuffer[commandBufferIndex] = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <UARTIntHandler+0x68>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <UARTIntHandler+0x6c>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	54d1      	strb	r1, [r2, r3]
				commandBufferIndex = 0;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <UARTIntHandler+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
				gotCommandFlag = 1;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <UARTIntHandler+0x70>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
	}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	200042e4 	.word	0x200042e4
 80006c0:	2000028c 	.word	0x2000028c
 80006c4:	20004268 	.word	0x20004268
 80006c8:	20000290 	.word	0x20000290

080006cc <sendATcommand>:
/*---------------------------------------------------------------------------------------------------------------------------*/
uint8_t sendATcommand(char* ATcommand, uint32_t timeout)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,1000);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff fd7a 	bl	80001d0 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29b      	uxth	r3, r3
 80006e0:	3301      	adds	r3, #1
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <sendATcommand+0x40>)
 80006ec:	f002 f8ef 	bl	80028ce <HAL_UART_Transmit>
	HAL_Delay(timeout);
 80006f0:	6838      	ldr	r0, [r7, #0]
 80006f2:	f000 ff33 	bl	800155c <HAL_Delay>
	memset(commandBuffer,'\0',100);
 80006f6:	2264      	movs	r2, #100	; 0x64
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <sendATcommand+0x44>)
 80006fc:	f005 f8b9 	bl	8005872 <memset>
	}
 8000700:	bf00      	nop
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200042e4 	.word	0x200042e4
 8000710:	20004268 	.word	0x20004268

08000714 <sendATcommand1>:
/*---------------------Send AT command---------------------------------------------------------------------------------------*/
uint8_t sendATcommand1(char* ATcommand,char *respect_answer_1, uint32_t timeout)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
//	uint8_t status;
	volatile uint8_t answer = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,1000);
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff fd53 	bl	80001d0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29b      	uxth	r3, r3
 800072e:	3301      	adds	r3, #1
 8000730:	b29a      	uxth	r2, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	68f9      	ldr	r1, [r7, #12]
 8000738:	481a      	ldr	r0, [pc, #104]	; (80007a4 <sendATcommand1+0x90>)
 800073a:	f002 f8c8 	bl	80028ce <HAL_UART_Transmit>
	uint32_t  tickstart = HAL_GetTick();
 800073e:	f000 ff01 	bl	8001544 <HAL_GetTick>
 8000742:	6178      	str	r0, [r7, #20]
	timeout += (uint32_t)(uwTickFreq); // HERE
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <sendATcommand1+0x94>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	607b      	str	r3, [r7, #4]
	do
	{
		if (gotCommandFlag == 1)
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <sendATcommand1+0x98>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d108      	bne.n	800076a <sendATcommand1+0x56>
		{
			if (strstr(commandBuffer,respect_answer_1) != NULL)
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	4815      	ldr	r0, [pc, #84]	; (80007b0 <sendATcommand1+0x9c>)
 800075c:	f005 f8ed 	bl	800593a <strstr>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <sendATcommand1+0x56>
			{
				answer = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	74fb      	strb	r3, [r7, #19]
			else
			{
			}
		}
	}
	while((answer == 0) && ((HAL_GetTick() - tickstart) < timeout));
 800076a:	7cfb      	ldrb	r3, [r7, #19]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d107      	bne.n	8000782 <sendATcommand1+0x6e>
 8000772:	f000 fee7 	bl	8001544 <HAL_GetTick>
 8000776:	4602      	mov	r2, r0
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	429a      	cmp	r2, r3
 8000780:	d8e6      	bhi.n	8000750 <sendATcommand1+0x3c>
	gotCommandFlag = 0;
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <sendATcommand1+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
	commandBufferIndex = 0;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <sendATcommand1+0xa0>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
	memset(commandBuffer,'\0',100);
 800078e:	2264      	movs	r2, #100	; 0x64
 8000790:	2100      	movs	r1, #0
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <sendATcommand1+0x9c>)
 8000794:	f005 f86d 	bl	8005872 <memset>
	return answer;
 8000798:	7cfb      	ldrb	r3, [r7, #19]
 800079a:	b2db      	uxtb	r3, r3
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200042e4 	.word	0x200042e4
 80007a8:	20000204 	.word	0x20000204
 80007ac:	20000290 	.word	0x20000290
 80007b0:	20004268 	.word	0x20004268
 80007b4:	2000028c 	.word	0x2000028c

080007b8 <itoa_user>:
//	}
//	return atoi(err);
//}

///*-------------------------------------------------------------------------------------*/
uint8_t* itoa_user(uint32_t val, uint8_t base) {
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
	static uint8_t buf[32] = { 0 };  // 32 bits
	int i = 30;
 80007c4:	231e      	movs	r3, #30
 80007c6:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d11c      	bne.n	8000808 <itoa_user+0x50>
		buf[i--] = '0';
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	60fa      	str	r2, [r7, #12]
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <itoa_user+0x70>)
 80007d6:	2130      	movs	r1, #48	; 0x30
 80007d8:	54d1      	strb	r1, [r2, r3]
	for (; val && i; --i, val /= base)
 80007da:	e015      	b.n	8000808 <itoa_user+0x50>
		buf[i] = "0123456789abcdef"[val % base];
 80007dc:	78fa      	ldrb	r2, [r7, #3]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80007e4:	fb02 f201 	mul.w	r2, r2, r1
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <itoa_user+0x74>)
 80007ec:	5cd1      	ldrb	r1, [r2, r3]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <itoa_user+0x70>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4413      	add	r3, r2
 80007f4:	460a      	mov	r2, r1
 80007f6:	701a      	strb	r2, [r3, #0]
	for (; val && i; --i, val /= base)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <itoa_user+0x5c>
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1e3      	bne.n	80007dc <itoa_user+0x24>

	return &buf[i + 1];
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <itoa_user+0x70>)
 800081a:	4413      	add	r3, r2
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	20000294 	.word	0x20000294
 800082c:	08006b48 	.word	0x08006b48

08000830 <sendATcommand2>:
/*---------------------Send AT command with 2 respect_answer------------------------------------------------------------------*/
uint8_t sendATcommand2(char* ATcommand,char *respect_answer_1,char *respect_answer_2,uint32_t timeout)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
	uint8_t status;
	volatile uint8_t answer = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,1000);
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f7ff fcc4 	bl	80001d0 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29b      	uxth	r3, r3
 800084c:	3301      	adds	r3, #1
 800084e:	b29a      	uxth	r2, r3
 8000850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000854:	68f9      	ldr	r1, [r7, #12]
 8000856:	4820      	ldr	r0, [pc, #128]	; (80008d8 <sendATcommand2+0xa8>)
 8000858:	f002 f839 	bl	80028ce <HAL_UART_Transmit>
	uint32_t  tickstart = HAL_GetTick();
 800085c:	f000 fe72 	bl	8001544 <HAL_GetTick>
 8000860:	6178      	str	r0, [r7, #20]
	timeout += (uint32_t)(uwTickFreq); // HERE
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <sendATcommand2+0xac>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	4413      	add	r3, r2
 800086c:	603b      	str	r3, [r7, #0]
	do
	{
		if (gotCommandFlag == 1)
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <sendATcommand2+0xb0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d112      	bne.n	800089c <sendATcommand2+0x6c>
		{
			if (strstr(commandBuffer,respect_answer_1) != NULL)
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	481a      	ldr	r0, [pc, #104]	; (80008e4 <sendATcommand2+0xb4>)
 800087a:	f005 f85e 	bl	800593a <strstr>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <sendATcommand2+0x5a>
			{
				answer = 1;
 8000884:	2301      	movs	r3, #1
 8000886:	74fb      	strb	r3, [r7, #19]
 8000888:	e008      	b.n	800089c <sendATcommand2+0x6c>
			}
			else if (strstr(commandBuffer,respect_answer_2) != NULL)
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <sendATcommand2+0xb4>)
 800088e:	f005 f854 	bl	800593a <strstr>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <sendATcommand2+0x6c>
			{
				answer = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	74fb      	strb	r3, [r7, #19]
			}
		}
	}
	while((answer == 0) && ((HAL_GetTick() - tickstart) < timeout));
 800089c:	7cfb      	ldrb	r3, [r7, #19]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d107      	bne.n	80008b4 <sendATcommand2+0x84>
 80008a4:	f000 fe4e 	bl	8001544 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8dc      	bhi.n	800086e <sendATcommand2+0x3e>
	gotCommandFlag = 0;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <sendATcommand2+0xb0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
	commandBufferIndex = 0;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <sendATcommand2+0xb8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
	memset(commandBuffer,'\0',100);
 80008c0:	2264      	movs	r2, #100	; 0x64
 80008c2:	2100      	movs	r1, #0
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <sendATcommand2+0xb4>)
 80008c6:	f004 ffd4 	bl	8005872 <memset>
	return answer;
 80008ca:	7cfb      	ldrb	r3, [r7, #19]
 80008cc:	b2db      	uxtb	r3, r3
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200042e4 	.word	0x200042e4
 80008dc:	20000204 	.word	0x20000204
 80008e0:	20000290 	.word	0x20000290
 80008e4:	20004268 	.word	0x20004268
 80008e8:	2000028c 	.word	0x2000028c

080008ec <createJson>:
/*
 * return mqtt error code
 *
 * */
uint8_t createJson(char demo[500],char name[10], uint16_t val)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]

	memset(demo,0,sizeof(demo));
 80008fa:	2204      	movs	r2, #4
 80008fc:	2100      	movs	r1, #0
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f004 ffb7 	bl	8005872 <memset>
	strcat(demo,"{");
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff fc63 	bl	80001d0 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	4930      	ldr	r1, [pc, #192]	; (80009d4 <createJson+0xe8>)
 8000914:	461a      	mov	r2, r3
 8000916:	460b      	mov	r3, r1
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	8013      	strh	r3, [r2, #0]
    strcat(demo,"\"");
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f7ff fc57 	bl	80001d0 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4413      	add	r3, r2
 800092a:	492b      	ldr	r1, [pc, #172]	; (80009d8 <createJson+0xec>)
 800092c:	461a      	mov	r2, r3
 800092e:	460b      	mov	r3, r1
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	8013      	strh	r3, [r2, #0]
    strcat(demo,name);
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f004 fff0 	bl	800591c <strcat>
    strcat(demo,"\"");
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff fc47 	bl	80001d0 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4413      	add	r3, r2
 800094a:	4923      	ldr	r1, [pc, #140]	; (80009d8 <createJson+0xec>)
 800094c:	461a      	mov	r2, r3
 800094e:	460b      	mov	r3, r1
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	8013      	strh	r3, [r2, #0]
	strcat(demo,":");
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f7ff fc3b 	bl	80001d0 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4413      	add	r3, r2
 8000962:	491e      	ldr	r1, [pc, #120]	; (80009dc <createJson+0xf0>)
 8000964:	461a      	mov	r2, r3
 8000966:	460b      	mov	r3, r1
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	8013      	strh	r3, [r2, #0]
    strcat(demo,"\"value\"");
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	f7ff fc2f 	bl	80001d0 <strlen>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	4919      	ldr	r1, [pc, #100]	; (80009e0 <createJson+0xf4>)
 800097c:	461a      	mov	r2, r3
 800097e:	460b      	mov	r3, r1
 8000980:	cb03      	ldmia	r3!, {r0, r1}
 8000982:	6010      	str	r0, [r2, #0]
 8000984:	6051      	str	r1, [r2, #4]
    strcat(demo,":");
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff fc22 	bl	80001d0 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	4911      	ldr	r1, [pc, #68]	; (80009dc <createJson+0xf0>)
 8000996:	461a      	mov	r2, r3
 8000998:	460b      	mov	r3, r1
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	8013      	strh	r3, [r2, #0]
    strcat(demo,itoa_user(val, 10));
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	210a      	movs	r1, #10
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff08 	bl	80007b8 <itoa_user>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4619      	mov	r1, r3
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f004 ffb5 	bl	800591c <strcat>
    strcat(demo,"}");
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f7ff fc0c 	bl	80001d0 <strlen>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	4908      	ldr	r1, [pc, #32]	; (80009e4 <createJson+0xf8>)
 80009c2:	461a      	mov	r2, r3
 80009c4:	460b      	mov	r3, r1
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	8013      	strh	r3, [r2, #0]

	}
 80009ca:	bf00      	nop
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	08006b5c 	.word	0x08006b5c
 80009d8:	08006b60 	.word	0x08006b60
 80009dc:	08006b64 	.word	0x08006b64
 80009e0:	08006b68 	.word	0x08006b68
 80009e4:	08006b70 	.word	0x08006b70

080009e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <vApplicationGetIdleTaskMemory+0x2c>)
 80009f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <vApplicationGetIdleTaskMemory+0x30>)
 80009fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200002b4 	.word	0x200002b4
 8000a18:	20000308 	.word	0x20000308

08000a1c <MX_FREERTOS_Init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MX_FREERTOS_Init(void) {
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b098      	sub	sp, #96	; 0x60
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */

	osMessageQDef(xQueueControl, 1, xQueueControl_t);
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_FREERTOS_Init+0xbc>)
 8000a24:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueControlHandle = osMessageCreate(osMessageQ(xQueueControl), NULL);
 8000a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fe68 	bl	800370a <osMessageCreate>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <MX_FREERTOS_Init+0xc0>)
 8000a3e:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueMessage, 1, uint8_t);
 8000a40:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <MX_FREERTOS_Init+0xc4>)
 8000a42:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueMessageHandle = osMessageCreate(osMessageQ(xQueueMessage), NULL);
 8000a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fe59 	bl	800370a <osMessageCreate>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_FREERTOS_Init+0xc8>)
 8000a5c:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueDownlink, 1, xQueueMbMqtt_t);
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_FREERTOS_Init+0xcc>)
 8000a60:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueDownlinkHandle = osMessageCreate(osMessageQ(xQueueDownlink), NULL);
 8000a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fe4a 	bl	800370a <osMessageCreate>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_FREERTOS_Init+0xd0>)
 8000a7a:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueUplink, 1, xQueueMbMqtt_t);
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_FREERTOS_Init+0xcc>)
 8000a7e:	f107 0420 	add.w	r4, r7, #32
 8000a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueUplinkHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fe3b 	bl	800370a <osMessageCreate>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_FREERTOS_Init+0xd4>)
 8000a98:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueReset, 1, sizeof(uint32_t));
	xQueueResetHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 fe32 	bl	800370a <osMessageCreate>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_FREERTOS_Init+0xd8>)
 8000aaa:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_FREERTOS_Init+0xdc>)
 8000aae:	1d3c      	adds	r4, r7, #4
 8000ab0:	461d      	mov	r5, r3
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fdc1 	bl	800364a <osThreadCreate>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_FREERTOS_Init+0xe0>)
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	3760      	adds	r7, #96	; 0x60
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08006b9c 	.word	0x08006b9c
 8000adc:	200042cc 	.word	0x200042cc
 8000ae0:	08006bac 	.word	0x08006bac
 8000ae4:	200042e0 	.word	0x200042e0
 8000ae8:	08006bbc 	.word	0x08006bbc
 8000aec:	200042d8 	.word	0x200042d8
 8000af0:	200042dc 	.word	0x200042dc
 8000af4:	200042d4 	.word	0x200042d4
 8000af8:	08006bd8 	.word	0x08006bd8
 8000afc:	200042d0 	.word	0x200042d0

08000b00 <StartDefaultTask>:
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
 void StartDefaultTask(void const * argument)
  {
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartDefaultTask */
  	/*Create Task Modules in this line*/
  	/*SIm serive*/
  	osThreadDef(netSIMTask, netsimTask, osPriorityNormal, 0, 4 * 128);
 8000b08:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <StartDefaultTask+0xf8>)
 8000b0a:	f107 0414 	add.w	r4, r7, #20
 8000b0e:	461d      	mov	r5, r3
 8000b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	netSIMTask = osThreadCreate(osThread(netSIMTask), NULL);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fd91 	bl	800364a <osThreadCreate>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <StartDefaultTask+0xfc>)
 8000b2c:	601a      	str	r2, [r3, #0]
  	printf("\r\n MemFree: %d", xPortGetFreeHeapSize());
 8000b2e:	f004 fda3 	bl	8005678 <xPortGetFreeHeapSize>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4832      	ldr	r0, [pc, #200]	; (8000c00 <StartDefaultTask+0x100>)
 8000b38:	f004 fea4 	bl	8005884 <iprintf>

  	/*Controller*/
  	xQueueControl_t xQueueControl;
  	#define PORT_DEFAULT_DELAY	1000
  	uint8_t uiSysState = SYS_START;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	72fb      	strb	r3, [r7, #11]
  	uint8_t uiSysUpdate = FALSE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  	BaseType_t sysError;
  	/* Infinite loop */
  	for (;;) {
  		switch (uiSysState) {
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d00b      	beq.n	8000b64 <StartDefaultTask+0x64>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d02e      	beq.n	8000bae <StartDefaultTask+0xae>
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d13d      	bne.n	8000bd0 <StartDefaultTask+0xd0>
  		case SYS_START:
  			//printf("\r\n Task Controller: Implementing...  \r\n");
  			uiSysUpdate = TRUE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  			uiSysState++;
 8000b5a:	7afb      	ldrb	r3, [r7, #11]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	72fb      	strb	r3, [r7, #11]
  			break;
 8000b62:	e035      	b.n	8000bd0 <StartDefaultTask+0xd0>
  		case SYS_SIM_TASK:
  			//printf("\r\n Starting netMQTTTask module:  \r\n");
  			sysError = xQueueReceive(xQueueControlHandle, &xQueueControl,portMAX_DELAY);
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <StartDefaultTask+0x104>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f107 010c 	add.w	r1, r7, #12
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 f8db 	bl	8003d2c <xQueueReceive>
 8000b76:	6338      	str	r0, [r7, #48]	; 0x30
  			if (sysError == pdTRUE) {
 8000b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d10f      	bne.n	8000b9e <StartDefaultTask+0x9e>
  				if ((xQueueControl.xState == TASK_RUNNING) && (xQueueControl.xTask == netSIMTask)) {
 8000b7e:	7c3b      	ldrb	r3, [r7, #16]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d124      	bne.n	8000bce <StartDefaultTask+0xce>
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <StartDefaultTask+0xfc>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d11f      	bne.n	8000bce <StartDefaultTask+0xce>
  					//printf("\r\n Starting netMQTTTask module: OK \r\n");
  					uiSysUpdate = TRUE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  					uiSysState++;
 8000b94:	7afb      	ldrb	r3, [r7, #11]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	72fb      	strb	r3, [r7, #11]
  				}
  			} else {
  					uiSysUpdate = TRUE;
  					uiSysState++;
  			}
  			break;
 8000b9c:	e017      	b.n	8000bce <StartDefaultTask+0xce>
  					uiSysUpdate = TRUE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  					uiSysState++;
 8000ba4:	7afb      	ldrb	r3, [r7, #11]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	72fb      	strb	r3, [r7, #11]
  			break;
 8000bac:	e00f      	b.n	8000bce <StartDefaultTask+0xce>
  		case SYS_DEFAULT:
  			if (gotCommandFlag) {
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <StartDefaultTask+0x108>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <StartDefaultTask+0xc6>
  				gotCommandFlag = 0;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <StartDefaultTask+0x108>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
  				memset(commandBuffer,'\0',sizeof(commandBuffer));
 8000bbc:	2264      	movs	r2, #100	; 0x64
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <StartDefaultTask+0x10c>)
 8000bc2:	f004 fe56 	bl	8005872 <memset>
  			}
  			osDelay(10);
 8000bc6:	200a      	movs	r0, #10
 8000bc8:	f002 fd8b 	bl	80036e2 <osDelay>
  			break;
 8000bcc:	e000      	b.n	8000bd0 <StartDefaultTask+0xd0>
  			break;
 8000bce:	bf00      	nop

  		}
  		if ((uiSysUpdate == TRUE) && (uiSysState != SYS_DEFAULT)) {
 8000bd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d1b6      	bne.n	8000b46 <StartDefaultTask+0x46>
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d0b3      	beq.n	8000b46 <StartDefaultTask+0x46>
  			xQueueSend(xQueueMessageHandle, &uiSysState, 0);
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <StartDefaultTask+0x110>)
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	f107 010b 	add.w	r1, r7, #11
 8000be6:	2300      	movs	r3, #0
 8000be8:	2200      	movs	r2, #0
 8000bea:	f002 ffa5 	bl	8003b38 <xQueueGenericSend>
  			uiSysUpdate = FALSE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  		switch (uiSysState) {
 8000bf4:	e7a7      	b.n	8000b46 <StartDefaultTask+0x46>
 8000bf6:	bf00      	nop
 8000bf8:	08006c10 	.word	0x08006c10
 8000bfc:	20004264 	.word	0x20004264
 8000c00:	08006bf4 	.word	0x08006bf4
 8000c04:	200042cc 	.word	0x200042cc
 8000c08:	20000290 	.word	0x20000290
 8000c0c:	20004268 	.word	0x20004268
 8000c10:	200042e0 	.word	0x200042e0

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f000 fc5e 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f814 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c20:	f000 f89a 	bl	8000d58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c24:	f000 f86e 	bl	8000d04 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <main+0x30>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <main+0x30>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f042 0220 	orr.w	r2, r2, #32
 8000c36:	60da      	str	r2, [r3, #12]
  MX_FREERTOS_Init();
 8000c38:	f7ff fef0 	bl	8000a1c <MX_FREERTOS_Init>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c3c:	f002 fcfe 	bl	800363c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <main+0x2c>
 8000c42:	bf00      	nop
 8000c44:	200042e4 	.word	0x200042e4

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0320 	add.w	r3, r7, #32
 8000c52:	2230      	movs	r2, #48	; 0x30
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fe0b 	bl	8005872 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <SystemClock_Config+0xb4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <SystemClock_Config+0xb4>)
 8000c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <SystemClock_Config+0xb4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <SystemClock_Config+0xb8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <SystemClock_Config+0xb8>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <SystemClock_Config+0xb8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cac:	2310      	movs	r3, #16
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 ff0f 	bl	8001adc <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cc4:	f000 f882 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc8:	230f      	movs	r3, #15
 8000cca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f96a 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cee:	f000 f86d 	bl	8000dcc <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3750      	adds	r7, #80	; 0x50
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_USART2_UART_Init+0x50>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d3c:	f001 fd7a 	bl	8002834 <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d46:	f000 f841 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200042e4 	.word	0x200042e4
 8000d54:	40004400 	.word	0x40004400

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_GPIO_Init+0x4c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <MX_GPIO_Init+0x4c>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <MX_GPIO_Init+0x4c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_GPIO_Init+0x4c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <MX_GPIO_Init+0x4c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_GPIO_Init+0x4c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dba:	f000 fbaf 	bl	800151c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40010000 	.word	0x40010000

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <INIT_SIM7600>:
/**AT+CPIN?<CR><LF>  kiểm tra SIM
 * AT+CREG?<CR><LF>  kiểm tra đăng ký mạng
 * AT+CSQ<CR><LF>  kiểm tra chất lượng mạng
 */
uint8_t INIT_SIM7600(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	sendATcommand("AT\r\n",1000);
 8000de0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <INIT_SIM7600+0x34>)
 8000de6:	f7ff fc71 	bl	80006cc <sendATcommand>
	sendATcommand("AT\r\n",1000);
 8000dea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <INIT_SIM7600+0x34>)
 8000df0:	f7ff fc6c 	bl	80006cc <sendATcommand>
	sendATcommand("ATE0\r\n",1000);
 8000df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <INIT_SIM7600+0x38>)
 8000dfa:	f7ff fc67 	bl	80006cc <sendATcommand>
	sendATcommand("AT&W\r\n",1000);
 8000dfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <INIT_SIM7600+0x3c>)
 8000e04:	f7ff fc62 	bl	80006cc <sendATcommand>
}
 8000e08:	bf00      	nop
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08006dd0 	.word	0x08006dd0
 8000e14:	08006dd8 	.word	0x08006dd8
 8000e18:	08006de0 	.word	0x08006de0

08000e1c <SIM7600_NEW_CONNECTION>:
//AT+CMQTTSTART<CR><LF>
//AT+CMQTTACCQ=0,"SIMCom_client01",1<CR><LF>
//AT+CMQTTCONNECT=0,"tcp://m14.cloudmqtt.com:19613",180,1,"yktdxpqb","VKCG6yboYrYd"<CR><LF>

uint8_t SIM7600_NEW_CONNECTION(char *client,char *server,char *user, char *pass, uint16_t port, uint16_t keepalive)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b08f      	sub	sp, #60	; 0x3c
 8000e20:	af08      	add	r7, sp, #32
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
//			snprintf(aux_str, sizeof(aux_str),"AT+CMQTTCONNECT=%d,\"tcp://%s:%d\",%d,%d,\"%s\",\"%s\"%s",index,server,port,keepalive,cleansession,user,pass,"\r\n");
//			sendATcommand2(aux_str,"+CMQTTCONNECT: 0,0","+CMQTTCONNECT: 0,19",3000);
//		}
//	}
	uint8_t start, mqtt, connect;
	sendATcommand("AT+NETOPEN\r\n",1000);
 8000e2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e2e:	482f      	ldr	r0, [pc, #188]	; (8000eec <SIM7600_NEW_CONNECTION+0xd0>)
 8000e30:	f7ff fc4c 	bl	80006cc <sendATcommand>
	sendATcommand("AT+CMQTTSTART\r\n",1000);
 8000e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e38:	482d      	ldr	r0, [pc, #180]	; (8000ef0 <SIM7600_NEW_CONNECTION+0xd4>)
 8000e3a:	f7ff fc47 	bl	80006cc <sendATcommand>

	memset(aux_str,0,sizeof(aux_str));
 8000e3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e42:	2100      	movs	r1, #0
 8000e44:	482b      	ldr	r0, [pc, #172]	; (8000ef4 <SIM7600_NEW_CONNECTION+0xd8>)
 8000e46:	f004 fd14 	bl	8005872 <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTACCQ=%d,\"%s\"%s",index,client,"\r\n");
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <SIM7600_NEW_CONNECTION+0xdc>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <SIM7600_NEW_CONNECTION+0xe0>)
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	4a29      	ldr	r2, [pc, #164]	; (8000f00 <SIM7600_NEW_CONNECTION+0xe4>)
 8000e5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e60:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <SIM7600_NEW_CONNECTION+0xd8>)
 8000e62:	f004 fd27 	bl	80058b4 <sniprintf>
	sendATcommand(aux_str,1000);
 8000e66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <SIM7600_NEW_CONNECTION+0xd8>)
 8000e6c:	f7ff fc2e 	bl	80006cc <sendATcommand>

	memset(aux_str,0,sizeof(aux_str));
 8000e70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e74:	2100      	movs	r1, #0
 8000e76:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <SIM7600_NEW_CONNECTION+0xd8>)
 8000e78:	f004 fcfb 	bl	8005872 <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTCONNECT=%d,\"tcp://%s:%d\",%d,%d,\"%s\",\"%s\"%s",index,server,port,keepalive,cleansession,user,pass,"\r\n");
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <SIM7600_NEW_CONNECTION+0xdc>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461c      	mov	r4, r3
 8000e82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e84:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e86:	491f      	ldr	r1, [pc, #124]	; (8000f04 <SIM7600_NEW_CONNECTION+0xe8>)
 8000e88:	7809      	ldrb	r1, [r1, #0]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	491b      	ldr	r1, [pc, #108]	; (8000efc <SIM7600_NEW_CONNECTION+0xe0>)
 8000e8e:	9106      	str	r1, [sp, #24]
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	9105      	str	r1, [sp, #20]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	9104      	str	r1, [sp, #16]
 8000e98:	9003      	str	r0, [sp, #12]
 8000e9a:	9202      	str	r2, [sp, #8]
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <SIM7600_NEW_CONNECTION+0xec>)
 8000ea6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eaa:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <SIM7600_NEW_CONNECTION+0xd8>)
 8000eac:	f004 fd02 	bl	80058b4 <sniprintf>
	connect = sendATcommand2(aux_str,"+CMQTTCONNECT: 0,0","+CMQTTCONNECT: 0,19",3000);
 8000eb0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000eb4:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <SIM7600_NEW_CONNECTION+0xf0>)
 8000eb6:	4916      	ldr	r1, [pc, #88]	; (8000f10 <SIM7600_NEW_CONNECTION+0xf4>)
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <SIM7600_NEW_CONNECTION+0xd8>)
 8000eba:	f7ff fcb9 	bl	8000830 <sendATcommand2>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	75fb      	strb	r3, [r7, #23]
	if (connect != 1){
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d00b      	beq.n	8000ee0 <SIM7600_NEW_CONNECTION+0xc4>
		sendATcommand("AT\r\n",1000);
 8000ec8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <SIM7600_NEW_CONNECTION+0xf8>)
 8000ece:	f7ff fbfd 	bl	80006cc <sendATcommand>
		sendATcommand("AT+NETCLOSE\r\n",1000);
 8000ed2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed6:	4810      	ldr	r0, [pc, #64]	; (8000f18 <SIM7600_NEW_CONNECTION+0xfc>)
 8000ed8:	f7ff fbf8 	bl	80006cc <sendATcommand>
		RECONNECT();
 8000edc:	f000 f81e 	bl	8000f1c <RECONNECT>
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd90      	pop	{r4, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	08006de8 	.word	0x08006de8
 8000ef0:	08006df8 	.word	0x08006df8
 8000ef4:	20004324 	.word	0x20004324
 8000ef8:	20000508 	.word	0x20000508
 8000efc:	08006e20 	.word	0x08006e20
 8000f00:	08006e08 	.word	0x08006e08
 8000f04:	200001f8 	.word	0x200001f8
 8000f08:	08006e24 	.word	0x08006e24
 8000f0c:	08006e58 	.word	0x08006e58
 8000f10:	08006e6c 	.word	0x08006e6c
 8000f14:	08006dd0 	.word	0x08006dd0
 8000f18:	08006e80 	.word	0x08006e80

08000f1c <RECONNECT>:
/*-----------------------------------------------------------------------------------------------------*/
uint8_t RECONNECT(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
	sendATcommand("AT\r\n",1000);
 8000f26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <RECONNECT+0x70>)
 8000f2c:	f7ff fbce 	bl	80006cc <sendATcommand>
	sendATcommand("AT\r\n",1000);
 8000f30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <RECONNECT+0x70>)
 8000f36:	f7ff fbc9 	bl	80006cc <sendATcommand>
	sendATcommand("AT+CMQTTDISC=0,120\r\n",1000);
 8000f3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f3e:	4814      	ldr	r0, [pc, #80]	; (8000f90 <RECONNECT+0x74>)
 8000f40:	f7ff fbc4 	bl	80006cc <sendATcommand>
	sendATcommand("AT+CMQTTREL=0\r\n",1000);
 8000f44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f48:	4812      	ldr	r0, [pc, #72]	; (8000f94 <RECONNECT+0x78>)
 8000f4a:	f7ff fbbf 	bl	80006cc <sendATcommand>
	sendATcommand("AT+CMQTTSTOP\r\n",1000);
 8000f4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <RECONNECT+0x7c>)
 8000f54:	f7ff fbba 	bl	80006cc <sendATcommand>
	sendATcommand1("AT+NETCLOSE\r\n","+NETCLOSE: 0",2000);
 8000f58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f5c:	490f      	ldr	r1, [pc, #60]	; (8000f9c <RECONNECT+0x80>)
 8000f5e:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <RECONNECT+0x84>)
 8000f60:	f7ff fbd8 	bl	8000714 <sendATcommand1>
	uint8_t reconnect = sendATcommand2("AT+NETOPEN\r\n","+NETOPEN: 0","already opened",2000);
 8000f64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <RECONNECT+0x88>)
 8000f6a:	490f      	ldr	r1, [pc, #60]	; (8000fa8 <RECONNECT+0x8c>)
 8000f6c:	480f      	ldr	r0, [pc, #60]	; (8000fac <RECONNECT+0x90>)
 8000f6e:	f7ff fc5f 	bl	8000830 <sendATcommand2>
 8000f72:	4603      	mov	r3, r0
 8000f74:	71bb      	strb	r3, [r7, #6]
	if(reconnect == 1)
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <RECONNECT+0x64>
		state = 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
	return state;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	08006dd0 	.word	0x08006dd0
 8000f90:	08006e90 	.word	0x08006e90
 8000f94:	08006ea8 	.word	0x08006ea8
 8000f98:	08006eb8 	.word	0x08006eb8
 8000f9c:	08006ec8 	.word	0x08006ec8
 8000fa0:	08006e80 	.word	0x08006e80
 8000fa4:	08006ed8 	.word	0x08006ed8
 8000fa8:	08006ee8 	.word	0x08006ee8
 8000fac:	08006de8 	.word	0x08006de8

08000fb0 <SIM7600_PUBLISH_PACKET>:
 * CMQTTPUB : 5*/
//	AT+CMQTTTOPIC=0,21<CR><LF>  //Set the topic for the PUBLISH message
//	AT+CMQTTPAYLOAD=0,38<CR><LF>//Set the payload for the PUBLISH message
//	AT+CMQTTPUB=0,1,60<CR><LF>  //Publish topic and message
uint8_t SIM7600_PUBLISH_PACKET(char *topic, uint8_t qos)
{
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	b0bb      	sub	sp, #236	; 0xec
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
//		memset(aux_str,0,sizeof(aux_str));
//		snprintf(aux_str, sizeof(aux_str),"AT+CMQTTPUB=%d,%d,%d%s",index,qos, strlen(payload)+strlen(topic),"\r\n");
//		sendATcommand(aux_str,1000);
//	}
	char payload[200];
	for (uint8_t i = 0; i< 20; i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8000fc2:	e07c      	b.n	80010be <SIM7600_PUBLISH_PACKET+0x10e>
	{
		memset(aux_str,0,sizeof(aux_str));
 8000fc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4842      	ldr	r0, [pc, #264]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 8000fcc:	f004 fc51 	bl	8005872 <memset>
		snprintf(aux_str, sizeof(aux_str),"AT+CMQTTTOPIC=%d,%d%s",index,43,"\r\n");
 8000fd0:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <SIM7600_PUBLISH_PACKET+0x128>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <SIM7600_PUBLISH_PACKET+0x12c>)
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	232b      	movs	r3, #43	; 0x2b
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	4a3f      	ldr	r2, [pc, #252]	; (80010e0 <SIM7600_PUBLISH_PACKET+0x130>)
 8000fe2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fe6:	483b      	ldr	r0, [pc, #236]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 8000fe8:	f004 fc64 	bl	80058b4 <sniprintf>
		sendATcommand(aux_str,1000);
 8000fec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ff0:	4838      	ldr	r0, [pc, #224]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 8000ff2:	f7ff fb6b 	bl	80006cc <sendATcommand>
		sendATcommand("upstream/telemetry/608a78baaa969877dec4e6f4",1000);
 8000ff6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ffa:	483a      	ldr	r0, [pc, #232]	; (80010e4 <SIM7600_PUBLISH_PACKET+0x134>)
 8000ffc:	f7ff fb66 	bl	80006cc <sendATcommand>

		memset(aux_str,0,sizeof(aux_str));
 8001000:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001004:	2100      	movs	r1, #0
 8001006:	4833      	ldr	r0, [pc, #204]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 8001008:	f004 fc33 	bl	8005872 <memset>
		createJson(payload,table1[i].name,100);
 800100c:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8001010:	4935      	ldr	r1, [pc, #212]	; (80010e8 <SIM7600_PUBLISH_PACKET+0x138>)
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3308      	adds	r3, #8
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2264      	movs	r2, #100	; 0x64
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fc60 	bl	80008ec <createJson>
		snprintf(aux_str, sizeof(aux_str),"AT+CMQTTPAYLOAD=%d,%d%s",index,strlen(payload),"\r\n");
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <SIM7600_PUBLISH_PACKET+0x128>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461c      	mov	r4, r3
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f8ca 	bl	80001d0 <strlen>
 800103c:	4602      	mov	r2, r0
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <SIM7600_PUBLISH_PACKET+0x12c>)
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	9200      	str	r2, [sp, #0]
 8001044:	4623      	mov	r3, r4
 8001046:	4a29      	ldr	r2, [pc, #164]	; (80010ec <SIM7600_PUBLISH_PACKET+0x13c>)
 8001048:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800104c:	4821      	ldr	r0, [pc, #132]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 800104e:	f004 fc31 	bl	80058b4 <sniprintf>
		sendATcommand(aux_str,1000);
 8001052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 8001058:	f7ff fb38 	bl	80006cc <sendATcommand>
		sendATcommand(payload,1000);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fb31 	bl	80006cc <sendATcommand>

		memset(aux_str,0,sizeof(aux_str));
 800106a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800106e:	2100      	movs	r1, #0
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 8001072:	f004 fbfe 	bl	8005872 <memset>
		snprintf(aux_str, sizeof(aux_str),"AT+CMQTTPUB=%d,%d,%d%s",index,qos,strlen(payload)+strlen(topic),"\r\n");
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <SIM7600_PUBLISH_PACKET+0x128>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461e      	mov	r6, r3
 800107c:	78fc      	ldrb	r4, [r7, #3]
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f8a4 	bl	80001d0 <strlen>
 8001088:	4605      	mov	r5, r0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff f8a0 	bl	80001d0 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	442b      	add	r3, r5
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <SIM7600_PUBLISH_PACKET+0x12c>)
 8001096:	9202      	str	r2, [sp, #8]
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	9400      	str	r4, [sp, #0]
 800109c:	4633      	mov	r3, r6
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <SIM7600_PUBLISH_PACKET+0x140>)
 80010a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 80010a6:	f004 fc05 	bl	80058b4 <sniprintf>
		sendATcommand(aux_str,1000);
 80010aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <SIM7600_PUBLISH_PACKET+0x124>)
 80010b0:	f7ff fb0c 	bl	80006cc <sendATcommand>
	for (uint8_t i = 0; i< 20; i++)
 80010b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80010b8:	3301      	adds	r3, #1
 80010ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80010be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80010c2:	2b13      	cmp	r3, #19
 80010c4:	f67f af7e 	bls.w	8000fc4 <SIM7600_PUBLISH_PACKET+0x14>
	}
}
 80010c8:	bf00      	nop
 80010ca:	4618      	mov	r0, r3
 80010cc:	37dc      	adds	r7, #220	; 0xdc
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20004324 	.word	0x20004324
 80010d8:	20000508 	.word	0x20000508
 80010dc:	08006e20 	.word	0x08006e20
 80010e0:	08006f10 	.word	0x08006f10
 80010e4:	08006f28 	.word	0x08006f28
 80010e8:	20000018 	.word	0x20000018
 80010ec:	08006f54 	.word	0x08006f54
 80010f0:	08006f6c 	.word	0x08006f6c

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_MspInit+0x4c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x4c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x4c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_UART_MspInit+0x94>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d133      	bne.n	80011ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <HAL_UART_MspInit+0x98>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <HAL_UART_MspInit+0x98>)
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_MspInit+0x98>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_UART_MspInit+0x98>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <HAL_UART_MspInit+0x98>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_UART_MspInit+0x98>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800119e:	230c      	movs	r3, #12
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ae:	2307      	movs	r3, #7
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <HAL_UART_MspInit+0x9c>)
 80011ba:	f000 faf5 	bl	80017a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2026      	movs	r0, #38	; 0x26
 80011c4:	f000 faa4 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c8:	2026      	movs	r0, #38	; 0x26
 80011ca:	f000 fabd 	bl	8001748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40004400 	.word	0x40004400
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2019      	movs	r0, #25
 80011fa:	f000 fa89 	bl	8001710 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011fe:	2019      	movs	r0, #25
 8001200:	f000 faa2 	bl	8001748 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_InitTick+0xa0>)
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_InitTick+0xa0>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6453      	str	r3, [r2, #68]	; 0x44
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_InitTick+0xa0>)
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f892 	bl	8002354 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001230:	f001 f87c 	bl	800232c <HAL_RCC_GetPCLK2Freq>
 8001234:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	4a13      	ldr	r2, [pc, #76]	; (8001288 <HAL_InitTick+0xa4>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9b      	lsrs	r3, r3, #18
 8001240:	3b01      	subs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_InitTick+0xa8>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <HAL_InitTick+0xac>)
 8001248:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_InitTick+0xa8>)
 800124c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001250:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_InitTick+0xa8>)
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_InitTick+0xa8>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_InitTick+0xa8>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <HAL_InitTick+0xa8>)
 8001266:	f001 f8a7 	bl	80023b8 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d104      	bne.n	800127a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001270:	4806      	ldr	r0, [pc, #24]	; (800128c <HAL_InitTick+0xa8>)
 8001272:	f001 f8d6 	bl	8002422 <HAL_TIM_Base_Start_IT>
 8001276:	4603      	mov	r3, r0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	431bde83 	.word	0x431bde83
 800128c:	20004520 	.word	0x20004520
 8001290:	40010000 	.word	0x40010000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012ce:	f001 f8cc 	bl	800246a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20004520 	.word	0x20004520

080012dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTIntHandler();
 80012e2:	f7ff f9b9 	bl	8000658 <UARTIntHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <USART2_IRQHandler+0x30>)
 80012e8:	f001 fb8a 	bl	8002a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  __HAL_UART_CLEAR_PEFLAG(&huart2);
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <USART2_IRQHandler+0x30>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <USART2_IRQHandler+0x30>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200042e4 	.word	0x200042e4

08001310 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	e00a      	b.n	8001338 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001322:	f3af 8000 	nop.w
 8001326:	4601      	mov	r1, r0
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf0      	blt.n	8001322 <_read+0x12>
	}

return len;
 8001340:	687b      	ldr	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e009      	b.n	8001370 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf1      	blt.n	800135c <_write+0x12>
	}
	return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_close>:

int _close(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
	return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013aa:	605a      	str	r2, [r3, #4]
	return 0;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_isatty>:

int _isatty(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f004 f9f4 	bl	8005808 <__errno>
 8001420:	4602      	mov	r2, r0
 8001422:	230c      	movs	r3, #12
 8001424:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20020000 	.word	0x20020000
 800144c:	00000400 	.word	0x00000400
 8001450:	2000050c 	.word	0x2000050c
 8001454:	20004568 	.word	0x20004568

08001458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <SystemInit+0x28>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <SystemInit+0x28>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SystemInit+0x28>)
 800146e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001472:	609a      	str	r2, [r3, #8]
#endif
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001488:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800148a:	e003      	b.n	8001494 <LoopCopyDataInit>

0800148c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800148e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001490:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001492:	3104      	adds	r1, #4

08001494 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001498:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800149a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800149c:	d3f6      	bcc.n	800148c <CopyDataInit>
  ldr  r2, =_sbss
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014a0:	e002      	b.n	80014a8 <LoopFillZerobss>

080014a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014a4:	f842 3b04 	str.w	r3, [r2], #4

080014a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014ac:	d3f9      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ae:	f7ff ffd3 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f004 f9af 	bl	8005814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff fbad 	bl	8000c14 <main>
  bx  lr    
 80014ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014c0:	0800704c 	.word	0x0800704c
  ldr  r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014c8:	20000270 	.word	0x20000270
  ldr  r2, =_sbss
 80014cc:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 80014d0:	20004568 	.word	0x20004568

080014d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_Init+0x40>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_Init+0x40>)
 80014ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_Init+0x40>)
 80014fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f8fa 	bl	80016fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fe6c 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150c:	f7ff fdf2 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023c00 	.word	0x40023c00

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000204 	.word	0x20000204
 8001540:	20004560 	.word	0x20004560

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20004560 	.word	0x20004560

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d005      	beq.n	8001582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_Delay+0x40>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001582:	bf00      	nop
 8001584:	f7ff ffde 	bl	8001544 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d8f7      	bhi.n	8001584 <HAL_Delay+0x28>
  {
  }
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000204 	.word	0x20000204

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ff4c 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001722:	f7ff ff61 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001726:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	6978      	ldr	r0, [r7, #20]
 800172e:	f7ff ffb1 	bl	8001694 <NVIC_EncodePriority>
 8001732:	4602      	mov	r2, r0
 8001734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff80 	bl	8001640 <__NVIC_SetPriority>
}
 8001740:	bf00      	nop
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff54 	bl	8001604 <__NVIC_EnableIRQ>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d004      	beq.n	8001782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00c      	b.n	800179c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2205      	movs	r2, #5
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e16b      	b.n	8001a9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 815a 	bne.w	8001a96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d00b      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f6:	2b11      	cmp	r3, #17
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0xfc>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80b4 	beq.w	8001a96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_GPIO_Init+0x308>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_GPIO_Init+0x308>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_GPIO_Init+0x308>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_GPIO_Init+0x310>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02b      	beq.n	80019ce <HAL_GPIO_Init+0x226>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a50      	ldr	r2, [pc, #320]	; (8001abc <HAL_GPIO_Init+0x314>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d025      	beq.n	80019ca <HAL_GPIO_Init+0x222>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4f      	ldr	r2, [pc, #316]	; (8001ac0 <HAL_GPIO_Init+0x318>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d01f      	beq.n	80019c6 <HAL_GPIO_Init+0x21e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4e      	ldr	r2, [pc, #312]	; (8001ac4 <HAL_GPIO_Init+0x31c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_Init+0x21a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4d      	ldr	r2, [pc, #308]	; (8001ac8 <HAL_GPIO_Init+0x320>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0x216>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4c      	ldr	r2, [pc, #304]	; (8001acc <HAL_GPIO_Init+0x324>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_Init+0x212>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <HAL_GPIO_Init+0x328>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4a      	ldr	r2, [pc, #296]	; (8001ad4 <HAL_GPIO_Init+0x32c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_Init+0x20a>
 80019ae:	2307      	movs	r3, #7
 80019b0:	e00e      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019b2:	2308      	movs	r3, #8
 80019b4:	e00c      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e00a      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e008      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019be:	2304      	movs	r3, #4
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e004      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ce:	2300      	movs	r3, #0
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f002 0203 	and.w	r2, r2, #3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4093      	lsls	r3, r2
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e0:	4934      	ldr	r1, [pc, #208]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a18:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	f67f ae90 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3724      	adds	r7, #36	; 0x24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021c00 	.word	0x40021c00
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e25b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d075      	beq.n	8001be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afa:	4ba3      	ldr	r3, [pc, #652]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d00c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4ba0      	ldr	r3, [pc, #640]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d112      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b12:	4b9d      	ldr	r3, [pc, #628]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1e:	d10b      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	4b99      	ldr	r3, [pc, #612]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d05b      	beq.n	8001be4 <HAL_RCC_OscConfig+0x108>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d157      	bne.n	8001be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e236      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d106      	bne.n	8001b50 <HAL_RCC_OscConfig+0x74>
 8001b42:	4b91      	ldr	r3, [pc, #580]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a90      	ldr	r2, [pc, #576]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xb0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x98>
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a8a      	ldr	r2, [pc, #552]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b88      	ldr	r3, [pc, #544]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a87      	ldr	r2, [pc, #540]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xb0>
 8001b74:	4b84      	ldr	r3, [pc, #528]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a83      	ldr	r2, [pc, #524]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a80      	ldr	r2, [pc, #512]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fcd6 	bl	8001544 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fcd2 	bl	8001544 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1fb      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xc0>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fcc2 	bl	8001544 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcbe 	bl	8001544 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1e7      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xe8>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d063      	beq.n	8001cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf2:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0a:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x152>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e1bb      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4952      	ldr	r1, [pc, #328]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <HAL_RCC_OscConfig+0x2b0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff fc77 	bl	8001544 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fc73 	bl	8001544 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e19c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4940      	ldr	r1, [pc, #256]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <HAL_RCC_OscConfig+0x2b0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fc56 	bl	8001544 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fc52 	bl	8001544 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e17b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d016      	beq.n	8001cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x2b4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fc36 	bl	8001544 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fc32 	bl	8001544 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e15b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x200>
 8001cfa:	e015      	b.n	8001d28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x2b4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff fc1f 	bl	8001544 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fc1b 	bl	8001544 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e144      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a0 	beq.w	8001e76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fbe1 	bl	8001544 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	e011      	b.n	8001daa <HAL_RCC_OscConfig+0x2ce>
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	42470000 	.word	0x42470000
 8001d90:	42470e80 	.word	0x42470e80
 8001d94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d98:	f7ff fbd4 	bl	8001544 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0fd      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <HAL_RCC_OscConfig+0x4d4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
 8001dbe:	4b7d      	ldr	r3, [pc, #500]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a7c      	ldr	r2, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x32a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x312>
 8001dd4:	4b77      	ldr	r3, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a76      	ldr	r2, [pc, #472]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	4b74      	ldr	r3, [pc, #464]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a73      	ldr	r2, [pc, #460]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x32a>
 8001dee:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a70      	ldr	r2, [pc, #448]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a6d      	ldr	r2, [pc, #436]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb99 	bl	8001544 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fb95 	bl	8001544 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0bc      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x33a>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb83 	bl	8001544 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fb7f 	bl	8001544 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0a6      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8092 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d05c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d141      	bne.n	8001f18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x4dc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fb53 	bl	8001544 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff fb4f 	bl	8001544 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e078      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	019b      	lsls	r3, r3, #6
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	4933      	ldr	r1, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eea:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_RCC_OscConfig+0x4dc>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fb28 	bl	8001544 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff fb24 	bl	8001544 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e04d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
 8001f16:	e045      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x4dc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fb11 	bl	8001544 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fb0d 	bl	8001544 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e036      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x44a>
 8001f44:	e02e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e029      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d115      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d10d      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470060 	.word	0x42470060

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cc      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d90c      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800201a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d044      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d119      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d003      	beq.n	800207a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e067      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4934      	ldr	r1, [pc, #208]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7ff fa4a 	bl	8001544 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff fa46 	bl	8001544 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d20c      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f821 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002146:	4601      	mov	r1, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	fa21 f303 	lsr.w	r3, r1, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f83e 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00
 8002178:	40023800 	.word	0x40023800
 800217c:	08006f8c 	.word	0x08006f8c
 8002180:	200001fc 	.word	0x200001fc
 8002184:	20000200 	.word	0x20000200

08002188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219e:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d007      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x32>
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d008      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x38>
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 808d 	bne.w	80022ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021b6:	60bb      	str	r3, [r7, #8]
       break;
 80021b8:	e08c      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80021bc:	60bb      	str	r3, [r7, #8]
      break;
 80021be:	e089      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c0:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ca:	4b45      	ldr	r3, [pc, #276]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d023      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d6:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	099b      	lsrs	r3, r3, #6
 80021dc:	f04f 0400 	mov.w	r4, #0
 80021e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	ea03 0501 	and.w	r5, r3, r1
 80021ec:	ea04 0602 	and.w	r6, r4, r2
 80021f0:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80021f2:	fb02 f106 	mul.w	r1, r2, r6
 80021f6:	2200      	movs	r2, #0
 80021f8:	fb02 f205 	mul.w	r2, r2, r5
 80021fc:	440a      	add	r2, r1
 80021fe:	493a      	ldr	r1, [pc, #232]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002200:	fba5 0101 	umull	r0, r1, r5, r1
 8002204:	1853      	adds	r3, r2, r1
 8002206:	4619      	mov	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	461a      	mov	r2, r3
 8002210:	4623      	mov	r3, r4
 8002212:	f7fe f835 	bl	8000280 <__aeabi_uldivmod>
 8002216:	4603      	mov	r3, r0
 8002218:	460c      	mov	r4, r1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e049      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	099b      	lsrs	r3, r3, #6
 8002224:	f04f 0400 	mov.w	r4, #0
 8002228:	f240 11ff 	movw	r1, #511	; 0x1ff
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	ea03 0501 	and.w	r5, r3, r1
 8002234:	ea04 0602 	and.w	r6, r4, r2
 8002238:	4629      	mov	r1, r5
 800223a:	4632      	mov	r2, r6
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	f04f 0400 	mov.w	r4, #0
 8002244:	0154      	lsls	r4, r2, #5
 8002246:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800224a:	014b      	lsls	r3, r1, #5
 800224c:	4619      	mov	r1, r3
 800224e:	4622      	mov	r2, r4
 8002250:	1b49      	subs	r1, r1, r5
 8002252:	eb62 0206 	sbc.w	r2, r2, r6
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	f04f 0400 	mov.w	r4, #0
 800225e:	0194      	lsls	r4, r2, #6
 8002260:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002264:	018b      	lsls	r3, r1, #6
 8002266:	1a5b      	subs	r3, r3, r1
 8002268:	eb64 0402 	sbc.w	r4, r4, r2
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	00e2      	lsls	r2, r4, #3
 8002276:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800227a:	00d9      	lsls	r1, r3, #3
 800227c:	460b      	mov	r3, r1
 800227e:	4614      	mov	r4, r2
 8002280:	195b      	adds	r3, r3, r5
 8002282:	eb44 0406 	adc.w	r4, r4, r6
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	02a2      	lsls	r2, r4, #10
 8002290:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002294:	0299      	lsls	r1, r3, #10
 8002296:	460b      	mov	r3, r1
 8002298:	4614      	mov	r4, r2
 800229a:	4618      	mov	r0, r3
 800229c:	4621      	mov	r1, r4
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f04f 0400 	mov.w	r4, #0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	f7fd ffea 	bl	8000280 <__aeabi_uldivmod>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	3301      	adds	r3, #1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	60bb      	str	r3, [r7, #8]
      break;
 80022cc:	e002      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022d0:	60bb      	str	r3, [r7, #8]
      break;
 80022d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d4:	68bb      	ldr	r3, [r7, #8]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	017d7840 	.word	0x017d7840

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200001fc 	.word	0x200001fc

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002308:	f7ff fff0 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800230c:	4601      	mov	r1, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0a9b      	lsrs	r3, r3, #10
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4a03      	ldr	r2, [pc, #12]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	08006f9c 	.word	0x08006f9c

0800232c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002330:	f7ff ffdc 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002334:	4601      	mov	r1, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	0b5b      	lsrs	r3, r3, #13
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	08006f9c 	.word	0x08006f9c

08002354 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	220f      	movs	r2, #15
 8002362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_RCC_GetClockConfig+0x5c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_GetClockConfig+0x5c>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RCC_GetClockConfig+0x60>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 020f 	and.w	r2, r3, #15
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40023c00 	.word	0x40023c00

080023b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e01d      	b.n	8002406 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f815 	bl	800240e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f000 f968 	bl	80026cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b085      	sub	sp, #20
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b06      	cmp	r3, #6
 800244a:	d007      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b02      	cmp	r3, #2
 800247e:	d122      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d11b      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f06f 0202 	mvn.w	r2, #2
 8002496:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f8ee 	bl	800268e <HAL_TIM_IC_CaptureCallback>
 80024b2:	e005      	b.n	80024c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f8e0 	bl	800267a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8f1 	bl	80026a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d122      	bne.n	800251a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d11b      	bne.n	800251a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f06f 0204 	mvn.w	r2, #4
 80024ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8c4 	bl	800268e <HAL_TIM_IC_CaptureCallback>
 8002506:	e005      	b.n	8002514 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8b6 	bl	800267a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8c7 	bl	80026a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b08      	cmp	r3, #8
 8002526:	d122      	bne.n	800256e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11b      	bne.n	800256e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0208 	mvn.w	r2, #8
 800253e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2204      	movs	r2, #4
 8002544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f89a 	bl	800268e <HAL_TIM_IC_CaptureCallback>
 800255a:	e005      	b.n	8002568 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f88c 	bl	800267a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f89d 	bl	80026a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b10      	cmp	r3, #16
 800257a:	d122      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b10      	cmp	r3, #16
 8002588:	d11b      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f06f 0210 	mvn.w	r2, #16
 8002592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2208      	movs	r2, #8
 8002598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f870 	bl	800268e <HAL_TIM_IC_CaptureCallback>
 80025ae:	e005      	b.n	80025bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f862 	bl	800267a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f873 	bl	80026a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d10e      	bne.n	80025ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0201 	mvn.w	r2, #1
 80025e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7fe fbdd 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d10e      	bne.n	800261a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b80      	cmp	r3, #128	; 0x80
 8002608:	d107      	bne.n	800261a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f903 	bl	8002820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b40      	cmp	r3, #64	; 0x40
 8002626:	d10e      	bne.n	8002646 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d107      	bne.n	8002646 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800263e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f838 	bl	80026b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b20      	cmp	r3, #32
 8002652:	d10e      	bne.n	8002672 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b20      	cmp	r3, #32
 8002660:	d107      	bne.n	8002672 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f06f 0220 	mvn.w	r2, #32
 800266a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8cd 	bl	800280c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <TIM_Base_SetConfig+0x114>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d013      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ea:	d00f      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3d      	ldr	r2, [pc, #244]	; (80027e4 <TIM_Base_SetConfig+0x118>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00b      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <TIM_Base_SetConfig+0x11c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3b      	ldr	r2, [pc, #236]	; (80027ec <TIM_Base_SetConfig+0x120>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3a      	ldr	r2, [pc, #232]	; (80027f0 <TIM_Base_SetConfig+0x124>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <TIM_Base_SetConfig+0x114>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d027      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2c      	ldr	r2, [pc, #176]	; (80027e4 <TIM_Base_SetConfig+0x118>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d023      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2b      	ldr	r2, [pc, #172]	; (80027e8 <TIM_Base_SetConfig+0x11c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <TIM_Base_SetConfig+0x120>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01b      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <TIM_Base_SetConfig+0x124>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d017      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <TIM_Base_SetConfig+0x128>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a27      	ldr	r2, [pc, #156]	; (80027f8 <TIM_Base_SetConfig+0x12c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00f      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <TIM_Base_SetConfig+0x130>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00b      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a25      	ldr	r2, [pc, #148]	; (8002800 <TIM_Base_SetConfig+0x134>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a24      	ldr	r2, [pc, #144]	; (8002804 <TIM_Base_SetConfig+0x138>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <TIM_Base_SetConfig+0x13c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <TIM_Base_SetConfig+0x114>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d003      	beq.n	80027c4 <TIM_Base_SetConfig+0xf8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <TIM_Base_SetConfig+0x124>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d103      	bne.n	80027cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	615a      	str	r2, [r3, #20]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40000c00 	.word	0x40000c00
 80027f0:	40010400 	.word	0x40010400
 80027f4:	40014000 	.word	0x40014000
 80027f8:	40014400 	.word	0x40014400
 80027fc:	40014800 	.word	0x40014800
 8002800:	40001800 	.word	0x40001800
 8002804:	40001c00 	.word	0x40001c00
 8002808:	40002000 	.word	0x40002000

0800280c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e03f      	b.n	80028c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fc72 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2224      	movs	r2, #36	; 0x24
 8002864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fb4b 	bl	8002f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800288c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800289c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b088      	sub	sp, #32
 80028d2:	af02      	add	r7, sp, #8
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	f040 8083 	bne.w	80029f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_UART_Transmit+0x2e>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e07b      	b.n	80029f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_UART_Transmit+0x40>
 800290a:	2302      	movs	r3, #2
 800290c:	e074      	b.n	80029f8 <HAL_UART_Transmit+0x12a>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2221      	movs	r2, #33	; 0x21
 8002920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002924:	f7fe fe0e 	bl	8001544 <HAL_GetTick>
 8002928:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800293e:	e042      	b.n	80029c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002956:	d122      	bne.n	800299e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2200      	movs	r2, #0
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f96a 	bl	8002c3c <UART_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e042      	b.n	80029f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002984:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d103      	bne.n	8002996 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3302      	adds	r3, #2
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	e017      	b.n	80029c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3301      	adds	r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	e013      	b.n	80029c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f947 	bl	8002c3c <UART_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e01f      	b.n	80029f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	60ba      	str	r2, [r7, #8]
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1b7      	bne.n	8002940 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f92e 	bl	8002c3c <UART_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e006      	b.n	80029f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
  }
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_UART_IRQHandler+0x52>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f9e0 	bl	8002e10 <UART_Receive_IT>
      return;
 8002a50:	e0d1      	b.n	8002bf6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80b0 	beq.w	8002bba <HAL_UART_IRQHandler+0x1ba>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_UART_IRQHandler+0x70>
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80a5 	beq.w	8002bba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_UART_IRQHandler+0x90>
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	f043 0201 	orr.w	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xb0>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	f043 0202 	orr.w	r2, r3, #2
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_UART_IRQHandler+0xd0>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	f043 0204 	orr.w	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00f      	beq.n	8002afa <HAL_UART_IRQHandler+0xfa>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <HAL_UART_IRQHandler+0xee>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	f043 0208 	orr.w	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d078      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_UART_IRQHandler+0x11c>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f97a 	bl	8002e10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_UART_IRQHandler+0x144>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d031      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8c3 	bl	8002cd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d123      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_UART_IRQHandler+0x1fc>)
 8002b76:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fdf1 	bl	8001764 <HAL_DMA_Abort_IT>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b92:	4610      	mov	r0, r2
 8002b94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b96:	e00e      	b.n	8002bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f845 	bl	8002c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f841 	bl	8002c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba6:	e006      	b.n	8002bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f83d 	bl	8002c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002bb4:	e01e      	b.n	8002bf4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb6:	bf00      	nop
    return;
 8002bb8:	e01c      	b.n	8002bf4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1d6>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8b0 	bl	8002d34 <UART_Transmit_IT>
    return;
 8002bd4:	e00f      	b.n	8002bf6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x1f6>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8f8 	bl	8002de0 <UART_EndTransmit_IT>
    return;
 8002bf0:	bf00      	nop
 8002bf2:	e000      	b.n	8002bf6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002bf4:	bf00      	nop
  }
}
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	08002d0d 	.word	0x08002d0d

08002c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4c:	e02c      	b.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d028      	beq.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5c:	f7fe fc72 	bl	8001544 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d21d      	bcs.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e00f      	b.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d0c3      	beq.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ce6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff ff7e 	bl	8002c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b21      	cmp	r3, #33	; 0x21
 8002d46:	d144      	bne.n	8002dd2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d50:	d11a      	bne.n	8002d88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]
 8002d7a:	e00e      	b.n	8002d9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	621a      	str	r2, [r3, #32]
 8002d86:	e008      	b.n	8002d9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	1c59      	adds	r1, r3, #1
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6211      	str	r1, [r2, #32]
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4619      	mov	r1, r3
 8002da8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff fefd 	bl	8002c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b22      	cmp	r3, #34	; 0x22
 8002e22:	d171      	bne.n	8002f08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2c:	d123      	bne.n	8002e76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10e      	bne.n	8002e5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
 8002e58:	e029      	b.n	8002eae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
 8002e74:	e01b      	b.n	8002eae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6858      	ldr	r0, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6291      	str	r1, [r2, #40]	; 0x28
 8002e8e:	b2c2      	uxtb	r2, r0
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e00c      	b.n	8002eae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	1c58      	adds	r0, r3, #1
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6288      	str	r0, [r1, #40]	; 0x28
 8002ea6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d120      	bne.n	8002f04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0220 	bic.w	r2, r2, #32
 8002ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fe8a 	bl	8002c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e002      	b.n	8002f0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f56:	f023 030c 	bic.w	r3, r3, #12
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f82:	f040 818b 	bne.w	800329c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4ac1      	ldr	r2, [pc, #772]	; (8003290 <UART_SetConfig+0x37c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d005      	beq.n	8002f9c <UART_SetConfig+0x88>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4abf      	ldr	r2, [pc, #764]	; (8003294 <UART_SetConfig+0x380>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	f040 80bd 	bne.w	8003116 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f9c:	f7ff f9c6 	bl	800232c <HAL_RCC_GetPCLK2Freq>
 8002fa0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	f04f 0600 	mov.w	r6, #0
 8002faa:	46a8      	mov	r8, r5
 8002fac:	46b1      	mov	r9, r6
 8002fae:	eb18 0308 	adds.w	r3, r8, r8
 8002fb2:	eb49 0409 	adc.w	r4, r9, r9
 8002fb6:	4698      	mov	r8, r3
 8002fb8:	46a1      	mov	r9, r4
 8002fba:	eb18 0805 	adds.w	r8, r8, r5
 8002fbe:	eb49 0906 	adc.w	r9, r9, r6
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fd6:	4688      	mov	r8, r1
 8002fd8:	4691      	mov	r9, r2
 8002fda:	eb18 0005 	adds.w	r0, r8, r5
 8002fde:	eb49 0106 	adc.w	r1, r9, r6
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	461d      	mov	r5, r3
 8002fe8:	f04f 0600 	mov.w	r6, #0
 8002fec:	196b      	adds	r3, r5, r5
 8002fee:	eb46 0406 	adc.w	r4, r6, r6
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4623      	mov	r3, r4
 8002ff6:	f7fd f943 	bl	8000280 <__aeabi_uldivmod>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	461a      	mov	r2, r3
 8003000:	4ba5      	ldr	r3, [pc, #660]	; (8003298 <UART_SetConfig+0x384>)
 8003002:	fba3 2302 	umull	r2, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	461d      	mov	r5, r3
 8003010:	f04f 0600 	mov.w	r6, #0
 8003014:	46a9      	mov	r9, r5
 8003016:	46b2      	mov	sl, r6
 8003018:	eb19 0309 	adds.w	r3, r9, r9
 800301c:	eb4a 040a 	adc.w	r4, sl, sl
 8003020:	4699      	mov	r9, r3
 8003022:	46a2      	mov	sl, r4
 8003024:	eb19 0905 	adds.w	r9, r9, r5
 8003028:	eb4a 0a06 	adc.w	sl, sl, r6
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003038:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800303c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003040:	4689      	mov	r9, r1
 8003042:	4692      	mov	sl, r2
 8003044:	eb19 0005 	adds.w	r0, r9, r5
 8003048:	eb4a 0106 	adc.w	r1, sl, r6
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	461d      	mov	r5, r3
 8003052:	f04f 0600 	mov.w	r6, #0
 8003056:	196b      	adds	r3, r5, r5
 8003058:	eb46 0406 	adc.w	r4, r6, r6
 800305c:	461a      	mov	r2, r3
 800305e:	4623      	mov	r3, r4
 8003060:	f7fd f90e 	bl	8000280 <__aeabi_uldivmod>
 8003064:	4603      	mov	r3, r0
 8003066:	460c      	mov	r4, r1
 8003068:	461a      	mov	r2, r3
 800306a:	4b8b      	ldr	r3, [pc, #556]	; (8003298 <UART_SetConfig+0x384>)
 800306c:	fba3 1302 	umull	r1, r3, r3, r2
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	2164      	movs	r1, #100	; 0x64
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	3332      	adds	r3, #50	; 0x32
 800307e:	4a86      	ldr	r2, [pc, #536]	; (8003298 <UART_SetConfig+0x384>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800308c:	4498      	add	r8, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	461d      	mov	r5, r3
 8003092:	f04f 0600 	mov.w	r6, #0
 8003096:	46a9      	mov	r9, r5
 8003098:	46b2      	mov	sl, r6
 800309a:	eb19 0309 	adds.w	r3, r9, r9
 800309e:	eb4a 040a 	adc.w	r4, sl, sl
 80030a2:	4699      	mov	r9, r3
 80030a4:	46a2      	mov	sl, r4
 80030a6:	eb19 0905 	adds.w	r9, r9, r5
 80030aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030c2:	4689      	mov	r9, r1
 80030c4:	4692      	mov	sl, r2
 80030c6:	eb19 0005 	adds.w	r0, r9, r5
 80030ca:	eb4a 0106 	adc.w	r1, sl, r6
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	461d      	mov	r5, r3
 80030d4:	f04f 0600 	mov.w	r6, #0
 80030d8:	196b      	adds	r3, r5, r5
 80030da:	eb46 0406 	adc.w	r4, r6, r6
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	f7fd f8cd 	bl	8000280 <__aeabi_uldivmod>
 80030e6:	4603      	mov	r3, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <UART_SetConfig+0x384>)
 80030ee:	fba3 1302 	umull	r1, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2164      	movs	r1, #100	; 0x64
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	4a65      	ldr	r2, [pc, #404]	; (8003298 <UART_SetConfig+0x384>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 0207 	and.w	r2, r3, #7
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4442      	add	r2, r8
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e26f      	b.n	80035f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003116:	f7ff f8f5 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 800311a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	461d      	mov	r5, r3
 8003120:	f04f 0600 	mov.w	r6, #0
 8003124:	46a8      	mov	r8, r5
 8003126:	46b1      	mov	r9, r6
 8003128:	eb18 0308 	adds.w	r3, r8, r8
 800312c:	eb49 0409 	adc.w	r4, r9, r9
 8003130:	4698      	mov	r8, r3
 8003132:	46a1      	mov	r9, r4
 8003134:	eb18 0805 	adds.w	r8, r8, r5
 8003138:	eb49 0906 	adc.w	r9, r9, r6
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003148:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800314c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003150:	4688      	mov	r8, r1
 8003152:	4691      	mov	r9, r2
 8003154:	eb18 0005 	adds.w	r0, r8, r5
 8003158:	eb49 0106 	adc.w	r1, r9, r6
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	461d      	mov	r5, r3
 8003162:	f04f 0600 	mov.w	r6, #0
 8003166:	196b      	adds	r3, r5, r5
 8003168:	eb46 0406 	adc.w	r4, r6, r6
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	f7fd f886 	bl	8000280 <__aeabi_uldivmod>
 8003174:	4603      	mov	r3, r0
 8003176:	460c      	mov	r4, r1
 8003178:	461a      	mov	r2, r3
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <UART_SetConfig+0x384>)
 800317c:	fba3 2302 	umull	r2, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	461d      	mov	r5, r3
 800318a:	f04f 0600 	mov.w	r6, #0
 800318e:	46a9      	mov	r9, r5
 8003190:	46b2      	mov	sl, r6
 8003192:	eb19 0309 	adds.w	r3, r9, r9
 8003196:	eb4a 040a 	adc.w	r4, sl, sl
 800319a:	4699      	mov	r9, r3
 800319c:	46a2      	mov	sl, r4
 800319e:	eb19 0905 	adds.w	r9, r9, r5
 80031a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ba:	4689      	mov	r9, r1
 80031bc:	4692      	mov	sl, r2
 80031be:	eb19 0005 	adds.w	r0, r9, r5
 80031c2:	eb4a 0106 	adc.w	r1, sl, r6
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	461d      	mov	r5, r3
 80031cc:	f04f 0600 	mov.w	r6, #0
 80031d0:	196b      	adds	r3, r5, r5
 80031d2:	eb46 0406 	adc.w	r4, r6, r6
 80031d6:	461a      	mov	r2, r3
 80031d8:	4623      	mov	r3, r4
 80031da:	f7fd f851 	bl	8000280 <__aeabi_uldivmod>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <UART_SetConfig+0x384>)
 80031e6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2164      	movs	r1, #100	; 0x64
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a27      	ldr	r2, [pc, #156]	; (8003298 <UART_SetConfig+0x384>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003206:	4498      	add	r8, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	461d      	mov	r5, r3
 800320c:	f04f 0600 	mov.w	r6, #0
 8003210:	46a9      	mov	r9, r5
 8003212:	46b2      	mov	sl, r6
 8003214:	eb19 0309 	adds.w	r3, r9, r9
 8003218:	eb4a 040a 	adc.w	r4, sl, sl
 800321c:	4699      	mov	r9, r3
 800321e:	46a2      	mov	sl, r4
 8003220:	eb19 0905 	adds.w	r9, r9, r5
 8003224:	eb4a 0a06 	adc.w	sl, sl, r6
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003234:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003238:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800323c:	4689      	mov	r9, r1
 800323e:	4692      	mov	sl, r2
 8003240:	eb19 0005 	adds.w	r0, r9, r5
 8003244:	eb4a 0106 	adc.w	r1, sl, r6
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	461d      	mov	r5, r3
 800324e:	f04f 0600 	mov.w	r6, #0
 8003252:	196b      	adds	r3, r5, r5
 8003254:	eb46 0406 	adc.w	r4, r6, r6
 8003258:	461a      	mov	r2, r3
 800325a:	4623      	mov	r3, r4
 800325c:	f7fd f810 	bl	8000280 <__aeabi_uldivmod>
 8003260:	4603      	mov	r3, r0
 8003262:	460c      	mov	r4, r1
 8003264:	461a      	mov	r2, r3
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <UART_SetConfig+0x384>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	; 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <UART_SetConfig+0x384>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4442      	add	r2, r8
 800328c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800328e:	e1b2      	b.n	80035f6 <UART_SetConfig+0x6e2>
 8003290:	40011000 	.word	0x40011000
 8003294:	40011400 	.word	0x40011400
 8003298:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4ad7      	ldr	r2, [pc, #860]	; (8003600 <UART_SetConfig+0x6ec>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d005      	beq.n	80032b2 <UART_SetConfig+0x39e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4ad6      	ldr	r2, [pc, #856]	; (8003604 <UART_SetConfig+0x6f0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	f040 80d1 	bne.w	8003454 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b2:	f7ff f83b 	bl	800232c <HAL_RCC_GetPCLK2Freq>
 80032b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	469a      	mov	sl, r3
 80032bc:	f04f 0b00 	mov.w	fp, #0
 80032c0:	46d0      	mov	r8, sl
 80032c2:	46d9      	mov	r9, fp
 80032c4:	eb18 0308 	adds.w	r3, r8, r8
 80032c8:	eb49 0409 	adc.w	r4, r9, r9
 80032cc:	4698      	mov	r8, r3
 80032ce:	46a1      	mov	r9, r4
 80032d0:	eb18 080a 	adds.w	r8, r8, sl
 80032d4:	eb49 090b 	adc.w	r9, r9, fp
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032ec:	4688      	mov	r8, r1
 80032ee:	4691      	mov	r9, r2
 80032f0:	eb1a 0508 	adds.w	r5, sl, r8
 80032f4:	eb4b 0609 	adc.w	r6, fp, r9
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4619      	mov	r1, r3
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	f04f 0400 	mov.w	r4, #0
 800330a:	0094      	lsls	r4, r2, #2
 800330c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003310:	008b      	lsls	r3, r1, #2
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	4628      	mov	r0, r5
 8003318:	4631      	mov	r1, r6
 800331a:	f7fc ffb1 	bl	8000280 <__aeabi_uldivmod>
 800331e:	4603      	mov	r3, r0
 8003320:	460c      	mov	r4, r1
 8003322:	461a      	mov	r2, r3
 8003324:	4bb8      	ldr	r3, [pc, #736]	; (8003608 <UART_SetConfig+0x6f4>)
 8003326:	fba3 2302 	umull	r2, r3, r3, r2
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	469b      	mov	fp, r3
 8003334:	f04f 0c00 	mov.w	ip, #0
 8003338:	46d9      	mov	r9, fp
 800333a:	46e2      	mov	sl, ip
 800333c:	eb19 0309 	adds.w	r3, r9, r9
 8003340:	eb4a 040a 	adc.w	r4, sl, sl
 8003344:	4699      	mov	r9, r3
 8003346:	46a2      	mov	sl, r4
 8003348:	eb19 090b 	adds.w	r9, r9, fp
 800334c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003350:	f04f 0100 	mov.w	r1, #0
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800335c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003360:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003364:	4689      	mov	r9, r1
 8003366:	4692      	mov	sl, r2
 8003368:	eb1b 0509 	adds.w	r5, fp, r9
 800336c:	eb4c 060a 	adc.w	r6, ip, sl
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4619      	mov	r1, r3
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	f04f 0400 	mov.w	r4, #0
 8003382:	0094      	lsls	r4, r2, #2
 8003384:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003388:	008b      	lsls	r3, r1, #2
 800338a:	461a      	mov	r2, r3
 800338c:	4623      	mov	r3, r4
 800338e:	4628      	mov	r0, r5
 8003390:	4631      	mov	r1, r6
 8003392:	f7fc ff75 	bl	8000280 <__aeabi_uldivmod>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	461a      	mov	r2, r3
 800339c:	4b9a      	ldr	r3, [pc, #616]	; (8003608 <UART_SetConfig+0x6f4>)
 800339e:	fba3 1302 	umull	r1, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2164      	movs	r1, #100	; 0x64
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	3332      	adds	r3, #50	; 0x32
 80033b0:	4a95      	ldr	r2, [pc, #596]	; (8003608 <UART_SetConfig+0x6f4>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033bc:	4498      	add	r8, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	469b      	mov	fp, r3
 80033c2:	f04f 0c00 	mov.w	ip, #0
 80033c6:	46d9      	mov	r9, fp
 80033c8:	46e2      	mov	sl, ip
 80033ca:	eb19 0309 	adds.w	r3, r9, r9
 80033ce:	eb4a 040a 	adc.w	r4, sl, sl
 80033d2:	4699      	mov	r9, r3
 80033d4:	46a2      	mov	sl, r4
 80033d6:	eb19 090b 	adds.w	r9, r9, fp
 80033da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033f2:	4689      	mov	r9, r1
 80033f4:	4692      	mov	sl, r2
 80033f6:	eb1b 0509 	adds.w	r5, fp, r9
 80033fa:	eb4c 060a 	adc.w	r6, ip, sl
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4619      	mov	r1, r3
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	0094      	lsls	r4, r2, #2
 8003412:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	461a      	mov	r2, r3
 800341a:	4623      	mov	r3, r4
 800341c:	4628      	mov	r0, r5
 800341e:	4631      	mov	r1, r6
 8003420:	f7fc ff2e 	bl	8000280 <__aeabi_uldivmod>
 8003424:	4603      	mov	r3, r0
 8003426:	460c      	mov	r4, r1
 8003428:	461a      	mov	r2, r3
 800342a:	4b77      	ldr	r3, [pc, #476]	; (8003608 <UART_SetConfig+0x6f4>)
 800342c:	fba3 1302 	umull	r1, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2164      	movs	r1, #100	; 0x64
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a72      	ldr	r2, [pc, #456]	; (8003608 <UART_SetConfig+0x6f4>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	f003 020f 	and.w	r2, r3, #15
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4442      	add	r2, r8
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	e0d0      	b.n	80035f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003454:	f7fe ff56 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8003458:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	469a      	mov	sl, r3
 800345e:	f04f 0b00 	mov.w	fp, #0
 8003462:	46d0      	mov	r8, sl
 8003464:	46d9      	mov	r9, fp
 8003466:	eb18 0308 	adds.w	r3, r8, r8
 800346a:	eb49 0409 	adc.w	r4, r9, r9
 800346e:	4698      	mov	r8, r3
 8003470:	46a1      	mov	r9, r4
 8003472:	eb18 080a 	adds.w	r8, r8, sl
 8003476:	eb49 090b 	adc.w	r9, r9, fp
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003486:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800348a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800348e:	4688      	mov	r8, r1
 8003490:	4691      	mov	r9, r2
 8003492:	eb1a 0508 	adds.w	r5, sl, r8
 8003496:	eb4b 0609 	adc.w	r6, fp, r9
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4619      	mov	r1, r3
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	f04f 0400 	mov.w	r4, #0
 80034ac:	0094      	lsls	r4, r2, #2
 80034ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034b2:	008b      	lsls	r3, r1, #2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	4628      	mov	r0, r5
 80034ba:	4631      	mov	r1, r6
 80034bc:	f7fc fee0 	bl	8000280 <__aeabi_uldivmod>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b50      	ldr	r3, [pc, #320]	; (8003608 <UART_SetConfig+0x6f4>)
 80034c8:	fba3 2302 	umull	r2, r3, r3, r2
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	469b      	mov	fp, r3
 80034d6:	f04f 0c00 	mov.w	ip, #0
 80034da:	46d9      	mov	r9, fp
 80034dc:	46e2      	mov	sl, ip
 80034de:	eb19 0309 	adds.w	r3, r9, r9
 80034e2:	eb4a 040a 	adc.w	r4, sl, sl
 80034e6:	4699      	mov	r9, r3
 80034e8:	46a2      	mov	sl, r4
 80034ea:	eb19 090b 	adds.w	r9, r9, fp
 80034ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003502:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003506:	4689      	mov	r9, r1
 8003508:	4692      	mov	sl, r2
 800350a:	eb1b 0509 	adds.w	r5, fp, r9
 800350e:	eb4c 060a 	adc.w	r6, ip, sl
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4619      	mov	r1, r3
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	f04f 0400 	mov.w	r4, #0
 8003524:	0094      	lsls	r4, r2, #2
 8003526:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800352a:	008b      	lsls	r3, r1, #2
 800352c:	461a      	mov	r2, r3
 800352e:	4623      	mov	r3, r4
 8003530:	4628      	mov	r0, r5
 8003532:	4631      	mov	r1, r6
 8003534:	f7fc fea4 	bl	8000280 <__aeabi_uldivmod>
 8003538:	4603      	mov	r3, r0
 800353a:	460c      	mov	r4, r1
 800353c:	461a      	mov	r2, r3
 800353e:	4b32      	ldr	r3, [pc, #200]	; (8003608 <UART_SetConfig+0x6f4>)
 8003540:	fba3 1302 	umull	r1, r3, r3, r2
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	2164      	movs	r1, #100	; 0x64
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	3332      	adds	r3, #50	; 0x32
 8003552:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <UART_SetConfig+0x6f4>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355e:	4498      	add	r8, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	469b      	mov	fp, r3
 8003564:	f04f 0c00 	mov.w	ip, #0
 8003568:	46d9      	mov	r9, fp
 800356a:	46e2      	mov	sl, ip
 800356c:	eb19 0309 	adds.w	r3, r9, r9
 8003570:	eb4a 040a 	adc.w	r4, sl, sl
 8003574:	4699      	mov	r9, r3
 8003576:	46a2      	mov	sl, r4
 8003578:	eb19 090b 	adds.w	r9, r9, fp
 800357c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003580:	f04f 0100 	mov.w	r1, #0
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800358c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003590:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003594:	4689      	mov	r9, r1
 8003596:	4692      	mov	sl, r2
 8003598:	eb1b 0509 	adds.w	r5, fp, r9
 800359c:	eb4c 060a 	adc.w	r6, ip, sl
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	f04f 0400 	mov.w	r4, #0
 80035b2:	0094      	lsls	r4, r2, #2
 80035b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035b8:	008b      	lsls	r3, r1, #2
 80035ba:	461a      	mov	r2, r3
 80035bc:	4623      	mov	r3, r4
 80035be:	4628      	mov	r0, r5
 80035c0:	4631      	mov	r1, r6
 80035c2:	f7fc fe5d 	bl	8000280 <__aeabi_uldivmod>
 80035c6:	4603      	mov	r3, r0
 80035c8:	460c      	mov	r4, r1
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <UART_SetConfig+0x6f4>)
 80035ce:	fba3 1302 	umull	r1, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2164      	movs	r1, #100	; 0x64
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3332      	adds	r3, #50	; 0x32
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <UART_SetConfig+0x6f4>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4442      	add	r2, r8
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	e7ff      	b.n	80035f6 <UART_SetConfig+0x6e2>
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003600:	40011000 	.word	0x40011000
 8003604:	40011400 	.word	0x40011400
 8003608:	51eb851f 	.word	0x51eb851f

0800360c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800361a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361e:	2b84      	cmp	r3, #132	; 0x84
 8003620:	d005      	beq.n	800362e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003622:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	3303      	adds	r3, #3
 800362c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003640:	f001 f802 	bl	8004648 <vTaskStartScheduler>
  
  return osOK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	bd80      	pop	{r7, pc}

0800364a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800364a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364c:	b089      	sub	sp, #36	; 0x24
 800364e:	af04      	add	r7, sp, #16
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <osThreadCreate+0x54>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01c      	beq.n	800369e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685c      	ldr	r4, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681d      	ldr	r5, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691e      	ldr	r6, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ffc8 	bl	800360c <makeFreeRtosPriority>
 800367c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003686:	9202      	str	r2, [sp, #8]
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	9100      	str	r1, [sp, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4632      	mov	r2, r6
 8003690:	4629      	mov	r1, r5
 8003692:	4620      	mov	r0, r4
 8003694:	f000 fe14 	bl	80042c0 <xTaskCreateStatic>
 8003698:	4603      	mov	r3, r0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e01c      	b.n	80036d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685c      	ldr	r4, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036aa:	b29e      	uxth	r6, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ffaa 	bl	800360c <makeFreeRtosPriority>
 80036b8:	4602      	mov	r2, r0
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	4632      	mov	r2, r6
 80036c6:	4629      	mov	r1, r5
 80036c8:	4620      	mov	r0, r4
 80036ca:	f000 fe53 	bl	8004374 <xTaskCreate>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80036d8:	68fb      	ldr	r3, [r7, #12]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <osDelay+0x16>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	e000      	b.n	80036fa <osDelay+0x18>
 80036f8:	2301      	movs	r3, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 ff70 	bl	80045e0 <vTaskDelay>
  
  return osOK;
 8003700:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800370a:	b590      	push	{r4, r7, lr}
 800370c:	b085      	sub	sp, #20
 800370e:	af02      	add	r7, sp, #8
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d012      	beq.n	8003742 <osMessageCreate+0x38>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68dc      	ldr	r4, [r3, #12]
 8003734:	2300      	movs	r3, #0
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4623      	mov	r3, r4
 800373a:	f000 f92b 	bl	8003994 <xQueueGenericCreateStatic>
 800373e:	4603      	mov	r3, r0
 8003740:	e008      	b.n	8003754 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	4619      	mov	r1, r3
 800374e:	f000 f994 	bl	8003a7a <xQueueGenericCreate>
 8003752:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}

0800375c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f103 0208 	add.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f04f 32ff 	mov.w	r2, #4294967295
 8003774:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f103 0208 	add.w	r2, r3, #8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f103 0208 	add.w	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d103      	bne.n	800381e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e00c      	b.n	8003838 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3308      	adds	r3, #8
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e002      	b.n	800382c <vListInsert+0x2e>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	429a      	cmp	r2, r3
 8003836:	d2f6      	bcs.n	8003826 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6892      	ldr	r2, [r2, #8]
 8003886:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6852      	ldr	r2, [r2, #4]
 8003890:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d103      	bne.n	80038a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	1e5a      	subs	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	e7fe      	b.n	80038ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80038ec:	f001 fcce 	bl	800528c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	68f9      	ldr	r1, [r7, #12]
 80038fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	3b01      	subs	r3, #1
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	441a      	add	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	22ff      	movs	r2, #255	; 0xff
 8003930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d114      	bne.n	800396c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01a      	beq.n	8003980 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3310      	adds	r3, #16
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f8b8 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d012      	beq.n	8003980 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <xQueueGenericReset+0xcc>)
 800395c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	e009      	b.n	8003980 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3310      	adds	r3, #16
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fef3 	bl	800375c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3324      	adds	r3, #36	; 0x24
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff feee 	bl	800375c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003980:	f001 fcb2 	bl	80052e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08e      	sub	sp, #56	; 0x38
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <xQueueGenericCreateStatic+0x28>
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ba:	e7fe      	b.n	80039ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <xQueueGenericCreateStatic+0x42>
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
 80039d4:	e7fe      	b.n	80039d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <xQueueGenericCreateStatic+0x4e>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <xQueueGenericCreateStatic+0x52>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <xQueueGenericCreateStatic+0x54>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <xQueueGenericCreateStatic+0x6c>
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	623b      	str	r3, [r7, #32]
 80039fe:	e7fe      	b.n	80039fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <xQueueGenericCreateStatic+0x78>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <xQueueGenericCreateStatic+0x7c>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <xQueueGenericCreateStatic+0x7e>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <xQueueGenericCreateStatic+0x96>
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	e7fe      	b.n	8003a28 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a2a:	2348      	movs	r3, #72	; 0x48
 8003a2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b48      	cmp	r3, #72	; 0x48
 8003a32:	d009      	beq.n	8003a48 <xQueueGenericCreateStatic+0xb4>
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e7fe      	b.n	8003a46 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f844 	bl	8003af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3730      	adds	r7, #48	; 0x30
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08a      	sub	sp, #40	; 0x28
 8003a7e:	af02      	add	r7, sp, #8
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	4613      	mov	r3, r2
 8003a86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <xQueueGenericCreate+0x28>
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	e7fe      	b.n	8003aa0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	e004      	b.n	8003ab8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	3348      	adds	r3, #72	; 0x48
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 fcc1 	bl	8005444 <pvPortMalloc>
 8003ac2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d011      	beq.n	8003aee <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3348      	adds	r3, #72	; 0x48
 8003ad2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003adc:	79fa      	ldrb	r2, [r7, #7]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f805 	bl	8003af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aee:	69bb      	ldr	r3, [r7, #24]
	}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e002      	b.n	8003b1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b26:	2101      	movs	r1, #1
 8003b28:	69b8      	ldr	r0, [r7, #24]
 8003b2a:	f7ff fecb 	bl	80038c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08e      	sub	sp, #56	; 0x38
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b46:	2300      	movs	r3, #0
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <xQueueGenericSend+0x30>
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b66:	e7fe      	b.n	8003b66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <xQueueGenericSend+0x3e>
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <xQueueGenericSend+0x42>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <xQueueGenericSend+0x44>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <xQueueGenericSend+0x5c>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
 8003b92:	e7fe      	b.n	8003b92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d103      	bne.n	8003ba2 <xQueueGenericSend+0x6a>
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <xQueueGenericSend+0x6e>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <xQueueGenericSend+0x70>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <xQueueGenericSend+0x88>
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	623b      	str	r3, [r7, #32]
 8003bbe:	e7fe      	b.n	8003bbe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc0:	f001 f936 	bl	8004e30 <xTaskGetSchedulerState>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <xQueueGenericSend+0x98>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <xQueueGenericSend+0x9c>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <xQueueGenericSend+0x9e>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <xQueueGenericSend+0xb6>
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e7fe      	b.n	8003bec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bee:	f001 fb4d 	bl	800528c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <xQueueGenericSend+0xcc>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d129      	bne.n	8003c58 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c0a:	f000 fa49 	bl	80040a0 <prvCopyDataToQueue>
 8003c0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	3324      	adds	r3, #36	; 0x24
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 ff51 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c28:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <xQueueGenericSend+0x1f0>)
 8003c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	e00a      	b.n	8003c50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c40:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <xQueueGenericSend+0x1f0>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c50:	f001 fb4a 	bl	80052e8 <vPortExitCritical>
				return pdPASS;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e063      	b.n	8003d20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c5e:	f001 fb43 	bl	80052e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e05c      	b.n	8003d20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 ff89 	bl	8004b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c76:	2301      	movs	r3, #1
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c7a:	f001 fb35 	bl	80052e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c7e:	f000 fd41 	bl	8004704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c82:	f001 fb03 	bl	800528c <vPortEnterCritical>
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c8c:	b25b      	sxtb	r3, r3
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d103      	bne.n	8003c9c <xQueueGenericSend+0x164>
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ca2:	b25b      	sxtb	r3, r3
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d103      	bne.n	8003cb2 <xQueueGenericSend+0x17a>
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb2:	f001 fb19 	bl	80052e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cb6:	1d3a      	adds	r2, r7, #4
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 ff78 	bl	8004bb4 <xTaskCheckForTimeOut>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d124      	bne.n	8003d14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ccc:	f000 fae0 	bl	8004290 <prvIsQueueFull>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	3310      	adds	r3, #16
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fecc 	bl	8004a7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce6:	f000 fa6b 	bl	80041c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cea:	f000 fd19 	bl	8004720 <xTaskResumeAll>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f af7c 	bne.w	8003bee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <xQueueGenericSend+0x1f0>)
 8003cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	e772      	b.n	8003bee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d0a:	f000 fa59 	bl	80041c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d0e:	f000 fd07 	bl	8004720 <xTaskResumeAll>
 8003d12:	e76c      	b.n	8003bee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d16:	f000 fa53 	bl	80041c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d1a:	f000 fd01 	bl	8004720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3738      	adds	r7, #56	; 0x38
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <xQueueReceive+0x2e>
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	623b      	str	r3, [r7, #32]
 8003d58:	e7fe      	b.n	8003d58 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <xQueueReceive+0x3c>
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <xQueueReceive+0x40>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <xQueueReceive+0x42>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <xQueueReceive+0x5a>
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e7fe      	b.n	8003d84 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d86:	f001 f853 	bl	8004e30 <xTaskGetSchedulerState>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <xQueueReceive+0x6a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <xQueueReceive+0x6e>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <xQueueReceive+0x70>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <xQueueReceive+0x88>
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e7fe      	b.n	8003db2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003db4:	f001 fa6a 	bl	800528c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01f      	beq.n	8003e04 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc8:	f000 f9d4 	bl	8004174 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1e5a      	subs	r2, r3, #1
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00f      	beq.n	8003dfc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	3310      	adds	r3, #16
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fe6f 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dec:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <xQueueReceive+0x1b4>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dfc:	f001 fa74 	bl	80052e8 <vPortExitCritical>
				return pdPASS;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e069      	b.n	8003ed8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e0a:	f001 fa6d 	bl	80052e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e062      	b.n	8003ed8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e18:	f107 0310 	add.w	r3, r7, #16
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 feb3 	bl	8004b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e22:	2301      	movs	r3, #1
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e26:	f001 fa5f 	bl	80052e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e2a:	f000 fc6b 	bl	8004704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e2e:	f001 fa2d 	bl	800528c <vPortEnterCritical>
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d103      	bne.n	8003e48 <xQueueReceive+0x11c>
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d103      	bne.n	8003e5e <xQueueReceive+0x132>
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e5e:	f001 fa43 	bl	80052e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e62:	1d3a      	adds	r2, r7, #4
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fea2 	bl	8004bb4 <xTaskCheckForTimeOut>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d123      	bne.n	8003ebe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e78:	f000 f9f4 	bl	8004264 <prvIsQueueEmpty>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d017      	beq.n	8003eb2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	3324      	adds	r3, #36	; 0x24
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fdf6 	bl	8004a7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e92:	f000 f995 	bl	80041c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e96:	f000 fc43 	bl	8004720 <xTaskResumeAll>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d189      	bne.n	8003db4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <xQueueReceive+0x1b4>)
 8003ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	e780      	b.n	8003db4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb4:	f000 f984 	bl	80041c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eb8:	f000 fc32 	bl	8004720 <xTaskResumeAll>
 8003ebc:	e77a      	b.n	8003db4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec0:	f000 f97e 	bl	80041c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ec4:	f000 fc2c 	bl	8004720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eca:	f000 f9cb 	bl	8004264 <prvIsQueueEmpty>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f43f af6f 	beq.w	8003db4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ed6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3730      	adds	r7, #48	; 0x30
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08e      	sub	sp, #56	; 0x38
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <xQueuePeek+0x2e>
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f10:	e7fe      	b.n	8003f10 <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d103      	bne.n	8003f20 <xQueuePeek+0x3c>
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <xQueuePeek+0x40>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <xQueuePeek+0x42>
 8003f24:	2300      	movs	r3, #0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <xQueuePeek+0x5a>
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	e7fe      	b.n	8003f3c <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f3e:	f000 ff77 	bl	8004e30 <xTaskGetSchedulerState>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <xQueuePeek+0x6a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <xQueuePeek+0x6e>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <xQueuePeek+0x70>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <xQueuePeek+0x88>
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	e7fe      	b.n	8003f6a <xQueuePeek+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f6c:	f001 f98e 	bl	800528c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d021      	beq.n	8003fc0 <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f86:	f000 f8f5 	bl	8004174 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00f      	beq.n	8003fb8 <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	3324      	adds	r3, #36	; 0x24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fd91 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fa8:	4b3c      	ldr	r3, [pc, #240]	; (800409c <xQueuePeek+0x1b8>)
 8003faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fb8:	f001 f996 	bl	80052e8 <vPortExitCritical>
				return pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e069      	b.n	8004094 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fc6:	f001 f98f 	bl	80052e8 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e062      	b.n	8004094 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fdd5 	bl	8004b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fe2:	f001 f981 	bl	80052e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe6:	f000 fb8d 	bl	8004704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fea:	f001 f94f 	bl	800528c <vPortEnterCritical>
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d103      	bne.n	8004004 <xQueuePeek+0x120>
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800400a:	b25b      	sxtb	r3, r3
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d103      	bne.n	800401a <xQueuePeek+0x136>
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800401a:	f001 f965 	bl	80052e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800401e:	1d3a      	adds	r2, r7, #4
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fdc4 	bl	8004bb4 <xTaskCheckForTimeOut>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d123      	bne.n	800407a <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004034:	f000 f916 	bl	8004264 <prvIsQueueEmpty>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d017      	beq.n	800406e <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	3324      	adds	r3, #36	; 0x24
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fd18 	bl	8004a7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800404c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800404e:	f000 f8b7 	bl	80041c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004052:	f000 fb65 	bl	8004720 <xTaskResumeAll>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d187      	bne.n	8003f6c <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <xQueuePeek+0x1b8>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	e77e      	b.n	8003f6c <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800406e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004070:	f000 f8a6 	bl	80041c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004074:	f000 fb54 	bl	8004720 <xTaskResumeAll>
 8004078:	e778      	b.n	8003f6c <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800407a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800407c:	f000 f8a0 	bl	80041c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004080:	f000 fb4e 	bl	8004720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004086:	f000 f8ed 	bl	8004264 <prvIsQueueEmpty>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	f43f af6d 	beq.w	8003f6c <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004092:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004094:	4618      	mov	r0, r3
 8004096:	3738      	adds	r7, #56	; 0x38
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10d      	bne.n	80040da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d14d      	bne.n	8004162 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fece 	bl	8004e6c <xTaskPriorityDisinherit>
 80040d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	e043      	b.n	8004162 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d119      	bne.n	8004114 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6858      	ldr	r0, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	461a      	mov	r2, r3
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	f001 fbb6 	bl	800585c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	441a      	add	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	429a      	cmp	r2, r3
 8004108:	d32b      	bcc.n	8004162 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	e026      	b.n	8004162 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68d8      	ldr	r0, [r3, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	461a      	mov	r2, r3
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	f001 fb9c 	bl	800585c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	425b      	negs	r3, r3
 800412e:	441a      	add	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d207      	bcs.n	8004150 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	425b      	negs	r3, r3
 800414a:	441a      	add	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d105      	bne.n	8004162 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	3b01      	subs	r3, #1
 8004160:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800416a:	697b      	ldr	r3, [r7, #20]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	441a      	add	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d303      	bcc.n	80041a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68d9      	ldr	r1, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	461a      	mov	r2, r3
 80041b2:	6838      	ldr	r0, [r7, #0]
 80041b4:	f001 fb52 	bl	800585c <memcpy>
	}
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041c8:	f001 f860 	bl	800528c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041d4:	e011      	b.n	80041fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d012      	beq.n	8004204 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3324      	adds	r3, #36	; 0x24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fc6e 	bl	8004ac4 <xTaskRemoveFromEventList>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041ee:	f000 fd41 	bl	8004c74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	dce9      	bgt.n	80041d6 <prvUnlockQueue+0x16>
 8004202:	e000      	b.n	8004206 <prvUnlockQueue+0x46>
					break;
 8004204:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	22ff      	movs	r2, #255	; 0xff
 800420a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800420e:	f001 f86b 	bl	80052e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004212:	f001 f83b 	bl	800528c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800421c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800421e:	e011      	b.n	8004244 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3310      	adds	r3, #16
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fc49 	bl	8004ac4 <xTaskRemoveFromEventList>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004238:	f000 fd1c 	bl	8004c74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800423c:	7bbb      	ldrb	r3, [r7, #14]
 800423e:	3b01      	subs	r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004248:	2b00      	cmp	r3, #0
 800424a:	dce9      	bgt.n	8004220 <prvUnlockQueue+0x60>
 800424c:	e000      	b.n	8004250 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800424e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	22ff      	movs	r2, #255	; 0xff
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004258:	f001 f846 	bl	80052e8 <vPortExitCritical>
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800426c:	f001 f80e 	bl	800528c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e001      	b.n	8004282 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004282:	f001 f831 	bl	80052e8 <vPortExitCritical>

	return xReturn;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004298:	f000 fff8 	bl	800528c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d102      	bne.n	80042ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e001      	b.n	80042b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042b2:	f001 f819 	bl	80052e8 <vPortExitCritical>

	return xReturn;
 80042b6:	68fb      	ldr	r3, [r7, #12]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08e      	sub	sp, #56	; 0x38
 80042c4:	af04      	add	r7, sp, #16
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <xTaskCreateStatic+0x28>
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	623b      	str	r3, [r7, #32]
 80042e6:	e7fe      	b.n	80042e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <xTaskCreateStatic+0x42>
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	e7fe      	b.n	8004300 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004302:	2354      	movs	r3, #84	; 0x54
 8004304:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b54      	cmp	r3, #84	; 0x54
 800430a:	d009      	beq.n	8004320 <xTaskCreateStatic+0x60>
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e7fe      	b.n	800431e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004320:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01e      	beq.n	8004366 <xTaskCreateStatic+0xa6>
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01b      	beq.n	8004366 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004336:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	2202      	movs	r2, #2
 800433c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004340:	2300      	movs	r3, #0
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f850 	bl	80043fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800435e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004360:	f000 f8d4 	bl	800450c <prvAddNewTaskToReadyList>
 8004364:	e001      	b.n	800436a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800436a:	697b      	ldr	r3, [r7, #20]
	}
 800436c:	4618      	mov	r0, r3
 800436e:	3728      	adds	r7, #40	; 0x28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	; 0x30
 8004378:	af04      	add	r7, sp, #16
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f85b 	bl	8005444 <pvPortMalloc>
 800438e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004396:	2054      	movs	r0, #84	; 0x54
 8004398:	f001 f854 	bl	8005444 <pvPortMalloc>
 800439c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
 80043aa:	e005      	b.n	80043b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043ac:	6978      	ldr	r0, [r7, #20]
 80043ae:	f001 f90b 	bl	80055c8 <vPortFree>
 80043b2:	e001      	b.n	80043b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9303      	str	r3, [sp, #12]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	9302      	str	r3, [sp, #8]
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f80e 	bl	80043fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e2:	69f8      	ldr	r0, [r7, #28]
 80043e4:	f000 f892 	bl	800450c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043e8:	2301      	movs	r3, #1
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e002      	b.n	80043f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043f4:	69bb      	ldr	r3, [r7, #24]
	}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b088      	sub	sp, #32
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004416:	3b01      	subs	r3, #1
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f023 0307 	bic.w	r3, r3, #7
 8004424:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <prvInitialiseNewTask+0x46>
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e7fe      	b.n	8004442 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01f      	beq.n	800448a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	e012      	b.n	8004476 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	7819      	ldrb	r1, [r3, #0]
 8004458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	3334      	adds	r3, #52	; 0x34
 8004460:	460a      	mov	r2, r1
 8004462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3301      	adds	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b0f      	cmp	r3, #15
 800447a:	d9e9      	bls.n	8004450 <prvInitialiseNewTask+0x52>
 800447c:	e000      	b.n	8004480 <prvInitialiseNewTask+0x82>
			{
				break;
 800447e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004488:	e003      	b.n	8004492 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	2b06      	cmp	r3, #6
 8004496:	d901      	bls.n	800449c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004498:	2306      	movs	r3, #6
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	2200      	movs	r2, #0
 80044ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	3304      	adds	r3, #4
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff f972 	bl	800379c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	3318      	adds	r3, #24
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff f96d 	bl	800379c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	f1c3 0207 	rsb	r2, r3, #7
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2200      	movs	r2, #0
 80044dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	68f9      	ldr	r1, [r7, #12]
 80044ea:	69b8      	ldr	r0, [r7, #24]
 80044ec:	f000 fda8 	bl	8005040 <pxPortInitialiseStack>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004502:	bf00      	nop
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004514:	f000 feba 	bl	800528c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004518:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <prvAddNewTaskToReadyList+0xb8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <prvAddNewTaskToReadyList+0xb8>)
 8004520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <prvAddNewTaskToReadyList+0xbc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800452a:	4a27      	ldr	r2, [pc, #156]	; (80045c8 <prvAddNewTaskToReadyList+0xbc>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004530:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <prvAddNewTaskToReadyList+0xb8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d110      	bne.n	800455a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004538:	f000 fbc0 	bl	8004cbc <prvInitialiseTaskLists>
 800453c:	e00d      	b.n	800455a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800453e:	4b23      	ldr	r3, [pc, #140]	; (80045cc <prvAddNewTaskToReadyList+0xc0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <prvAddNewTaskToReadyList+0xbc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	429a      	cmp	r2, r3
 8004552:	d802      	bhi.n	800455a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004554:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <prvAddNewTaskToReadyList+0xbc>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800455a:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <prvAddNewTaskToReadyList+0xc4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3301      	adds	r3, #1
 8004560:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <prvAddNewTaskToReadyList+0xc4>)
 8004562:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	2201      	movs	r2, #1
 800456a:	409a      	lsls	r2, r3
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <prvAddNewTaskToReadyList+0xc8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <prvAddNewTaskToReadyList+0xc8>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <prvAddNewTaskToReadyList+0xcc>)
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7ff f912 	bl	80037b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004592:	f000 fea9 	bl	80052e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <prvAddNewTaskToReadyList+0xc0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00e      	beq.n	80045bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <prvAddNewTaskToReadyList+0xbc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d207      	bcs.n	80045bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <prvAddNewTaskToReadyList+0xd0>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000610 	.word	0x20000610
 80045c8:	20000510 	.word	0x20000510
 80045cc:	2000061c 	.word	0x2000061c
 80045d0:	2000062c 	.word	0x2000062c
 80045d4:	20000618 	.word	0x20000618
 80045d8:	20000514 	.word	0x20000514
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <vTaskDelay+0x60>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <vTaskDelay+0x2e>
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	e7fe      	b.n	800460c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800460e:	f000 f879 	bl	8004704 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004612:	2100      	movs	r1, #0
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fcad 	bl	8004f74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800461a:	f000 f881 	bl	8004720 <xTaskResumeAll>
 800461e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004626:	4b07      	ldr	r3, [pc, #28]	; (8004644 <vTaskDelay+0x64>)
 8004628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000638 	.word	0x20000638
 8004644:	e000ed04 	.word	0xe000ed04

08004648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004656:	463a      	mov	r2, r7
 8004658:	1d39      	adds	r1, r7, #4
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4618      	mov	r0, r3
 8004660:	f7fc f9c2 	bl	80009e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	9202      	str	r2, [sp, #8]
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	2300      	movs	r3, #0
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	2300      	movs	r3, #0
 8004674:	460a      	mov	r2, r1
 8004676:	491d      	ldr	r1, [pc, #116]	; (80046ec <vTaskStartScheduler+0xa4>)
 8004678:	481d      	ldr	r0, [pc, #116]	; (80046f0 <vTaskStartScheduler+0xa8>)
 800467a:	f7ff fe21 	bl	80042c0 <xTaskCreateStatic>
 800467e:	4602      	mov	r2, r0
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <vTaskStartScheduler+0xac>)
 8004682:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <vTaskStartScheduler+0xac>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e001      	b.n	8004696 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d115      	bne.n	80046c8 <vTaskStartScheduler+0x80>
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <vTaskStartScheduler+0xb0>)
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <vTaskStartScheduler+0xb4>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <vTaskStartScheduler+0xb8>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046c2:	f000 fd45 	bl	8005150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046c6:	e00d      	b.n	80046e4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d109      	bne.n	80046e4 <vTaskStartScheduler+0x9c>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e7fe      	b.n	80046e2 <vTaskStartScheduler+0x9a>
}
 80046e4:	bf00      	nop
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	08006f84 	.word	0x08006f84
 80046f0:	08004c8d 	.word	0x08004c8d
 80046f4:	20000634 	.word	0x20000634
 80046f8:	20000630 	.word	0x20000630
 80046fc:	2000061c 	.word	0x2000061c
 8004700:	20000614 	.word	0x20000614

08004704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <vTaskSuspendAll+0x18>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	4a03      	ldr	r2, [pc, #12]	; (800471c <vTaskSuspendAll+0x18>)
 8004710:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000638 	.word	0x20000638

08004720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800472e:	4b41      	ldr	r3, [pc, #260]	; (8004834 <xTaskResumeAll+0x114>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <xTaskResumeAll+0x2a>
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	e7fe      	b.n	8004748 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800474a:	f000 fd9f 	bl	800528c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800474e:	4b39      	ldr	r3, [pc, #228]	; (8004834 <xTaskResumeAll+0x114>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3b01      	subs	r3, #1
 8004754:	4a37      	ldr	r2, [pc, #220]	; (8004834 <xTaskResumeAll+0x114>)
 8004756:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004758:	4b36      	ldr	r3, [pc, #216]	; (8004834 <xTaskResumeAll+0x114>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d161      	bne.n	8004824 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004760:	4b35      	ldr	r3, [pc, #212]	; (8004838 <xTaskResumeAll+0x118>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05d      	beq.n	8004824 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004768:	e02e      	b.n	80047c8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476a:	4b34      	ldr	r3, [pc, #208]	; (800483c <xTaskResumeAll+0x11c>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3318      	adds	r3, #24
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff f87a 	bl	8003870 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3304      	adds	r3, #4
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff f875 	bl	8003870 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	2201      	movs	r2, #1
 800478c:	409a      	lsls	r2, r3
 800478e:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <xTaskResumeAll+0x120>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <xTaskResumeAll+0x120>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a27      	ldr	r2, [pc, #156]	; (8004844 <xTaskResumeAll+0x124>)
 80047a6:	441a      	add	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f7ff f801 	bl	80037b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b8:	4b23      	ldr	r3, [pc, #140]	; (8004848 <xTaskResumeAll+0x128>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <xTaskResumeAll+0x12c>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047c8:	4b1c      	ldr	r3, [pc, #112]	; (800483c <xTaskResumeAll+0x11c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1cc      	bne.n	800476a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047d6:	f000 fb0b 	bl	8004df0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <xTaskResumeAll+0x130>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d010      	beq.n	8004808 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047e6:	f000 f837 	bl	8004858 <xTaskIncrementTick>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <xTaskResumeAll+0x12c>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f1      	bne.n	80047e6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <xTaskResumeAll+0x130>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <xTaskResumeAll+0x12c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <xTaskResumeAll+0x134>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004824:	f000 fd60 	bl	80052e8 <vPortExitCritical>

	return xAlreadyYielded;
 8004828:	68bb      	ldr	r3, [r7, #8]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000638 	.word	0x20000638
 8004838:	20000610 	.word	0x20000610
 800483c:	200005d0 	.word	0x200005d0
 8004840:	20000618 	.word	0x20000618
 8004844:	20000514 	.word	0x20000514
 8004848:	20000510 	.word	0x20000510
 800484c:	20000624 	.word	0x20000624
 8004850:	20000620 	.word	0x20000620
 8004854:	e000ed04 	.word	0xe000ed04

08004858 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004862:	4b4e      	ldr	r3, [pc, #312]	; (800499c <xTaskIncrementTick+0x144>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 8087 	bne.w	800497a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800486c:	4b4c      	ldr	r3, [pc, #304]	; (80049a0 <xTaskIncrementTick+0x148>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3301      	adds	r3, #1
 8004872:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004874:	4a4a      	ldr	r2, [pc, #296]	; (80049a0 <xTaskIncrementTick+0x148>)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d11f      	bne.n	80048c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004880:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <xTaskIncrementTick+0x14c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <xTaskIncrementTick+0x46>
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	e7fe      	b.n	800489c <xTaskIncrementTick+0x44>
 800489e:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <xTaskIncrementTick+0x14c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	4b40      	ldr	r3, [pc, #256]	; (80049a8 <xTaskIncrementTick+0x150>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3e      	ldr	r2, [pc, #248]	; (80049a4 <xTaskIncrementTick+0x14c>)
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4a3e      	ldr	r2, [pc, #248]	; (80049a8 <xTaskIncrementTick+0x150>)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b3e      	ldr	r3, [pc, #248]	; (80049ac <xTaskIncrementTick+0x154>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	4a3c      	ldr	r2, [pc, #240]	; (80049ac <xTaskIncrementTick+0x154>)
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	f000 fa98 	bl	8004df0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <xTaskIncrementTick+0x158>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d348      	bcc.n	800495c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <xTaskIncrementTick+0x14c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d4:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <xTaskIncrementTick+0x158>)
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295
 80048da:	601a      	str	r2, [r3, #0]
					break;
 80048dc:	e03e      	b.n	800495c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <xTaskIncrementTick+0x14c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d203      	bcs.n	80048fe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048f6:	4a2e      	ldr	r2, [pc, #184]	; (80049b0 <xTaskIncrementTick+0x158>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048fc:	e02e      	b.n	800495c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe ffb4 	bl	8003870 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	3318      	adds	r3, #24
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe ffab 	bl	8003870 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	2201      	movs	r2, #1
 8004920:	409a      	lsls	r2, r3
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <xTaskIncrementTick+0x15c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <xTaskIncrementTick+0x15c>)
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <xTaskIncrementTick+0x160>)
 800493a:	441a      	add	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fe ff37 	bl	80037b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <xTaskIncrementTick+0x164>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	429a      	cmp	r2, r3
 8004954:	d3b9      	bcc.n	80048ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495a:	e7b6      	b.n	80048ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800495c:	4b17      	ldr	r3, [pc, #92]	; (80049bc <xTaskIncrementTick+0x164>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004962:	4915      	ldr	r1, [pc, #84]	; (80049b8 <xTaskIncrementTick+0x160>)
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d907      	bls.n	8004984 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e004      	b.n	8004984 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <xTaskIncrementTick+0x168>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <xTaskIncrementTick+0x168>)
 8004982:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <xTaskIncrementTick+0x16c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004990:	697b      	ldr	r3, [r7, #20]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000638 	.word	0x20000638
 80049a0:	20000614 	.word	0x20000614
 80049a4:	200005c8 	.word	0x200005c8
 80049a8:	200005cc 	.word	0x200005cc
 80049ac:	20000628 	.word	0x20000628
 80049b0:	20000630 	.word	0x20000630
 80049b4:	20000618 	.word	0x20000618
 80049b8:	20000514 	.word	0x20000514
 80049bc:	20000510 	.word	0x20000510
 80049c0:	20000620 	.word	0x20000620
 80049c4:	20000624 	.word	0x20000624

080049c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <vTaskSwitchContext+0xa0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049d6:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <vTaskSwitchContext+0xa4>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049dc:	e03e      	b.n	8004a5c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80049de:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <vTaskSwitchContext+0xa4>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e4:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <vTaskSwitchContext+0xa8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	fab3 f383 	clz	r3, r3
 80049f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049f2:	7afb      	ldrb	r3, [r7, #11]
 80049f4:	f1c3 031f 	rsb	r3, r3, #31
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	491e      	ldr	r1, [pc, #120]	; (8004a74 <vTaskSwitchContext+0xac>)
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	e7fe      	b.n	8004a20 <vTaskSwitchContext+0x58>
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <vTaskSwitchContext+0xac>)
 8004a2e:	4413      	add	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3308      	adds	r3, #8
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d104      	bne.n	8004a52 <vTaskSwitchContext+0x8a>
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a07      	ldr	r2, [pc, #28]	; (8004a78 <vTaskSwitchContext+0xb0>)
 8004a5a:	6013      	str	r3, [r2, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000638 	.word	0x20000638
 8004a6c:	20000624 	.word	0x20000624
 8004a70:	20000618 	.word	0x20000618
 8004a74:	20000514 	.word	0x20000514
 8004a78:	20000510 	.word	0x20000510

08004a7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <vTaskPlaceOnEventList+0x24>
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	e7fe      	b.n	8004a9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aa0:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <vTaskPlaceOnEventList+0x44>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fe fea8 	bl	80037fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004aae:	2101      	movs	r1, #1
 8004ab0:	6838      	ldr	r0, [r7, #0]
 8004ab2:	f000 fa5f 	bl	8004f74 <prvAddCurrentTaskToDelayedList>
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000510 	.word	0x20000510

08004ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <xTaskRemoveFromEventList+0x2a>
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e7fe      	b.n	8004aec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3318      	adds	r3, #24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe febc 	bl	8003870 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <xTaskRemoveFromEventList+0xac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11c      	bne.n	8004b3a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe feb3 	bl	8003870 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	2201      	movs	r2, #1
 8004b10:	409a      	lsls	r2, r3
 8004b12:	4b18      	ldr	r3, [pc, #96]	; (8004b74 <xTaskRemoveFromEventList+0xb0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <xTaskRemoveFromEventList+0xb0>)
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <xTaskRemoveFromEventList+0xb4>)
 8004b2a:	441a      	add	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4619      	mov	r1, r3
 8004b32:	4610      	mov	r0, r2
 8004b34:	f7fe fe3f 	bl	80037b6 <vListInsertEnd>
 8004b38:	e005      	b.n	8004b46 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	4619      	mov	r1, r3
 8004b40:	480e      	ldr	r0, [pc, #56]	; (8004b7c <xTaskRemoveFromEventList+0xb8>)
 8004b42:	f7fe fe38 	bl	80037b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <xTaskRemoveFromEventList+0xbc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d905      	bls.n	8004b60 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <xTaskRemoveFromEventList+0xc0>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e001      	b.n	8004b64 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b64:	697b      	ldr	r3, [r7, #20]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000638 	.word	0x20000638
 8004b74:	20000618 	.word	0x20000618
 8004b78:	20000514 	.word	0x20000514
 8004b7c:	200005d0 	.word	0x200005d0
 8004b80:	20000510 	.word	0x20000510
 8004b84:	20000624 	.word	0x20000624

08004b88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <vTaskInternalSetTimeOutState+0x24>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <vTaskInternalSetTimeOutState+0x28>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	605a      	str	r2, [r3, #4]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000628 	.word	0x20000628
 8004bb0:	20000614 	.word	0x20000614

08004bb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <xTaskCheckForTimeOut+0x24>
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	e7fe      	b.n	8004bd6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <xTaskCheckForTimeOut+0x3e>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e7fe      	b.n	8004bf0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004bf2:	f000 fb4b 	bl	800528c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <xTaskCheckForTimeOut+0xb8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d102      	bne.n	8004c16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	e023      	b.n	8004c5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <xTaskCheckForTimeOut+0xbc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d007      	beq.n	8004c32 <xTaskCheckForTimeOut+0x7e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d302      	bcc.n	8004c32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e015      	b.n	8004c5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d20b      	bcs.n	8004c54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff9d 	bl	8004b88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e004      	b.n	8004c5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c5e:	f000 fb43 	bl	80052e8 <vPortExitCritical>

	return xReturn;
 8004c62:	69fb      	ldr	r3, [r7, #28]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000614 	.word	0x20000614
 8004c70:	20000628 	.word	0x20000628

08004c74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <vTaskMissedYield+0x14>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	20000624 	.word	0x20000624

08004c8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c94:	f000 f852 	bl	8004d3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <prvIdleTask+0x28>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d9f9      	bls.n	8004c94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <prvIdleTask+0x2c>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cb0:	e7f0      	b.n	8004c94 <prvIdleTask+0x8>
 8004cb2:	bf00      	nop
 8004cb4:	20000514 	.word	0x20000514
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	e00c      	b.n	8004ce2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <prvInitialiseTaskLists+0x60>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fd40 	bl	800375c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b06      	cmp	r3, #6
 8004ce6:	d9ef      	bls.n	8004cc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ce8:	480d      	ldr	r0, [pc, #52]	; (8004d20 <prvInitialiseTaskLists+0x64>)
 8004cea:	f7fe fd37 	bl	800375c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cee:	480d      	ldr	r0, [pc, #52]	; (8004d24 <prvInitialiseTaskLists+0x68>)
 8004cf0:	f7fe fd34 	bl	800375c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cf4:	480c      	ldr	r0, [pc, #48]	; (8004d28 <prvInitialiseTaskLists+0x6c>)
 8004cf6:	f7fe fd31 	bl	800375c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cfa:	480c      	ldr	r0, [pc, #48]	; (8004d2c <prvInitialiseTaskLists+0x70>)
 8004cfc:	f7fe fd2e 	bl	800375c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d00:	480b      	ldr	r0, [pc, #44]	; (8004d30 <prvInitialiseTaskLists+0x74>)
 8004d02:	f7fe fd2b 	bl	800375c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <prvInitialiseTaskLists+0x78>)
 8004d08:	4a05      	ldr	r2, [pc, #20]	; (8004d20 <prvInitialiseTaskLists+0x64>)
 8004d0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <prvInitialiseTaskLists+0x7c>)
 8004d0e:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <prvInitialiseTaskLists+0x68>)
 8004d10:	601a      	str	r2, [r3, #0]
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000514 	.word	0x20000514
 8004d20:	200005a0 	.word	0x200005a0
 8004d24:	200005b4 	.word	0x200005b4
 8004d28:	200005d0 	.word	0x200005d0
 8004d2c:	200005e4 	.word	0x200005e4
 8004d30:	200005fc 	.word	0x200005fc
 8004d34:	200005c8 	.word	0x200005c8
 8004d38:	200005cc 	.word	0x200005cc

08004d3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d42:	e019      	b.n	8004d78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d44:	f000 faa2 	bl	800528c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <prvCheckTasksWaitingTermination+0x4c>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe fd8b 	bl	8003870 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <prvCheckTasksWaitingTermination+0x50>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <prvCheckTasksWaitingTermination+0x50>)
 8004d62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d64:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <prvCheckTasksWaitingTermination+0x54>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <prvCheckTasksWaitingTermination+0x54>)
 8004d6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d6e:	f000 fabb 	bl	80052e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f80e 	bl	8004d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <prvCheckTasksWaitingTermination+0x54>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e1      	bne.n	8004d44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	200005e4 	.word	0x200005e4
 8004d8c:	20000610 	.word	0x20000610
 8004d90:	200005f8 	.word	0x200005f8

08004d94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fc0c 	bl	80055c8 <vPortFree>
				vPortFree( pxTCB );
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fc09 	bl	80055c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004db6:	e017      	b.n	8004de8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d103      	bne.n	8004dca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fc00 	bl	80055c8 <vPortFree>
	}
 8004dc8:	e00e      	b.n	8004de8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d009      	beq.n	8004de8 <prvDeleteTCB+0x54>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e7fe      	b.n	8004de6 <prvDeleteTCB+0x52>
	}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvResetNextTaskUnblockTime+0x38>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <prvResetNextTaskUnblockTime+0x3c>)
 8004e02:	f04f 32ff 	mov.w	r2, #4294967295
 8004e06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e08:	e008      	b.n	8004e1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <prvResetNextTaskUnblockTime+0x38>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <prvResetNextTaskUnblockTime+0x3c>)
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	200005c8 	.word	0x200005c8
 8004e2c:	20000630 	.word	0x20000630

08004e30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <xTaskGetSchedulerState+0x34>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	e008      	b.n	8004e56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <xTaskGetSchedulerState+0x38>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	e001      	b.n	8004e56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e56:	687b      	ldr	r3, [r7, #4]
	}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	2000061c 	.word	0x2000061c
 8004e68:	20000638 	.word	0x20000638

08004e6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d06c      	beq.n	8004f5c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <xTaskPriorityDisinherit+0xfc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d009      	beq.n	8004ea0 <xTaskPriorityDisinherit+0x34>
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e7fe      	b.n	8004e9e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d109      	bne.n	8004ebc <xTaskPriorityDisinherit+0x50>
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	e7fe      	b.n	8004eba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec0:	1e5a      	subs	r2, r3, #1
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d044      	beq.n	8004f5c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d140      	bne.n	8004f5c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe fcc6 	bl	8003870 <uxListRemove>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d115      	bne.n	8004f16 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	491f      	ldr	r1, [pc, #124]	; (8004f6c <xTaskPriorityDisinherit+0x100>)
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <xTaskPriorityDisinherit+0xaa>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	2201      	movs	r2, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43da      	mvns	r2, r3
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <xTaskPriorityDisinherit+0x104>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4013      	ands	r3, r2
 8004f12:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <xTaskPriorityDisinherit+0x104>)
 8004f14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	f1c3 0207 	rsb	r2, r3, #7
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	2201      	movs	r2, #1
 8004f30:	409a      	lsls	r2, r3
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <xTaskPriorityDisinherit+0x104>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	4a0d      	ldr	r2, [pc, #52]	; (8004f70 <xTaskPriorityDisinherit+0x104>)
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4a08      	ldr	r2, [pc, #32]	; (8004f6c <xTaskPriorityDisinherit+0x100>)
 8004f4a:	441a      	add	r2, r3
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7fe fc2f 	bl	80037b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f5c:	697b      	ldr	r3, [r7, #20]
	}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000510 	.word	0x20000510
 8004f6c:	20000514 	.word	0x20000514
 8004f70:	20000618 	.word	0x20000618

08004f74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f7e:	4b29      	ldr	r3, [pc, #164]	; (8005024 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe fc70 	bl	8003870 <uxListRemove>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	4b21      	ldr	r3, [pc, #132]	; (800502c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	4a20      	ldr	r2, [pc, #128]	; (800502c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d10a      	bne.n	8004fcc <prvAddCurrentTaskToDelayedList+0x58>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	481a      	ldr	r0, [pc, #104]	; (8005030 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fc6:	f7fe fbf6 	bl	80037b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fca:	e026      	b.n	800501a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fd4:	4b14      	ldr	r3, [pc, #80]	; (8005028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d209      	bcs.n	8004ff8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe4:	4b13      	ldr	r3, [pc, #76]	; (8005034 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f7fe fc04 	bl	80037fe <vListInsert>
}
 8004ff6:	e010      	b.n	800501a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3304      	adds	r3, #4
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe fbfa 	bl	80037fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800500a:	4b0c      	ldr	r3, [pc, #48]	; (800503c <prvAddCurrentTaskToDelayedList+0xc8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	d202      	bcs.n	800501a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005014:	4a09      	ldr	r2, [pc, #36]	; (800503c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6013      	str	r3, [r2, #0]
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000614 	.word	0x20000614
 8005028:	20000510 	.word	0x20000510
 800502c:	20000618 	.word	0x20000618
 8005030:	200005fc 	.word	0x200005fc
 8005034:	200005cc 	.word	0x200005cc
 8005038:	200005c8 	.word	0x200005c8
 800503c:	20000630 	.word	0x20000630

08005040 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b04      	subs	r3, #4
 8005050:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b04      	subs	r3, #4
 800505e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3b04      	subs	r3, #4
 800506e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005070:	4a0c      	ldr	r2, [pc, #48]	; (80050a4 <pxPortInitialiseStack+0x64>)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3b14      	subs	r3, #20
 800507a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3b04      	subs	r3, #4
 8005086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f06f 0202 	mvn.w	r2, #2
 800508e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3b20      	subs	r3, #32
 8005094:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	080050a9 	.word	0x080050a9

080050a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <prvTaskExitError+0x50>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d009      	beq.n	80050d0 <prvTaskExitError+0x28>
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	e7fe      	b.n	80050ce <prvTaskExitError+0x26>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050e2:	bf00      	nop
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0fc      	beq.n	80050e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000208 	.word	0x20000208
 80050fc:	00000000 	.word	0x00000000

08005100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <pxCurrentTCBConst2>)
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	f380 8809 	msr	PSP, r0
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8811 	msr	BASEPRI, r0
 800511a:	4770      	bx	lr
 800511c:	f3af 8000 	nop.w

08005120 <pxCurrentTCBConst2>:
 8005120:	20000510 	.word	0x20000510
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop

08005128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005128:	4808      	ldr	r0, [pc, #32]	; (800514c <prvPortStartFirstTask+0x24>)
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f380 8808 	msr	MSP, r0
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f380 8814 	msr	CONTROL, r0
 800513a:	b662      	cpsie	i
 800513c:	b661      	cpsie	f
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	df00      	svc	0
 8005148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800514a:	bf00      	nop
 800514c:	e000ed08 	.word	0xe000ed08

08005150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005156:	4b44      	ldr	r3, [pc, #272]	; (8005268 <xPortStartScheduler+0x118>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a44      	ldr	r2, [pc, #272]	; (800526c <xPortStartScheduler+0x11c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d109      	bne.n	8005174 <xPortStartScheduler+0x24>
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	e7fe      	b.n	8005172 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005174:	4b3c      	ldr	r3, [pc, #240]	; (8005268 <xPortStartScheduler+0x118>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3d      	ldr	r2, [pc, #244]	; (8005270 <xPortStartScheduler+0x120>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d109      	bne.n	8005192 <xPortStartScheduler+0x42>
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e7fe      	b.n	8005190 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <xPortStartScheduler+0x124>)
 8005194:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	22ff      	movs	r2, #255	; 0xff
 80051a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	4b30      	ldr	r3, [pc, #192]	; (8005278 <xPortStartScheduler+0x128>)
 80051b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051ba:	4b30      	ldr	r3, [pc, #192]	; (800527c <xPortStartScheduler+0x12c>)
 80051bc:	2207      	movs	r2, #7
 80051be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051c0:	e009      	b.n	80051d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80051c2:	4b2e      	ldr	r3, [pc, #184]	; (800527c <xPortStartScheduler+0x12c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	4a2c      	ldr	r2, [pc, #176]	; (800527c <xPortStartScheduler+0x12c>)
 80051ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b80      	cmp	r3, #128	; 0x80
 80051e0:	d0ef      	beq.n	80051c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051e2:	4b26      	ldr	r3, [pc, #152]	; (800527c <xPortStartScheduler+0x12c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f1c3 0307 	rsb	r3, r3, #7
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d009      	beq.n	8005202 <xPortStartScheduler+0xb2>
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	e7fe      	b.n	8005200 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005202:	4b1e      	ldr	r3, [pc, #120]	; (800527c <xPortStartScheduler+0x12c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	4a1c      	ldr	r2, [pc, #112]	; (800527c <xPortStartScheduler+0x12c>)
 800520a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <xPortStartScheduler+0x12c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005214:	4a19      	ldr	r2, [pc, #100]	; (800527c <xPortStartScheduler+0x12c>)
 8005216:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005220:	4b17      	ldr	r3, [pc, #92]	; (8005280 <xPortStartScheduler+0x130>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a16      	ldr	r2, [pc, #88]	; (8005280 <xPortStartScheduler+0x130>)
 8005226:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800522a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <xPortStartScheduler+0x130>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a13      	ldr	r2, [pc, #76]	; (8005280 <xPortStartScheduler+0x130>)
 8005232:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005236:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005238:	f000 f8d6 	bl	80053e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <xPortStartScheduler+0x134>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005242:	f000 f8f5 	bl	8005430 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005246:	4b10      	ldr	r3, [pc, #64]	; (8005288 <xPortStartScheduler+0x138>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0f      	ldr	r2, [pc, #60]	; (8005288 <xPortStartScheduler+0x138>)
 800524c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005250:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005252:	f7ff ff69 	bl	8005128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005256:	f7ff fbb7 	bl	80049c8 <vTaskSwitchContext>
	prvTaskExitError();
 800525a:	f7ff ff25 	bl	80050a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed00 	.word	0xe000ed00
 800526c:	410fc271 	.word	0x410fc271
 8005270:	410fc270 	.word	0x410fc270
 8005274:	e000e400 	.word	0xe000e400
 8005278:	2000063c 	.word	0x2000063c
 800527c:	20000640 	.word	0x20000640
 8005280:	e000ed20 	.word	0xe000ed20
 8005284:	20000208 	.word	0x20000208
 8005288:	e000ef34 	.word	0xe000ef34

0800528c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <vPortEnterCritical+0x54>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <vPortEnterCritical+0x54>)
 80052ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <vPortEnterCritical+0x54>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d10e      	bne.n	80052d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <vPortEnterCritical+0x58>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <vPortEnterCritical+0x48>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	e7fe      	b.n	80052d2 <vPortEnterCritical+0x46>
	}
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20000208 	.word	0x20000208
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <vPortExitCritical+0x4c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <vPortExitCritical+0x22>
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	e7fe      	b.n	8005308 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800530a:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <vPortExitCritical+0x4c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3b01      	subs	r3, #1
 8005310:	4a08      	ldr	r2, [pc, #32]	; (8005334 <vPortExitCritical+0x4c>)
 8005312:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <vPortExitCritical+0x4c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <vPortExitCritical+0x3e>
 800531c:	2300      	movs	r3, #0
 800531e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000208 	.word	0x20000208
	...

08005340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005340:	f3ef 8009 	mrs	r0, PSP
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <pxCurrentTCBConst>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f01e 0f10 	tst.w	lr, #16
 8005350:	bf08      	it	eq
 8005352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535a:	6010      	str	r0, [r2, #0]
 800535c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005364:	f380 8811 	msr	BASEPRI, r0
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f7ff fb2a 	bl	80049c8 <vTaskSwitchContext>
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f380 8811 	msr	BASEPRI, r0
 800537c:	bc09      	pop	{r0, r3}
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	6808      	ldr	r0, [r1, #0]
 8005382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005386:	f01e 0f10 	tst.w	lr, #16
 800538a:	bf08      	it	eq
 800538c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005390:	f380 8809 	msr	PSP, r0
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	f3af 8000 	nop.w

080053a0 <pxCurrentTCBConst>:
 80053a0:	20000510 	.word	0x20000510
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053c0:	f7ff fa4a 	bl	8004858 <xTaskIncrementTick>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <SysTick_Handler+0x3c>)
 80053cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <vPortSetupTimerInterrupt+0x34>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053f2:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <vPortSetupTimerInterrupt+0x38>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <vPortSetupTimerInterrupt+0x3c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <vPortSetupTimerInterrupt+0x40>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	099b      	lsrs	r3, r3, #6
 8005404:	4a09      	ldr	r2, [pc, #36]	; (800542c <vPortSetupTimerInterrupt+0x44>)
 8005406:	3b01      	subs	r3, #1
 8005408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800540a:	4b04      	ldr	r3, [pc, #16]	; (800541c <vPortSetupTimerInterrupt+0x34>)
 800540c:	2207      	movs	r2, #7
 800540e:	601a      	str	r2, [r3, #0]
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	e000e010 	.word	0xe000e010
 8005420:	e000e018 	.word	0xe000e018
 8005424:	200001fc 	.word	0x200001fc
 8005428:	10624dd3 	.word	0x10624dd3
 800542c:	e000e014 	.word	0xe000e014

08005430 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005430:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005440 <vPortEnableVFP+0x10>
 8005434:	6801      	ldr	r1, [r0, #0]
 8005436:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800543a:	6001      	str	r1, [r0, #0]
 800543c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800543e:	bf00      	nop
 8005440:	e000ed88 	.word	0xe000ed88

08005444 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005450:	f7ff f958 	bl	8004704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005454:	4b57      	ldr	r3, [pc, #348]	; (80055b4 <pvPortMalloc+0x170>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800545c:	f000 f918 	bl	8005690 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005460:	4b55      	ldr	r3, [pc, #340]	; (80055b8 <pvPortMalloc+0x174>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	f040 808c 	bne.w	8005586 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01c      	beq.n	80054ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005474:	2208      	movs	r2, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4413      	add	r3, r2
 800547a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	2b00      	cmp	r3, #0
 8005484:	d013      	beq.n	80054ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f023 0307 	bic.w	r3, r3, #7
 800548c:	3308      	adds	r3, #8
 800548e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <pvPortMalloc+0x6a>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e7fe      	b.n	80054ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d068      	beq.n	8005586 <pvPortMalloc+0x142>
 80054b4:	4b41      	ldr	r3, [pc, #260]	; (80055bc <pvPortMalloc+0x178>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d863      	bhi.n	8005586 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054be:	4b40      	ldr	r3, [pc, #256]	; (80055c0 <pvPortMalloc+0x17c>)
 80054c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054c2:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <pvPortMalloc+0x17c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054c8:	e004      	b.n	80054d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d903      	bls.n	80054e6 <pvPortMalloc+0xa2>
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f1      	bne.n	80054ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054e6:	4b33      	ldr	r3, [pc, #204]	; (80055b4 <pvPortMalloc+0x170>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d04a      	beq.n	8005586 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2208      	movs	r2, #8
 80054f6:	4413      	add	r3, r2
 80054f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	1ad2      	subs	r2, r2, r3
 800550a:	2308      	movs	r3, #8
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	429a      	cmp	r2, r3
 8005510:	d91e      	bls.n	8005550 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4413      	add	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	2b00      	cmp	r3, #0
 8005522:	d009      	beq.n	8005538 <pvPortMalloc+0xf4>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	e7fe      	b.n	8005536 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800554a:	69b8      	ldr	r0, [r7, #24]
 800554c:	f000 f902 	bl	8005754 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <pvPortMalloc+0x178>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <pvPortMalloc+0x178>)
 800555c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800555e:	4b17      	ldr	r3, [pc, #92]	; (80055bc <pvPortMalloc+0x178>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b18      	ldr	r3, [pc, #96]	; (80055c4 <pvPortMalloc+0x180>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d203      	bcs.n	8005572 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800556a:	4b14      	ldr	r3, [pc, #80]	; (80055bc <pvPortMalloc+0x178>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <pvPortMalloc+0x180>)
 8005570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	4b10      	ldr	r3, [pc, #64]	; (80055b8 <pvPortMalloc+0x174>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	431a      	orrs	r2, r3
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005586:	f7ff f8cb 	bl	8004720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <pvPortMalloc+0x164>
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e7fe      	b.n	80055a6 <pvPortMalloc+0x162>
	return pvReturn;
 80055a8:	69fb      	ldr	r3, [r7, #28]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3728      	adds	r7, #40	; 0x28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	2000424c 	.word	0x2000424c
 80055b8:	20004258 	.word	0x20004258
 80055bc:	20004250 	.word	0x20004250
 80055c0:	20004244 	.word	0x20004244
 80055c4:	20004254 	.word	0x20004254

080055c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d046      	beq.n	8005668 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055da:	2308      	movs	r3, #8
 80055dc:	425b      	negs	r3, r3
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4b20      	ldr	r3, [pc, #128]	; (8005670 <vPortFree+0xa8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <vPortFree+0x42>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e7fe      	b.n	8005608 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <vPortFree+0x5e>
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	e7fe      	b.n	8005624 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	4b11      	ldr	r3, [pc, #68]	; (8005670 <vPortFree+0xa8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d019      	beq.n	8005668 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d115      	bne.n	8005668 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <vPortFree+0xa8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800564c:	f7ff f85a 	bl	8004704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b07      	ldr	r3, [pc, #28]	; (8005674 <vPortFree+0xac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4413      	add	r3, r2
 800565a:	4a06      	ldr	r2, [pc, #24]	; (8005674 <vPortFree+0xac>)
 800565c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800565e:	6938      	ldr	r0, [r7, #16]
 8005660:	f000 f878 	bl	8005754 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005664:	f7ff f85c 	bl	8004720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005668:	bf00      	nop
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20004258 	.word	0x20004258
 8005674:	20004250 	.word	0x20004250

08005678 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <xPortGetFreeHeapSize+0x14>)
 800567e:	681b      	ldr	r3, [r3, #0]
}
 8005680:	4618      	mov	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20004250 	.word	0x20004250

08005690 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005696:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800569a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800569c:	4b27      	ldr	r3, [pc, #156]	; (800573c <prvHeapInit+0xac>)
 800569e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3307      	adds	r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0307 	bic.w	r3, r3, #7
 80056b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	4a1f      	ldr	r2, [pc, #124]	; (800573c <prvHeapInit+0xac>)
 80056c0:	4413      	add	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056c8:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <prvHeapInit+0xb0>)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056ce:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <prvHeapInit+0xb0>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	4413      	add	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056dc:	2208      	movs	r2, #8
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0307 	bic.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a15      	ldr	r2, [pc, #84]	; (8005744 <prvHeapInit+0xb4>)
 80056f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <prvHeapInit+0xb4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <prvHeapInit+0xb4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <prvHeapInit+0xb4>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <prvHeapInit+0xb8>)
 800571e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4a09      	ldr	r2, [pc, #36]	; (800574c <prvHeapInit+0xbc>)
 8005726:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005728:	4b09      	ldr	r3, [pc, #36]	; (8005750 <prvHeapInit+0xc0>)
 800572a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800572e:	601a      	str	r2, [r3, #0]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	20000644 	.word	0x20000644
 8005740:	20004244 	.word	0x20004244
 8005744:	2000424c 	.word	0x2000424c
 8005748:	20004254 	.word	0x20004254
 800574c:	20004250 	.word	0x20004250
 8005750:	20004258 	.word	0x20004258

08005754 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800575c:	4b28      	ldr	r3, [pc, #160]	; (8005800 <prvInsertBlockIntoFreeList+0xac>)
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e002      	b.n	8005768 <prvInsertBlockIntoFreeList+0x14>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d8f7      	bhi.n	8005762 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4413      	add	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d108      	bne.n	8005796 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	441a      	add	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	441a      	add	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d118      	bne.n	80057dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b15      	ldr	r3, [pc, #84]	; (8005804 <prvInsertBlockIntoFreeList+0xb0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d00d      	beq.n	80057d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	441a      	add	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e008      	b.n	80057e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057d2:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <prvInsertBlockIntoFreeList+0xb0>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	e003      	b.n	80057e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d002      	beq.n	80057f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20004244 	.word	0x20004244
 8005804:	2000424c 	.word	0x2000424c

08005808 <__errno>:
 8005808:	4b01      	ldr	r3, [pc, #4]	; (8005810 <__errno+0x8>)
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	2000020c 	.word	0x2000020c

08005814 <__libc_init_array>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	4e0d      	ldr	r6, [pc, #52]	; (800584c <__libc_init_array+0x38>)
 8005818:	4c0d      	ldr	r4, [pc, #52]	; (8005850 <__libc_init_array+0x3c>)
 800581a:	1ba4      	subs	r4, r4, r6
 800581c:	10a4      	asrs	r4, r4, #2
 800581e:	2500      	movs	r5, #0
 8005820:	42a5      	cmp	r5, r4
 8005822:	d109      	bne.n	8005838 <__libc_init_array+0x24>
 8005824:	4e0b      	ldr	r6, [pc, #44]	; (8005854 <__libc_init_array+0x40>)
 8005826:	4c0c      	ldr	r4, [pc, #48]	; (8005858 <__libc_init_array+0x44>)
 8005828:	f001 f908 	bl	8006a3c <_init>
 800582c:	1ba4      	subs	r4, r4, r6
 800582e:	10a4      	asrs	r4, r4, #2
 8005830:	2500      	movs	r5, #0
 8005832:	42a5      	cmp	r5, r4
 8005834:	d105      	bne.n	8005842 <__libc_init_array+0x2e>
 8005836:	bd70      	pop	{r4, r5, r6, pc}
 8005838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800583c:	4798      	blx	r3
 800583e:	3501      	adds	r5, #1
 8005840:	e7ee      	b.n	8005820 <__libc_init_array+0xc>
 8005842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005846:	4798      	blx	r3
 8005848:	3501      	adds	r5, #1
 800584a:	e7f2      	b.n	8005832 <__libc_init_array+0x1e>
 800584c:	08007044 	.word	0x08007044
 8005850:	08007044 	.word	0x08007044
 8005854:	08007044 	.word	0x08007044
 8005858:	08007048 	.word	0x08007048

0800585c <memcpy>:
 800585c:	b510      	push	{r4, lr}
 800585e:	1e43      	subs	r3, r0, #1
 8005860:	440a      	add	r2, r1
 8005862:	4291      	cmp	r1, r2
 8005864:	d100      	bne.n	8005868 <memcpy+0xc>
 8005866:	bd10      	pop	{r4, pc}
 8005868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800586c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005870:	e7f7      	b.n	8005862 <memcpy+0x6>

08005872 <memset>:
 8005872:	4402      	add	r2, r0
 8005874:	4603      	mov	r3, r0
 8005876:	4293      	cmp	r3, r2
 8005878:	d100      	bne.n	800587c <memset+0xa>
 800587a:	4770      	bx	lr
 800587c:	f803 1b01 	strb.w	r1, [r3], #1
 8005880:	e7f9      	b.n	8005876 <memset+0x4>
	...

08005884 <iprintf>:
 8005884:	b40f      	push	{r0, r1, r2, r3}
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <iprintf+0x2c>)
 8005888:	b513      	push	{r0, r1, r4, lr}
 800588a:	681c      	ldr	r4, [r3, #0]
 800588c:	b124      	cbz	r4, 8005898 <iprintf+0x14>
 800588e:	69a3      	ldr	r3, [r4, #24]
 8005890:	b913      	cbnz	r3, 8005898 <iprintf+0x14>
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f8ac 	bl	80059f0 <__sinit>
 8005898:	ab05      	add	r3, sp, #20
 800589a:	9a04      	ldr	r2, [sp, #16]
 800589c:	68a1      	ldr	r1, [r4, #8]
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fb05 	bl	8005eb0 <_vfiprintf_r>
 80058a6:	b002      	add	sp, #8
 80058a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ac:	b004      	add	sp, #16
 80058ae:	4770      	bx	lr
 80058b0:	2000020c 	.word	0x2000020c

080058b4 <sniprintf>:
 80058b4:	b40c      	push	{r2, r3}
 80058b6:	b530      	push	{r4, r5, lr}
 80058b8:	4b17      	ldr	r3, [pc, #92]	; (8005918 <sniprintf+0x64>)
 80058ba:	1e0c      	subs	r4, r1, #0
 80058bc:	b09d      	sub	sp, #116	; 0x74
 80058be:	681d      	ldr	r5, [r3, #0]
 80058c0:	da08      	bge.n	80058d4 <sniprintf+0x20>
 80058c2:	238b      	movs	r3, #139	; 0x8b
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ca:	b01d      	add	sp, #116	; 0x74
 80058cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058d0:	b002      	add	sp, #8
 80058d2:	4770      	bx	lr
 80058d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80058d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058dc:	bf14      	ite	ne
 80058de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058e2:	4623      	moveq	r3, r4
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	9307      	str	r3, [sp, #28]
 80058e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058ec:	9002      	str	r0, [sp, #8]
 80058ee:	9006      	str	r0, [sp, #24]
 80058f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058f6:	ab21      	add	r3, sp, #132	; 0x84
 80058f8:	a902      	add	r1, sp, #8
 80058fa:	4628      	mov	r0, r5
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	f000 f9b5 	bl	8005c6c <_svfiprintf_r>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	bfbc      	itt	lt
 8005906:	238b      	movlt	r3, #139	; 0x8b
 8005908:	602b      	strlt	r3, [r5, #0]
 800590a:	2c00      	cmp	r4, #0
 800590c:	d0dd      	beq.n	80058ca <sniprintf+0x16>
 800590e:	9b02      	ldr	r3, [sp, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	e7d9      	b.n	80058ca <sniprintf+0x16>
 8005916:	bf00      	nop
 8005918:	2000020c 	.word	0x2000020c

0800591c <strcat>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4603      	mov	r3, r0
 8005920:	781a      	ldrb	r2, [r3, #0]
 8005922:	1c5c      	adds	r4, r3, #1
 8005924:	b93a      	cbnz	r2, 8005936 <strcat+0x1a>
 8005926:	3b01      	subs	r3, #1
 8005928:	f811 2b01 	ldrb.w	r2, [r1], #1
 800592c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005930:	2a00      	cmp	r2, #0
 8005932:	d1f9      	bne.n	8005928 <strcat+0xc>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	4623      	mov	r3, r4
 8005938:	e7f2      	b.n	8005920 <strcat+0x4>

0800593a <strstr>:
 800593a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800593c:	7803      	ldrb	r3, [r0, #0]
 800593e:	b17b      	cbz	r3, 8005960 <strstr+0x26>
 8005940:	4604      	mov	r4, r0
 8005942:	7823      	ldrb	r3, [r4, #0]
 8005944:	4620      	mov	r0, r4
 8005946:	1c66      	adds	r6, r4, #1
 8005948:	b17b      	cbz	r3, 800596a <strstr+0x30>
 800594a:	1e4a      	subs	r2, r1, #1
 800594c:	1e63      	subs	r3, r4, #1
 800594e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005952:	b14d      	cbz	r5, 8005968 <strstr+0x2e>
 8005954:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005958:	42af      	cmp	r7, r5
 800595a:	4634      	mov	r4, r6
 800595c:	d0f7      	beq.n	800594e <strstr+0x14>
 800595e:	e7f0      	b.n	8005942 <strstr+0x8>
 8005960:	780b      	ldrb	r3, [r1, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	bf18      	it	ne
 8005966:	2000      	movne	r0, #0
 8005968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596a:	4618      	mov	r0, r3
 800596c:	e7fc      	b.n	8005968 <strstr+0x2e>
	...

08005970 <std>:
 8005970:	2300      	movs	r3, #0
 8005972:	b510      	push	{r4, lr}
 8005974:	4604      	mov	r4, r0
 8005976:	e9c0 3300 	strd	r3, r3, [r0]
 800597a:	6083      	str	r3, [r0, #8]
 800597c:	8181      	strh	r1, [r0, #12]
 800597e:	6643      	str	r3, [r0, #100]	; 0x64
 8005980:	81c2      	strh	r2, [r0, #14]
 8005982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005986:	6183      	str	r3, [r0, #24]
 8005988:	4619      	mov	r1, r3
 800598a:	2208      	movs	r2, #8
 800598c:	305c      	adds	r0, #92	; 0x5c
 800598e:	f7ff ff70 	bl	8005872 <memset>
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <std+0x38>)
 8005994:	6263      	str	r3, [r4, #36]	; 0x24
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <std+0x3c>)
 8005998:	62a3      	str	r3, [r4, #40]	; 0x28
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <std+0x40>)
 800599c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <std+0x44>)
 80059a0:	6224      	str	r4, [r4, #32]
 80059a2:	6323      	str	r3, [r4, #48]	; 0x30
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	bf00      	nop
 80059a8:	0800640d 	.word	0x0800640d
 80059ac:	0800642f 	.word	0x0800642f
 80059b0:	08006467 	.word	0x08006467
 80059b4:	0800648b 	.word	0x0800648b

080059b8 <_cleanup_r>:
 80059b8:	4901      	ldr	r1, [pc, #4]	; (80059c0 <_cleanup_r+0x8>)
 80059ba:	f000 b885 	b.w	8005ac8 <_fwalk_reent>
 80059be:	bf00      	nop
 80059c0:	08006765 	.word	0x08006765

080059c4 <__sfmoreglue>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	1e4a      	subs	r2, r1, #1
 80059c8:	2568      	movs	r5, #104	; 0x68
 80059ca:	4355      	muls	r5, r2
 80059cc:	460e      	mov	r6, r1
 80059ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059d2:	f000 f897 	bl	8005b04 <_malloc_r>
 80059d6:	4604      	mov	r4, r0
 80059d8:	b140      	cbz	r0, 80059ec <__sfmoreglue+0x28>
 80059da:	2100      	movs	r1, #0
 80059dc:	e9c0 1600 	strd	r1, r6, [r0]
 80059e0:	300c      	adds	r0, #12
 80059e2:	60a0      	str	r0, [r4, #8]
 80059e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059e8:	f7ff ff43 	bl	8005872 <memset>
 80059ec:	4620      	mov	r0, r4
 80059ee:	bd70      	pop	{r4, r5, r6, pc}

080059f0 <__sinit>:
 80059f0:	6983      	ldr	r3, [r0, #24]
 80059f2:	b510      	push	{r4, lr}
 80059f4:	4604      	mov	r4, r0
 80059f6:	bb33      	cbnz	r3, 8005a46 <__sinit+0x56>
 80059f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80059fc:	6503      	str	r3, [r0, #80]	; 0x50
 80059fe:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <__sinit+0x58>)
 8005a00:	4a12      	ldr	r2, [pc, #72]	; (8005a4c <__sinit+0x5c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6282      	str	r2, [r0, #40]	; 0x28
 8005a06:	4298      	cmp	r0, r3
 8005a08:	bf04      	itt	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	6183      	streq	r3, [r0, #24]
 8005a0e:	f000 f81f 	bl	8005a50 <__sfp>
 8005a12:	6060      	str	r0, [r4, #4]
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 f81b 	bl	8005a50 <__sfp>
 8005a1a:	60a0      	str	r0, [r4, #8]
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 f817 	bl	8005a50 <__sfp>
 8005a22:	2200      	movs	r2, #0
 8005a24:	60e0      	str	r0, [r4, #12]
 8005a26:	2104      	movs	r1, #4
 8005a28:	6860      	ldr	r0, [r4, #4]
 8005a2a:	f7ff ffa1 	bl	8005970 <std>
 8005a2e:	2201      	movs	r2, #1
 8005a30:	2109      	movs	r1, #9
 8005a32:	68a0      	ldr	r0, [r4, #8]
 8005a34:	f7ff ff9c 	bl	8005970 <std>
 8005a38:	2202      	movs	r2, #2
 8005a3a:	2112      	movs	r1, #18
 8005a3c:	68e0      	ldr	r0, [r4, #12]
 8005a3e:	f7ff ff97 	bl	8005970 <std>
 8005a42:	2301      	movs	r3, #1
 8005a44:	61a3      	str	r3, [r4, #24]
 8005a46:	bd10      	pop	{r4, pc}
 8005a48:	08006fa4 	.word	0x08006fa4
 8005a4c:	080059b9 	.word	0x080059b9

08005a50 <__sfp>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <__sfp+0x70>)
 8005a54:	681e      	ldr	r6, [r3, #0]
 8005a56:	69b3      	ldr	r3, [r6, #24]
 8005a58:	4607      	mov	r7, r0
 8005a5a:	b913      	cbnz	r3, 8005a62 <__sfp+0x12>
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f7ff ffc7 	bl	80059f0 <__sinit>
 8005a62:	3648      	adds	r6, #72	; 0x48
 8005a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	d503      	bpl.n	8005a74 <__sfp+0x24>
 8005a6c:	6833      	ldr	r3, [r6, #0]
 8005a6e:	b133      	cbz	r3, 8005a7e <__sfp+0x2e>
 8005a70:	6836      	ldr	r6, [r6, #0]
 8005a72:	e7f7      	b.n	8005a64 <__sfp+0x14>
 8005a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a78:	b16d      	cbz	r5, 8005a96 <__sfp+0x46>
 8005a7a:	3468      	adds	r4, #104	; 0x68
 8005a7c:	e7f4      	b.n	8005a68 <__sfp+0x18>
 8005a7e:	2104      	movs	r1, #4
 8005a80:	4638      	mov	r0, r7
 8005a82:	f7ff ff9f 	bl	80059c4 <__sfmoreglue>
 8005a86:	6030      	str	r0, [r6, #0]
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d1f1      	bne.n	8005a70 <__sfp+0x20>
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	4604      	mov	r4, r0
 8005a92:	4620      	mov	r0, r4
 8005a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a96:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <__sfp+0x74>)
 8005a98:	6665      	str	r5, [r4, #100]	; 0x64
 8005a9a:	e9c4 5500 	strd	r5, r5, [r4]
 8005a9e:	60a5      	str	r5, [r4, #8]
 8005aa0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005aa4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	4629      	mov	r1, r5
 8005aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ab0:	f7ff fedf 	bl	8005872 <memset>
 8005ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005abc:	e7e9      	b.n	8005a92 <__sfp+0x42>
 8005abe:	bf00      	nop
 8005ac0:	08006fa4 	.word	0x08006fa4
 8005ac4:	ffff0001 	.word	0xffff0001

08005ac8 <_fwalk_reent>:
 8005ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005acc:	4680      	mov	r8, r0
 8005ace:	4689      	mov	r9, r1
 8005ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	b914      	cbnz	r4, 8005ade <_fwalk_reent+0x16>
 8005ad8:	4630      	mov	r0, r6
 8005ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ade:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005ae2:	3f01      	subs	r7, #1
 8005ae4:	d501      	bpl.n	8005aea <_fwalk_reent+0x22>
 8005ae6:	6824      	ldr	r4, [r4, #0]
 8005ae8:	e7f5      	b.n	8005ad6 <_fwalk_reent+0xe>
 8005aea:	89ab      	ldrh	r3, [r5, #12]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d907      	bls.n	8005b00 <_fwalk_reent+0x38>
 8005af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005af4:	3301      	adds	r3, #1
 8005af6:	d003      	beq.n	8005b00 <_fwalk_reent+0x38>
 8005af8:	4629      	mov	r1, r5
 8005afa:	4640      	mov	r0, r8
 8005afc:	47c8      	blx	r9
 8005afe:	4306      	orrs	r6, r0
 8005b00:	3568      	adds	r5, #104	; 0x68
 8005b02:	e7ee      	b.n	8005ae2 <_fwalk_reent+0x1a>

08005b04 <_malloc_r>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	1ccd      	adds	r5, r1, #3
 8005b08:	f025 0503 	bic.w	r5, r5, #3
 8005b0c:	3508      	adds	r5, #8
 8005b0e:	2d0c      	cmp	r5, #12
 8005b10:	bf38      	it	cc
 8005b12:	250c      	movcc	r5, #12
 8005b14:	2d00      	cmp	r5, #0
 8005b16:	4606      	mov	r6, r0
 8005b18:	db01      	blt.n	8005b1e <_malloc_r+0x1a>
 8005b1a:	42a9      	cmp	r1, r5
 8005b1c:	d903      	bls.n	8005b26 <_malloc_r+0x22>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	6033      	str	r3, [r6, #0]
 8005b22:	2000      	movs	r0, #0
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	f000 fed6 	bl	80068d6 <__malloc_lock>
 8005b2a:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <_malloc_r+0xac>)
 8005b2c:	6814      	ldr	r4, [r2, #0]
 8005b2e:	4621      	mov	r1, r4
 8005b30:	b991      	cbnz	r1, 8005b58 <_malloc_r+0x54>
 8005b32:	4c20      	ldr	r4, [pc, #128]	; (8005bb4 <_malloc_r+0xb0>)
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	b91b      	cbnz	r3, 8005b40 <_malloc_r+0x3c>
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 fc57 	bl	80063ec <_sbrk_r>
 8005b3e:	6020      	str	r0, [r4, #0]
 8005b40:	4629      	mov	r1, r5
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 fc52 	bl	80063ec <_sbrk_r>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d124      	bne.n	8005b96 <_malloc_r+0x92>
 8005b4c:	230c      	movs	r3, #12
 8005b4e:	6033      	str	r3, [r6, #0]
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 fec1 	bl	80068d8 <__malloc_unlock>
 8005b56:	e7e4      	b.n	8005b22 <_malloc_r+0x1e>
 8005b58:	680b      	ldr	r3, [r1, #0]
 8005b5a:	1b5b      	subs	r3, r3, r5
 8005b5c:	d418      	bmi.n	8005b90 <_malloc_r+0x8c>
 8005b5e:	2b0b      	cmp	r3, #11
 8005b60:	d90f      	bls.n	8005b82 <_malloc_r+0x7e>
 8005b62:	600b      	str	r3, [r1, #0]
 8005b64:	50cd      	str	r5, [r1, r3]
 8005b66:	18cc      	adds	r4, r1, r3
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f000 feb5 	bl	80068d8 <__malloc_unlock>
 8005b6e:	f104 000b 	add.w	r0, r4, #11
 8005b72:	1d23      	adds	r3, r4, #4
 8005b74:	f020 0007 	bic.w	r0, r0, #7
 8005b78:	1ac3      	subs	r3, r0, r3
 8005b7a:	d0d3      	beq.n	8005b24 <_malloc_r+0x20>
 8005b7c:	425a      	negs	r2, r3
 8005b7e:	50e2      	str	r2, [r4, r3]
 8005b80:	e7d0      	b.n	8005b24 <_malloc_r+0x20>
 8005b82:	428c      	cmp	r4, r1
 8005b84:	684b      	ldr	r3, [r1, #4]
 8005b86:	bf16      	itet	ne
 8005b88:	6063      	strne	r3, [r4, #4]
 8005b8a:	6013      	streq	r3, [r2, #0]
 8005b8c:	460c      	movne	r4, r1
 8005b8e:	e7eb      	b.n	8005b68 <_malloc_r+0x64>
 8005b90:	460c      	mov	r4, r1
 8005b92:	6849      	ldr	r1, [r1, #4]
 8005b94:	e7cc      	b.n	8005b30 <_malloc_r+0x2c>
 8005b96:	1cc4      	adds	r4, r0, #3
 8005b98:	f024 0403 	bic.w	r4, r4, #3
 8005b9c:	42a0      	cmp	r0, r4
 8005b9e:	d005      	beq.n	8005bac <_malloc_r+0xa8>
 8005ba0:	1a21      	subs	r1, r4, r0
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f000 fc22 	bl	80063ec <_sbrk_r>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d0cf      	beq.n	8005b4c <_malloc_r+0x48>
 8005bac:	6025      	str	r5, [r4, #0]
 8005bae:	e7db      	b.n	8005b68 <_malloc_r+0x64>
 8005bb0:	2000425c 	.word	0x2000425c
 8005bb4:	20004260 	.word	0x20004260

08005bb8 <__ssputs_r>:
 8005bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	688e      	ldr	r6, [r1, #8]
 8005bbe:	429e      	cmp	r6, r3
 8005bc0:	4682      	mov	sl, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	4690      	mov	r8, r2
 8005bc6:	4699      	mov	r9, r3
 8005bc8:	d837      	bhi.n	8005c3a <__ssputs_r+0x82>
 8005bca:	898a      	ldrh	r2, [r1, #12]
 8005bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bd0:	d031      	beq.n	8005c36 <__ssputs_r+0x7e>
 8005bd2:	6825      	ldr	r5, [r4, #0]
 8005bd4:	6909      	ldr	r1, [r1, #16]
 8005bd6:	1a6f      	subs	r7, r5, r1
 8005bd8:	6965      	ldr	r5, [r4, #20]
 8005bda:	2302      	movs	r3, #2
 8005bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005be0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005be4:	f109 0301 	add.w	r3, r9, #1
 8005be8:	443b      	add	r3, r7
 8005bea:	429d      	cmp	r5, r3
 8005bec:	bf38      	it	cc
 8005bee:	461d      	movcc	r5, r3
 8005bf0:	0553      	lsls	r3, r2, #21
 8005bf2:	d530      	bpl.n	8005c56 <__ssputs_r+0x9e>
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	f7ff ff85 	bl	8005b04 <_malloc_r>
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	b950      	cbnz	r0, 8005c14 <__ssputs_r+0x5c>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	f8ca 3000 	str.w	r3, [sl]
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c14:	463a      	mov	r2, r7
 8005c16:	6921      	ldr	r1, [r4, #16]
 8005c18:	f7ff fe20 	bl	800585c <memcpy>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	6126      	str	r6, [r4, #16]
 8005c2a:	6165      	str	r5, [r4, #20]
 8005c2c:	443e      	add	r6, r7
 8005c2e:	1bed      	subs	r5, r5, r7
 8005c30:	6026      	str	r6, [r4, #0]
 8005c32:	60a5      	str	r5, [r4, #8]
 8005c34:	464e      	mov	r6, r9
 8005c36:	454e      	cmp	r6, r9
 8005c38:	d900      	bls.n	8005c3c <__ssputs_r+0x84>
 8005c3a:	464e      	mov	r6, r9
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	4641      	mov	r1, r8
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	f000 fe2f 	bl	80068a4 <memmove>
 8005c46:	68a3      	ldr	r3, [r4, #8]
 8005c48:	1b9b      	subs	r3, r3, r6
 8005c4a:	60a3      	str	r3, [r4, #8]
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	441e      	add	r6, r3
 8005c50:	6026      	str	r6, [r4, #0]
 8005c52:	2000      	movs	r0, #0
 8005c54:	e7dc      	b.n	8005c10 <__ssputs_r+0x58>
 8005c56:	462a      	mov	r2, r5
 8005c58:	f000 fe8e 	bl	8006978 <_realloc_r>
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d1e2      	bne.n	8005c28 <__ssputs_r+0x70>
 8005c62:	6921      	ldr	r1, [r4, #16]
 8005c64:	4650      	mov	r0, sl
 8005c66:	f000 fe39 	bl	80068dc <_free_r>
 8005c6a:	e7c8      	b.n	8005bfe <__ssputs_r+0x46>

08005c6c <_svfiprintf_r>:
 8005c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c70:	461d      	mov	r5, r3
 8005c72:	898b      	ldrh	r3, [r1, #12]
 8005c74:	061f      	lsls	r7, r3, #24
 8005c76:	b09d      	sub	sp, #116	; 0x74
 8005c78:	4680      	mov	r8, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	d50f      	bpl.n	8005ca0 <_svfiprintf_r+0x34>
 8005c80:	690b      	ldr	r3, [r1, #16]
 8005c82:	b96b      	cbnz	r3, 8005ca0 <_svfiprintf_r+0x34>
 8005c84:	2140      	movs	r1, #64	; 0x40
 8005c86:	f7ff ff3d 	bl	8005b04 <_malloc_r>
 8005c8a:	6020      	str	r0, [r4, #0]
 8005c8c:	6120      	str	r0, [r4, #16]
 8005c8e:	b928      	cbnz	r0, 8005c9c <_svfiprintf_r+0x30>
 8005c90:	230c      	movs	r3, #12
 8005c92:	f8c8 3000 	str.w	r3, [r8]
 8005c96:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9a:	e0c8      	b.n	8005e2e <_svfiprintf_r+0x1c2>
 8005c9c:	2340      	movs	r3, #64	; 0x40
 8005c9e:	6163      	str	r3, [r4, #20]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca4:	2320      	movs	r3, #32
 8005ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005caa:	2330      	movs	r3, #48	; 0x30
 8005cac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cb0:	9503      	str	r5, [sp, #12]
 8005cb2:	f04f 0b01 	mov.w	fp, #1
 8005cb6:	4637      	mov	r7, r6
 8005cb8:	463d      	mov	r5, r7
 8005cba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cbe:	b10b      	cbz	r3, 8005cc4 <_svfiprintf_r+0x58>
 8005cc0:	2b25      	cmp	r3, #37	; 0x25
 8005cc2:	d13e      	bne.n	8005d42 <_svfiprintf_r+0xd6>
 8005cc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005cc8:	d00b      	beq.n	8005ce2 <_svfiprintf_r+0x76>
 8005cca:	4653      	mov	r3, sl
 8005ccc:	4632      	mov	r2, r6
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	f7ff ff71 	bl	8005bb8 <__ssputs_r>
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f000 80a4 	beq.w	8005e24 <_svfiprintf_r+0x1b8>
 8005cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cde:	4453      	add	r3, sl
 8005ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce2:	783b      	ldrb	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 809d 	beq.w	8005e24 <_svfiprintf_r+0x1b8>
 8005cea:	2300      	movs	r3, #0
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	9307      	str	r3, [sp, #28]
 8005cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8005cfe:	462f      	mov	r7, r5
 8005d00:	2205      	movs	r2, #5
 8005d02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d06:	4850      	ldr	r0, [pc, #320]	; (8005e48 <_svfiprintf_r+0x1dc>)
 8005d08:	f7fa fa6a 	bl	80001e0 <memchr>
 8005d0c:	9b04      	ldr	r3, [sp, #16]
 8005d0e:	b9d0      	cbnz	r0, 8005d46 <_svfiprintf_r+0xda>
 8005d10:	06d9      	lsls	r1, r3, #27
 8005d12:	bf44      	itt	mi
 8005d14:	2220      	movmi	r2, #32
 8005d16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d1a:	071a      	lsls	r2, r3, #28
 8005d1c:	bf44      	itt	mi
 8005d1e:	222b      	movmi	r2, #43	; 0x2b
 8005d20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d24:	782a      	ldrb	r2, [r5, #0]
 8005d26:	2a2a      	cmp	r2, #42	; 0x2a
 8005d28:	d015      	beq.n	8005d56 <_svfiprintf_r+0xea>
 8005d2a:	9a07      	ldr	r2, [sp, #28]
 8005d2c:	462f      	mov	r7, r5
 8005d2e:	2000      	movs	r0, #0
 8005d30:	250a      	movs	r5, #10
 8005d32:	4639      	mov	r1, r7
 8005d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d38:	3b30      	subs	r3, #48	; 0x30
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d94d      	bls.n	8005dda <_svfiprintf_r+0x16e>
 8005d3e:	b1b8      	cbz	r0, 8005d70 <_svfiprintf_r+0x104>
 8005d40:	e00f      	b.n	8005d62 <_svfiprintf_r+0xf6>
 8005d42:	462f      	mov	r7, r5
 8005d44:	e7b8      	b.n	8005cb8 <_svfiprintf_r+0x4c>
 8005d46:	4a40      	ldr	r2, [pc, #256]	; (8005e48 <_svfiprintf_r+0x1dc>)
 8005d48:	1a80      	subs	r0, r0, r2
 8005d4a:	fa0b f000 	lsl.w	r0, fp, r0
 8005d4e:	4318      	orrs	r0, r3
 8005d50:	9004      	str	r0, [sp, #16]
 8005d52:	463d      	mov	r5, r7
 8005d54:	e7d3      	b.n	8005cfe <_svfiprintf_r+0x92>
 8005d56:	9a03      	ldr	r2, [sp, #12]
 8005d58:	1d11      	adds	r1, r2, #4
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	9103      	str	r1, [sp, #12]
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	db01      	blt.n	8005d66 <_svfiprintf_r+0xfa>
 8005d62:	9207      	str	r2, [sp, #28]
 8005d64:	e004      	b.n	8005d70 <_svfiprintf_r+0x104>
 8005d66:	4252      	negs	r2, r2
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	9207      	str	r2, [sp, #28]
 8005d6e:	9304      	str	r3, [sp, #16]
 8005d70:	783b      	ldrb	r3, [r7, #0]
 8005d72:	2b2e      	cmp	r3, #46	; 0x2e
 8005d74:	d10c      	bne.n	8005d90 <_svfiprintf_r+0x124>
 8005d76:	787b      	ldrb	r3, [r7, #1]
 8005d78:	2b2a      	cmp	r3, #42	; 0x2a
 8005d7a:	d133      	bne.n	8005de4 <_svfiprintf_r+0x178>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	1d1a      	adds	r2, r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	9203      	str	r2, [sp, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfb8      	it	lt
 8005d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d8c:	3702      	adds	r7, #2
 8005d8e:	9305      	str	r3, [sp, #20]
 8005d90:	4d2e      	ldr	r5, [pc, #184]	; (8005e4c <_svfiprintf_r+0x1e0>)
 8005d92:	7839      	ldrb	r1, [r7, #0]
 8005d94:	2203      	movs	r2, #3
 8005d96:	4628      	mov	r0, r5
 8005d98:	f7fa fa22 	bl	80001e0 <memchr>
 8005d9c:	b138      	cbz	r0, 8005dae <_svfiprintf_r+0x142>
 8005d9e:	2340      	movs	r3, #64	; 0x40
 8005da0:	1b40      	subs	r0, r0, r5
 8005da2:	fa03 f000 	lsl.w	r0, r3, r0
 8005da6:	9b04      	ldr	r3, [sp, #16]
 8005da8:	4303      	orrs	r3, r0
 8005daa:	3701      	adds	r7, #1
 8005dac:	9304      	str	r3, [sp, #16]
 8005dae:	7839      	ldrb	r1, [r7, #0]
 8005db0:	4827      	ldr	r0, [pc, #156]	; (8005e50 <_svfiprintf_r+0x1e4>)
 8005db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005db6:	2206      	movs	r2, #6
 8005db8:	1c7e      	adds	r6, r7, #1
 8005dba:	f7fa fa11 	bl	80001e0 <memchr>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d038      	beq.n	8005e34 <_svfiprintf_r+0x1c8>
 8005dc2:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <_svfiprintf_r+0x1e8>)
 8005dc4:	bb13      	cbnz	r3, 8005e0c <_svfiprintf_r+0x1a0>
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	3307      	adds	r3, #7
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	3308      	adds	r3, #8
 8005dd0:	9303      	str	r3, [sp, #12]
 8005dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd4:	444b      	add	r3, r9
 8005dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd8:	e76d      	b.n	8005cb6 <_svfiprintf_r+0x4a>
 8005dda:	fb05 3202 	mla	r2, r5, r2, r3
 8005dde:	2001      	movs	r0, #1
 8005de0:	460f      	mov	r7, r1
 8005de2:	e7a6      	b.n	8005d32 <_svfiprintf_r+0xc6>
 8005de4:	2300      	movs	r3, #0
 8005de6:	3701      	adds	r7, #1
 8005de8:	9305      	str	r3, [sp, #20]
 8005dea:	4619      	mov	r1, r3
 8005dec:	250a      	movs	r5, #10
 8005dee:	4638      	mov	r0, r7
 8005df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005df4:	3a30      	subs	r2, #48	; 0x30
 8005df6:	2a09      	cmp	r2, #9
 8005df8:	d903      	bls.n	8005e02 <_svfiprintf_r+0x196>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0c8      	beq.n	8005d90 <_svfiprintf_r+0x124>
 8005dfe:	9105      	str	r1, [sp, #20]
 8005e00:	e7c6      	b.n	8005d90 <_svfiprintf_r+0x124>
 8005e02:	fb05 2101 	mla	r1, r5, r1, r2
 8005e06:	2301      	movs	r3, #1
 8005e08:	4607      	mov	r7, r0
 8005e0a:	e7f0      	b.n	8005dee <_svfiprintf_r+0x182>
 8005e0c:	ab03      	add	r3, sp, #12
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	4622      	mov	r2, r4
 8005e12:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <_svfiprintf_r+0x1ec>)
 8005e14:	a904      	add	r1, sp, #16
 8005e16:	4640      	mov	r0, r8
 8005e18:	f3af 8000 	nop.w
 8005e1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e20:	4681      	mov	r9, r0
 8005e22:	d1d6      	bne.n	8005dd2 <_svfiprintf_r+0x166>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	065b      	lsls	r3, r3, #25
 8005e28:	f53f af35 	bmi.w	8005c96 <_svfiprintf_r+0x2a>
 8005e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e2e:	b01d      	add	sp, #116	; 0x74
 8005e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e34:	ab03      	add	r3, sp, #12
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <_svfiprintf_r+0x1ec>)
 8005e3c:	a904      	add	r1, sp, #16
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f000 f9c2 	bl	80061c8 <_printf_i>
 8005e44:	e7ea      	b.n	8005e1c <_svfiprintf_r+0x1b0>
 8005e46:	bf00      	nop
 8005e48:	08007008 	.word	0x08007008
 8005e4c:	0800700e 	.word	0x0800700e
 8005e50:	08007012 	.word	0x08007012
 8005e54:	00000000 	.word	0x00000000
 8005e58:	08005bb9 	.word	0x08005bb9

08005e5c <__sfputc_r>:
 8005e5c:	6893      	ldr	r3, [r2, #8]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	b410      	push	{r4}
 8005e64:	6093      	str	r3, [r2, #8]
 8005e66:	da08      	bge.n	8005e7a <__sfputc_r+0x1e>
 8005e68:	6994      	ldr	r4, [r2, #24]
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	db01      	blt.n	8005e72 <__sfputc_r+0x16>
 8005e6e:	290a      	cmp	r1, #10
 8005e70:	d103      	bne.n	8005e7a <__sfputc_r+0x1e>
 8005e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e76:	f000 bb0d 	b.w	8006494 <__swbuf_r>
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	1c58      	adds	r0, r3, #1
 8005e7e:	6010      	str	r0, [r2, #0]
 8005e80:	7019      	strb	r1, [r3, #0]
 8005e82:	4608      	mov	r0, r1
 8005e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <__sfputs_r>:
 8005e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	4614      	mov	r4, r2
 8005e92:	18d5      	adds	r5, r2, r3
 8005e94:	42ac      	cmp	r4, r5
 8005e96:	d101      	bne.n	8005e9c <__sfputs_r+0x12>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e007      	b.n	8005eac <__sfputs_r+0x22>
 8005e9c:	463a      	mov	r2, r7
 8005e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f7ff ffda 	bl	8005e5c <__sfputc_r>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d1f3      	bne.n	8005e94 <__sfputs_r+0xa>
 8005eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005eb0 <_vfiprintf_r>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	b09d      	sub	sp, #116	; 0x74
 8005eb8:	4617      	mov	r7, r2
 8005eba:	461d      	mov	r5, r3
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	b118      	cbz	r0, 8005ec8 <_vfiprintf_r+0x18>
 8005ec0:	6983      	ldr	r3, [r0, #24]
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <_vfiprintf_r+0x18>
 8005ec4:	f7ff fd94 	bl	80059f0 <__sinit>
 8005ec8:	4b7c      	ldr	r3, [pc, #496]	; (80060bc <_vfiprintf_r+0x20c>)
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d158      	bne.n	8005f80 <_vfiprintf_r+0xd0>
 8005ece:	6874      	ldr	r4, [r6, #4]
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	0718      	lsls	r0, r3, #28
 8005ed4:	d55e      	bpl.n	8005f94 <_vfiprintf_r+0xe4>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d05b      	beq.n	8005f94 <_vfiprintf_r+0xe4>
 8005edc:	2300      	movs	r3, #0
 8005ede:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ee6:	2330      	movs	r3, #48	; 0x30
 8005ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eec:	9503      	str	r5, [sp, #12]
 8005eee:	f04f 0b01 	mov.w	fp, #1
 8005ef2:	46b8      	mov	r8, r7
 8005ef4:	4645      	mov	r5, r8
 8005ef6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005efa:	b10b      	cbz	r3, 8005f00 <_vfiprintf_r+0x50>
 8005efc:	2b25      	cmp	r3, #37	; 0x25
 8005efe:	d154      	bne.n	8005faa <_vfiprintf_r+0xfa>
 8005f00:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f04:	d00b      	beq.n	8005f1e <_vfiprintf_r+0x6e>
 8005f06:	4653      	mov	r3, sl
 8005f08:	463a      	mov	r2, r7
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff ffbc 	bl	8005e8a <__sfputs_r>
 8005f12:	3001      	adds	r0, #1
 8005f14:	f000 80c2 	beq.w	800609c <_vfiprintf_r+0x1ec>
 8005f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1a:	4453      	add	r3, sl
 8005f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1e:	f898 3000 	ldrb.w	r3, [r8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80ba 	beq.w	800609c <_vfiprintf_r+0x1ec>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	9307      	str	r3, [sp, #28]
 8005f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f3c:	46a8      	mov	r8, r5
 8005f3e:	2205      	movs	r2, #5
 8005f40:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005f44:	485e      	ldr	r0, [pc, #376]	; (80060c0 <_vfiprintf_r+0x210>)
 8005f46:	f7fa f94b 	bl	80001e0 <memchr>
 8005f4a:	9b04      	ldr	r3, [sp, #16]
 8005f4c:	bb78      	cbnz	r0, 8005fae <_vfiprintf_r+0xfe>
 8005f4e:	06d9      	lsls	r1, r3, #27
 8005f50:	bf44      	itt	mi
 8005f52:	2220      	movmi	r2, #32
 8005f54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f58:	071a      	lsls	r2, r3, #28
 8005f5a:	bf44      	itt	mi
 8005f5c:	222b      	movmi	r2, #43	; 0x2b
 8005f5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f62:	782a      	ldrb	r2, [r5, #0]
 8005f64:	2a2a      	cmp	r2, #42	; 0x2a
 8005f66:	d02a      	beq.n	8005fbe <_vfiprintf_r+0x10e>
 8005f68:	9a07      	ldr	r2, [sp, #28]
 8005f6a:	46a8      	mov	r8, r5
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	250a      	movs	r5, #10
 8005f70:	4641      	mov	r1, r8
 8005f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f76:	3b30      	subs	r3, #48	; 0x30
 8005f78:	2b09      	cmp	r3, #9
 8005f7a:	d969      	bls.n	8006050 <_vfiprintf_r+0x1a0>
 8005f7c:	b360      	cbz	r0, 8005fd8 <_vfiprintf_r+0x128>
 8005f7e:	e024      	b.n	8005fca <_vfiprintf_r+0x11a>
 8005f80:	4b50      	ldr	r3, [pc, #320]	; (80060c4 <_vfiprintf_r+0x214>)
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d101      	bne.n	8005f8a <_vfiprintf_r+0xda>
 8005f86:	68b4      	ldr	r4, [r6, #8]
 8005f88:	e7a2      	b.n	8005ed0 <_vfiprintf_r+0x20>
 8005f8a:	4b4f      	ldr	r3, [pc, #316]	; (80060c8 <_vfiprintf_r+0x218>)
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	bf08      	it	eq
 8005f90:	68f4      	ldreq	r4, [r6, #12]
 8005f92:	e79d      	b.n	8005ed0 <_vfiprintf_r+0x20>
 8005f94:	4621      	mov	r1, r4
 8005f96:	4630      	mov	r0, r6
 8005f98:	f000 fae0 	bl	800655c <__swsetup_r>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d09d      	beq.n	8005edc <_vfiprintf_r+0x2c>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	b01d      	add	sp, #116	; 0x74
 8005fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005faa:	46a8      	mov	r8, r5
 8005fac:	e7a2      	b.n	8005ef4 <_vfiprintf_r+0x44>
 8005fae:	4a44      	ldr	r2, [pc, #272]	; (80060c0 <_vfiprintf_r+0x210>)
 8005fb0:	1a80      	subs	r0, r0, r2
 8005fb2:	fa0b f000 	lsl.w	r0, fp, r0
 8005fb6:	4318      	orrs	r0, r3
 8005fb8:	9004      	str	r0, [sp, #16]
 8005fba:	4645      	mov	r5, r8
 8005fbc:	e7be      	b.n	8005f3c <_vfiprintf_r+0x8c>
 8005fbe:	9a03      	ldr	r2, [sp, #12]
 8005fc0:	1d11      	adds	r1, r2, #4
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	9103      	str	r1, [sp, #12]
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	db01      	blt.n	8005fce <_vfiprintf_r+0x11e>
 8005fca:	9207      	str	r2, [sp, #28]
 8005fcc:	e004      	b.n	8005fd8 <_vfiprintf_r+0x128>
 8005fce:	4252      	negs	r2, r2
 8005fd0:	f043 0302 	orr.w	r3, r3, #2
 8005fd4:	9207      	str	r2, [sp, #28]
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	f898 3000 	ldrb.w	r3, [r8]
 8005fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8005fde:	d10e      	bne.n	8005ffe <_vfiprintf_r+0x14e>
 8005fe0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe6:	d138      	bne.n	800605a <_vfiprintf_r+0x1aa>
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	9203      	str	r2, [sp, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bfb8      	it	lt
 8005ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ff8:	f108 0802 	add.w	r8, r8, #2
 8005ffc:	9305      	str	r3, [sp, #20]
 8005ffe:	4d33      	ldr	r5, [pc, #204]	; (80060cc <_vfiprintf_r+0x21c>)
 8006000:	f898 1000 	ldrb.w	r1, [r8]
 8006004:	2203      	movs	r2, #3
 8006006:	4628      	mov	r0, r5
 8006008:	f7fa f8ea 	bl	80001e0 <memchr>
 800600c:	b140      	cbz	r0, 8006020 <_vfiprintf_r+0x170>
 800600e:	2340      	movs	r3, #64	; 0x40
 8006010:	1b40      	subs	r0, r0, r5
 8006012:	fa03 f000 	lsl.w	r0, r3, r0
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	4303      	orrs	r3, r0
 800601a:	f108 0801 	add.w	r8, r8, #1
 800601e:	9304      	str	r3, [sp, #16]
 8006020:	f898 1000 	ldrb.w	r1, [r8]
 8006024:	482a      	ldr	r0, [pc, #168]	; (80060d0 <_vfiprintf_r+0x220>)
 8006026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800602a:	2206      	movs	r2, #6
 800602c:	f108 0701 	add.w	r7, r8, #1
 8006030:	f7fa f8d6 	bl	80001e0 <memchr>
 8006034:	2800      	cmp	r0, #0
 8006036:	d037      	beq.n	80060a8 <_vfiprintf_r+0x1f8>
 8006038:	4b26      	ldr	r3, [pc, #152]	; (80060d4 <_vfiprintf_r+0x224>)
 800603a:	bb1b      	cbnz	r3, 8006084 <_vfiprintf_r+0x1d4>
 800603c:	9b03      	ldr	r3, [sp, #12]
 800603e:	3307      	adds	r3, #7
 8006040:	f023 0307 	bic.w	r3, r3, #7
 8006044:	3308      	adds	r3, #8
 8006046:	9303      	str	r3, [sp, #12]
 8006048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604a:	444b      	add	r3, r9
 800604c:	9309      	str	r3, [sp, #36]	; 0x24
 800604e:	e750      	b.n	8005ef2 <_vfiprintf_r+0x42>
 8006050:	fb05 3202 	mla	r2, r5, r2, r3
 8006054:	2001      	movs	r0, #1
 8006056:	4688      	mov	r8, r1
 8006058:	e78a      	b.n	8005f70 <_vfiprintf_r+0xc0>
 800605a:	2300      	movs	r3, #0
 800605c:	f108 0801 	add.w	r8, r8, #1
 8006060:	9305      	str	r3, [sp, #20]
 8006062:	4619      	mov	r1, r3
 8006064:	250a      	movs	r5, #10
 8006066:	4640      	mov	r0, r8
 8006068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800606c:	3a30      	subs	r2, #48	; 0x30
 800606e:	2a09      	cmp	r2, #9
 8006070:	d903      	bls.n	800607a <_vfiprintf_r+0x1ca>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0c3      	beq.n	8005ffe <_vfiprintf_r+0x14e>
 8006076:	9105      	str	r1, [sp, #20]
 8006078:	e7c1      	b.n	8005ffe <_vfiprintf_r+0x14e>
 800607a:	fb05 2101 	mla	r1, r5, r1, r2
 800607e:	2301      	movs	r3, #1
 8006080:	4680      	mov	r8, r0
 8006082:	e7f0      	b.n	8006066 <_vfiprintf_r+0x1b6>
 8006084:	ab03      	add	r3, sp, #12
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	4622      	mov	r2, r4
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <_vfiprintf_r+0x228>)
 800608c:	a904      	add	r1, sp, #16
 800608e:	4630      	mov	r0, r6
 8006090:	f3af 8000 	nop.w
 8006094:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006098:	4681      	mov	r9, r0
 800609a:	d1d5      	bne.n	8006048 <_vfiprintf_r+0x198>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	065b      	lsls	r3, r3, #25
 80060a0:	f53f af7e 	bmi.w	8005fa0 <_vfiprintf_r+0xf0>
 80060a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060a6:	e77d      	b.n	8005fa4 <_vfiprintf_r+0xf4>
 80060a8:	ab03      	add	r3, sp, #12
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4622      	mov	r2, r4
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <_vfiprintf_r+0x228>)
 80060b0:	a904      	add	r1, sp, #16
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 f888 	bl	80061c8 <_printf_i>
 80060b8:	e7ec      	b.n	8006094 <_vfiprintf_r+0x1e4>
 80060ba:	bf00      	nop
 80060bc:	08006fc8 	.word	0x08006fc8
 80060c0:	08007008 	.word	0x08007008
 80060c4:	08006fe8 	.word	0x08006fe8
 80060c8:	08006fa8 	.word	0x08006fa8
 80060cc:	0800700e 	.word	0x0800700e
 80060d0:	08007012 	.word	0x08007012
 80060d4:	00000000 	.word	0x00000000
 80060d8:	08005e8b 	.word	0x08005e8b

080060dc <_printf_common>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	4691      	mov	r9, r2
 80060e2:	461f      	mov	r7, r3
 80060e4:	688a      	ldr	r2, [r1, #8]
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bfb8      	it	lt
 80060f0:	4613      	movlt	r3, r2
 80060f2:	f8c9 3000 	str.w	r3, [r9]
 80060f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060fa:	4606      	mov	r6, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	b112      	cbz	r2, 8006106 <_printf_common+0x2a>
 8006100:	3301      	adds	r3, #1
 8006102:	f8c9 3000 	str.w	r3, [r9]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	0699      	lsls	r1, r3, #26
 800610a:	bf42      	ittt	mi
 800610c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006110:	3302      	addmi	r3, #2
 8006112:	f8c9 3000 	strmi.w	r3, [r9]
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	f015 0506 	ands.w	r5, r5, #6
 800611c:	d107      	bne.n	800612e <_printf_common+0x52>
 800611e:	f104 0a19 	add.w	sl, r4, #25
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	f8d9 2000 	ldr.w	r2, [r9]
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	42ab      	cmp	r3, r5
 800612c:	dc28      	bgt.n	8006180 <_printf_common+0xa4>
 800612e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	3300      	adds	r3, #0
 8006136:	bf18      	it	ne
 8006138:	2301      	movne	r3, #1
 800613a:	0692      	lsls	r2, r2, #26
 800613c:	d42d      	bmi.n	800619a <_printf_common+0xbe>
 800613e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006142:	4639      	mov	r1, r7
 8006144:	4630      	mov	r0, r6
 8006146:	47c0      	blx	r8
 8006148:	3001      	adds	r0, #1
 800614a:	d020      	beq.n	800618e <_printf_common+0xb2>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	68e5      	ldr	r5, [r4, #12]
 8006150:	f8d9 2000 	ldr.w	r2, [r9]
 8006154:	f003 0306 	and.w	r3, r3, #6
 8006158:	2b04      	cmp	r3, #4
 800615a:	bf08      	it	eq
 800615c:	1aad      	subeq	r5, r5, r2
 800615e:	68a3      	ldr	r3, [r4, #8]
 8006160:	6922      	ldr	r2, [r4, #16]
 8006162:	bf0c      	ite	eq
 8006164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006168:	2500      	movne	r5, #0
 800616a:	4293      	cmp	r3, r2
 800616c:	bfc4      	itt	gt
 800616e:	1a9b      	subgt	r3, r3, r2
 8006170:	18ed      	addgt	r5, r5, r3
 8006172:	f04f 0900 	mov.w	r9, #0
 8006176:	341a      	adds	r4, #26
 8006178:	454d      	cmp	r5, r9
 800617a:	d11a      	bne.n	80061b2 <_printf_common+0xd6>
 800617c:	2000      	movs	r0, #0
 800617e:	e008      	b.n	8006192 <_printf_common+0xb6>
 8006180:	2301      	movs	r3, #1
 8006182:	4652      	mov	r2, sl
 8006184:	4639      	mov	r1, r7
 8006186:	4630      	mov	r0, r6
 8006188:	47c0      	blx	r8
 800618a:	3001      	adds	r0, #1
 800618c:	d103      	bne.n	8006196 <_printf_common+0xba>
 800618e:	f04f 30ff 	mov.w	r0, #4294967295
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	3501      	adds	r5, #1
 8006198:	e7c3      	b.n	8006122 <_printf_common+0x46>
 800619a:	18e1      	adds	r1, r4, r3
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	2030      	movs	r0, #48	; 0x30
 80061a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061a4:	4422      	add	r2, r4
 80061a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061ae:	3302      	adds	r3, #2
 80061b0:	e7c5      	b.n	800613e <_printf_common+0x62>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4622      	mov	r2, r4
 80061b6:	4639      	mov	r1, r7
 80061b8:	4630      	mov	r0, r6
 80061ba:	47c0      	blx	r8
 80061bc:	3001      	adds	r0, #1
 80061be:	d0e6      	beq.n	800618e <_printf_common+0xb2>
 80061c0:	f109 0901 	add.w	r9, r9, #1
 80061c4:	e7d8      	b.n	8006178 <_printf_common+0x9c>
	...

080061c8 <_printf_i>:
 80061c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80061d0:	460c      	mov	r4, r1
 80061d2:	7e09      	ldrb	r1, [r1, #24]
 80061d4:	b085      	sub	sp, #20
 80061d6:	296e      	cmp	r1, #110	; 0x6e
 80061d8:	4617      	mov	r7, r2
 80061da:	4606      	mov	r6, r0
 80061dc:	4698      	mov	r8, r3
 80061de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061e0:	f000 80b3 	beq.w	800634a <_printf_i+0x182>
 80061e4:	d822      	bhi.n	800622c <_printf_i+0x64>
 80061e6:	2963      	cmp	r1, #99	; 0x63
 80061e8:	d036      	beq.n	8006258 <_printf_i+0x90>
 80061ea:	d80a      	bhi.n	8006202 <_printf_i+0x3a>
 80061ec:	2900      	cmp	r1, #0
 80061ee:	f000 80b9 	beq.w	8006364 <_printf_i+0x19c>
 80061f2:	2958      	cmp	r1, #88	; 0x58
 80061f4:	f000 8083 	beq.w	80062fe <_printf_i+0x136>
 80061f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006200:	e032      	b.n	8006268 <_printf_i+0xa0>
 8006202:	2964      	cmp	r1, #100	; 0x64
 8006204:	d001      	beq.n	800620a <_printf_i+0x42>
 8006206:	2969      	cmp	r1, #105	; 0x69
 8006208:	d1f6      	bne.n	80061f8 <_printf_i+0x30>
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	6813      	ldr	r3, [r2, #0]
 800620e:	0605      	lsls	r5, r0, #24
 8006210:	f103 0104 	add.w	r1, r3, #4
 8006214:	d52a      	bpl.n	800626c <_printf_i+0xa4>
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6011      	str	r1, [r2, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da03      	bge.n	8006226 <_printf_i+0x5e>
 800621e:	222d      	movs	r2, #45	; 0x2d
 8006220:	425b      	negs	r3, r3
 8006222:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006226:	486f      	ldr	r0, [pc, #444]	; (80063e4 <_printf_i+0x21c>)
 8006228:	220a      	movs	r2, #10
 800622a:	e039      	b.n	80062a0 <_printf_i+0xd8>
 800622c:	2973      	cmp	r1, #115	; 0x73
 800622e:	f000 809d 	beq.w	800636c <_printf_i+0x1a4>
 8006232:	d808      	bhi.n	8006246 <_printf_i+0x7e>
 8006234:	296f      	cmp	r1, #111	; 0x6f
 8006236:	d020      	beq.n	800627a <_printf_i+0xb2>
 8006238:	2970      	cmp	r1, #112	; 0x70
 800623a:	d1dd      	bne.n	80061f8 <_printf_i+0x30>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	f043 0320 	orr.w	r3, r3, #32
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	e003      	b.n	800624e <_printf_i+0x86>
 8006246:	2975      	cmp	r1, #117	; 0x75
 8006248:	d017      	beq.n	800627a <_printf_i+0xb2>
 800624a:	2978      	cmp	r1, #120	; 0x78
 800624c:	d1d4      	bne.n	80061f8 <_printf_i+0x30>
 800624e:	2378      	movs	r3, #120	; 0x78
 8006250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006254:	4864      	ldr	r0, [pc, #400]	; (80063e8 <_printf_i+0x220>)
 8006256:	e055      	b.n	8006304 <_printf_i+0x13c>
 8006258:	6813      	ldr	r3, [r2, #0]
 800625a:	1d19      	adds	r1, r3, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6011      	str	r1, [r2, #0]
 8006260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006268:	2301      	movs	r3, #1
 800626a:	e08c      	b.n	8006386 <_printf_i+0x1be>
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6011      	str	r1, [r2, #0]
 8006270:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006274:	bf18      	it	ne
 8006276:	b21b      	sxthne	r3, r3
 8006278:	e7cf      	b.n	800621a <_printf_i+0x52>
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	6825      	ldr	r5, [r4, #0]
 800627e:	1d18      	adds	r0, r3, #4
 8006280:	6010      	str	r0, [r2, #0]
 8006282:	0628      	lsls	r0, r5, #24
 8006284:	d501      	bpl.n	800628a <_printf_i+0xc2>
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	e002      	b.n	8006290 <_printf_i+0xc8>
 800628a:	0668      	lsls	r0, r5, #25
 800628c:	d5fb      	bpl.n	8006286 <_printf_i+0xbe>
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	4854      	ldr	r0, [pc, #336]	; (80063e4 <_printf_i+0x21c>)
 8006292:	296f      	cmp	r1, #111	; 0x6f
 8006294:	bf14      	ite	ne
 8006296:	220a      	movne	r2, #10
 8006298:	2208      	moveq	r2, #8
 800629a:	2100      	movs	r1, #0
 800629c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062a0:	6865      	ldr	r5, [r4, #4]
 80062a2:	60a5      	str	r5, [r4, #8]
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	f2c0 8095 	blt.w	80063d4 <_printf_i+0x20c>
 80062aa:	6821      	ldr	r1, [r4, #0]
 80062ac:	f021 0104 	bic.w	r1, r1, #4
 80062b0:	6021      	str	r1, [r4, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d13d      	bne.n	8006332 <_printf_i+0x16a>
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	f040 808e 	bne.w	80063d8 <_printf_i+0x210>
 80062bc:	4665      	mov	r5, ip
 80062be:	2a08      	cmp	r2, #8
 80062c0:	d10b      	bne.n	80062da <_printf_i+0x112>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07db      	lsls	r3, r3, #31
 80062c6:	d508      	bpl.n	80062da <_printf_i+0x112>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	6862      	ldr	r2, [r4, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bfde      	ittt	le
 80062d0:	2330      	movle	r3, #48	; 0x30
 80062d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062da:	ebac 0305 	sub.w	r3, ip, r5
 80062de:	6123      	str	r3, [r4, #16]
 80062e0:	f8cd 8000 	str.w	r8, [sp]
 80062e4:	463b      	mov	r3, r7
 80062e6:	aa03      	add	r2, sp, #12
 80062e8:	4621      	mov	r1, r4
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff fef6 	bl	80060dc <_printf_common>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d14d      	bne.n	8006390 <_printf_i+0x1c8>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	b005      	add	sp, #20
 80062fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062fe:	4839      	ldr	r0, [pc, #228]	; (80063e4 <_printf_i+0x21c>)
 8006300:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006304:	6813      	ldr	r3, [r2, #0]
 8006306:	6821      	ldr	r1, [r4, #0]
 8006308:	1d1d      	adds	r5, r3, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6015      	str	r5, [r2, #0]
 800630e:	060a      	lsls	r2, r1, #24
 8006310:	d50b      	bpl.n	800632a <_printf_i+0x162>
 8006312:	07ca      	lsls	r2, r1, #31
 8006314:	bf44      	itt	mi
 8006316:	f041 0120 	orrmi.w	r1, r1, #32
 800631a:	6021      	strmi	r1, [r4, #0]
 800631c:	b91b      	cbnz	r3, 8006326 <_printf_i+0x15e>
 800631e:	6822      	ldr	r2, [r4, #0]
 8006320:	f022 0220 	bic.w	r2, r2, #32
 8006324:	6022      	str	r2, [r4, #0]
 8006326:	2210      	movs	r2, #16
 8006328:	e7b7      	b.n	800629a <_printf_i+0xd2>
 800632a:	064d      	lsls	r5, r1, #25
 800632c:	bf48      	it	mi
 800632e:	b29b      	uxthmi	r3, r3
 8006330:	e7ef      	b.n	8006312 <_printf_i+0x14a>
 8006332:	4665      	mov	r5, ip
 8006334:	fbb3 f1f2 	udiv	r1, r3, r2
 8006338:	fb02 3311 	mls	r3, r2, r1, r3
 800633c:	5cc3      	ldrb	r3, [r0, r3]
 800633e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006342:	460b      	mov	r3, r1
 8006344:	2900      	cmp	r1, #0
 8006346:	d1f5      	bne.n	8006334 <_printf_i+0x16c>
 8006348:	e7b9      	b.n	80062be <_printf_i+0xf6>
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	6825      	ldr	r5, [r4, #0]
 800634e:	6961      	ldr	r1, [r4, #20]
 8006350:	1d18      	adds	r0, r3, #4
 8006352:	6010      	str	r0, [r2, #0]
 8006354:	0628      	lsls	r0, r5, #24
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	d501      	bpl.n	800635e <_printf_i+0x196>
 800635a:	6019      	str	r1, [r3, #0]
 800635c:	e002      	b.n	8006364 <_printf_i+0x19c>
 800635e:	066a      	lsls	r2, r5, #25
 8006360:	d5fb      	bpl.n	800635a <_printf_i+0x192>
 8006362:	8019      	strh	r1, [r3, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	6123      	str	r3, [r4, #16]
 8006368:	4665      	mov	r5, ip
 800636a:	e7b9      	b.n	80062e0 <_printf_i+0x118>
 800636c:	6813      	ldr	r3, [r2, #0]
 800636e:	1d19      	adds	r1, r3, #4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	681d      	ldr	r5, [r3, #0]
 8006374:	6862      	ldr	r2, [r4, #4]
 8006376:	2100      	movs	r1, #0
 8006378:	4628      	mov	r0, r5
 800637a:	f7f9 ff31 	bl	80001e0 <memchr>
 800637e:	b108      	cbz	r0, 8006384 <_printf_i+0x1bc>
 8006380:	1b40      	subs	r0, r0, r5
 8006382:	6060      	str	r0, [r4, #4]
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	2300      	movs	r3, #0
 800638a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638e:	e7a7      	b.n	80062e0 <_printf_i+0x118>
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	462a      	mov	r2, r5
 8006394:	4639      	mov	r1, r7
 8006396:	4630      	mov	r0, r6
 8006398:	47c0      	blx	r8
 800639a:	3001      	adds	r0, #1
 800639c:	d0aa      	beq.n	80062f4 <_printf_i+0x12c>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	079b      	lsls	r3, r3, #30
 80063a2:	d413      	bmi.n	80063cc <_printf_i+0x204>
 80063a4:	68e0      	ldr	r0, [r4, #12]
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	4298      	cmp	r0, r3
 80063aa:	bfb8      	it	lt
 80063ac:	4618      	movlt	r0, r3
 80063ae:	e7a3      	b.n	80062f8 <_printf_i+0x130>
 80063b0:	2301      	movs	r3, #1
 80063b2:	464a      	mov	r2, r9
 80063b4:	4639      	mov	r1, r7
 80063b6:	4630      	mov	r0, r6
 80063b8:	47c0      	blx	r8
 80063ba:	3001      	adds	r0, #1
 80063bc:	d09a      	beq.n	80062f4 <_printf_i+0x12c>
 80063be:	3501      	adds	r5, #1
 80063c0:	68e3      	ldr	r3, [r4, #12]
 80063c2:	9a03      	ldr	r2, [sp, #12]
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	42ab      	cmp	r3, r5
 80063c8:	dcf2      	bgt.n	80063b0 <_printf_i+0x1e8>
 80063ca:	e7eb      	b.n	80063a4 <_printf_i+0x1dc>
 80063cc:	2500      	movs	r5, #0
 80063ce:	f104 0919 	add.w	r9, r4, #25
 80063d2:	e7f5      	b.n	80063c0 <_printf_i+0x1f8>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ac      	bne.n	8006332 <_printf_i+0x16a>
 80063d8:	7803      	ldrb	r3, [r0, #0]
 80063da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e2:	e76c      	b.n	80062be <_printf_i+0xf6>
 80063e4:	08007019 	.word	0x08007019
 80063e8:	0800702a 	.word	0x0800702a

080063ec <_sbrk_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4c06      	ldr	r4, [pc, #24]	; (8006408 <_sbrk_r+0x1c>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4605      	mov	r5, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	f7fa fff8 	bl	80013ec <_sbrk>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_sbrk_r+0x1a>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b103      	cbz	r3, 8006406 <_sbrk_r+0x1a>
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20004564 	.word	0x20004564

0800640c <__sread>:
 800640c:	b510      	push	{r4, lr}
 800640e:	460c      	mov	r4, r1
 8006410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006414:	f000 fad6 	bl	80069c4 <_read_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	bfab      	itete	ge
 800641c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800641e:	89a3      	ldrhlt	r3, [r4, #12]
 8006420:	181b      	addge	r3, r3, r0
 8006422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006426:	bfac      	ite	ge
 8006428:	6563      	strge	r3, [r4, #84]	; 0x54
 800642a:	81a3      	strhlt	r3, [r4, #12]
 800642c:	bd10      	pop	{r4, pc}

0800642e <__swrite>:
 800642e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006432:	461f      	mov	r7, r3
 8006434:	898b      	ldrh	r3, [r1, #12]
 8006436:	05db      	lsls	r3, r3, #23
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	4616      	mov	r6, r2
 800643e:	d505      	bpl.n	800644c <__swrite+0x1e>
 8006440:	2302      	movs	r3, #2
 8006442:	2200      	movs	r2, #0
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	f000 f9b6 	bl	80067b8 <_lseek_r>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	4628      	mov	r0, r5
 800645e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006462:	f000 b869 	b.w	8006538 <_write_r>

08006466 <__sseek>:
 8006466:	b510      	push	{r4, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646e:	f000 f9a3 	bl	80067b8 <_lseek_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	bf15      	itete	ne
 8006478:	6560      	strne	r0, [r4, #84]	; 0x54
 800647a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800647e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006482:	81a3      	strheq	r3, [r4, #12]
 8006484:	bf18      	it	ne
 8006486:	81a3      	strhne	r3, [r4, #12]
 8006488:	bd10      	pop	{r4, pc}

0800648a <__sclose>:
 800648a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648e:	f000 b8d3 	b.w	8006638 <_close_r>
	...

08006494 <__swbuf_r>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	460e      	mov	r6, r1
 8006498:	4614      	mov	r4, r2
 800649a:	4605      	mov	r5, r0
 800649c:	b118      	cbz	r0, 80064a6 <__swbuf_r+0x12>
 800649e:	6983      	ldr	r3, [r0, #24]
 80064a0:	b90b      	cbnz	r3, 80064a6 <__swbuf_r+0x12>
 80064a2:	f7ff faa5 	bl	80059f0 <__sinit>
 80064a6:	4b21      	ldr	r3, [pc, #132]	; (800652c <__swbuf_r+0x98>)
 80064a8:	429c      	cmp	r4, r3
 80064aa:	d12a      	bne.n	8006502 <__swbuf_r+0x6e>
 80064ac:	686c      	ldr	r4, [r5, #4]
 80064ae:	69a3      	ldr	r3, [r4, #24]
 80064b0:	60a3      	str	r3, [r4, #8]
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	071a      	lsls	r2, r3, #28
 80064b6:	d52e      	bpl.n	8006516 <__swbuf_r+0x82>
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	b363      	cbz	r3, 8006516 <__swbuf_r+0x82>
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	1ac0      	subs	r0, r0, r3
 80064c2:	6963      	ldr	r3, [r4, #20]
 80064c4:	b2f6      	uxtb	r6, r6
 80064c6:	4283      	cmp	r3, r0
 80064c8:	4637      	mov	r7, r6
 80064ca:	dc04      	bgt.n	80064d6 <__swbuf_r+0x42>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 f948 	bl	8006764 <_fflush_r>
 80064d4:	bb28      	cbnz	r0, 8006522 <__swbuf_r+0x8e>
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	3b01      	subs	r3, #1
 80064da:	60a3      	str	r3, [r4, #8]
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	6022      	str	r2, [r4, #0]
 80064e2:	701e      	strb	r6, [r3, #0]
 80064e4:	6963      	ldr	r3, [r4, #20]
 80064e6:	3001      	adds	r0, #1
 80064e8:	4283      	cmp	r3, r0
 80064ea:	d004      	beq.n	80064f6 <__swbuf_r+0x62>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	07db      	lsls	r3, r3, #31
 80064f0:	d519      	bpl.n	8006526 <__swbuf_r+0x92>
 80064f2:	2e0a      	cmp	r6, #10
 80064f4:	d117      	bne.n	8006526 <__swbuf_r+0x92>
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 f933 	bl	8006764 <_fflush_r>
 80064fe:	b190      	cbz	r0, 8006526 <__swbuf_r+0x92>
 8006500:	e00f      	b.n	8006522 <__swbuf_r+0x8e>
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <__swbuf_r+0x9c>)
 8006504:	429c      	cmp	r4, r3
 8006506:	d101      	bne.n	800650c <__swbuf_r+0x78>
 8006508:	68ac      	ldr	r4, [r5, #8]
 800650a:	e7d0      	b.n	80064ae <__swbuf_r+0x1a>
 800650c:	4b09      	ldr	r3, [pc, #36]	; (8006534 <__swbuf_r+0xa0>)
 800650e:	429c      	cmp	r4, r3
 8006510:	bf08      	it	eq
 8006512:	68ec      	ldreq	r4, [r5, #12]
 8006514:	e7cb      	b.n	80064ae <__swbuf_r+0x1a>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f81f 	bl	800655c <__swsetup_r>
 800651e:	2800      	cmp	r0, #0
 8006520:	d0cc      	beq.n	80064bc <__swbuf_r+0x28>
 8006522:	f04f 37ff 	mov.w	r7, #4294967295
 8006526:	4638      	mov	r0, r7
 8006528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652a:	bf00      	nop
 800652c:	08006fc8 	.word	0x08006fc8
 8006530:	08006fe8 	.word	0x08006fe8
 8006534:	08006fa8 	.word	0x08006fa8

08006538 <_write_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4c07      	ldr	r4, [pc, #28]	; (8006558 <_write_r+0x20>)
 800653c:	4605      	mov	r5, r0
 800653e:	4608      	mov	r0, r1
 8006540:	4611      	mov	r1, r2
 8006542:	2200      	movs	r2, #0
 8006544:	6022      	str	r2, [r4, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	f7fa feff 	bl	800134a <_write>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_write_r+0x1e>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	b103      	cbz	r3, 8006556 <_write_r+0x1e>
 8006554:	602b      	str	r3, [r5, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	20004564 	.word	0x20004564

0800655c <__swsetup_r>:
 800655c:	4b32      	ldr	r3, [pc, #200]	; (8006628 <__swsetup_r+0xcc>)
 800655e:	b570      	push	{r4, r5, r6, lr}
 8006560:	681d      	ldr	r5, [r3, #0]
 8006562:	4606      	mov	r6, r0
 8006564:	460c      	mov	r4, r1
 8006566:	b125      	cbz	r5, 8006572 <__swsetup_r+0x16>
 8006568:	69ab      	ldr	r3, [r5, #24]
 800656a:	b913      	cbnz	r3, 8006572 <__swsetup_r+0x16>
 800656c:	4628      	mov	r0, r5
 800656e:	f7ff fa3f 	bl	80059f0 <__sinit>
 8006572:	4b2e      	ldr	r3, [pc, #184]	; (800662c <__swsetup_r+0xd0>)
 8006574:	429c      	cmp	r4, r3
 8006576:	d10f      	bne.n	8006598 <__swsetup_r+0x3c>
 8006578:	686c      	ldr	r4, [r5, #4]
 800657a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657e:	b29a      	uxth	r2, r3
 8006580:	0715      	lsls	r5, r2, #28
 8006582:	d42c      	bmi.n	80065de <__swsetup_r+0x82>
 8006584:	06d0      	lsls	r0, r2, #27
 8006586:	d411      	bmi.n	80065ac <__swsetup_r+0x50>
 8006588:	2209      	movs	r2, #9
 800658a:	6032      	str	r2, [r6, #0]
 800658c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	f04f 30ff 	mov.w	r0, #4294967295
 8006596:	e03e      	b.n	8006616 <__swsetup_r+0xba>
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <__swsetup_r+0xd4>)
 800659a:	429c      	cmp	r4, r3
 800659c:	d101      	bne.n	80065a2 <__swsetup_r+0x46>
 800659e:	68ac      	ldr	r4, [r5, #8]
 80065a0:	e7eb      	b.n	800657a <__swsetup_r+0x1e>
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <__swsetup_r+0xd8>)
 80065a4:	429c      	cmp	r4, r3
 80065a6:	bf08      	it	eq
 80065a8:	68ec      	ldreq	r4, [r5, #12]
 80065aa:	e7e6      	b.n	800657a <__swsetup_r+0x1e>
 80065ac:	0751      	lsls	r1, r2, #29
 80065ae:	d512      	bpl.n	80065d6 <__swsetup_r+0x7a>
 80065b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065b2:	b141      	cbz	r1, 80065c6 <__swsetup_r+0x6a>
 80065b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065b8:	4299      	cmp	r1, r3
 80065ba:	d002      	beq.n	80065c2 <__swsetup_r+0x66>
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 f98d 	bl	80068dc <_free_r>
 80065c2:	2300      	movs	r3, #0
 80065c4:	6363      	str	r3, [r4, #52]	; 0x34
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	2300      	movs	r3, #0
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f043 0308 	orr.w	r3, r3, #8
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	b94b      	cbnz	r3, 80065f6 <__swsetup_r+0x9a>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d003      	beq.n	80065f6 <__swsetup_r+0x9a>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 f917 	bl	8006824 <__smakebuf_r>
 80065f6:	89a2      	ldrh	r2, [r4, #12]
 80065f8:	f012 0301 	ands.w	r3, r2, #1
 80065fc:	d00c      	beq.n	8006618 <__swsetup_r+0xbc>
 80065fe:	2300      	movs	r3, #0
 8006600:	60a3      	str	r3, [r4, #8]
 8006602:	6963      	ldr	r3, [r4, #20]
 8006604:	425b      	negs	r3, r3
 8006606:	61a3      	str	r3, [r4, #24]
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	b953      	cbnz	r3, 8006622 <__swsetup_r+0xc6>
 800660c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006610:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006614:	d1ba      	bne.n	800658c <__swsetup_r+0x30>
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	0792      	lsls	r2, r2, #30
 800661a:	bf58      	it	pl
 800661c:	6963      	ldrpl	r3, [r4, #20]
 800661e:	60a3      	str	r3, [r4, #8]
 8006620:	e7f2      	b.n	8006608 <__swsetup_r+0xac>
 8006622:	2000      	movs	r0, #0
 8006624:	e7f7      	b.n	8006616 <__swsetup_r+0xba>
 8006626:	bf00      	nop
 8006628:	2000020c 	.word	0x2000020c
 800662c:	08006fc8 	.word	0x08006fc8
 8006630:	08006fe8 	.word	0x08006fe8
 8006634:	08006fa8 	.word	0x08006fa8

08006638 <_close_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4c06      	ldr	r4, [pc, #24]	; (8006654 <_close_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4605      	mov	r5, r0
 8006640:	4608      	mov	r0, r1
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	f7fa fe9d 	bl	8001382 <_close>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_close_r+0x1a>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	b103      	cbz	r3, 8006652 <_close_r+0x1a>
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20004564 	.word	0x20004564

08006658 <__sflush_r>:
 8006658:	898a      	ldrh	r2, [r1, #12]
 800665a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665e:	4605      	mov	r5, r0
 8006660:	0710      	lsls	r0, r2, #28
 8006662:	460c      	mov	r4, r1
 8006664:	d458      	bmi.n	8006718 <__sflush_r+0xc0>
 8006666:	684b      	ldr	r3, [r1, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	dc05      	bgt.n	8006678 <__sflush_r+0x20>
 800666c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	dc02      	bgt.n	8006678 <__sflush_r+0x20>
 8006672:	2000      	movs	r0, #0
 8006674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800667a:	2e00      	cmp	r6, #0
 800667c:	d0f9      	beq.n	8006672 <__sflush_r+0x1a>
 800667e:	2300      	movs	r3, #0
 8006680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006684:	682f      	ldr	r7, [r5, #0]
 8006686:	6a21      	ldr	r1, [r4, #32]
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	d032      	beq.n	80066f2 <__sflush_r+0x9a>
 800668c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	075a      	lsls	r2, r3, #29
 8006692:	d505      	bpl.n	80066a0 <__sflush_r+0x48>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	1ac0      	subs	r0, r0, r3
 8006698:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800669a:	b10b      	cbz	r3, 80066a0 <__sflush_r+0x48>
 800669c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800669e:	1ac0      	subs	r0, r0, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	4602      	mov	r2, r0
 80066a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066a6:	6a21      	ldr	r1, [r4, #32]
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b0      	blx	r6
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	d106      	bne.n	80066c0 <__sflush_r+0x68>
 80066b2:	6829      	ldr	r1, [r5, #0]
 80066b4:	291d      	cmp	r1, #29
 80066b6:	d848      	bhi.n	800674a <__sflush_r+0xf2>
 80066b8:	4a29      	ldr	r2, [pc, #164]	; (8006760 <__sflush_r+0x108>)
 80066ba:	40ca      	lsrs	r2, r1
 80066bc:	07d6      	lsls	r6, r2, #31
 80066be:	d544      	bpl.n	800674a <__sflush_r+0xf2>
 80066c0:	2200      	movs	r2, #0
 80066c2:	6062      	str	r2, [r4, #4]
 80066c4:	04d9      	lsls	r1, r3, #19
 80066c6:	6922      	ldr	r2, [r4, #16]
 80066c8:	6022      	str	r2, [r4, #0]
 80066ca:	d504      	bpl.n	80066d6 <__sflush_r+0x7e>
 80066cc:	1c42      	adds	r2, r0, #1
 80066ce:	d101      	bne.n	80066d4 <__sflush_r+0x7c>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b903      	cbnz	r3, 80066d6 <__sflush_r+0x7e>
 80066d4:	6560      	str	r0, [r4, #84]	; 0x54
 80066d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066d8:	602f      	str	r7, [r5, #0]
 80066da:	2900      	cmp	r1, #0
 80066dc:	d0c9      	beq.n	8006672 <__sflush_r+0x1a>
 80066de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e2:	4299      	cmp	r1, r3
 80066e4:	d002      	beq.n	80066ec <__sflush_r+0x94>
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 f8f8 	bl	80068dc <_free_r>
 80066ec:	2000      	movs	r0, #0
 80066ee:	6360      	str	r0, [r4, #52]	; 0x34
 80066f0:	e7c0      	b.n	8006674 <__sflush_r+0x1c>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b0      	blx	r6
 80066f8:	1c41      	adds	r1, r0, #1
 80066fa:	d1c8      	bne.n	800668e <__sflush_r+0x36>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0c5      	beq.n	800668e <__sflush_r+0x36>
 8006702:	2b1d      	cmp	r3, #29
 8006704:	d001      	beq.n	800670a <__sflush_r+0xb2>
 8006706:	2b16      	cmp	r3, #22
 8006708:	d101      	bne.n	800670e <__sflush_r+0xb6>
 800670a:	602f      	str	r7, [r5, #0]
 800670c:	e7b1      	b.n	8006672 <__sflush_r+0x1a>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006714:	81a3      	strh	r3, [r4, #12]
 8006716:	e7ad      	b.n	8006674 <__sflush_r+0x1c>
 8006718:	690f      	ldr	r7, [r1, #16]
 800671a:	2f00      	cmp	r7, #0
 800671c:	d0a9      	beq.n	8006672 <__sflush_r+0x1a>
 800671e:	0793      	lsls	r3, r2, #30
 8006720:	680e      	ldr	r6, [r1, #0]
 8006722:	bf08      	it	eq
 8006724:	694b      	ldreq	r3, [r1, #20]
 8006726:	600f      	str	r7, [r1, #0]
 8006728:	bf18      	it	ne
 800672a:	2300      	movne	r3, #0
 800672c:	eba6 0807 	sub.w	r8, r6, r7
 8006730:	608b      	str	r3, [r1, #8]
 8006732:	f1b8 0f00 	cmp.w	r8, #0
 8006736:	dd9c      	ble.n	8006672 <__sflush_r+0x1a>
 8006738:	4643      	mov	r3, r8
 800673a:	463a      	mov	r2, r7
 800673c:	6a21      	ldr	r1, [r4, #32]
 800673e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006740:	4628      	mov	r0, r5
 8006742:	47b0      	blx	r6
 8006744:	2800      	cmp	r0, #0
 8006746:	dc06      	bgt.n	8006756 <__sflush_r+0xfe>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e78e      	b.n	8006674 <__sflush_r+0x1c>
 8006756:	4407      	add	r7, r0
 8006758:	eba8 0800 	sub.w	r8, r8, r0
 800675c:	e7e9      	b.n	8006732 <__sflush_r+0xda>
 800675e:	bf00      	nop
 8006760:	20400001 	.word	0x20400001

08006764 <_fflush_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	4605      	mov	r5, r0
 800676a:	460c      	mov	r4, r1
 800676c:	b1db      	cbz	r3, 80067a6 <_fflush_r+0x42>
 800676e:	b118      	cbz	r0, 8006778 <_fflush_r+0x14>
 8006770:	6983      	ldr	r3, [r0, #24]
 8006772:	b90b      	cbnz	r3, 8006778 <_fflush_r+0x14>
 8006774:	f7ff f93c 	bl	80059f0 <__sinit>
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <_fflush_r+0x48>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d109      	bne.n	8006792 <_fflush_r+0x2e>
 800677e:	686c      	ldr	r4, [r5, #4]
 8006780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006784:	b17b      	cbz	r3, 80067a6 <_fflush_r+0x42>
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678e:	f7ff bf63 	b.w	8006658 <__sflush_r>
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <_fflush_r+0x4c>)
 8006794:	429c      	cmp	r4, r3
 8006796:	d101      	bne.n	800679c <_fflush_r+0x38>
 8006798:	68ac      	ldr	r4, [r5, #8]
 800679a:	e7f1      	b.n	8006780 <_fflush_r+0x1c>
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <_fflush_r+0x50>)
 800679e:	429c      	cmp	r4, r3
 80067a0:	bf08      	it	eq
 80067a2:	68ec      	ldreq	r4, [r5, #12]
 80067a4:	e7ec      	b.n	8006780 <_fflush_r+0x1c>
 80067a6:	2000      	movs	r0, #0
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	08006fc8 	.word	0x08006fc8
 80067b0:	08006fe8 	.word	0x08006fe8
 80067b4:	08006fa8 	.word	0x08006fa8

080067b8 <_lseek_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4c07      	ldr	r4, [pc, #28]	; (80067d8 <_lseek_r+0x20>)
 80067bc:	4605      	mov	r5, r0
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	6022      	str	r2, [r4, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fa fe02 	bl	80013d0 <_lseek>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_lseek_r+0x1e>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_lseek_r+0x1e>
 80067d4:	602b      	str	r3, [r5, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20004564 	.word	0x20004564

080067dc <__swhatbuf_r>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	460e      	mov	r6, r1
 80067e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e4:	2900      	cmp	r1, #0
 80067e6:	b096      	sub	sp, #88	; 0x58
 80067e8:	4614      	mov	r4, r2
 80067ea:	461d      	mov	r5, r3
 80067ec:	da07      	bge.n	80067fe <__swhatbuf_r+0x22>
 80067ee:	2300      	movs	r3, #0
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	89b3      	ldrh	r3, [r6, #12]
 80067f4:	061a      	lsls	r2, r3, #24
 80067f6:	d410      	bmi.n	800681a <__swhatbuf_r+0x3e>
 80067f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067fc:	e00e      	b.n	800681c <__swhatbuf_r+0x40>
 80067fe:	466a      	mov	r2, sp
 8006800:	f000 f8f2 	bl	80069e8 <_fstat_r>
 8006804:	2800      	cmp	r0, #0
 8006806:	dbf2      	blt.n	80067ee <__swhatbuf_r+0x12>
 8006808:	9a01      	ldr	r2, [sp, #4]
 800680a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800680e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006812:	425a      	negs	r2, r3
 8006814:	415a      	adcs	r2, r3
 8006816:	602a      	str	r2, [r5, #0]
 8006818:	e7ee      	b.n	80067f8 <__swhatbuf_r+0x1c>
 800681a:	2340      	movs	r3, #64	; 0x40
 800681c:	2000      	movs	r0, #0
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	b016      	add	sp, #88	; 0x58
 8006822:	bd70      	pop	{r4, r5, r6, pc}

08006824 <__smakebuf_r>:
 8006824:	898b      	ldrh	r3, [r1, #12]
 8006826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006828:	079d      	lsls	r5, r3, #30
 800682a:	4606      	mov	r6, r0
 800682c:	460c      	mov	r4, r1
 800682e:	d507      	bpl.n	8006840 <__smakebuf_r+0x1c>
 8006830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	6123      	str	r3, [r4, #16]
 8006838:	2301      	movs	r3, #1
 800683a:	6163      	str	r3, [r4, #20]
 800683c:	b002      	add	sp, #8
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	ab01      	add	r3, sp, #4
 8006842:	466a      	mov	r2, sp
 8006844:	f7ff ffca 	bl	80067dc <__swhatbuf_r>
 8006848:	9900      	ldr	r1, [sp, #0]
 800684a:	4605      	mov	r5, r0
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff f959 	bl	8005b04 <_malloc_r>
 8006852:	b948      	cbnz	r0, 8006868 <__smakebuf_r+0x44>
 8006854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006858:	059a      	lsls	r2, r3, #22
 800685a:	d4ef      	bmi.n	800683c <__smakebuf_r+0x18>
 800685c:	f023 0303 	bic.w	r3, r3, #3
 8006860:	f043 0302 	orr.w	r3, r3, #2
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	e7e3      	b.n	8006830 <__smakebuf_r+0xc>
 8006868:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <__smakebuf_r+0x7c>)
 800686a:	62b3      	str	r3, [r6, #40]	; 0x28
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	6020      	str	r0, [r4, #0]
 8006870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	9b00      	ldr	r3, [sp, #0]
 8006878:	6163      	str	r3, [r4, #20]
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	6120      	str	r0, [r4, #16]
 800687e:	b15b      	cbz	r3, 8006898 <__smakebuf_r+0x74>
 8006880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006884:	4630      	mov	r0, r6
 8006886:	f000 f8c1 	bl	8006a0c <_isatty_r>
 800688a:	b128      	cbz	r0, 8006898 <__smakebuf_r+0x74>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	431d      	orrs	r5, r3
 800689c:	81a5      	strh	r5, [r4, #12]
 800689e:	e7cd      	b.n	800683c <__smakebuf_r+0x18>
 80068a0:	080059b9 	.word	0x080059b9

080068a4 <memmove>:
 80068a4:	4288      	cmp	r0, r1
 80068a6:	b510      	push	{r4, lr}
 80068a8:	eb01 0302 	add.w	r3, r1, r2
 80068ac:	d807      	bhi.n	80068be <memmove+0x1a>
 80068ae:	1e42      	subs	r2, r0, #1
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d00a      	beq.n	80068ca <memmove+0x26>
 80068b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80068bc:	e7f8      	b.n	80068b0 <memmove+0xc>
 80068be:	4283      	cmp	r3, r0
 80068c0:	d9f5      	bls.n	80068ae <memmove+0xa>
 80068c2:	1881      	adds	r1, r0, r2
 80068c4:	1ad2      	subs	r2, r2, r3
 80068c6:	42d3      	cmn	r3, r2
 80068c8:	d100      	bne.n	80068cc <memmove+0x28>
 80068ca:	bd10      	pop	{r4, pc}
 80068cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80068d4:	e7f7      	b.n	80068c6 <memmove+0x22>

080068d6 <__malloc_lock>:
 80068d6:	4770      	bx	lr

080068d8 <__malloc_unlock>:
 80068d8:	4770      	bx	lr
	...

080068dc <_free_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4605      	mov	r5, r0
 80068e0:	2900      	cmp	r1, #0
 80068e2:	d045      	beq.n	8006970 <_free_r+0x94>
 80068e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e8:	1f0c      	subs	r4, r1, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bfb8      	it	lt
 80068ee:	18e4      	addlt	r4, r4, r3
 80068f0:	f7ff fff1 	bl	80068d6 <__malloc_lock>
 80068f4:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <_free_r+0x98>)
 80068f6:	6813      	ldr	r3, [r2, #0]
 80068f8:	4610      	mov	r0, r2
 80068fa:	b933      	cbnz	r3, 800690a <_free_r+0x2e>
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	6014      	str	r4, [r2, #0]
 8006900:	4628      	mov	r0, r5
 8006902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006906:	f7ff bfe7 	b.w	80068d8 <__malloc_unlock>
 800690a:	42a3      	cmp	r3, r4
 800690c:	d90c      	bls.n	8006928 <_free_r+0x4c>
 800690e:	6821      	ldr	r1, [r4, #0]
 8006910:	1862      	adds	r2, r4, r1
 8006912:	4293      	cmp	r3, r2
 8006914:	bf04      	itt	eq
 8006916:	681a      	ldreq	r2, [r3, #0]
 8006918:	685b      	ldreq	r3, [r3, #4]
 800691a:	6063      	str	r3, [r4, #4]
 800691c:	bf04      	itt	eq
 800691e:	1852      	addeq	r2, r2, r1
 8006920:	6022      	streq	r2, [r4, #0]
 8006922:	6004      	str	r4, [r0, #0]
 8006924:	e7ec      	b.n	8006900 <_free_r+0x24>
 8006926:	4613      	mov	r3, r2
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	b10a      	cbz	r2, 8006930 <_free_r+0x54>
 800692c:	42a2      	cmp	r2, r4
 800692e:	d9fa      	bls.n	8006926 <_free_r+0x4a>
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	1858      	adds	r0, r3, r1
 8006934:	42a0      	cmp	r0, r4
 8006936:	d10b      	bne.n	8006950 <_free_r+0x74>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	4401      	add	r1, r0
 800693c:	1858      	adds	r0, r3, r1
 800693e:	4282      	cmp	r2, r0
 8006940:	6019      	str	r1, [r3, #0]
 8006942:	d1dd      	bne.n	8006900 <_free_r+0x24>
 8006944:	6810      	ldr	r0, [r2, #0]
 8006946:	6852      	ldr	r2, [r2, #4]
 8006948:	605a      	str	r2, [r3, #4]
 800694a:	4401      	add	r1, r0
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	e7d7      	b.n	8006900 <_free_r+0x24>
 8006950:	d902      	bls.n	8006958 <_free_r+0x7c>
 8006952:	230c      	movs	r3, #12
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	e7d3      	b.n	8006900 <_free_r+0x24>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	1821      	adds	r1, r4, r0
 800695c:	428a      	cmp	r2, r1
 800695e:	bf04      	itt	eq
 8006960:	6811      	ldreq	r1, [r2, #0]
 8006962:	6852      	ldreq	r2, [r2, #4]
 8006964:	6062      	str	r2, [r4, #4]
 8006966:	bf04      	itt	eq
 8006968:	1809      	addeq	r1, r1, r0
 800696a:	6021      	streq	r1, [r4, #0]
 800696c:	605c      	str	r4, [r3, #4]
 800696e:	e7c7      	b.n	8006900 <_free_r+0x24>
 8006970:	bd38      	pop	{r3, r4, r5, pc}
 8006972:	bf00      	nop
 8006974:	2000425c 	.word	0x2000425c

08006978 <_realloc_r>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	4607      	mov	r7, r0
 800697c:	4614      	mov	r4, r2
 800697e:	460e      	mov	r6, r1
 8006980:	b921      	cbnz	r1, 800698c <_realloc_r+0x14>
 8006982:	4611      	mov	r1, r2
 8006984:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006988:	f7ff b8bc 	b.w	8005b04 <_malloc_r>
 800698c:	b922      	cbnz	r2, 8006998 <_realloc_r+0x20>
 800698e:	f7ff ffa5 	bl	80068dc <_free_r>
 8006992:	4625      	mov	r5, r4
 8006994:	4628      	mov	r0, r5
 8006996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006998:	f000 f848 	bl	8006a2c <_malloc_usable_size_r>
 800699c:	42a0      	cmp	r0, r4
 800699e:	d20f      	bcs.n	80069c0 <_realloc_r+0x48>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4638      	mov	r0, r7
 80069a4:	f7ff f8ae 	bl	8005b04 <_malloc_r>
 80069a8:	4605      	mov	r5, r0
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d0f2      	beq.n	8006994 <_realloc_r+0x1c>
 80069ae:	4631      	mov	r1, r6
 80069b0:	4622      	mov	r2, r4
 80069b2:	f7fe ff53 	bl	800585c <memcpy>
 80069b6:	4631      	mov	r1, r6
 80069b8:	4638      	mov	r0, r7
 80069ba:	f7ff ff8f 	bl	80068dc <_free_r>
 80069be:	e7e9      	b.n	8006994 <_realloc_r+0x1c>
 80069c0:	4635      	mov	r5, r6
 80069c2:	e7e7      	b.n	8006994 <_realloc_r+0x1c>

080069c4 <_read_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4c07      	ldr	r4, [pc, #28]	; (80069e4 <_read_r+0x20>)
 80069c8:	4605      	mov	r5, r0
 80069ca:	4608      	mov	r0, r1
 80069cc:	4611      	mov	r1, r2
 80069ce:	2200      	movs	r2, #0
 80069d0:	6022      	str	r2, [r4, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f7fa fc9c 	bl	8001310 <_read>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_read_r+0x1e>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_read_r+0x1e>
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	20004564 	.word	0x20004564

080069e8 <_fstat_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4c07      	ldr	r4, [pc, #28]	; (8006a08 <_fstat_r+0x20>)
 80069ec:	2300      	movs	r3, #0
 80069ee:	4605      	mov	r5, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	4611      	mov	r1, r2
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	f7fa fcd0 	bl	800139a <_fstat>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d102      	bne.n	8006a04 <_fstat_r+0x1c>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	b103      	cbz	r3, 8006a04 <_fstat_r+0x1c>
 8006a02:	602b      	str	r3, [r5, #0]
 8006a04:	bd38      	pop	{r3, r4, r5, pc}
 8006a06:	bf00      	nop
 8006a08:	20004564 	.word	0x20004564

08006a0c <_isatty_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4c06      	ldr	r4, [pc, #24]	; (8006a28 <_isatty_r+0x1c>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4605      	mov	r5, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	f7fa fccf 	bl	80013ba <_isatty>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_isatty_r+0x1a>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_isatty_r+0x1a>
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	20004564 	.word	0x20004564

08006a2c <_malloc_usable_size_r>:
 8006a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a30:	1f18      	subs	r0, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bfbc      	itt	lt
 8006a36:	580b      	ldrlt	r3, [r1, r0]
 8006a38:	18c0      	addlt	r0, r0, r3
 8006a3a:	4770      	bx	lr

08006a3c <_init>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr

08006a48 <_fini>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	bf00      	nop
 8006a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4e:	bc08      	pop	{r3}
 8006a50:	469e      	mov	lr, r3
 8006a52:	4770      	bx	lr

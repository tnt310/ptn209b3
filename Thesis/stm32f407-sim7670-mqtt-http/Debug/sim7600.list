
sim7600.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f4  080073f4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073fc  080073fc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007400  08007400  00017400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000441c  20000094  08007498  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044b0  08007498  000244b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192a5  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa2  00000000  00000000  00039369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003ce10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024990  00000000  00000000  0003f298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014491  00000000  00000000  00063c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4492  00000000  00000000  000780b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c54b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ac  00000000  00000000  0014c5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ee0 	.word	0x08006ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08006ee0 	.word	0x08006ee0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <netsimTask>:
const char *down_pro = "downstream/provision";

void netsimTask(void *arg);

void netsimTask(void *arg)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af02      	add	r7, sp, #8
 800057e:	6078      	str	r0, [r7, #4]
	//printf("\r\n netsimTask \r\n");
	xQueueControl_t xQueueControl;
	uint8_t uiSysState;
	xQueueControl.xTask = netSIMTask;
 8000580:	4b33      	ldr	r3, [pc, #204]	; (8000650 <netsimTask+0xd8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
	/*Waiting for controller start this task*/
	do {
		osDelay(10);
 8000586:	200a      	movs	r0, #10
 8000588:	f003 fa5f 	bl	8003a4a <osDelay>
		xQueuePeek(xQueueMessageHandle, &uiSysState, 0);
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <netsimTask+0xdc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000594:	2200      	movs	r2, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fe66 	bl	8004268 <xQueuePeek>
	}
	while (uiSysState != SYS_SIM_TASK);
 800059c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d1f0      	bne.n	8000586 <netsimTask+0xe>
	xQueueReceive(xQueueMessageHandle, &uiSysState, 0);
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <netsimTask+0xdc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80005ac:	2200      	movs	r2, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fd7a 	bl	80040a8 <xQueueReceive>
	//printf("\r\b SIM Service starting \r\n");
	/*Starting initial*/
	INIT_SIM7600();   // HERE
 80005b4:	f000 fbf6 	bl	8000da4 <INIT_SIM7600>
	sim7600_info_t sim7600_client;
	sim7600_client.client_id = mqtt_id;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <netsimTask+0xe0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60bb      	str	r3, [r7, #8]
	sim7600_client.client_user = mqtt_user;
 80005be:	4b27      	ldr	r3, [pc, #156]	; (800065c <netsimTask+0xe4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	60fb      	str	r3, [r7, #12]
	sim7600_client.client_pass = mqtt_password;
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <netsimTask+0xe8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	613b      	str	r3, [r7, #16]
	sim7600_client.port= u16_mqtt_port;
 80005ca:	f644 439d 	movw	r3, #19613	; 0x4c9d
 80005ce:	82bb      	strh	r3, [r7, #20]
	sim7600_client.keepalive = 1000;
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	82fb      	strh	r3, [r7, #22]
	sim7600_client.will_topic = NULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
	sim7600_client.qos = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	773b      	strb	r3, [r7, #28]
	sim7600_client.retain = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	777b      	strb	r3, [r7, #29]
	uint8_t state = SIM7600_NEW_CONNECTION(client,server,sim7600_client.client_user,sim7600_client.client_pass,sim7600_client.port,sim7600_client.keepalive);
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <netsimTask+0xec>)
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <netsimTask+0xf0>)
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	68fc      	ldr	r4, [r7, #12]
 80005ec:	693d      	ldr	r5, [r7, #16]
 80005ee:	8abb      	ldrh	r3, [r7, #20]
 80005f0:	8afa      	ldrh	r2, [r7, #22]
 80005f2:	9201      	str	r2, [sp, #4]
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	462b      	mov	r3, r5
 80005f8:	4622      	mov	r2, r4
 80005fa:	f000 fbf3 	bl	8000de4 <SIM7600_NEW_CONNECTION>
 80005fe:	4603      	mov	r3, r0
 8000600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (state == 1) {
 8000604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000608:	2b01      	cmp	r3, #1
 800060a:	d115      	bne.n	8000638 <netsimTask+0xc0>
		SUBSCRIBE(command,sim7600_client.qos);
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <netsimTask+0xf4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	7f3a      	ldrb	r2, [r7, #28]
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fcf5 	bl	8001004 <SUBSCRIBE>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <netsimTask+0xf8>)
 8000620:	f001 fbd1 	bl	8001dc6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 ff67 	bl	80014f8 <HAL_Delay>
		SUBSCRIBE(down_pro,sim7600_client.qos);
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <netsimTask+0xfc>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	7f3a      	ldrb	r2, [r7, #28]
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fce6 	bl	8001004 <SUBSCRIBE>
	} else {
		//printf("\r\n Failed to connect to MQTT server with er: %d", er);
	}
	/*Notify controller the starting is successful*/
	xQueueControl.xState = TASK_RUNNING;
 8000638:	2302      	movs	r3, #2
 800063a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	xQueueSend(xQueueControlHandle, &xQueueControl, 10);
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <netsimTask+0x100>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000646:	2300      	movs	r3, #0
 8000648:	220a      	movs	r2, #10
 800064a:	f003 fc2f 	bl	8003eac <xQueueGenericSend>
	#define port_DEFAULT_DELAY 	1000
	/*a loop in mqtt_modbus_thread_up(); function*/
	//MQTT_SIM7600_UPSTREAM(telemetry, provision, sim7600_client.qos);
	//SIM7600_PUBLISH_PACKET(tel_topic,sim7600_client.qos);
	while (1)
 800064e:	e7fe      	b.n	800064e <netsimTask+0xd6>
 8000650:	20004068 	.word	0x20004068
 8000654:	2000417c 	.word	0x2000417c
 8000658:	20000008 	.word	0x20000008
 800065c:	2000000c 	.word	0x2000000c
 8000660:	20000010 	.word	0x20000010
 8000664:	20000000 	.word	0x20000000
 8000668:	20000004 	.word	0x20000004
 800066c:	20000014 	.word	0x20000014
 8000670:	40020c00 	.word	0x40020c00
 8000674:	20000018 	.word	0x20000018
 8000678:	20004134 	.word	0x20004134

0800067c <UARTIntHandler>:
uint8_t commandBuffer[MAX_BUFFER_VALUE];
uint32_t commandBufferIndex = 0;
uint32_t gotCommandFlag = 0;
/***************************************Response from SIM7600**************************************************************/
void UARTIntHandler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
	uint8_t receivedChar;
	receivedChar = (uint8_t) ((huart2).Instance->DR & (uint8_t) 0x00FF);
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <UARTIntHandler+0x64>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <UARTIntHandler+0x64>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68da      	ldr	r2, [r3, #12]
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <UARTIntHandler+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f042 0220 	orr.w	r2, r2, #32
 8000698:	60da      	str	r2, [r3, #12]
	if (receivedChar != '\n') {
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b0a      	cmp	r3, #10
 800069e:	d00a      	beq.n	80006b6 <UARTIntHandler+0x3a>
		commandBuffer[commandBufferIndex] = receivedChar;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <UARTIntHandler+0x68>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4910      	ldr	r1, [pc, #64]	; (80006e8 <UARTIntHandler+0x6c>)
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	54ca      	strb	r2, [r1, r3]
		commandBufferIndex++;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <UARTIntHandler+0x68>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <UARTIntHandler+0x68>)
 80006b2:	6013      	str	r3, [r2, #0]
			commandBuffer[commandBufferIndex] = 0;
			commandBufferIndex = 0;
			gotCommandFlag = 1;
		}
	}
}
 80006b4:	e00e      	b.n	80006d4 <UARTIntHandler+0x58>
		if (commandBufferIndex != 0) {
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <UARTIntHandler+0x68>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00a      	beq.n	80006d4 <UARTIntHandler+0x58>
			commandBuffer[commandBufferIndex] = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <UARTIntHandler+0x68>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <UARTIntHandler+0x6c>)
 80006c4:	2100      	movs	r1, #0
 80006c6:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex = 0;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <UARTIntHandler+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
			gotCommandFlag = 1;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <UARTIntHandler+0x70>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	20004220 	.word	0x20004220
 80006e4:	200000b0 	.word	0x200000b0
 80006e8:	2000406c 	.word	0x2000406c
 80006ec:	200000b4 	.word	0x200000b4

080006f0 <sendATcommand>:
/*---------------------------------------------------------------------------------------------------------------------------*/
uint8_t sendATcommand(char* ATcommand, uint32_t timeout)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,100);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff fd68 	bl	80001d0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29b      	uxth	r3, r3
 8000704:	3301      	adds	r3, #1
 8000706:	b29a      	uxth	r2, r3
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <sendATcommand+0x3c>)
 800070e:	f002 fa72 	bl	8002bf6 <HAL_UART_Transmit>
	HAL_Delay(timeout);
 8000712:	6838      	ldr	r0, [r7, #0]
 8000714:	f000 fef0 	bl	80014f8 <HAL_Delay>
	memset(commandBuffer,0,sizeof(commandBuffer));
 8000718:	22c8      	movs	r2, #200	; 0xc8
 800071a:	2100      	movs	r1, #0
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <sendATcommand+0x40>)
 800071e:	f005 fc4c 	bl	8005fba <memset>
	}
 8000722:	bf00      	nop
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20004220 	.word	0x20004220
 8000730:	2000406c 	.word	0x2000406c

08000734 <sendATcommand1>:
/*---------------------Send AT command---------------------------------------------------------------------------------------*/
uint8_t sendATcommand1(char* ATcommand,char *respect_answer_1, uint32_t timeout)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
	volatile uint8_t answer = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,100);
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff fd43 	bl	80001d0 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29b      	uxth	r3, r3
 800074e:	3301      	adds	r3, #1
 8000750:	b29a      	uxth	r2, r3
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	68f9      	ldr	r1, [r7, #12]
 8000756:	481d      	ldr	r0, [pc, #116]	; (80007cc <sendATcommand1+0x98>)
 8000758:	f002 fa4d 	bl	8002bf6 <HAL_UART_Transmit>
	uint32_t  tickstart = HAL_GetTick();
 800075c:	f000 fec0 	bl	80014e0 <HAL_GetTick>
 8000760:	6178      	str	r0, [r7, #20]
	timeout += (uint32_t)(uwTickFreq); // HERE
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <sendATcommand1+0x9c>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4413      	add	r3, r2
 800076c:	607b      	str	r3, [r7, #4]
	do
	{
		if (gotCommandFlag == 1)
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <sendATcommand1+0xa0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d108      	bne.n	8000788 <sendATcommand1+0x54>
		{
			if (strstr(commandBuffer,respect_answer_1) != NULL){
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	4817      	ldr	r0, [pc, #92]	; (80007d8 <sendATcommand1+0xa4>)
 800077a:	f005 fd70 	bl	800625e <strstr>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <sendATcommand1+0x54>
				answer = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	74fb      	strb	r3, [r7, #19]
			}
			else{
			}
		}
	}
	while((answer == 0) && ((HAL_GetTick() - tickstart) < timeout));
 8000788:	7cfb      	ldrb	r3, [r7, #19]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d107      	bne.n	80007a0 <sendATcommand1+0x6c>
 8000790:	f000 fea6 	bl	80014e0 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8e6      	bhi.n	800076e <sendATcommand1+0x3a>
	gotCommandFlag = 0;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <sendATcommand1+0xa0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
	commandBuffer[commandBufferIndex] = 0;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <sendATcommand1+0xa8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <sendATcommand1+0xa4>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	54d1      	strb	r1, [r2, r3]
	commandBufferIndex = 0;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <sendATcommand1+0xa8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
	memset(commandBuffer,0,sizeof(commandBuffer));
 80007b6:	22c8      	movs	r2, #200	; 0xc8
 80007b8:	2100      	movs	r1, #0
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <sendATcommand1+0xa4>)
 80007bc:	f005 fbfd 	bl	8005fba <memset>
	return answer;
 80007c0:	7cfb      	ldrb	r3, [r7, #19]
 80007c2:	b2db      	uxtb	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20004220 	.word	0x20004220
 80007d0:	20000028 	.word	0x20000028
 80007d4:	200000b4 	.word	0x200000b4
 80007d8:	2000406c 	.word	0x2000406c
 80007dc:	200000b0 	.word	0x200000b0

080007e0 <sendATcommand2>:
/*---------------------Send AT command with 2 respect_answer------------------------------------------------------------------*/
uint8_t sendATcommand2(char* ATcommand,char *respect_answer_1,char *respect_answer_2,uint32_t timeout)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	603b      	str	r3, [r7, #0]
	uint8_t status;
	volatile uint8_t answer = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,100);
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	3301      	adds	r3, #1
 80007fe:	b29a      	uxth	r2, r3
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	68f9      	ldr	r1, [r7, #12]
 8000804:	481f      	ldr	r0, [pc, #124]	; (8000884 <sendATcommand2+0xa4>)
 8000806:	f002 f9f6 	bl	8002bf6 <HAL_UART_Transmit>
	uint32_t  tickstart = HAL_GetTick();
 800080a:	f000 fe69 	bl	80014e0 <HAL_GetTick>
 800080e:	6178      	str	r0, [r7, #20]
	timeout += (uint32_t)(uwTickFreq); // HERE
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <sendATcommand2+0xa8>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	4413      	add	r3, r2
 800081a:	603b      	str	r3, [r7, #0]
	do
	{
		if (gotCommandFlag == 1)
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <sendATcommand2+0xac>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d112      	bne.n	800084a <sendATcommand2+0x6a>
		{
			if (strstr(commandBuffer,respect_answer_1) != NULL){
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	481a      	ldr	r0, [pc, #104]	; (8000890 <sendATcommand2+0xb0>)
 8000828:	f005 fd19 	bl	800625e <strstr>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <sendATcommand2+0x58>
				answer = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	74fb      	strb	r3, [r7, #19]
 8000836:	e008      	b.n	800084a <sendATcommand2+0x6a>
			}
			else if (strstr(commandBuffer,respect_answer_2) != NULL){
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	4815      	ldr	r0, [pc, #84]	; (8000890 <sendATcommand2+0xb0>)
 800083c:	f005 fd0f 	bl	800625e <strstr>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <sendATcommand2+0x6a>
				answer = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	74fb      	strb	r3, [r7, #19]
			}
		}
	}
	while((answer == 0) && ((HAL_GetTick() - tickstart) < timeout));
 800084a:	7cfb      	ldrb	r3, [r7, #19]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d107      	bne.n	8000862 <sendATcommand2+0x82>
 8000852:	f000 fe45 	bl	80014e0 <HAL_GetTick>
 8000856:	4602      	mov	r2, r0
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d8dc      	bhi.n	800081c <sendATcommand2+0x3c>
	gotCommandFlag = 0;
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <sendATcommand2+0xac>)
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
	commandBufferIndex = 0;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <sendATcommand2+0xb4>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
	memset(commandBuffer,0,sizeof(commandBuffer));
 800086e:	22c8      	movs	r2, #200	; 0xc8
 8000870:	2100      	movs	r1, #0
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <sendATcommand2+0xb0>)
 8000874:	f005 fba1 	bl	8005fba <memset>
	return answer;
 8000878:	7cfb      	ldrb	r3, [r7, #19]
 800087a:	b2db      	uxtb	r3, r3
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20004220 	.word	0x20004220
 8000888:	20000028 	.word	0x20000028
 800088c:	200000b4 	.word	0x200000b4
 8000890:	2000406c 	.word	0x2000406c
 8000894:	200000b0 	.word	0x200000b0

08000898 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80008a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <vApplicationGetIdleTaskMemory+0x30>)
 80008ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	200000b8 	.word	0x200000b8
 80008c8:	2000010c 	.word	0x2000010c

080008cc <MX_FREERTOS_Init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MX_FREERTOS_Init(void) {
 80008cc:	b5b0      	push	{r4, r5, r7, lr}
 80008ce:	b098      	sub	sp, #96	; 0x60
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */

	osMessageQDef(xQueueControl, 1, xQueueControl_t);
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_FREERTOS_Init+0xbc>)
 80008d4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80008d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueControlHandle = osMessageCreate(osMessageQ(xQueueControl), NULL);
 80008de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 f8c4 	bl	8003a72 <osMessageCreate>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a27      	ldr	r2, [pc, #156]	; (800098c <MX_FREERTOS_Init+0xc0>)
 80008ee:	6013      	str	r3, [r2, #0]

	osMessageQDef(xQueueMessage, 1, uint8_t);
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_FREERTOS_Init+0xc4>)
 80008f2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80008f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueMessageHandle = osMessageCreate(osMessageQ(xQueueMessage), NULL);
 80008fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f003 f8b5 	bl	8003a72 <osMessageCreate>
 8000908:	4603      	mov	r3, r0
 800090a:	4a22      	ldr	r2, [pc, #136]	; (8000994 <MX_FREERTOS_Init+0xc8>)
 800090c:	6013      	str	r3, [r2, #0]

	osMessageQDef(xQueueDownlink, 1, xQueueMbMqtt_t);
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_FREERTOS_Init+0xcc>)
 8000910:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000914:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000916:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueDownlinkHandle = osMessageCreate(osMessageQ(xQueueDownlink), NULL);
 800091a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f8a6 	bl	8003a72 <osMessageCreate>
 8000926:	4603      	mov	r3, r0
 8000928:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_FREERTOS_Init+0xd0>)
 800092a:	6013      	str	r3, [r2, #0]

	osMessageQDef(xQueueUplink, 1, xQueueMbMqtt_t);
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_FREERTOS_Init+0xcc>)
 800092e:	f107 0420 	add.w	r4, r7, #32
 8000932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueUplinkHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f003 f897 	bl	8003a72 <osMessageCreate>
 8000944:	4603      	mov	r3, r0
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <MX_FREERTOS_Init+0xd4>)
 8000948:	6013      	str	r3, [r2, #0]

	osMessageQDef(xQueueReset, 1, sizeof(uint32_t));
	xQueueResetHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f003 f88e 	bl	8003a72 <osMessageCreate>
 8000956:	4603      	mov	r3, r0
 8000958:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_FREERTOS_Init+0xd8>)
 800095a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_FREERTOS_Init+0xdc>)
 800095e:	1d3c      	adds	r4, r7, #4
 8000960:	461d      	mov	r5, r3
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f003 f81d 	bl	80039b2 <osThreadCreate>
 8000978:	4603      	mov	r3, r0
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <MX_FREERTOS_Init+0xe0>)
 800097c:	6013      	str	r3, [r2, #0]
}
 800097e:	bf00      	nop
 8000980:	3760      	adds	r7, #96	; 0x60
 8000982:	46bd      	mov	sp, r7
 8000984:	bdb0      	pop	{r4, r5, r7, pc}
 8000986:	bf00      	nop
 8000988:	08006fa4 	.word	0x08006fa4
 800098c:	20004134 	.word	0x20004134
 8000990:	08006fb4 	.word	0x08006fb4
 8000994:	2000417c 	.word	0x2000417c
 8000998:	08006fc4 	.word	0x08006fc4
 800099c:	20004140 	.word	0x20004140
 80009a0:	20004144 	.word	0x20004144
 80009a4:	2000413c 	.word	0x2000413c
 80009a8:	08006fd4 	.word	0x08006fd4
 80009ac:	20004138 	.word	0x20004138

080009b0 <StartDefaultTask>:
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
 void StartDefaultTask(void const * argument)
  {
 80009b0:	b5b0      	push	{r4, r5, r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartDefaultTask */
  	/*Create Task Modules in this line*/
  	/*SIm serive*/
  	osThreadDef(netSIMTask, netsimTask, osPriorityNormal, 0, 4 * 128);
 80009b8:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <StartDefaultTask+0x104>)
 80009ba:	f107 0414 	add.w	r4, r7, #20
 80009be:	461d      	mov	r5, r3
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	netSIMTask = osThreadCreate(osThread(netSIMTask), NULL);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 ffed 	bl	80039b2 <osThreadCreate>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <StartDefaultTask+0x108>)
 80009dc:	6013      	str	r3, [r2, #0]
  	printf("\r\n MemFree: %d", xPortGetFreeHeapSize());
 80009de:	f005 f831 	bl	8005a44 <xPortGetFreeHeapSize>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4619      	mov	r1, r3
 80009e6:	4835      	ldr	r0, [pc, #212]	; (8000abc <StartDefaultTask+0x10c>)
 80009e8:	f005 fb9a 	bl	8006120 <iprintf>

  	/*Controller*/
  	xQueueControl_t xQueueControl;
  	#define PORT_DEFAULT_DELAY	1000
  	uint8_t uiSysState = SYS_START;
 80009ec:	2300      	movs	r3, #0
 80009ee:	72fb      	strb	r3, [r7, #11]
  	uint8_t uiSysUpdate = FALSE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  	BaseType_t sysError;
  	/* Infinite loop */
  	for (;;) {
  		switch (uiSysState) {
 80009f6:	7afb      	ldrb	r3, [r7, #11]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d033      	beq.n	8000a64 <StartDefaultTask+0xb4>
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	dc45      	bgt.n	8000a8c <StartDefaultTask+0xdc>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <StartDefaultTask+0x5a>
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d008      	beq.n	8000a1a <StartDefaultTask+0x6a>
 8000a08:	e040      	b.n	8000a8c <StartDefaultTask+0xdc>
  		case SYS_START:
  			//printf("\r\n Task Controller: Implementing...  \r\n");
  			uiSysUpdate = TRUE;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  			uiSysState++;
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	72fb      	strb	r3, [r7, #11]
  			break;
 8000a18:	e038      	b.n	8000a8c <StartDefaultTask+0xdc>
  		case SYS_SIM_TASK:
  			//printf("\r\n Starting netMQTTTask module:  \r\n");
  			sysError = xQueueReceive(xQueueControlHandle, &xQueueControl,portMAX_DELAY);
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <StartDefaultTask+0x110>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f107 010c 	add.w	r1, r7, #12
 8000a22:	f04f 32ff 	mov.w	r2, #4294967295
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fb3e 	bl	80040a8 <xQueueReceive>
 8000a2c:	6338      	str	r0, [r7, #48]	; 0x30
  			if (sysError == pdTRUE) {
 8000a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10f      	bne.n	8000a54 <StartDefaultTask+0xa4>
  				if ((xQueueControl.xState == TASK_RUNNING) && (xQueueControl.xTask == netSIMTask)) {
 8000a34:	7c3b      	ldrb	r3, [r7, #16]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d127      	bne.n	8000a8a <StartDefaultTask+0xda>
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <StartDefaultTask+0x108>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d122      	bne.n	8000a8a <StartDefaultTask+0xda>
  					//printf("\r\n Starting netMQTTTask module: OK \r\n");
  					uiSysUpdate = TRUE;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  					uiSysState++;
 8000a4a:	7afb      	ldrb	r3, [r7, #11]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	72fb      	strb	r3, [r7, #11]
  				}
  			} else {
  					uiSysUpdate = TRUE;
  					uiSysState++;
  			}
  			break;
 8000a52:	e01a      	b.n	8000a8a <StartDefaultTask+0xda>
  					uiSysUpdate = TRUE;
 8000a54:	2301      	movs	r3, #1
 8000a56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  					uiSysState++;
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	72fb      	strb	r3, [r7, #11]
  			break;
 8000a62:	e012      	b.n	8000a8a <StartDefaultTask+0xda>
  		case SYS_DEFAULT:
  			if (gotCommandFlag == 1) {
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <StartDefaultTask+0x114>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10a      	bne.n	8000a82 <StartDefaultTask+0xd2>
  				gotCommandFlag = 0;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <StartDefaultTask+0x114>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
  				//commandBufferIndex = 0;
  				HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a76:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <StartDefaultTask+0x118>)
 8000a78:	f001 f9a5 	bl	8001dc6 <HAL_GPIO_TogglePin>
  				HAL_Delay(100);
 8000a7c:	2064      	movs	r0, #100	; 0x64
 8000a7e:	f000 fd3b 	bl	80014f8 <HAL_Delay>
  				//GETJSON(payload, commandBuffer,"{","}");
  				//MQTT_SIM7600_DOWNSTREAM(payload,strlen(payload));
  				//char *EnterCMD = "\r\n>";
  				//HAL_UART_Transmit(&huart3, EnterCMD, 3, 100);
  			}
  			osDelay(10);
 8000a82:	200a      	movs	r0, #10
 8000a84:	f002 ffe1 	bl	8003a4a <osDelay>
  			break;
 8000a88:	e000      	b.n	8000a8c <StartDefaultTask+0xdc>
  			break;
 8000a8a:	bf00      	nop

  		}
  		if ((uiSysUpdate == TRUE) && (uiSysState != SYS_DEFAULT)) {
 8000a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d1b0      	bne.n	80009f6 <StartDefaultTask+0x46>
 8000a94:	7afb      	ldrb	r3, [r7, #11]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d0ad      	beq.n	80009f6 <StartDefaultTask+0x46>
  			xQueueSend(xQueueMessageHandle, &uiSysState, 0);
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <StartDefaultTask+0x11c>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f107 010b 	add.w	r1, r7, #11
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f003 fa01 	bl	8003eac <xQueueGenericSend>
  			uiSysUpdate = FALSE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  		switch (uiSysState) {
 8000ab0:	e7a1      	b.n	80009f6 <StartDefaultTask+0x46>
 8000ab2:	bf00      	nop
 8000ab4:	08007000 	.word	0x08007000
 8000ab8:	20004068 	.word	0x20004068
 8000abc:	08006ff0 	.word	0x08006ff0
 8000ac0:	20004134 	.word	0x20004134
 8000ac4:	200000b4 	.word	0x200000b4
 8000ac8:	40020c00 	.word	0x40020c00
 8000acc:	2000417c 	.word	0x2000417c

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad4:	f000 fcce 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad8:	f000 f818 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000adc:	f000 f8c8 	bl	8000c70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae0:	f000 f918 	bl	8000d14 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000ae4:	f000 f870 	bl	8000bc8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000ae8:	f000 f898 	bl	8000c1c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <main+0x38>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <main+0x38>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0220 	orr.w	r2, r2, #32
 8000afa:	60da      	str	r2, [r3, #12]
  MX_FREERTOS_Init();
 8000afc:	f7ff fee6 	bl	80008cc <MX_FREERTOS_Init>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b00:	f002 ff50 	bl	80039a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <main+0x34>
 8000b06:	bf00      	nop
 8000b08:	20004220 	.word	0x20004220

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	2230      	movs	r2, #48	; 0x30
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fa4d 	bl	8005fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <SystemClock_Config+0xb4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <SystemClock_Config+0xb4>)
 8000b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <SystemClock_Config+0xb4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <SystemClock_Config+0xb8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <SystemClock_Config+0xb8>)
 8000b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <SystemClock_Config+0xb8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b70:	2310      	movs	r3, #16
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 f93d 	bl	8001dfc <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b88:	f000 f904 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fb98 	bl	80022dc <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bb2:	f000 f8ef 	bl	8000d94 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	; 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <MX_USART3_UART_Init>:
static void MX_USART3_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart3.Instance = USART3;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_USART3_UART_Init+0x50>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000bd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART3_UART_Init+0x4c>)
 8000c00:	f001 ffac 	bl	8002b5c <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f8c3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200041e0 	.word	0x200041e0
 8000c18:	40004800 	.word	0x40004800

08000c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_USART2_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f001 ff82 	bl	8002b5c <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f000 f899 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20004220 	.word	0x20004220
 8000c6c:	40004400 	.word	0x40004400

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000ce2:	f001 f857 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ce6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000d00:	f000 feac 	bl	8001a5c <HAL_GPIO_Init>

}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_DMA_Init+0x58>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_DMA_Init+0x58>)
 8000d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_DMA_Init+0x58>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_DMA_Init+0x58>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <MX_DMA_Init+0x58>)
 8000d40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_DMA_Init+0x58>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2010      	movs	r0, #16
 8000d58:	f000 fcaa 	bl	80016b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d5c:	2010      	movs	r0, #16
 8000d5e:	f000 fcc3 	bl	80016e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d82:	f000 fb99 	bl	80014b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40010000 	.word	0x40010000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <INIT_SIM7600>:
/**AT+CPIN?<CR><LF>  kiểm tra SIM
 * AT+CREG?<CR><LF>  kiểm tra đăng ký mạng
 * AT+CSQ<CR><LF>  kiểm tra chất lượng mạng
 */
uint8_t INIT_SIM7600(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	sendATcommand("AT\r\n",500);
 8000da8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dac:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <INIT_SIM7600+0x34>)
 8000dae:	f7ff fc9f 	bl	80006f0 <sendATcommand>
	sendATcommand("AT\r\n",500);
 8000db2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <INIT_SIM7600+0x34>)
 8000db8:	f7ff fc9a 	bl	80006f0 <sendATcommand>
	sendATcommand("ATE0\r\n",500);
 8000dbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <INIT_SIM7600+0x38>)
 8000dc2:	f7ff fc95 	bl	80006f0 <sendATcommand>
	sendATcommand("AT&W\r\n",500);
 8000dc6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <INIT_SIM7600+0x3c>)
 8000dcc:	f7ff fc90 	bl	80006f0 <sendATcommand>
}
 8000dd0:	bf00      	nop
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	080071b4 	.word	0x080071b4
 8000ddc:	080071bc 	.word	0x080071bc
 8000de0:	080071c4 	.word	0x080071c4

08000de4 <SIM7600_NEW_CONNECTION>:
//AT+CMQTTSTART<CR><LF>
//AT+CMQTTACCQ=0,"SIMCom_client01",1<CR><LF>
//AT+CMQTTCONNECT=0,"tcp://m14.cloudmqtt.com:19613",180,1,"yktdxpqb","VKCG6yboYrYd"<CR><LF>

uint8_t SIM7600_NEW_CONNECTION(char *client,char *server,char *user, char *pass, uint16_t port, uint16_t keepalive)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b08f      	sub	sp, #60	; 0x3c
 8000de8:	af08      	add	r7, sp, #32
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	603b      	str	r3, [r7, #0]
	uint8_t mqtt = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
	uint8_t connect = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75bb      	strb	r3, [r7, #22]
	sendATcommand("AT+NETOPEN\r\n",500);
 8000dfa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dfe:	4854      	ldr	r0, [pc, #336]	; (8000f50 <SIM7600_NEW_CONNECTION+0x16c>)
 8000e00:	f7ff fc76 	bl	80006f0 <sendATcommand>
	sendATcommand("AT+CMQTTSTART\r\n",500);
 8000e04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e08:	4852      	ldr	r0, [pc, #328]	; (8000f54 <SIM7600_NEW_CONNECTION+0x170>)
 8000e0a:	f7ff fc71 	bl	80006f0 <sendATcommand>

	memset(aux_str,0,sizeof(aux_str));
 8000e0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e12:	2100      	movs	r1, #0
 8000e14:	4850      	ldr	r0, [pc, #320]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000e16:	f005 f8d0 	bl	8005fba <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTACCQ=%d,\"%s\"%s",index,client,"\r\n");
 8000e1a:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <SIM7600_NEW_CONNECTION+0x178>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b4f      	ldr	r3, [pc, #316]	; (8000f60 <SIM7600_NEW_CONNECTION+0x17c>)
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	4a4e      	ldr	r2, [pc, #312]	; (8000f64 <SIM7600_NEW_CONNECTION+0x180>)
 8000e2c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e30:	4849      	ldr	r0, [pc, #292]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000e32:	f005 f99d 	bl	8006170 <sniprintf>
	sendATcommand(aux_str,500);
 8000e36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e3a:	4847      	ldr	r0, [pc, #284]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000e3c:	f7ff fc58 	bl	80006f0 <sendATcommand>

	memset(aux_str,0,sizeof(aux_str));
 8000e40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e44:	2100      	movs	r1, #0
 8000e46:	4844      	ldr	r0, [pc, #272]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000e48:	f005 f8b7 	bl	8005fba <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTCONNECT=%d,\"tcp://%s:%d\",%d,%d,\"%s\",\"%s\"%s",index,server,port,keepalive,cleansession,user,pass,"\r\n");
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <SIM7600_NEW_CONNECTION+0x178>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461c      	mov	r4, r3
 8000e52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e54:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e56:	4944      	ldr	r1, [pc, #272]	; (8000f68 <SIM7600_NEW_CONNECTION+0x184>)
 8000e58:	7809      	ldrb	r1, [r1, #0]
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	4940      	ldr	r1, [pc, #256]	; (8000f60 <SIM7600_NEW_CONNECTION+0x17c>)
 8000e5e:	9106      	str	r1, [sp, #24]
 8000e60:	6839      	ldr	r1, [r7, #0]
 8000e62:	9105      	str	r1, [sp, #20]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	9104      	str	r1, [sp, #16]
 8000e68:	9003      	str	r0, [sp, #12]
 8000e6a:	9202      	str	r2, [sp, #8]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	4623      	mov	r3, r4
 8000e74:	4a3d      	ldr	r2, [pc, #244]	; (8000f6c <SIM7600_NEW_CONNECTION+0x188>)
 8000e76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e7a:	4837      	ldr	r0, [pc, #220]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000e7c:	f005 f978 	bl	8006170 <sniprintf>
	connect = sendATcommand2(aux_str,"+CMQTTCONNECT: 0,0","+CMQTTCONNECT: 0,19",1000);
 8000e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e84:	4a3a      	ldr	r2, [pc, #232]	; (8000f70 <SIM7600_NEW_CONNECTION+0x18c>)
 8000e86:	493b      	ldr	r1, [pc, #236]	; (8000f74 <SIM7600_NEW_CONNECTION+0x190>)
 8000e88:	4833      	ldr	r0, [pc, #204]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000e8a:	f7ff fca9 	bl	80007e0 <sendATcommand2>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	75bb      	strb	r3, [r7, #22]
	if (connect != 1){
 8000e92:	7dbb      	ldrb	r3, [r7, #22]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d053      	beq.n	8000f40 <SIM7600_NEW_CONNECTION+0x15c>
		sendATcommand("AT\r\n",500);
 8000e98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e9c:	4836      	ldr	r0, [pc, #216]	; (8000f78 <SIM7600_NEW_CONNECTION+0x194>)
 8000e9e:	f7ff fc27 	bl	80006f0 <sendATcommand>
		uint8_t status = RECONNECT();
 8000ea2:	f000 f86b 	bl	8000f7c <RECONNECT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	757b      	strb	r3, [r7, #21]
		if (status == 1){
 8000eaa:	7d7b      	ldrb	r3, [r7, #21]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d149      	bne.n	8000f44 <SIM7600_NEW_CONNECTION+0x160>
			sendATcommand("AT+CMQTTSTART\r\n",500);
 8000eb0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <SIM7600_NEW_CONNECTION+0x170>)
 8000eb6:	f7ff fc1b 	bl	80006f0 <sendATcommand>
			memset(aux_str,0,sizeof(aux_str));
 8000eba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4825      	ldr	r0, [pc, #148]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000ec2:	f005 f87a 	bl	8005fba <memset>
			snprintf(aux_str, sizeof(aux_str),"AT+CMQTTACCQ=%d,\"%s\"%s",index,client,"\r\n");
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <SIM7600_NEW_CONNECTION+0x178>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <SIM7600_NEW_CONNECTION+0x17c>)
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	4a23      	ldr	r2, [pc, #140]	; (8000f64 <SIM7600_NEW_CONNECTION+0x180>)
 8000ed8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000edc:	481e      	ldr	r0, [pc, #120]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000ede:	f005 f947 	bl	8006170 <sniprintf>
			sendATcommand(aux_str,1000);
 8000ee2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ee6:	481c      	ldr	r0, [pc, #112]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000ee8:	f7ff fc02 	bl	80006f0 <sendATcommand>
			memset(aux_str,0,sizeof(aux_str));
 8000eec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4819      	ldr	r0, [pc, #100]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000ef4:	f005 f861 	bl	8005fba <memset>
			snprintf(aux_str, sizeof(aux_str),"AT+CMQTTCONNECT=%d,\"tcp://%s:%d\",%d,%d,\"%s\",\"%s\"%s",index,server,port,keepalive,cleansession,user,pass,"\r\n");
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <SIM7600_NEW_CONNECTION+0x178>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461c      	mov	r4, r3
 8000efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f00:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f02:	4919      	ldr	r1, [pc, #100]	; (8000f68 <SIM7600_NEW_CONNECTION+0x184>)
 8000f04:	7809      	ldrb	r1, [r1, #0]
 8000f06:	4608      	mov	r0, r1
 8000f08:	4915      	ldr	r1, [pc, #84]	; (8000f60 <SIM7600_NEW_CONNECTION+0x17c>)
 8000f0a:	9106      	str	r1, [sp, #24]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	9105      	str	r1, [sp, #20]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	9104      	str	r1, [sp, #16]
 8000f14:	9003      	str	r0, [sp, #12]
 8000f16:	9202      	str	r2, [sp, #8]
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	4623      	mov	r3, r4
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <SIM7600_NEW_CONNECTION+0x188>)
 8000f22:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000f28:	f005 f922 	bl	8006170 <sniprintf>
			mqtt = sendATcommand2(aux_str,"+CMQTTCONNECT: 0,0","+CMQTTCONNECT: 0,19",1000);
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <SIM7600_NEW_CONNECTION+0x18c>)
 8000f32:	4910      	ldr	r1, [pc, #64]	; (8000f74 <SIM7600_NEW_CONNECTION+0x190>)
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <SIM7600_NEW_CONNECTION+0x174>)
 8000f36:	f7ff fc53 	bl	80007e0 <sendATcommand2>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	75fb      	strb	r3, [r7, #23]
 8000f3e:	e001      	b.n	8000f44 <SIM7600_NEW_CONNECTION+0x160>
		}
	}else{
		mqtt = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
	}
	return mqtt;
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	371c      	adds	r7, #28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	080071cc 	.word	0x080071cc
 8000f54:	080071dc 	.word	0x080071dc
 8000f58:	20004260 	.word	0x20004260
 8000f5c:	2000030c 	.word	0x2000030c
 8000f60:	08007204 	.word	0x08007204
 8000f64:	080071ec 	.word	0x080071ec
 8000f68:	2000001c 	.word	0x2000001c
 8000f6c:	08007208 	.word	0x08007208
 8000f70:	0800723c 	.word	0x0800723c
 8000f74:	08007250 	.word	0x08007250
 8000f78:	080071b4 	.word	0x080071b4

08000f7c <RECONNECT>:
/*-----------------------------------------------------------------------------------------------------*/
uint8_t RECONNECT(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	71fb      	strb	r3, [r7, #7]
	sendATcommand("AT\r\n",1000);
 8000f86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <RECONNECT+0x64>)
 8000f8c:	f7ff fbb0 	bl	80006f0 <sendATcommand>
	sendATcommand("AT+CMQTTDISC=0,120\r\n",1000);
 8000f90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f94:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <RECONNECT+0x68>)
 8000f96:	f7ff fbab 	bl	80006f0 <sendATcommand>
	sendATcommand("AT+CMQTTREL=0\r\n",1000);
 8000f9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <RECONNECT+0x6c>)
 8000fa0:	f7ff fba6 	bl	80006f0 <sendATcommand>
	sendATcommand("AT+CMQTTSTOP\r\n",1000);
 8000fa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa8:	4810      	ldr	r0, [pc, #64]	; (8000fec <RECONNECT+0x70>)
 8000faa:	f7ff fba1 	bl	80006f0 <sendATcommand>
	sendATcommand1("AT+NETCLOSE\r\n","+NETCLOSE: 0",2000);
 8000fae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fb2:	490f      	ldr	r1, [pc, #60]	; (8000ff0 <RECONNECT+0x74>)
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <RECONNECT+0x78>)
 8000fb6:	f7ff fbbd 	bl	8000734 <sendATcommand1>
	uint8_t reconnect = sendATcommand2("AT+NETOPEN\r\n","+NETOPEN: 0","already opened",2000);
 8000fba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <RECONNECT+0x7c>)
 8000fc0:	490e      	ldr	r1, [pc, #56]	; (8000ffc <RECONNECT+0x80>)
 8000fc2:	480f      	ldr	r0, [pc, #60]	; (8001000 <RECONNECT+0x84>)
 8000fc4:	f7ff fc0c 	bl	80007e0 <sendATcommand2>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71bb      	strb	r3, [r7, #6]
	if(reconnect == 1)
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <RECONNECT+0x5a>
		state = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	71fb      	strb	r3, [r7, #7]
	return state;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	080071b4 	.word	0x080071b4
 8000fe4:	08007264 	.word	0x08007264
 8000fe8:	0800727c 	.word	0x0800727c
 8000fec:	0800728c 	.word	0x0800728c
 8000ff0:	0800729c 	.word	0x0800729c
 8000ff4:	080072ac 	.word	0x080072ac
 8000ff8:	080072bc 	.word	0x080072bc
 8000ffc:	080072cc 	.word	0x080072cc
 8001000:	080071cc 	.word	0x080071cc

08001004 <SUBSCRIBE>:
/*------------------------------------SUBSCIBE --------------------------------------------------------*/
// CMQTTSUBTOPIC : 2
//	AT+CMQTTSUBTOPIC=0,9,0<CR><LF> // subscribed  AT+CMQTTSUB=0,9,0
uint8_t SUBSCRIBE(char *topic, uint8_t qos)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b087      	sub	sp, #28
 8001008:	af04      	add	r7, sp, #16
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	memset(aux_str,0,sizeof(aux_str));
 8001010:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001014:	2100      	movs	r1, #0
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <SUBSCRIBE+0x64>)
 8001018:	f004 ffcf 	bl	8005fba <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTSUB=%d,%d,%d%s",index,strlen(topic),qos,"\r\n");
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <SUBSCRIBE+0x68>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461c      	mov	r4, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff f8d4 	bl	80001d0 <strlen>
 8001028:	4602      	mov	r2, r0
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	4910      	ldr	r1, [pc, #64]	; (8001070 <SUBSCRIBE+0x6c>)
 800102e:	9102      	str	r1, [sp, #8]
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	9200      	str	r2, [sp, #0]
 8001034:	4623      	mov	r3, r4
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <SUBSCRIBE+0x70>)
 8001038:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <SUBSCRIBE+0x64>)
 800103e:	f005 f897 	bl	8006170 <sniprintf>
	if (sendATcommand1(aux_str,">",2000) == 1)
 8001042:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001046:	490c      	ldr	r1, [pc, #48]	; (8001078 <SUBSCRIBE+0x74>)
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <SUBSCRIBE+0x64>)
 800104a:	f7ff fb73 	bl	8000734 <sendATcommand1>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d104      	bne.n	800105e <SUBSCRIBE+0x5a>
		sendATcommand(topic,1000);
 8001054:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff fb49 	bl	80006f0 <sendATcommand>
}
 800105e:	bf00      	nop
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	20004260 	.word	0x20004260
 800106c:	2000030c 	.word	0x2000030c
 8001070:	08007204 	.word	0x08007204
 8001074:	080072d8 	.word	0x080072d8
 8001078:	080072f0 	.word	0x080072f0

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_MspInit+0x4c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_UART_MspInit+0x94>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d133      	bne.n	8001156 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_UART_MspInit+0x98>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <HAL_UART_MspInit+0x98>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_UART_MspInit+0x98>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_UART_MspInit+0x98>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_UART_MspInit+0x98>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_UART_MspInit+0x98>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001126:	230c      	movs	r3, #12
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001136:	2307      	movs	r3, #7
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <HAL_UART_MspInit+0x9c>)
 8001142:	f000 fc8b 	bl	8001a5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2026      	movs	r0, #38	; 0x26
 800114c:	f000 fab0 	bl	80016b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001150:	2026      	movs	r0, #38	; 0x26
 8001152:	f000 fac9 	bl	80016e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40004400 	.word	0x40004400
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	2019      	movs	r0, #25
 8001182:	f000 fa95 	bl	80016b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001186:	2019      	movs	r0, #25
 8001188:	f000 faae 	bl	80016e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_InitTick+0xa0>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_InitTick+0xa0>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6453      	str	r3, [r2, #68]	; 0x44
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_InitTick+0xa0>)
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a8:	f107 0210 	add.w	r2, r7, #16
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fa62 	bl	800267c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011b8:	f001 fa4c 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 80011bc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <HAL_InitTick+0xa4>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	0c9b      	lsrs	r3, r3, #18
 80011c8:	3b01      	subs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_InitTick+0xa8>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_InitTick+0xac>)
 80011d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_InitTick+0xa8>)
 80011d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_InitTick+0xa8>)
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_InitTick+0xa8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_InitTick+0xa8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <HAL_InitTick+0xa8>)
 80011ee:	f001 fa77 	bl	80026e0 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d104      	bne.n	8001202 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <HAL_InitTick+0xa8>)
 80011fa:	f001 faa6 	bl	800274a <HAL_TIM_Base_Start_IT>
 80011fe:	4603      	mov	r3, r0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3730      	adds	r7, #48	; 0x30
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	431bde83 	.word	0x431bde83
 8001214:	2000445c 	.word	0x2000445c
 8001218:	40010000 	.word	0x40010000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001256:	f001 fa9c 	bl	8002792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000445c 	.word	0x2000445c

08001264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTIntHandler();
 800126a:	f7ff fa07 	bl	800067c <UARTIntHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <USART2_IRQHandler+0x30>)
 8001270:	f001 fd5a 	bl	8002d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  __HAL_UART_CLEAR_PEFLAG(&huart2);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <USART2_IRQHandler+0x30>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <USART2_IRQHandler+0x30>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20004220 	.word	0x20004220

08001298 <DMA1_Stream5_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Stream5_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <DMA1_Stream5_IRQHandler+0x10>)
 800129e:	f000 fa53 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20004180 	.word	0x20004180

080012ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e00a      	b.n	80012d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012be:	f3af 8000 	nop.w
 80012c2:	4601      	mov	r1, r0
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	60ba      	str	r2, [r7, #8]
 80012ca:	b2ca      	uxtb	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbf0      	blt.n	80012be <_read+0x12>
	}

return len;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e009      	b.n	800130c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	60ba      	str	r2, [r7, #8]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbf1      	blt.n	80012f8 <_write+0x12>
	}
	return len;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_close>:

int _close(int file)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001346:	605a      	str	r2, [r3, #4]
	return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_isatty>:

int _isatty(int file)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001390:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <_sbrk+0x5c>)
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <_sbrk+0x60>)
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <_sbrk+0x64>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <_sbrk+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d207      	bcs.n	80013c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b8:	f004 fc0c 	bl	8005bd4 <__errno>
 80013bc:	4603      	mov	r3, r0
 80013be:	220c      	movs	r2, #12
 80013c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	e009      	b.n	80013dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <_sbrk+0x64>)
 80013d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20020000 	.word	0x20020000
 80013e8:	00000400 	.word	0x00000400
 80013ec:	20000310 	.word	0x20000310
 80013f0:	200044b0 	.word	0x200044b0

080013f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <SystemInit+0x28>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <SystemInit+0x28>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <SystemInit+0x28>)
 800140a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800140e:	609a      	str	r2, [r3, #8]
#endif
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001426:	e003      	b.n	8001430 <LoopCopyDataInit>

08001428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800142a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800142c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800142e:	3104      	adds	r1, #4

08001430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001438:	d3f6      	bcc.n	8001428 <CopyDataInit>
  ldr  r2, =_sbss
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800143c:	e002      	b.n	8001444 <LoopFillZerobss>

0800143e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800143e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001440:	f842 3b04 	str.w	r3, [r2], #4

08001444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001448:	d3f9      	bcc.n	800143e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800144a:	f7ff ffd3 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144e:	f004 fd7f 	bl	8005f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff fb3d 	bl	8000ad0 <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800145c:	08007404 	.word	0x08007404
  ldr  r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001464:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001468:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800146c:	200044b0 	.word	0x200044b0

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <HAL_Init+0x40>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_Init+0x40>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_Init+0x40>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f8fc 	bl	800169a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fe62 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fde8 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000028 	.word	0x20000028
 80014dc:	2000449c 	.word	0x2000449c

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	2000449c 	.word	0x2000449c

080014f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000028 	.word	0x20000028

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff4c 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c2:	f7ff ff61 	bl	8001588 <__NVIC_GetPriorityGrouping>
 80016c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f7ff ffb1 	bl	8001634 <NVIC_EncodePriority>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff80 	bl	80015e0 <__NVIC_SetPriority>
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff54 	bl	80015a4 <__NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d004      	beq.n	8001722 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00c      	b.n	800173c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001754:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_DMA_IRQHandler+0x258>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a92      	ldr	r2, [pc, #584]	; (80019a4 <HAL_DMA_IRQHandler+0x25c>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a9b      	lsrs	r3, r3, #10
 8001760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	2208      	movs	r2, #8
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2208      	movs	r2, #8
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d012      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2201      	movs	r2, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2204      	movs	r2, #4
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2204      	movs	r2, #4
 800180e:	409a      	lsls	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	2210      	movs	r2, #16
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d043      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03c      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2210      	movs	r2, #16
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d018      	beq.n	800188a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d024      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
 8001876:	e01f      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e016      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0208 	bic.w	r2, r2, #8
 80018a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	2220      	movs	r2, #32
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 808e 	beq.w	80019e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8086 	beq.w	80019e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	2220      	movs	r2, #32
 80018e0:	409a      	lsls	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d136      	bne.n	8001960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0216 	bic.w	r2, r2, #22
 8001900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_DMA_IRQHandler+0x1da>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0208 	bic.w	r2, r2, #8
 8001930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	223f      	movs	r2, #63	; 0x3f
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001952:	2b00      	cmp	r3, #0
 8001954:	d07d      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
        }
        return;
 800195e:	e078      	b.n	8001a52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01c      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d108      	bne.n	800198e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	2b00      	cmp	r3, #0
 8001982:	d030      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e02b      	b.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d027      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
 800199e:	e022      	b.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
 80019a0:	20000020 	.word	0x20000020
 80019a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0210 	bic.w	r2, r2, #16
 80019c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d032      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d022      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2205      	movs	r2, #5
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d307      	bcc.n	8001a2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f2      	bne.n	8001a12 <HAL_DMA_IRQHandler+0x2ca>
 8001a2c:	e000      	b.n	8001a30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a52:	bf00      	nop
    }
  }
}
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e16b      	b.n	8001d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 815a 	bne.w	8001d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_GPIO_Init+0x5a>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aaa:	2b11      	cmp	r3, #17
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d130      	bne.n	8001b18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0xfc>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80b4 	beq.w	8001d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <HAL_GPIO_Init+0x30c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a5f      	ldr	r2, [pc, #380]	; (8001d68 <HAL_GPIO_Init+0x30c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <HAL_GPIO_Init+0x30c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfe:	4a5b      	ldr	r2, [pc, #364]	; (8001d6c <HAL_GPIO_Init+0x310>)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_GPIO_Init+0x314>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02b      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <HAL_GPIO_Init+0x318>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d025      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <HAL_GPIO_Init+0x31c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4e      	ldr	r2, [pc, #312]	; (8001d80 <HAL_GPIO_Init+0x324>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x216>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	; (8001d84 <HAL_GPIO_Init+0x328>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4c      	ldr	r2, [pc, #304]	; (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_GPIO_Init+0x330>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x20a>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e00e      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c66:	2308      	movs	r3, #8
 8001c68:	e00c      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00a      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <HAL_GPIO_Init+0x310>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc6:	4a32      	ldr	r2, [pc, #200]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f ae90 	bls.w	8001a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	401a      	ands	r2, r3
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d104      	bne.n	8001dea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e25b      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d075      	beq.n	8001f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e1a:	4ba3      	ldr	r3, [pc, #652]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d00c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4ba0      	ldr	r3, [pc, #640]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d112      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e32:	4b9d      	ldr	r3, [pc, #628]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	4b99      	ldr	r3, [pc, #612]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d05b      	beq.n	8001f04 <HAL_RCC_OscConfig+0x108>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d157      	bne.n	8001f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e236      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d106      	bne.n	8001e70 <HAL_RCC_OscConfig+0x74>
 8001e62:	4b91      	ldr	r3, [pc, #580]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a90      	ldr	r2, [pc, #576]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01d      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a8a      	ldr	r2, [pc, #552]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a87      	ldr	r2, [pc, #540]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
 8001e94:	4b84      	ldr	r3, [pc, #528]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a83      	ldr	r2, [pc, #524]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b81      	ldr	r3, [pc, #516]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a80      	ldr	r2, [pc, #512]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fb14 	bl	80014e0 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fb10 	bl	80014e0 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1fb      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xc0>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fb00 	bl	80014e0 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fafc 	bl	80014e0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1e7      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xe8>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d063      	beq.n	8001fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b62      	ldr	r3, [pc, #392]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d11c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2a:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x152>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e1bb      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4952      	ldr	r1, [pc, #328]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	e03a      	b.n	8001fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6c:	4b4f      	ldr	r3, [pc, #316]	; (80020ac <HAL_RCC_OscConfig+0x2b0>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff fab5 	bl	80014e0 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fab1 	bl	80014e0 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e19c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4940      	ldr	r1, [pc, #256]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e015      	b.n	8001fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <HAL_RCC_OscConfig+0x2b0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fa94 	bl	80014e0 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbc:	f7ff fa90 	bl	80014e0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e17b      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d030      	beq.n	8002048 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_RCC_OscConfig+0x2b4>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7ff fa74 	bl	80014e0 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fa70 	bl	80014e0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e15b      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x200>
 800201a:	e015      	b.n	8002048 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_RCC_OscConfig+0x2b4>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7ff fa5d 	bl	80014e0 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202a:	f7ff fa59 	bl	80014e0 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e144      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a0 	beq.w	8002196 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x2b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d121      	bne.n	80020d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_RCC_OscConfig+0x2b8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_RCC_OscConfig+0x2b8>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7ff fa1f 	bl	80014e0 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e011      	b.n	80020ca <HAL_RCC_OscConfig+0x2ce>
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	42470000 	.word	0x42470000
 80020b0:	42470e80 	.word	0x42470e80
 80020b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7ff fa12 	bl	80014e0 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e0fd      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ca:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <HAL_RCC_OscConfig+0x4d4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d106      	bne.n	80020ec <HAL_RCC_OscConfig+0x2f0>
 80020de:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a7c      	ldr	r2, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	e01c      	b.n	8002126 <HAL_RCC_OscConfig+0x32a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x312>
 80020f4:	4b77      	ldr	r3, [pc, #476]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a76      	ldr	r2, [pc, #472]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002100:	4b74      	ldr	r3, [pc, #464]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a73      	ldr	r2, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x32a>
 800210e:	4b71      	ldr	r3, [pc, #452]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a70      	ldr	r2, [pc, #448]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b6e      	ldr	r3, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a6d      	ldr	r2, [pc, #436]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d015      	beq.n	800215a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff f9d7 	bl	80014e0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff f9d3 	bl	80014e0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0bc      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	4b61      	ldr	r3, [pc, #388]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ee      	beq.n	8002136 <HAL_RCC_OscConfig+0x33a>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7ff f9c1 	bl	80014e0 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7ff f9bd 	bl	80014e0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0a6      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ee      	bne.n	8002162 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8092 	beq.w	80022c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d05c      	beq.n	8002266 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d141      	bne.n	8002238 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <HAL_RCC_OscConfig+0x4dc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff f991 	bl	80014e0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c2:	f7ff f98d 	bl	80014e0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e078      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d4:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	019b      	lsls	r3, r3, #6
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	3b01      	subs	r3, #1
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	061b      	lsls	r3, r3, #24
 8002204:	4933      	ldr	r1, [pc, #204]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220a:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <HAL_RCC_OscConfig+0x4dc>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff f966 	bl	80014e0 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002218:	f7ff f962 	bl	80014e0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e04d      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x41c>
 8002236:	e045      	b.n	80022c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x4dc>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff f94f 	bl	80014e0 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff f94b 	bl	80014e0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e036      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002258:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x44a>
 8002264:	e02e      	b.n	80022c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e029      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_RCC_OscConfig+0x4d8>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	429a      	cmp	r2, r3
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d115      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800229a:	4013      	ands	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d10d      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d106      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40007000 	.word	0x40007000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	42470060 	.word	0x42470060

080022dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0cc      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b68      	ldr	r3, [pc, #416]	; (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d90c      	bls.n	8002318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b65      	ldr	r3, [pc, #404]	; (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b63      	ldr	r3, [pc, #396]	; (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0b8      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800233a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	494d      	ldr	r1, [pc, #308]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d044      	beq.n	80023fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d119      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e07f      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d003      	beq.n	800239a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002396:	2b03      	cmp	r3, #3
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06f      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e067      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ba:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 0203 	bic.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4934      	ldr	r1, [pc, #208]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023cc:	f7ff f888 	bl	80014e0 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d4:	f7ff f884 	bl	80014e0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e04f      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 020c 	and.w	r2, r3, #12
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1eb      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d20c      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e032      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4916      	ldr	r1, [pc, #88]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	490e      	ldr	r1, [pc, #56]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002462:	f000 f821 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002466:	4602      	mov	r2, r0
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	490a      	ldr	r1, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	5ccb      	ldrb	r3, [r1, r3]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fe72 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023c00 	.word	0x40023c00
 8002498:	40023800 	.word	0x40023800
 800249c:	08007344 	.word	0x08007344
 80024a0:	20000020 	.word	0x20000020
 80024a4:	20000024 	.word	0x20000024

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024ae:	2100      	movs	r1, #0
 80024b0:	6079      	str	r1, [r7, #4]
 80024b2:	2100      	movs	r1, #0
 80024b4:	60f9      	str	r1, [r7, #12]
 80024b6:	2100      	movs	r1, #0
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024ba:	2100      	movs	r1, #0
 80024bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024be:	4952      	ldr	r1, [pc, #328]	; (8002608 <HAL_RCC_GetSysClockFreq+0x160>)
 80024c0:	6889      	ldr	r1, [r1, #8]
 80024c2:	f001 010c 	and.w	r1, r1, #12
 80024c6:	2908      	cmp	r1, #8
 80024c8:	d00d      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80024ca:	2908      	cmp	r1, #8
 80024cc:	f200 8094 	bhi.w	80025f8 <HAL_RCC_GetSysClockFreq+0x150>
 80024d0:	2900      	cmp	r1, #0
 80024d2:	d002      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x32>
 80024d4:	2904      	cmp	r1, #4
 80024d6:	d003      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x38>
 80024d8:	e08e      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024da:	4b4c      	ldr	r3, [pc, #304]	; (800260c <HAL_RCC_GetSysClockFreq+0x164>)
 80024dc:	60bb      	str	r3, [r7, #8]
       break;
 80024de:	e08e      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024e0:	4b4b      	ldr	r3, [pc, #300]	; (8002610 <HAL_RCC_GetSysClockFreq+0x168>)
 80024e2:	60bb      	str	r3, [r7, #8]
      break;
 80024e4:	e08b      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e6:	4948      	ldr	r1, [pc, #288]	; (8002608 <HAL_RCC_GetSysClockFreq+0x160>)
 80024e8:	6849      	ldr	r1, [r1, #4]
 80024ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f0:	4945      	ldr	r1, [pc, #276]	; (8002608 <HAL_RCC_GetSysClockFreq+0x160>)
 80024f2:	6849      	ldr	r1, [r1, #4]
 80024f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80024f8:	2900      	cmp	r1, #0
 80024fa:	d024      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fc:	4942      	ldr	r1, [pc, #264]	; (8002608 <HAL_RCC_GetSysClockFreq+0x160>)
 80024fe:	6849      	ldr	r1, [r1, #4]
 8002500:	0989      	lsrs	r1, r1, #6
 8002502:	4608      	mov	r0, r1
 8002504:	f04f 0100 	mov.w	r1, #0
 8002508:	f240 14ff 	movw	r4, #511	; 0x1ff
 800250c:	f04f 0500 	mov.w	r5, #0
 8002510:	ea00 0204 	and.w	r2, r0, r4
 8002514:	ea01 0305 	and.w	r3, r1, r5
 8002518:	493d      	ldr	r1, [pc, #244]	; (8002610 <HAL_RCC_GetSysClockFreq+0x168>)
 800251a:	fb01 f003 	mul.w	r0, r1, r3
 800251e:	2100      	movs	r1, #0
 8002520:	fb01 f102 	mul.w	r1, r1, r2
 8002524:	1844      	adds	r4, r0, r1
 8002526:	493a      	ldr	r1, [pc, #232]	; (8002610 <HAL_RCC_GetSysClockFreq+0x168>)
 8002528:	fba2 0101 	umull	r0, r1, r2, r1
 800252c:	1863      	adds	r3, r4, r1
 800252e:	4619      	mov	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	461a      	mov	r2, r3
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	f7fd fea2 	bl	8000280 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4613      	mov	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e04a      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_RCC_GetSysClockFreq+0x160>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	461a      	mov	r2, r3
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	ea02 0400 	and.w	r4, r2, r0
 800255e:	ea03 0501 	and.w	r5, r3, r1
 8002562:	4620      	mov	r0, r4
 8002564:	4629      	mov	r1, r5
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	014b      	lsls	r3, r1, #5
 8002570:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002574:	0142      	lsls	r2, r0, #5
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	1b00      	subs	r0, r0, r4
 800257c:	eb61 0105 	sbc.w	r1, r1, r5
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	018b      	lsls	r3, r1, #6
 800258a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800258e:	0182      	lsls	r2, r0, #6
 8002590:	1a12      	subs	r2, r2, r0
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	f04f 0000 	mov.w	r0, #0
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	00d9      	lsls	r1, r3, #3
 80025a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025a4:	00d0      	lsls	r0, r2, #3
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	1912      	adds	r2, r2, r4
 80025ac:	eb45 0303 	adc.w	r3, r5, r3
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	0299      	lsls	r1, r3, #10
 80025ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025be:	0290      	lsls	r0, r2, #10
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	f7fd fe56 	bl	8000280 <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4613      	mov	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_RCC_GetSysClockFreq+0x160>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	3301      	adds	r3, #1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	60bb      	str	r3, [r7, #8]
      break;
 80025f6:	e002      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <HAL_RCC_GetSysClockFreq+0x164>)
 80025fa:	60bb      	str	r3, [r7, #8]
      break;
 80025fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fe:	68bb      	ldr	r3, [r7, #8]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bdb0      	pop	{r4, r5, r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	00f42400 	.word	0x00f42400
 8002610:	017d7840 	.word	0x017d7840

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_GetHCLKFreq+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000020 	.word	0x20000020

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002630:	f7ff fff0 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	08007354 	.word	0x08007354

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002658:	f7ff ffdc 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0b5b      	lsrs	r3, r3, #13
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	08007354 	.word	0x08007354

0800267c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	220f      	movs	r2, #15
 800268a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_GetClockConfig+0x5c>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0203 	and.w	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_RCC_GetClockConfig+0x5c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <HAL_RCC_GetClockConfig+0x5c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_GetClockConfig+0x5c>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	08db      	lsrs	r3, r3, #3
 80026b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_RCC_GetClockConfig+0x60>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 020f 	and.w	r2, r3, #15
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	601a      	str	r2, [r3, #0]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e01d      	b.n	800272e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f815 	bl	8002736 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f000 f968 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d007      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d122      	bne.n	80027ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d11b      	bne.n	80027ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f06f 0202 	mvn.w	r2, #2
 80027be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8ee 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80027da:	e005      	b.n	80027e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f8e0 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8f1 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d122      	bne.n	8002842 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d11b      	bne.n	8002842 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f06f 0204 	mvn.w	r2, #4
 8002812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8c4 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 800282e:	e005      	b.n	800283c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8b6 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8c7 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b08      	cmp	r3, #8
 800284e:	d122      	bne.n	8002896 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11b      	bne.n	8002896 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f06f 0208 	mvn.w	r2, #8
 8002866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2204      	movs	r2, #4
 800286c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f89a 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 8002882:	e005      	b.n	8002890 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f88c 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f89d 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d122      	bne.n	80028ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d11b      	bne.n	80028ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f06f 0210 	mvn.w	r2, #16
 80028ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2208      	movs	r2, #8
 80028c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f870 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80028d6:	e005      	b.n	80028e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f862 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f873 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d10e      	bne.n	8002916 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0201 	mvn.w	r2, #1
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe fa2d 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d10e      	bne.n	8002942 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	d107      	bne.n	8002942 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800293a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f903 	bl	8002b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d10e      	bne.n	800296e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d107      	bne.n	800296e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f838 	bl	80029de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b20      	cmp	r3, #32
 800297a:	d10e      	bne.n	800299a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b20      	cmp	r3, #32
 8002988:	d107      	bne.n	800299a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f06f 0220 	mvn.w	r2, #32
 8002992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f8cd 	bl	8002b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <TIM_Base_SetConfig+0x114>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a12:	d00f      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <TIM_Base_SetConfig+0x118>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a3c      	ldr	r2, [pc, #240]	; (8002b10 <TIM_Base_SetConfig+0x11c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a3b      	ldr	r2, [pc, #236]	; (8002b14 <TIM_Base_SetConfig+0x120>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <TIM_Base_SetConfig+0x124>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <TIM_Base_SetConfig+0x114>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02b      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d027      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <TIM_Base_SetConfig+0x118>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d023      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <TIM_Base_SetConfig+0x11c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01f      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <TIM_Base_SetConfig+0x120>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01b      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <TIM_Base_SetConfig+0x124>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d017      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <TIM_Base_SetConfig+0x128>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <TIM_Base_SetConfig+0x12c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00f      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <TIM_Base_SetConfig+0x130>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00b      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a25      	ldr	r2, [pc, #148]	; (8002b28 <TIM_Base_SetConfig+0x134>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <TIM_Base_SetConfig+0x138>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <TIM_Base_SetConfig+0x13c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <TIM_Base_SetConfig+0x114>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0xf8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <TIM_Base_SetConfig+0x124>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	615a      	str	r2, [r3, #20]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40010400 	.word	0x40010400
 8002b1c:	40014000 	.word	0x40014000
 8002b20:	40014400 	.word	0x40014400
 8002b24:	40014800 	.word	0x40014800
 8002b28:	40001800 	.word	0x40001800
 8002b2c:	40001c00 	.word	0x40001c00
 8002b30:	40002000 	.word	0x40002000

08002b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e03f      	b.n	8002bee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe faa2 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	; 0x24
 8002b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fb4b 	bl	800323c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f040 8083 	bne.w	8002d1e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_UART_Transmit+0x2e>
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e07b      	b.n	8002d20 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Transmit+0x40>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e074      	b.n	8002d20 <HAL_UART_Transmit+0x12a>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2221      	movs	r2, #33	; 0x21
 8002c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe fc48 	bl	80014e0 <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002c66:	e042      	b.n	8002cee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	d122      	bne.n	8002cc6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f96a 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e042      	b.n	8002d20 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3302      	adds	r3, #2
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	e017      	b.n	8002cee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	e013      	b.n	8002cee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f947 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e01f      	b.n	8002d20 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	60ba      	str	r2, [r7, #8]
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1b7      	bne.n	8002c68 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f92e 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e006      	b.n	8002d20 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10d      	bne.n	8002d7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_UART_IRQHandler+0x52>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9e0 	bl	8003138 <UART_Receive_IT>
      return;
 8002d78:	e0d0      	b.n	8002f1c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80b0 	beq.w	8002ee2 <HAL_UART_IRQHandler+0x1ba>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_UART_IRQHandler+0x70>
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80a5 	beq.w	8002ee2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_UART_IRQHandler+0x90>
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_UART_IRQHandler+0xb0>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	f043 0202 	orr.w	r2, r3, #2
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_UART_IRQHandler+0xd0>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00f      	beq.n	8002e22 <HAL_UART_IRQHandler+0xfa>
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d104      	bne.n	8002e16 <HAL_UART_IRQHandler+0xee>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	f043 0208 	orr.w	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d077      	beq.n	8002f1a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_UART_IRQHandler+0x11c>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f97a 	bl	8003138 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_UART_IRQHandler+0x144>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d031      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8c3 	bl	8002ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d123      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	4a21      	ldr	r2, [pc, #132]	; (8002f24 <HAL_UART_IRQHandler+0x1fc>)
 8002e9e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fc2d 	bl	8001704 <HAL_DMA_Abort_IT>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d016      	beq.n	8002ede <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebe:	e00e      	b.n	8002ede <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f845 	bl	8002f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec6:	e00a      	b.n	8002ede <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f841 	bl	8002f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ece:	e006      	b.n	8002ede <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f83d 	bl	8002f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002edc:	e01d      	b.n	8002f1a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ede:	bf00      	nop
    return;
 8002ee0:	e01b      	b.n	8002f1a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_UART_IRQHandler+0x1d6>
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8b0 	bl	800305c <UART_Transmit_IT>
    return;
 8002efc:	e00e      	b.n	8002f1c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <HAL_UART_IRQHandler+0x1f4>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8f8 	bl	8003108 <UART_EndTransmit_IT>
    return;
 8002f18:	e000      	b.n	8002f1c <HAL_UART_IRQHandler+0x1f4>
    return;
 8002f1a:	bf00      	nop
  }
}
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	08003035 	.word	0x08003035

08002f28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f74:	e02c      	b.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d028      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f84:	f7fe faac 	bl	80014e0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d21d      	bcs.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fa2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00f      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d0c3      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800300e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff ff7e 	bl	8002f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b21      	cmp	r3, #33	; 0x21
 800306e:	d144      	bne.n	80030fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003078:	d11a      	bne.n	80030b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	1c9a      	adds	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	621a      	str	r2, [r3, #32]
 80030a2:	e00e      	b.n	80030c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]
 80030ae:	e008      	b.n	80030c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	1c59      	adds	r1, r3, #1
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6211      	str	r1, [r2, #32]
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4619      	mov	r1, r3
 80030d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fefd 	bl	8002f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b22      	cmp	r3, #34	; 0x22
 800314a:	d171      	bne.n	8003230 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003154:	d123      	bne.n	800319e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10e      	bne.n	8003182 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	1c9a      	adds	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
 8003180:	e029      	b.n	80031d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	b29b      	uxth	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
 800319c:	e01b      	b.n	80031d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6858      	ldr	r0, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6291      	str	r1, [r2, #40]	; 0x28
 80031b6:	b2c2      	uxtb	r2, r0
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e00c      	b.n	80031d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	1c58      	adds	r0, r3, #1
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	6288      	str	r0, [r1, #40]	; 0x28
 80031ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4619      	mov	r1, r3
 80031e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d120      	bne.n	800322c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0220 	bic.w	r2, r2, #32
 80031f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003208:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fe8a 	bl	8002f3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e002      	b.n	8003232 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003240:	b0bd      	sub	sp, #244	; 0xf4
 8003242:	af00      	add	r7, sp, #0
 8003244:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003258:	68d9      	ldr	r1, [r3, #12]
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	ea40 0301 	orr.w	r3, r0, r1
 8003264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	431a      	orrs	r2, r3
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	431a      	orrs	r2, r3
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003294:	f021 010c 	bic.w	r1, r1, #12
 8003298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80032a2:	430b      	orrs	r3, r1
 80032a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b6:	6999      	ldr	r1, [r3, #24]
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	ea40 0301 	orr.w	r3, r0, r1
 80032c2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ce:	f040 81a5 	bne.w	800361c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4bcd      	ldr	r3, [pc, #820]	; (8003610 <UART_SetConfig+0x3d4>)
 80032da:	429a      	cmp	r2, r3
 80032dc:	d006      	beq.n	80032ec <UART_SetConfig+0xb0>
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4bcb      	ldr	r3, [pc, #812]	; (8003614 <UART_SetConfig+0x3d8>)
 80032e6:	429a      	cmp	r2, r3
 80032e8:	f040 80cb 	bne.w	8003482 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ec:	f7ff f9b2 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 80032f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032f8:	461c      	mov	r4, r3
 80032fa:	f04f 0500 	mov.w	r5, #0
 80032fe:	4622      	mov	r2, r4
 8003300:	462b      	mov	r3, r5
 8003302:	1891      	adds	r1, r2, r2
 8003304:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003308:	415b      	adcs	r3, r3
 800330a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800330e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003312:	1912      	adds	r2, r2, r4
 8003314:	eb45 0303 	adc.w	r3, r5, r3
 8003318:	f04f 0000 	mov.w	r0, #0
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	00d9      	lsls	r1, r3, #3
 8003322:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003326:	00d0      	lsls	r0, r2, #3
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	1911      	adds	r1, r2, r4
 800332e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003332:	416b      	adcs	r3, r5
 8003334:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	1891      	adds	r1, r2, r2
 8003346:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800334a:	415b      	adcs	r3, r3
 800334c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003350:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003354:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003358:	f7fc ff92 	bl	8000280 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4bad      	ldr	r3, [pc, #692]	; (8003618 <UART_SetConfig+0x3dc>)
 8003362:	fba3 2302 	umull	r2, r3, r3, r2
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	011e      	lsls	r6, r3, #4
 800336a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800336e:	461c      	mov	r4, r3
 8003370:	f04f 0500 	mov.w	r5, #0
 8003374:	4622      	mov	r2, r4
 8003376:	462b      	mov	r3, r5
 8003378:	1891      	adds	r1, r2, r2
 800337a:	67b9      	str	r1, [r7, #120]	; 0x78
 800337c:	415b      	adcs	r3, r3
 800337e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003380:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003384:	1912      	adds	r2, r2, r4
 8003386:	eb45 0303 	adc.w	r3, r5, r3
 800338a:	f04f 0000 	mov.w	r0, #0
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	00d9      	lsls	r1, r3, #3
 8003394:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003398:	00d0      	lsls	r0, r2, #3
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	1911      	adds	r1, r2, r4
 80033a0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80033a4:	416b      	adcs	r3, r5
 80033a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80033aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	1891      	adds	r1, r2, r2
 80033b8:	6739      	str	r1, [r7, #112]	; 0x70
 80033ba:	415b      	adcs	r3, r3
 80033bc:	677b      	str	r3, [r7, #116]	; 0x74
 80033be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80033c6:	f7fc ff5b 	bl	8000280 <__aeabi_uldivmod>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4b92      	ldr	r3, [pc, #584]	; (8003618 <UART_SetConfig+0x3dc>)
 80033d0:	fba3 1302 	umull	r1, r3, r3, r2
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	2164      	movs	r1, #100	; 0x64
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	3332      	adds	r3, #50	; 0x32
 80033e2:	4a8d      	ldr	r2, [pc, #564]	; (8003618 <UART_SetConfig+0x3dc>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033f0:	441e      	add	r6, r3
 80033f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033f6:	4618      	mov	r0, r3
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	1894      	adds	r4, r2, r2
 8003402:	66bc      	str	r4, [r7, #104]	; 0x68
 8003404:	415b      	adcs	r3, r3
 8003406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003408:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800340c:	1812      	adds	r2, r2, r0
 800340e:	eb41 0303 	adc.w	r3, r1, r3
 8003412:	f04f 0400 	mov.w	r4, #0
 8003416:	f04f 0500 	mov.w	r5, #0
 800341a:	00dd      	lsls	r5, r3, #3
 800341c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003420:	00d4      	lsls	r4, r2, #3
 8003422:	4622      	mov	r2, r4
 8003424:	462b      	mov	r3, r5
 8003426:	1814      	adds	r4, r2, r0
 8003428:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800342c:	414b      	adcs	r3, r1
 800342e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	461a      	mov	r2, r3
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	1891      	adds	r1, r2, r2
 8003440:	6639      	str	r1, [r7, #96]	; 0x60
 8003442:	415b      	adcs	r3, r3
 8003444:	667b      	str	r3, [r7, #100]	; 0x64
 8003446:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800344a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800344e:	f7fc ff17 	bl	8000280 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4b70      	ldr	r3, [pc, #448]	; (8003618 <UART_SetConfig+0x3dc>)
 8003458:	fba3 1302 	umull	r1, r3, r3, r2
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	2164      	movs	r1, #100	; 0x64
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	3332      	adds	r3, #50	; 0x32
 800346a:	4a6b      	ldr	r2, [pc, #428]	; (8003618 <UART_SetConfig+0x3dc>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	f003 0207 	and.w	r2, r3, #7
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4432      	add	r2, r6
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	e26d      	b.n	800395e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003482:	f7ff f8d3 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 8003486:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800348a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800348e:	461c      	mov	r4, r3
 8003490:	f04f 0500 	mov.w	r5, #0
 8003494:	4622      	mov	r2, r4
 8003496:	462b      	mov	r3, r5
 8003498:	1891      	adds	r1, r2, r2
 800349a:	65b9      	str	r1, [r7, #88]	; 0x58
 800349c:	415b      	adcs	r3, r3
 800349e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034a4:	1912      	adds	r2, r2, r4
 80034a6:	eb45 0303 	adc.w	r3, r5, r3
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	00d9      	lsls	r1, r3, #3
 80034b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034b8:	00d0      	lsls	r0, r2, #3
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	1911      	adds	r1, r2, r4
 80034c0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80034c4:	416b      	adcs	r3, r5
 80034c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	1891      	adds	r1, r2, r2
 80034d8:	6539      	str	r1, [r7, #80]	; 0x50
 80034da:	415b      	adcs	r3, r3
 80034dc:	657b      	str	r3, [r7, #84]	; 0x54
 80034de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80034e6:	f7fc fecb 	bl	8000280 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <UART_SetConfig+0x3dc>)
 80034f0:	fba3 2302 	umull	r2, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	011e      	lsls	r6, r3, #4
 80034f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034fc:	461c      	mov	r4, r3
 80034fe:	f04f 0500 	mov.w	r5, #0
 8003502:	4622      	mov	r2, r4
 8003504:	462b      	mov	r3, r5
 8003506:	1891      	adds	r1, r2, r2
 8003508:	64b9      	str	r1, [r7, #72]	; 0x48
 800350a:	415b      	adcs	r3, r3
 800350c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800350e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003512:	1912      	adds	r2, r2, r4
 8003514:	eb45 0303 	adc.w	r3, r5, r3
 8003518:	f04f 0000 	mov.w	r0, #0
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	00d9      	lsls	r1, r3, #3
 8003522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003526:	00d0      	lsls	r0, r2, #3
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	1911      	adds	r1, r2, r4
 800352e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003532:	416b      	adcs	r3, r5
 8003534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	461a      	mov	r2, r3
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	1891      	adds	r1, r2, r2
 8003546:	6439      	str	r1, [r7, #64]	; 0x40
 8003548:	415b      	adcs	r3, r3
 800354a:	647b      	str	r3, [r7, #68]	; 0x44
 800354c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003550:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003554:	f7fc fe94 	bl	8000280 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <UART_SetConfig+0x3dc>)
 800355e:	fba3 1302 	umull	r1, r3, r3, r2
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2164      	movs	r1, #100	; 0x64
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	3332      	adds	r3, #50	; 0x32
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <UART_SetConfig+0x3dc>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800357e:	441e      	add	r6, r3
 8003580:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003584:	4618      	mov	r0, r3
 8003586:	f04f 0100 	mov.w	r1, #0
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	1894      	adds	r4, r2, r2
 8003590:	63bc      	str	r4, [r7, #56]	; 0x38
 8003592:	415b      	adcs	r3, r3
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003596:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800359a:	1812      	adds	r2, r2, r0
 800359c:	eb41 0303 	adc.w	r3, r1, r3
 80035a0:	f04f 0400 	mov.w	r4, #0
 80035a4:	f04f 0500 	mov.w	r5, #0
 80035a8:	00dd      	lsls	r5, r3, #3
 80035aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035ae:	00d4      	lsls	r4, r2, #3
 80035b0:	4622      	mov	r2, r4
 80035b2:	462b      	mov	r3, r5
 80035b4:	1814      	adds	r4, r2, r0
 80035b6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80035ba:	414b      	adcs	r3, r1
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	6339      	str	r1, [r7, #48]	; 0x30
 80035d0:	415b      	adcs	r3, r3
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035dc:	f7fc fe50 	bl	8000280 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <UART_SetConfig+0x3dc>)
 80035e6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2164      	movs	r1, #100	; 0x64
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	3332      	adds	r3, #50	; 0x32
 80035f8:	4a07      	ldr	r2, [pc, #28]	; (8003618 <UART_SetConfig+0x3dc>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	f003 0207 	and.w	r2, r3, #7
 8003604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4432      	add	r2, r6
 800360c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800360e:	e1a6      	b.n	800395e <UART_SetConfig+0x722>
 8003610:	40011000 	.word	0x40011000
 8003614:	40011400 	.word	0x40011400
 8003618:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4bd1      	ldr	r3, [pc, #836]	; (8003968 <UART_SetConfig+0x72c>)
 8003624:	429a      	cmp	r2, r3
 8003626:	d006      	beq.n	8003636 <UART_SetConfig+0x3fa>
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4bcf      	ldr	r3, [pc, #828]	; (800396c <UART_SetConfig+0x730>)
 8003630:	429a      	cmp	r2, r3
 8003632:	f040 80ca 	bne.w	80037ca <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003636:	f7ff f80d 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 800363a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800363e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003642:	461c      	mov	r4, r3
 8003644:	f04f 0500 	mov.w	r5, #0
 8003648:	4622      	mov	r2, r4
 800364a:	462b      	mov	r3, r5
 800364c:	1891      	adds	r1, r2, r2
 800364e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003650:	415b      	adcs	r3, r3
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003658:	1912      	adds	r2, r2, r4
 800365a:	eb45 0303 	adc.w	r3, r5, r3
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	00d9      	lsls	r1, r3, #3
 8003668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800366c:	00d0      	lsls	r0, r2, #3
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	eb12 0a04 	adds.w	sl, r2, r4
 8003676:	eb43 0b05 	adc.w	fp, r3, r5
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	008b      	lsls	r3, r1, #2
 8003690:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003694:	0082      	lsls	r2, r0, #2
 8003696:	4650      	mov	r0, sl
 8003698:	4659      	mov	r1, fp
 800369a:	f7fc fdf1 	bl	8000280 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4bb3      	ldr	r3, [pc, #716]	; (8003970 <UART_SetConfig+0x734>)
 80036a4:	fba3 2302 	umull	r2, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	011e      	lsls	r6, r3, #4
 80036ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036b0:	4618      	mov	r0, r3
 80036b2:	f04f 0100 	mov.w	r1, #0
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	1894      	adds	r4, r2, r2
 80036bc:	623c      	str	r4, [r7, #32]
 80036be:	415b      	adcs	r3, r3
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036c6:	1812      	adds	r2, r2, r0
 80036c8:	eb41 0303 	adc.w	r3, r1, r3
 80036cc:	f04f 0400 	mov.w	r4, #0
 80036d0:	f04f 0500 	mov.w	r5, #0
 80036d4:	00dd      	lsls	r5, r3, #3
 80036d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036da:	00d4      	lsls	r4, r2, #3
 80036dc:	4622      	mov	r2, r4
 80036de:	462b      	mov	r3, r5
 80036e0:	1814      	adds	r4, r2, r0
 80036e2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80036e6:	414b      	adcs	r3, r1
 80036e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	008b      	lsls	r3, r1, #2
 8003702:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003706:	0082      	lsls	r2, r0, #2
 8003708:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800370c:	f7fc fdb8 	bl	8000280 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4b96      	ldr	r3, [pc, #600]	; (8003970 <UART_SetConfig+0x734>)
 8003716:	fba3 1302 	umull	r1, r3, r3, r2
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2164      	movs	r1, #100	; 0x64
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	3332      	adds	r3, #50	; 0x32
 8003728:	4a91      	ldr	r2, [pc, #580]	; (8003970 <UART_SetConfig+0x734>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003734:	441e      	add	r6, r3
 8003736:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800373a:	4618      	mov	r0, r3
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	1894      	adds	r4, r2, r2
 8003746:	61bc      	str	r4, [r7, #24]
 8003748:	415b      	adcs	r3, r3
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003750:	1812      	adds	r2, r2, r0
 8003752:	eb41 0303 	adc.w	r3, r1, r3
 8003756:	f04f 0400 	mov.w	r4, #0
 800375a:	f04f 0500 	mov.w	r5, #0
 800375e:	00dd      	lsls	r5, r3, #3
 8003760:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003764:	00d4      	lsls	r4, r2, #3
 8003766:	4622      	mov	r2, r4
 8003768:	462b      	mov	r3, r5
 800376a:	1814      	adds	r4, r2, r0
 800376c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003770:	414b      	adcs	r3, r1
 8003772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4618      	mov	r0, r3
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	008b      	lsls	r3, r1, #2
 800378c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003790:	0082      	lsls	r2, r0, #2
 8003792:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003796:	f7fc fd73 	bl	8000280 <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4b74      	ldr	r3, [pc, #464]	; (8003970 <UART_SetConfig+0x734>)
 80037a0:	fba3 1302 	umull	r1, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	2164      	movs	r1, #100	; 0x64
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	3332      	adds	r3, #50	; 0x32
 80037b2:	4a6f      	ldr	r2, [pc, #444]	; (8003970 <UART_SetConfig+0x734>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4432      	add	r2, r6
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	e0c9      	b.n	800395e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ca:	f7fe ff2f 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 80037ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80037d6:	461c      	mov	r4, r3
 80037d8:	f04f 0500 	mov.w	r5, #0
 80037dc:	4622      	mov	r2, r4
 80037de:	462b      	mov	r3, r5
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	6139      	str	r1, [r7, #16]
 80037e4:	415b      	adcs	r3, r3
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037ec:	1912      	adds	r2, r2, r4
 80037ee:	eb45 0303 	adc.w	r3, r5, r3
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	00d9      	lsls	r1, r3, #3
 80037fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003800:	00d0      	lsls	r0, r2, #3
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	eb12 0804 	adds.w	r8, r2, r4
 800380a:	eb43 0905 	adc.w	r9, r3, r5
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	008b      	lsls	r3, r1, #2
 8003824:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003828:	0082      	lsls	r2, r0, #2
 800382a:	4640      	mov	r0, r8
 800382c:	4649      	mov	r1, r9
 800382e:	f7fc fd27 	bl	8000280 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b4e      	ldr	r3, [pc, #312]	; (8003970 <UART_SetConfig+0x734>)
 8003838:	fba3 2302 	umull	r2, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	011e      	lsls	r6, r3, #4
 8003840:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003844:	4618      	mov	r0, r3
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	1894      	adds	r4, r2, r2
 8003850:	60bc      	str	r4, [r7, #8]
 8003852:	415b      	adcs	r3, r3
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800385a:	1812      	adds	r2, r2, r0
 800385c:	eb41 0303 	adc.w	r3, r1, r3
 8003860:	f04f 0400 	mov.w	r4, #0
 8003864:	f04f 0500 	mov.w	r5, #0
 8003868:	00dd      	lsls	r5, r3, #3
 800386a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800386e:	00d4      	lsls	r4, r2, #3
 8003870:	4622      	mov	r2, r4
 8003872:	462b      	mov	r3, r5
 8003874:	1814      	adds	r4, r2, r0
 8003876:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800387a:	414b      	adcs	r3, r1
 800387c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4618      	mov	r0, r3
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	008b      	lsls	r3, r1, #2
 8003896:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800389a:	0082      	lsls	r2, r0, #2
 800389c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038a0:	f7fc fcee 	bl	8000280 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4b31      	ldr	r3, [pc, #196]	; (8003970 <UART_SetConfig+0x734>)
 80038aa:	fba3 1302 	umull	r1, r3, r3, r2
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2164      	movs	r1, #100	; 0x64
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	3332      	adds	r3, #50	; 0x32
 80038bc:	4a2c      	ldr	r2, [pc, #176]	; (8003970 <UART_SetConfig+0x734>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c8:	441e      	add	r6, r3
 80038ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038ce:	4618      	mov	r0, r3
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	1894      	adds	r4, r2, r2
 80038da:	603c      	str	r4, [r7, #0]
 80038dc:	415b      	adcs	r3, r3
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038e4:	1812      	adds	r2, r2, r0
 80038e6:	eb41 0303 	adc.w	r3, r1, r3
 80038ea:	f04f 0400 	mov.w	r4, #0
 80038ee:	f04f 0500 	mov.w	r5, #0
 80038f2:	00dd      	lsls	r5, r3, #3
 80038f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038f8:	00d4      	lsls	r4, r2, #3
 80038fa:	4622      	mov	r2, r4
 80038fc:	462b      	mov	r3, r5
 80038fe:	1814      	adds	r4, r2, r0
 8003900:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003904:	414b      	adcs	r3, r1
 8003906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	008b      	lsls	r3, r1, #2
 8003920:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003924:	0082      	lsls	r2, r0, #2
 8003926:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800392a:	f7fc fca9 	bl	8000280 <__aeabi_uldivmod>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <UART_SetConfig+0x734>)
 8003934:	fba3 1302 	umull	r1, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2164      	movs	r1, #100	; 0x64
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	3332      	adds	r3, #50	; 0x32
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <UART_SetConfig+0x734>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4432      	add	r2, r6
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	e7ff      	b.n	800395e <UART_SetConfig+0x722>
 800395e:	bf00      	nop
 8003960:	37f4      	adds	r7, #244	; 0xf4
 8003962:	46bd      	mov	sp, r7
 8003964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003968:	40011000 	.word	0x40011000
 800396c:	40011400 	.word	0x40011400
 8003970:	51eb851f 	.word	0x51eb851f

08003974 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003986:	2b84      	cmp	r3, #132	; 0x84
 8003988:	d005      	beq.n	8003996 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800398a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	3303      	adds	r3, #3
 8003994:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003996:	68fb      	ldr	r3, [r7, #12]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80039a8:	f001 f818 	bl	80049dc <vTaskStartScheduler>
  
  return osOK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80039b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b4:	b089      	sub	sp, #36	; 0x24
 80039b6:	af04      	add	r7, sp, #16
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d020      	beq.n	8003a06 <osThreadCreate+0x54>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01c      	beq.n	8003a06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685c      	ldr	r4, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681d      	ldr	r5, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691e      	ldr	r6, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ffc8 	bl	8003974 <makeFreeRtosPriority>
 80039e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039ee:	9202      	str	r2, [sp, #8]
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	9100      	str	r1, [sp, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4632      	mov	r2, r6
 80039f8:	4629      	mov	r1, r5
 80039fa:	4620      	mov	r0, r4
 80039fc:	f000 fe26 	bl	800464c <xTaskCreateStatic>
 8003a00:	4603      	mov	r3, r0
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e01c      	b.n	8003a40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685c      	ldr	r4, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a12:	b29e      	uxth	r6, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ffaa 	bl	8003974 <makeFreeRtosPriority>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	9200      	str	r2, [sp, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	4632      	mov	r2, r6
 8003a2e:	4629      	mov	r1, r5
 8003a30:	4620      	mov	r0, r4
 8003a32:	f000 fe68 	bl	8004706 <xTaskCreate>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d001      	beq.n	8003a40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a40:	68fb      	ldr	r3, [r7, #12]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <osDelay+0x16>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	e000      	b.n	8003a62 <osDelay+0x18>
 8003a60:	2301      	movs	r3, #1
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 ff86 	bl	8004974 <vTaskDelay>
  
  return osOK;
 8003a68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003a72:	b590      	push	{r4, r7, lr}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d011      	beq.n	8003aa8 <osMessageCreate+0x36>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6859      	ldr	r1, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2400      	movs	r4, #0
 8003a9e:	9400      	str	r4, [sp, #0]
 8003aa0:	f000 f92c 	bl	8003cfc <xQueueGenericCreateStatic>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	e008      	b.n	8003aba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f000 f99a 	bl	8003dec <xQueueGenericCreate>
 8003ab8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}

08003ac2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f103 0208 	add.w	r2, r3, #8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8003ada:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f103 0208 	add.w	r2, r3, #8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f103 0208 	add.w	r2, r3, #8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d103      	bne.n	8003b84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e00c      	b.n	8003b9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3308      	adds	r3, #8
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e002      	b.n	8003b92 <vListInsert+0x2e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d2f6      	bcs.n	8003b8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6892      	ldr	r2, [r2, #8]
 8003bec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6852      	ldr	r2, [r2, #4]
 8003bf6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d103      	bne.n	8003c0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	1e5a      	subs	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c56:	f001 fcf5 	bl	8005644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	441a      	add	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	3b01      	subs	r3, #1
 8003c88:	68f9      	ldr	r1, [r7, #12]
 8003c8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	441a      	add	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	22ff      	movs	r2, #255	; 0xff
 8003c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d114      	bne.n	8003cd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01a      	beq.n	8003cea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3310      	adds	r3, #16
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f001 f8d1 	bl	8004e60 <xTaskRemoveFromEventList>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <xQueueGenericReset+0xcc>)
 8003cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	e009      	b.n	8003cea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3310      	adds	r3, #16
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fef1 	bl	8003ac2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3324      	adds	r3, #36	; 0x24
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff feec 	bl	8003ac2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cea:	f001 fcdb 	bl	80056a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	; 0x38
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <xQueueGenericCreateStatic+0x52>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <xQueueGenericCreateStatic+0x56>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <xQueueGenericCreateStatic+0x58>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	623b      	str	r3, [r7, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <xQueueGenericCreateStatic+0x7e>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <xQueueGenericCreateStatic+0x82>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xQueueGenericCreateStatic+0x84>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	61fb      	str	r3, [r7, #28]
}
 8003d96:	bf00      	nop
 8003d98:	e7fe      	b.n	8003d98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d9a:	2348      	movs	r3, #72	; 0x48
 8003d9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b48      	cmp	r3, #72	; 0x48
 8003da2:	d00a      	beq.n	8003dba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	61bb      	str	r3, [r7, #24]
}
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f845 	bl	8003e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	613b      	str	r3, [r7, #16]
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e004      	b.n	8003e2c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	3348      	adds	r3, #72	; 0x48
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 fce9 	bl	8005808 <pvPortMalloc>
 8003e36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3348      	adds	r3, #72	; 0x48
 8003e46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e50:	79fa      	ldrb	r2, [r7, #7]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f805 	bl	8003e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e62:	69bb      	ldr	r3, [r7, #24]
	}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	69b8      	ldr	r0, [r7, #24]
 8003e9e:	f7ff fec5 	bl	8003c2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	; 0x38
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <xQueueGenericSend+0x32>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <xQueueGenericSend+0x40>
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <xQueueGenericSend+0x44>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <xQueueGenericSend+0x46>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <xQueueGenericSend+0x60>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d103      	bne.n	8003f1a <xQueueGenericSend+0x6e>
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <xQueueGenericSend+0x72>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <xQueueGenericSend+0x74>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <xQueueGenericSend+0x8e>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	623b      	str	r3, [r7, #32]
}
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f3a:	f001 f94d 	bl	80051d8 <xTaskGetSchedulerState>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <xQueueGenericSend+0x9e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <xQueueGenericSend+0xa2>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <xQueueGenericSend+0xa4>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xQueueGenericSend+0xbe>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	61fb      	str	r3, [r7, #28]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f6a:	f001 fb6b 	bl	8005644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <xQueueGenericSend+0xd4>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d129      	bne.n	8003fd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f86:	f000 fa51 	bl	800442c <prvCopyDataToQueue>
 8003f8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	3324      	adds	r3, #36	; 0x24
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 ff61 	bl	8004e60 <xTaskRemoveFromEventList>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <xQueueGenericSend+0x1f8>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	e00a      	b.n	8003fcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <xQueueGenericSend+0x1f8>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fcc:	f001 fb6a 	bl	80056a4 <vPortExitCritical>
				return pdPASS;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e063      	b.n	800409c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fda:	f001 fb63 	bl	80056a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e05c      	b.n	800409c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ff99 	bl	8004f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ff6:	f001 fb55 	bl	80056a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ffa:	f000 fd4f 	bl	8004a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ffe:	f001 fb21 	bl	8005644 <vPortEnterCritical>
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004008:	b25b      	sxtb	r3, r3
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d103      	bne.n	8004018 <xQueueGenericSend+0x16c>
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800401e:	b25b      	sxtb	r3, r3
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d103      	bne.n	800402e <xQueueGenericSend+0x182>
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402e:	f001 fb39 	bl	80056a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004032:	1d3a      	adds	r2, r7, #4
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f000 ff88 	bl	8004f50 <xTaskCheckForTimeOut>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d124      	bne.n	8004090 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004048:	f000 fae8 	bl	800461c <prvIsQueueFull>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d018      	beq.n	8004084 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	3310      	adds	r3, #16
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fedc 	bl	8004e18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004062:	f000 fa73 	bl	800454c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004066:	f000 fd27 	bl	8004ab8 <xTaskResumeAll>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f af7c 	bne.w	8003f6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <xQueueGenericSend+0x1f8>)
 8004074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	e772      	b.n	8003f6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004086:	f000 fa61 	bl	800454c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800408a:	f000 fd15 	bl	8004ab8 <xTaskResumeAll>
 800408e:	e76c      	b.n	8003f6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004092:	f000 fa5b 	bl	800454c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004096:	f000 fd0f 	bl	8004ab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800409a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800409c:	4618      	mov	r0, r3
 800409e:	3738      	adds	r7, #56	; 0x38
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08c      	sub	sp, #48	; 0x30
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <xQueueReceive+0x30>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	623b      	str	r3, [r7, #32]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <xQueueReceive+0x3e>
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <xQueueReceive+0x42>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <xQueueReceive+0x44>
 80040ea:	2300      	movs	r3, #0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <xQueueReceive+0x5e>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	61fb      	str	r3, [r7, #28]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004106:	f001 f867 	bl	80051d8 <xTaskGetSchedulerState>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <xQueueReceive+0x6e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <xQueueReceive+0x72>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <xQueueReceive+0x74>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xQueueReceive+0x8e>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	61bb      	str	r3, [r7, #24]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004136:	f001 fa85 	bl	8005644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01f      	beq.n	8004186 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800414a:	f000 f9d9 	bl	8004500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	1e5a      	subs	r2, r3, #1
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	3310      	adds	r3, #16
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fe7c 	bl	8004e60 <xTaskRemoveFromEventList>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <xQueueReceive+0x1bc>)
 8004170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800417e:	f001 fa91 	bl	80056a4 <vPortExitCritical>
				return pdPASS;
 8004182:	2301      	movs	r3, #1
 8004184:	e069      	b.n	800425a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800418c:	f001 fa8a 	bl	80056a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004190:	2300      	movs	r3, #0
 8004192:	e062      	b.n	800425a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800419a:	f107 0310 	add.w	r3, r7, #16
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fec0 	bl	8004f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041a8:	f001 fa7c 	bl	80056a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ac:	f000 fc76 	bl	8004a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041b0:	f001 fa48 	bl	8005644 <vPortEnterCritical>
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ba:	b25b      	sxtb	r3, r3
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d103      	bne.n	80041ca <xQueueReceive+0x122>
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d103      	bne.n	80041e0 <xQueueReceive+0x138>
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e0:	f001 fa60 	bl	80056a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041e4:	1d3a      	adds	r2, r7, #4
 80041e6:	f107 0310 	add.w	r3, r7, #16
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 feaf 	bl	8004f50 <xTaskCheckForTimeOut>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d123      	bne.n	8004240 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041fa:	f000 f9f9 	bl	80045f0 <prvIsQueueEmpty>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d017      	beq.n	8004234 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	3324      	adds	r3, #36	; 0x24
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe03 	bl	8004e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004214:	f000 f99a 	bl	800454c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004218:	f000 fc4e 	bl	8004ab8 <xTaskResumeAll>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d189      	bne.n	8004136 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <xQueueReceive+0x1bc>)
 8004224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	e780      	b.n	8004136 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004236:	f000 f989 	bl	800454c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800423a:	f000 fc3d 	bl	8004ab8 <xTaskResumeAll>
 800423e:	e77a      	b.n	8004136 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004242:	f000 f983 	bl	800454c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004246:	f000 fc37 	bl	8004ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800424a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424c:	f000 f9d0 	bl	80045f0 <prvIsQueueEmpty>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	f43f af6f 	beq.w	8004136 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004258:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800425a:	4618      	mov	r0, r3
 800425c:	3730      	adds	r7, #48	; 0x30
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08e      	sub	sp, #56	; 0x38
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004274:	2300      	movs	r3, #0
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <xQueuePeek+0x30>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <xQueuePeek+0x3e>
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <xQueuePeek+0x42>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueuePeek+0x44>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xQueuePeek+0x5e>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	623b      	str	r3, [r7, #32]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042c6:	f000 ff87 	bl	80051d8 <xTaskGetSchedulerState>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <xQueuePeek+0x6e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <xQueuePeek+0x72>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <xQueuePeek+0x74>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xQueuePeek+0x8e>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61fb      	str	r3, [r7, #28]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042f6:	f001 f9a5 	bl	8005644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d021      	beq.n	800434a <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004310:	f000 f8f6 	bl	8004500 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004318:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00f      	beq.n	8004342 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	3324      	adds	r3, #36	; 0x24
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fd9a 	bl	8004e60 <xTaskRemoveFromEventList>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <xQueuePeek+0x1c0>)
 8004334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004342:	f001 f9af 	bl	80056a4 <vPortExitCritical>
				return pdPASS;
 8004346:	2301      	movs	r3, #1
 8004348:	e069      	b.n	800441e <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d103      	bne.n	8004358 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004350:	f001 f9a8 	bl	80056a4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004354:	2300      	movs	r3, #0
 8004356:	e062      	b.n	800441e <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800435e:	f107 0314 	add.w	r3, r7, #20
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fdde 	bl	8004f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800436c:	f001 f99a 	bl	80056a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004370:	f000 fb94 	bl	8004a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004374:	f001 f966 	bl	8005644 <vPortEnterCritical>
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800437e:	b25b      	sxtb	r3, r3
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d103      	bne.n	800438e <xQueuePeek+0x126>
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004394:	b25b      	sxtb	r3, r3
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d103      	bne.n	80043a4 <xQueuePeek+0x13c>
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a4:	f001 f97e 	bl	80056a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043a8:	1d3a      	adds	r2, r7, #4
 80043aa:	f107 0314 	add.w	r3, r7, #20
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fdcd 	bl	8004f50 <xTaskCheckForTimeOut>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d123      	bne.n	8004404 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043be:	f000 f917 	bl	80045f0 <prvIsQueueEmpty>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d017      	beq.n	80043f8 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	3324      	adds	r3, #36	; 0x24
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fd21 	bl	8004e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043d8:	f000 f8b8 	bl	800454c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043dc:	f000 fb6c 	bl	8004ab8 <xTaskResumeAll>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d187      	bne.n	80042f6 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <xQueuePeek+0x1c0>)
 80043e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	e77e      	b.n	80042f6 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80043f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043fa:	f000 f8a7 	bl	800454c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043fe:	f000 fb5b 	bl	8004ab8 <xTaskResumeAll>
 8004402:	e778      	b.n	80042f6 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8004404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004406:	f000 f8a1 	bl	800454c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800440a:	f000 fb55 	bl	8004ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800440e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004410:	f000 f8ee 	bl	80045f0 <prvIsQueueEmpty>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	f43f af6d 	beq.w	80042f6 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800441c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800441e:	4618      	mov	r0, r3
 8004420:	3738      	adds	r7, #56	; 0x38
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10d      	bne.n	8004466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d14d      	bne.n	80044ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fedc 	bl	8005214 <xTaskPriorityDisinherit>
 800445c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	e043      	b.n	80044ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d119      	bne.n	80044a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6858      	ldr	r0, [r3, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	461a      	mov	r2, r3
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	f001 fd91 	bl	8005f9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	d32b      	bcc.n	80044ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	e026      	b.n	80044ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68d8      	ldr	r0, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	461a      	mov	r2, r3
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	f001 fd77 	bl	8005f9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	425b      	negs	r3, r3
 80044ba:	441a      	add	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d207      	bcs.n	80044dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	425b      	negs	r3, r3
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d105      	bne.n	80044ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044f6:	697b      	ldr	r3, [r7, #20]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d018      	beq.n	8004544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	441a      	add	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d303      	bcc.n	8004534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68d9      	ldr	r1, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	461a      	mov	r2, r3
 800453e:	6838      	ldr	r0, [r7, #0]
 8004540:	f001 fd2d 	bl	8005f9e <memcpy>
	}
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004554:	f001 f876 	bl	8005644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800455e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004560:	e011      	b.n	8004586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b00      	cmp	r3, #0
 8004568:	d012      	beq.n	8004590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3324      	adds	r3, #36	; 0x24
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fc76 	bl	8004e60 <xTaskRemoveFromEventList>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800457a:	f000 fd4b 	bl	8005014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	3b01      	subs	r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	dce9      	bgt.n	8004562 <prvUnlockQueue+0x16>
 800458e:	e000      	b.n	8004592 <prvUnlockQueue+0x46>
					break;
 8004590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	22ff      	movs	r2, #255	; 0xff
 8004596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800459a:	f001 f883 	bl	80056a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800459e:	f001 f851 	bl	8005644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045aa:	e011      	b.n	80045d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d012      	beq.n	80045da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3310      	adds	r3, #16
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fc51 	bl	8004e60 <xTaskRemoveFromEventList>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045c4:	f000 fd26 	bl	8005014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045c8:	7bbb      	ldrb	r3, [r7, #14]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dce9      	bgt.n	80045ac <prvUnlockQueue+0x60>
 80045d8:	e000      	b.n	80045dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	22ff      	movs	r2, #255	; 0xff
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045e4:	f001 f85e 	bl	80056a4 <vPortExitCritical>
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045f8:	f001 f824 	bl	8005644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e001      	b.n	800460e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800460e:	f001 f849 	bl	80056a4 <vPortExitCritical>

	return xReturn;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004624:	f001 f80e 	bl	8005644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	429a      	cmp	r2, r3
 8004632:	d102      	bne.n	800463a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e001      	b.n	800463e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800463e:	f001 f831 	bl	80056a4 <vPortExitCritical>

	return xReturn;
 8004642:	68fb      	ldr	r3, [r7, #12]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	; 0x38
 8004650:	af04      	add	r7, sp, #16
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	623b      	str	r3, [r7, #32]
}
 8004672:	bf00      	nop
 8004674:	e7fe      	b.n	8004674 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xTaskCreateStatic+0x46>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61fb      	str	r3, [r7, #28]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004692:	2354      	movs	r3, #84	; 0x54
 8004694:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b54      	cmp	r3, #84	; 0x54
 800469a:	d00a      	beq.n	80046b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	61bb      	str	r3, [r7, #24]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01e      	beq.n	80046f8 <xTaskCreateStatic+0xac>
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046d2:	2300      	movs	r3, #0
 80046d4:	9303      	str	r3, [sp, #12]
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	f107 0314 	add.w	r3, r7, #20
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f850 	bl	8004790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046f2:	f000 f8d5 	bl	80048a0 <prvAddNewTaskToReadyList>
 80046f6:	e001      	b.n	80046fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046fc:	697b      	ldr	r3, [r7, #20]
	}
 80046fe:	4618      	mov	r0, r3
 8004700:	3728      	adds	r7, #40	; 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004706:	b580      	push	{r7, lr}
 8004708:	b08c      	sub	sp, #48	; 0x30
 800470a:	af04      	add	r7, sp, #16
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4618      	mov	r0, r3
 800471c:	f001 f874 	bl	8005808 <pvPortMalloc>
 8004720:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004728:	2054      	movs	r0, #84	; 0x54
 800472a:	f001 f86d 	bl	8005808 <pvPortMalloc>
 800472e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
 800473c:	e005      	b.n	800474a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f001 f926 	bl	8005990 <vPortFree>
 8004744:	e001      	b.n	800474a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d017      	beq.n	8004780 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	2300      	movs	r3, #0
 800475c:	9303      	str	r3, [sp, #12]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	9302      	str	r3, [sp, #8]
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f80e 	bl	8004790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004774:	69f8      	ldr	r0, [r7, #28]
 8004776:	f000 f893 	bl	80048a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800477a:	2301      	movs	r3, #1
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e002      	b.n	8004786 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004780:	f04f 33ff 	mov.w	r3, #4294967295
 8004784:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004786:	69bb      	ldr	r3, [r7, #24]
	}
 8004788:	4618      	mov	r0, r3
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047a8:	3b01      	subs	r3, #1
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f023 0307 	bic.w	r3, r3, #7
 80047b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	617b      	str	r3, [r7, #20]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01f      	beq.n	800481e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	e012      	b.n	800480a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	7819      	ldrb	r1, [r3, #0]
 80047ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	3334      	adds	r3, #52	; 0x34
 80047f4:	460a      	mov	r2, r1
 80047f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d006      	beq.n	8004812 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3301      	adds	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2b0f      	cmp	r3, #15
 800480e:	d9e9      	bls.n	80047e4 <prvInitialiseNewTask+0x54>
 8004810:	e000      	b.n	8004814 <prvInitialiseNewTask+0x84>
			{
				break;
 8004812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800481c:	e003      	b.n	8004826 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	2b06      	cmp	r3, #6
 800482a:	d901      	bls.n	8004830 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800482c:	2306      	movs	r3, #6
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800483a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	2200      	movs	r2, #0
 8004840:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	3304      	adds	r3, #4
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff f95b 	bl	8003b02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	3318      	adds	r3, #24
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff f956 	bl	8003b02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	f1c3 0207 	rsb	r2, r3, #7
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	2200      	movs	r2, #0
 8004870:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	69b8      	ldr	r0, [r7, #24]
 8004880:	f000 fdb4 	bl	80053ec <pxPortInitialiseStack>
 8004884:	4602      	mov	r2, r0
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004896:	bf00      	nop
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048a8:	f000 fecc 	bl	8005644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048ac:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <prvAddNewTaskToReadyList+0xb8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a29      	ldr	r2, [pc, #164]	; (8004958 <prvAddNewTaskToReadyList+0xb8>)
 80048b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048b6:	4b29      	ldr	r3, [pc, #164]	; (800495c <prvAddNewTaskToReadyList+0xbc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048be:	4a27      	ldr	r2, [pc, #156]	; (800495c <prvAddNewTaskToReadyList+0xbc>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <prvAddNewTaskToReadyList+0xb8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d110      	bne.n	80048ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048cc:	f000 fbc6 	bl	800505c <prvInitialiseTaskLists>
 80048d0:	e00d      	b.n	80048ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <prvAddNewTaskToReadyList+0xc0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <prvAddNewTaskToReadyList+0xbc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d802      	bhi.n	80048ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048e8:	4a1c      	ldr	r2, [pc, #112]	; (800495c <prvAddNewTaskToReadyList+0xbc>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <prvAddNewTaskToReadyList+0xc4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <prvAddNewTaskToReadyList+0xc4>)
 80048f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	2201      	movs	r2, #1
 80048fe:	409a      	lsls	r2, r3
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <prvAddNewTaskToReadyList+0xc8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4313      	orrs	r3, r2
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <prvAddNewTaskToReadyList+0xc8>)
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4a15      	ldr	r2, [pc, #84]	; (800496c <prvAddNewTaskToReadyList+0xcc>)
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3304      	adds	r3, #4
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f7ff f8fb 	bl	8003b1c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004926:	f000 febd 	bl	80056a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <prvAddNewTaskToReadyList+0xc0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00e      	beq.n	8004950 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvAddNewTaskToReadyList+0xbc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	429a      	cmp	r2, r3
 800493e:	d207      	bcs.n	8004950 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <prvAddNewTaskToReadyList+0xd0>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000414 	.word	0x20000414
 800495c:	20000314 	.word	0x20000314
 8004960:	20000420 	.word	0x20000420
 8004964:	20000430 	.word	0x20000430
 8004968:	2000041c 	.word	0x2000041c
 800496c:	20000318 	.word	0x20000318
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d017      	beq.n	80049b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <vTaskDelay+0x60>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <vTaskDelay+0x30>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	60bb      	str	r3, [r7, #8]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049a4:	f000 f87a 	bl	8004a9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049a8:	2100      	movs	r1, #0
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fcb8 	bl	8005320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049b0:	f000 f882 	bl	8004ab8 <xTaskResumeAll>
 80049b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <vTaskDelay+0x64>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	2000043c 	.word	0x2000043c
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049ea:	463a      	mov	r2, r7
 80049ec:	1d39      	adds	r1, r7, #4
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fb ff50 	bl	8000898 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	9202      	str	r2, [sp, #8]
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2300      	movs	r3, #0
 8004a08:	460a      	mov	r2, r1
 8004a0a:	491e      	ldr	r1, [pc, #120]	; (8004a84 <vTaskStartScheduler+0xa8>)
 8004a0c:	481e      	ldr	r0, [pc, #120]	; (8004a88 <vTaskStartScheduler+0xac>)
 8004a0e:	f7ff fe1d 	bl	800464c <xTaskCreateStatic>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <vTaskStartScheduler+0xb0>)
 8004a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a18:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <vTaskStartScheduler+0xb0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e001      	b.n	8004a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d116      	bne.n	8004a5e <vTaskStartScheduler+0x82>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
}
 8004a42:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a44:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <vTaskStartScheduler+0xb4>)
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <vTaskStartScheduler+0xb8>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <vTaskStartScheduler+0xbc>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a58:	f000 fd52 	bl	8005500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a5c:	e00e      	b.n	8004a7c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d10a      	bne.n	8004a7c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60fb      	str	r3, [r7, #12]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <vTaskStartScheduler+0x9e>
}
 8004a7c:	bf00      	nop
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	0800733c 	.word	0x0800733c
 8004a88:	0800502d 	.word	0x0800502d
 8004a8c:	20000438 	.word	0x20000438
 8004a90:	20000434 	.word	0x20000434
 8004a94:	20000420 	.word	0x20000420
 8004a98:	20000418 	.word	0x20000418

08004a9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <vTaskSuspendAll+0x18>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <vTaskSuspendAll+0x18>)
 8004aa8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004aaa:	bf00      	nop
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	2000043c 	.word	0x2000043c

08004ab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ac6:	4b41      	ldr	r3, [pc, #260]	; (8004bcc <xTaskResumeAll+0x114>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	603b      	str	r3, [r7, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ae4:	f000 fdae 	bl	8005644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ae8:	4b38      	ldr	r3, [pc, #224]	; (8004bcc <xTaskResumeAll+0x114>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	4a37      	ldr	r2, [pc, #220]	; (8004bcc <xTaskResumeAll+0x114>)
 8004af0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af2:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <xTaskResumeAll+0x114>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d161      	bne.n	8004bbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004afa:	4b35      	ldr	r3, [pc, #212]	; (8004bd0 <xTaskResumeAll+0x118>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d05d      	beq.n	8004bbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b02:	e02e      	b.n	8004b62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b04:	4b33      	ldr	r3, [pc, #204]	; (8004bd4 <xTaskResumeAll+0x11c>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3318      	adds	r3, #24
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff f860 	bl	8003bd6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff f85b 	bl	8003bd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	2201      	movs	r2, #1
 8004b26:	409a      	lsls	r2, r3
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <xTaskResumeAll+0x120>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <xTaskResumeAll+0x120>)
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4a27      	ldr	r2, [pc, #156]	; (8004bdc <xTaskResumeAll+0x124>)
 8004b40:	441a      	add	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7fe ffe7 	bl	8003b1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <xTaskResumeAll+0x128>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004b5c:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <xTaskResumeAll+0x12c>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b62:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <xTaskResumeAll+0x11c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1cc      	bne.n	8004b04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b70:	f000 fb12 	bl	8005198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <xTaskResumeAll+0x130>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d010      	beq.n	8004ba2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b80:	f000 f836 	bl	8004bf0 <xTaskIncrementTick>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b8a:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <xTaskResumeAll+0x12c>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f1      	bne.n	8004b80 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004b9c:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <xTaskResumeAll+0x130>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <xTaskResumeAll+0x12c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004baa:	2301      	movs	r3, #1
 8004bac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <xTaskResumeAll+0x134>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bbe:	f000 fd71 	bl	80056a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	2000043c 	.word	0x2000043c
 8004bd0:	20000414 	.word	0x20000414
 8004bd4:	200003d4 	.word	0x200003d4
 8004bd8:	2000041c 	.word	0x2000041c
 8004bdc:	20000318 	.word	0x20000318
 8004be0:	20000314 	.word	0x20000314
 8004be4:	20000428 	.word	0x20000428
 8004be8:	20000424 	.word	0x20000424
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfa:	4b4e      	ldr	r3, [pc, #312]	; (8004d34 <xTaskIncrementTick+0x144>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 8088 	bne.w	8004d14 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c04:	4b4c      	ldr	r3, [pc, #304]	; (8004d38 <xTaskIncrementTick+0x148>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c0c:	4a4a      	ldr	r2, [pc, #296]	; (8004d38 <xTaskIncrementTick+0x148>)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d120      	bne.n	8004c5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c18:	4b48      	ldr	r3, [pc, #288]	; (8004d3c <xTaskIncrementTick+0x14c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	603b      	str	r3, [r7, #0]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <xTaskIncrementTick+0x46>
 8004c38:	4b40      	ldr	r3, [pc, #256]	; (8004d3c <xTaskIncrementTick+0x14c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	4b40      	ldr	r3, [pc, #256]	; (8004d40 <xTaskIncrementTick+0x150>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a3e      	ldr	r2, [pc, #248]	; (8004d3c <xTaskIncrementTick+0x14c>)
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4a3e      	ldr	r2, [pc, #248]	; (8004d40 <xTaskIncrementTick+0x150>)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <xTaskIncrementTick+0x154>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	4a3c      	ldr	r2, [pc, #240]	; (8004d44 <xTaskIncrementTick+0x154>)
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	f000 fa9f 	bl	8005198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <xTaskIncrementTick+0x158>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d348      	bcc.n	8004cf6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <xTaskIncrementTick+0x14c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d104      	bne.n	8004c78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6e:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <xTaskIncrementTick+0x158>)
 8004c70:	f04f 32ff 	mov.w	r2, #4294967295
 8004c74:	601a      	str	r2, [r3, #0]
					break;
 8004c76:	e03e      	b.n	8004cf6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c78:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <xTaskIncrementTick+0x14c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d203      	bcs.n	8004c98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c90:	4a2d      	ldr	r2, [pc, #180]	; (8004d48 <xTaskIncrementTick+0x158>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c96:	e02e      	b.n	8004cf6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe ff9a 	bl	8003bd6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	3318      	adds	r3, #24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe ff91 	bl	8003bd6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	2201      	movs	r2, #1
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <xTaskIncrementTick+0x15c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	4a22      	ldr	r2, [pc, #136]	; (8004d4c <xTaskIncrementTick+0x15c>)
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <xTaskIncrementTick+0x160>)
 8004cd4:	441a      	add	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f7fe ff1d 	bl	8003b1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <xTaskIncrementTick+0x164>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3b9      	bcc.n	8004c64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf4:	e7b6      	b.n	8004c64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cf6:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <xTaskIncrementTick+0x164>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	4914      	ldr	r1, [pc, #80]	; (8004d50 <xTaskIncrementTick+0x160>)
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d907      	bls.n	8004d1e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e004      	b.n	8004d1e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <xTaskIncrementTick+0x168>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	4a0f      	ldr	r2, [pc, #60]	; (8004d58 <xTaskIncrementTick+0x168>)
 8004d1c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <xTaskIncrementTick+0x16c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	2000043c 	.word	0x2000043c
 8004d38:	20000418 	.word	0x20000418
 8004d3c:	200003cc 	.word	0x200003cc
 8004d40:	200003d0 	.word	0x200003d0
 8004d44:	2000042c 	.word	0x2000042c
 8004d48:	20000434 	.word	0x20000434
 8004d4c:	2000041c 	.word	0x2000041c
 8004d50:	20000318 	.word	0x20000318
 8004d54:	20000314 	.word	0x20000314
 8004d58:	20000424 	.word	0x20000424
 8004d5c:	20000428 	.word	0x20000428

08004d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d66:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <vTaskSwitchContext+0xa4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d6e:	4b26      	ldr	r3, [pc, #152]	; (8004e08 <vTaskSwitchContext+0xa8>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d74:	e03f      	b.n	8004df6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <vTaskSwitchContext+0xa8>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7c:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <vTaskSwitchContext+0xac>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	fab3 f383 	clz	r3, r3
 8004d88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d8a:	7afb      	ldrb	r3, [r7, #11]
 8004d8c:	f1c3 031f 	rsb	r3, r3, #31
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	491f      	ldr	r1, [pc, #124]	; (8004e10 <vTaskSwitchContext+0xb0>)
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <vTaskSwitchContext+0x5c>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	607b      	str	r3, [r7, #4]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <vTaskSwitchContext+0x5a>
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <vTaskSwitchContext+0xb0>)
 8004dc8:	4413      	add	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d104      	bne.n	8004dec <vTaskSwitchContext+0x8c>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <vTaskSwitchContext+0xb4>)
 8004df4:	6013      	str	r3, [r2, #0]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000043c 	.word	0x2000043c
 8004e08:	20000428 	.word	0x20000428
 8004e0c:	2000041c 	.word	0x2000041c
 8004e10:	20000318 	.word	0x20000318
 8004e14:	20000314 	.word	0x20000314

08004e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60fb      	str	r3, [r7, #12]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <vTaskPlaceOnEventList+0x44>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3318      	adds	r3, #24
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fe fe8c 	bl	8003b64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	6838      	ldr	r0, [r7, #0]
 8004e50:	f000 fa66 	bl	8005320 <prvAddCurrentTaskToDelayedList>
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000314 	.word	0x20000314

08004e60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60fb      	str	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	3318      	adds	r3, #24
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe fea0 	bl	8003bd6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <xTaskRemoveFromEventList+0xac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d11c      	bne.n	8004ed8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fe97 	bl	8003bd6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	2201      	movs	r2, #1
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	4b17      	ldr	r3, [pc, #92]	; (8004f10 <xTaskRemoveFromEventList+0xb0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <xTaskRemoveFromEventList+0xb0>)
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <xTaskRemoveFromEventList+0xb4>)
 8004ec8:	441a      	add	r2, r3
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7fe fe23 	bl	8003b1c <vListInsertEnd>
 8004ed6:	e005      	b.n	8004ee4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	3318      	adds	r3, #24
 8004edc:	4619      	mov	r1, r3
 8004ede:	480e      	ldr	r0, [pc, #56]	; (8004f18 <xTaskRemoveFromEventList+0xb8>)
 8004ee0:	f7fe fe1c 	bl	8003b1c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <xTaskRemoveFromEventList+0xbc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d905      	bls.n	8004efe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <xTaskRemoveFromEventList+0xc0>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e001      	b.n	8004f02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f02:	697b      	ldr	r3, [r7, #20]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	2000043c 	.word	0x2000043c
 8004f10:	2000041c 	.word	0x2000041c
 8004f14:	20000318 	.word	0x20000318
 8004f18:	200003d4 	.word	0x200003d4
 8004f1c:	20000314 	.word	0x20000314
 8004f20:	20000428 	.word	0x20000428

08004f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <vTaskInternalSetTimeOutState+0x24>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <vTaskInternalSetTimeOutState+0x28>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	605a      	str	r2, [r3, #4]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	2000042c 	.word	0x2000042c
 8004f4c:	20000418 	.word	0x20000418

08004f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	613b      	str	r3, [r7, #16]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	60fb      	str	r3, [r7, #12]
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f92:	f000 fb57 	bl	8005644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <xTaskCheckForTimeOut+0xbc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d102      	bne.n	8004fb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e023      	b.n	8004ffe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <xTaskCheckForTimeOut+0xc0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d007      	beq.n	8004fd2 <xTaskCheckForTimeOut+0x82>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	e015      	b.n	8004ffe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d20b      	bcs.n	8004ff4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1ad2      	subs	r2, r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ff9b 	bl	8004f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e004      	b.n	8004ffe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ffe:	f000 fb51 	bl	80056a4 <vPortExitCritical>

	return xReturn;
 8005002:	69fb      	ldr	r3, [r7, #28]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000418 	.word	0x20000418
 8005010:	2000042c 	.word	0x2000042c

08005014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <vTaskMissedYield+0x14>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	20000428 	.word	0x20000428

0800502c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005034:	f000 f852 	bl	80050dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005038:	4b06      	ldr	r3, [pc, #24]	; (8005054 <prvIdleTask+0x28>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d9f9      	bls.n	8005034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <prvIdleTask+0x2c>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005050:	e7f0      	b.n	8005034 <prvIdleTask+0x8>
 8005052:	bf00      	nop
 8005054:	20000318 	.word	0x20000318
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	e00c      	b.n	8005082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4a12      	ldr	r2, [pc, #72]	; (80050bc <prvInitialiseTaskLists+0x60>)
 8005074:	4413      	add	r3, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fd23 	bl	8003ac2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3301      	adds	r3, #1
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b06      	cmp	r3, #6
 8005086:	d9ef      	bls.n	8005068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005088:	480d      	ldr	r0, [pc, #52]	; (80050c0 <prvInitialiseTaskLists+0x64>)
 800508a:	f7fe fd1a 	bl	8003ac2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800508e:	480d      	ldr	r0, [pc, #52]	; (80050c4 <prvInitialiseTaskLists+0x68>)
 8005090:	f7fe fd17 	bl	8003ac2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005094:	480c      	ldr	r0, [pc, #48]	; (80050c8 <prvInitialiseTaskLists+0x6c>)
 8005096:	f7fe fd14 	bl	8003ac2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800509a:	480c      	ldr	r0, [pc, #48]	; (80050cc <prvInitialiseTaskLists+0x70>)
 800509c:	f7fe fd11 	bl	8003ac2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050a0:	480b      	ldr	r0, [pc, #44]	; (80050d0 <prvInitialiseTaskLists+0x74>)
 80050a2:	f7fe fd0e 	bl	8003ac2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <prvInitialiseTaskLists+0x78>)
 80050a8:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <prvInitialiseTaskLists+0x64>)
 80050aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <prvInitialiseTaskLists+0x7c>)
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <prvInitialiseTaskLists+0x68>)
 80050b0:	601a      	str	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000318 	.word	0x20000318
 80050c0:	200003a4 	.word	0x200003a4
 80050c4:	200003b8 	.word	0x200003b8
 80050c8:	200003d4 	.word	0x200003d4
 80050cc:	200003e8 	.word	0x200003e8
 80050d0:	20000400 	.word	0x20000400
 80050d4:	200003cc 	.word	0x200003cc
 80050d8:	200003d0 	.word	0x200003d0

080050dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050e2:	e019      	b.n	8005118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050e4:	f000 faae 	bl	8005644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e8:	4b10      	ldr	r3, [pc, #64]	; (800512c <prvCheckTasksWaitingTermination+0x50>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fe fd6e 	bl	8003bd6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050fa:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <prvCheckTasksWaitingTermination+0x54>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <prvCheckTasksWaitingTermination+0x54>)
 8005102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <prvCheckTasksWaitingTermination+0x58>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3b01      	subs	r3, #1
 800510a:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <prvCheckTasksWaitingTermination+0x58>)
 800510c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800510e:	f000 fac9 	bl	80056a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f810 	bl	8005138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <prvCheckTasksWaitingTermination+0x58>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e1      	bne.n	80050e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200003e8 	.word	0x200003e8
 8005130:	20000414 	.word	0x20000414
 8005134:	200003fc 	.word	0x200003fc

08005138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005146:	2b00      	cmp	r3, #0
 8005148:	d108      	bne.n	800515c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fc1e 	bl	8005990 <vPortFree>
				vPortFree( pxTCB );
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fc1b 	bl	8005990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800515a:	e018      	b.n	800518e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005162:	2b01      	cmp	r3, #1
 8005164:	d103      	bne.n	800516e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fc12 	bl	8005990 <vPortFree>
	}
 800516c:	e00f      	b.n	800518e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005174:	2b02      	cmp	r3, #2
 8005176:	d00a      	beq.n	800518e <prvDeleteTCB+0x56>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	60fb      	str	r3, [r7, #12]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <prvDeleteTCB+0x54>
	}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800519e:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <prvResetNextTaskUnblockTime+0x38>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <prvResetNextTaskUnblockTime+0x3c>)
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051b0:	e008      	b.n	80051c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b2:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <prvResetNextTaskUnblockTime+0x38>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a04      	ldr	r2, [pc, #16]	; (80051d4 <prvResetNextTaskUnblockTime+0x3c>)
 80051c2:	6013      	str	r3, [r2, #0]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	200003cc 	.word	0x200003cc
 80051d4:	20000434 	.word	0x20000434

080051d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051de:	4b0b      	ldr	r3, [pc, #44]	; (800520c <xTaskGetSchedulerState+0x34>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051e6:	2301      	movs	r3, #1
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	e008      	b.n	80051fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <xTaskGetSchedulerState+0x38>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051f4:	2302      	movs	r3, #2
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	e001      	b.n	80051fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051fe:	687b      	ldr	r3, [r7, #4]
	}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000420 	.word	0x20000420
 8005210:	2000043c 	.word	0x2000043c

08005214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d06e      	beq.n	8005308 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800522a:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <xTaskPriorityDisinherit+0x100>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	429a      	cmp	r2, r3
 8005232:	d00a      	beq.n	800524a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	60fb      	str	r3, [r7, #12]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	60bb      	str	r3, [r7, #8]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526c:	1e5a      	subs	r2, r3, #1
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	429a      	cmp	r2, r3
 800527c:	d044      	beq.n	8005308 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005282:	2b00      	cmp	r3, #0
 8005284:	d140      	bne.n	8005308 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3304      	adds	r3, #4
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe fca3 	bl	8003bd6 <uxListRemove>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d115      	bne.n	80052c2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	491f      	ldr	r1, [pc, #124]	; (8005318 <xTaskPriorityDisinherit+0x104>)
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xTaskPriorityDisinherit+0xae>
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	2201      	movs	r2, #1
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43da      	mvns	r2, r3
 80052b8:	4b18      	ldr	r3, [pc, #96]	; (800531c <xTaskPriorityDisinherit+0x108>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4013      	ands	r3, r2
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <xTaskPriorityDisinherit+0x108>)
 80052c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	f1c3 0207 	rsb	r2, r3, #7
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	2201      	movs	r2, #1
 80052dc:	409a      	lsls	r2, r3
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <xTaskPriorityDisinherit+0x108>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	4a0d      	ldr	r2, [pc, #52]	; (800531c <xTaskPriorityDisinherit+0x108>)
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4a08      	ldr	r2, [pc, #32]	; (8005318 <xTaskPriorityDisinherit+0x104>)
 80052f6:	441a      	add	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f7fe fc0c 	bl	8003b1c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005308:	697b      	ldr	r3, [r7, #20]
	}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000314 	.word	0x20000314
 8005318:	20000318 	.word	0x20000318
 800531c:	2000041c 	.word	0x2000041c

08005320 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800532a:	4b29      	ldr	r3, [pc, #164]	; (80053d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fc4d 	bl	8003bd6 <uxListRemove>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	2201      	movs	r2, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43da      	mvns	r2, r3
 8005350:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4013      	ands	r3, r2
 8005356:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005358:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d10a      	bne.n	8005378 <prvAddCurrentTaskToDelayedList+0x58>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3304      	adds	r3, #4
 800536e:	4619      	mov	r1, r3
 8005370:	481a      	ldr	r0, [pc, #104]	; (80053dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005372:	f7fe fbd3 	bl	8003b1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005376:	e026      	b.n	80053c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	429a      	cmp	r2, r3
 800538e:	d209      	bcs.n	80053a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fe fbe1 	bl	8003b64 <vListInsert>
}
 80053a2:	e010      	b.n	80053c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053a4:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f7fe fbd7 	bl	8003b64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d202      	bcs.n	80053c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80053c0:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6013      	str	r3, [r2, #0]
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000418 	.word	0x20000418
 80053d4:	20000314 	.word	0x20000314
 80053d8:	2000041c 	.word	0x2000041c
 80053dc:	20000400 	.word	0x20000400
 80053e0:	200003d0 	.word	0x200003d0
 80053e4:	200003cc 	.word	0x200003cc
 80053e8:	20000434 	.word	0x20000434

080053ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3b04      	subs	r3, #4
 80053fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3b04      	subs	r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3b04      	subs	r3, #4
 800541a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <pxPortInitialiseStack+0x64>)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3b14      	subs	r3, #20
 8005426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3b04      	subs	r3, #4
 8005432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f06f 0202 	mvn.w	r2, #2
 800543a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3b20      	subs	r3, #32
 8005440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	08005455 	.word	0x08005455

08005454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800545e:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <prvTaskExitError+0x54>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	d00a      	beq.n	800547e <prvTaskExitError+0x2a>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60fb      	str	r3, [r7, #12]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <prvTaskExitError+0x28>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	60bb      	str	r3, [r7, #8]
}
 8005490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005492:	bf00      	nop
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0fc      	beq.n	8005494 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	2000002c 	.word	0x2000002c
 80054ac:	00000000 	.word	0x00000000

080054b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <pxCurrentTCBConst2>)
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	f380 8809 	msr	PSP, r0
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f380 8811 	msr	BASEPRI, r0
 80054ca:	4770      	bx	lr
 80054cc:	f3af 8000 	nop.w

080054d0 <pxCurrentTCBConst2>:
 80054d0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054d8:	4808      	ldr	r0, [pc, #32]	; (80054fc <prvPortStartFirstTask+0x24>)
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	f380 8808 	msr	MSP, r0
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8814 	msr	CONTROL, r0
 80054ea:	b662      	cpsie	i
 80054ec:	b661      	cpsie	f
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	df00      	svc	0
 80054f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054fa:	bf00      	nop
 80054fc:	e000ed08 	.word	0xe000ed08

08005500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005506:	4b46      	ldr	r3, [pc, #280]	; (8005620 <xPortStartScheduler+0x120>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a46      	ldr	r2, [pc, #280]	; (8005624 <xPortStartScheduler+0x124>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10a      	bne.n	8005526 <xPortStartScheduler+0x26>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	613b      	str	r3, [r7, #16]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005526:	4b3e      	ldr	r3, [pc, #248]	; (8005620 <xPortStartScheduler+0x120>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a3f      	ldr	r2, [pc, #252]	; (8005628 <xPortStartScheduler+0x128>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10a      	bne.n	8005546 <xPortStartScheduler+0x46>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60fb      	str	r3, [r7, #12]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005546:	4b39      	ldr	r3, [pc, #228]	; (800562c <xPortStartScheduler+0x12c>)
 8005548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	22ff      	movs	r2, #255	; 0xff
 8005556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4b31      	ldr	r3, [pc, #196]	; (8005630 <xPortStartScheduler+0x130>)
 800556c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800556e:	4b31      	ldr	r3, [pc, #196]	; (8005634 <xPortStartScheduler+0x134>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005574:	e009      	b.n	800558a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005576:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <xPortStartScheduler+0x134>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3b01      	subs	r3, #1
 800557c:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <xPortStartScheduler+0x134>)
 800557e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	b2db      	uxtb	r3, r3
 8005588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800558a:	78fb      	ldrb	r3, [r7, #3]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	2b80      	cmp	r3, #128	; 0x80
 8005594:	d0ef      	beq.n	8005576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005596:	4b27      	ldr	r3, [pc, #156]	; (8005634 <xPortStartScheduler+0x134>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f1c3 0307 	rsb	r3, r3, #7
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d00a      	beq.n	80055b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	60bb      	str	r3, [r7, #8]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055b8:	4b1e      	ldr	r3, [pc, #120]	; (8005634 <xPortStartScheduler+0x134>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	4a1d      	ldr	r2, [pc, #116]	; (8005634 <xPortStartScheduler+0x134>)
 80055c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055c2:	4b1c      	ldr	r3, [pc, #112]	; (8005634 <xPortStartScheduler+0x134>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055ca:	4a1a      	ldr	r2, [pc, #104]	; (8005634 <xPortStartScheduler+0x134>)
 80055cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055d6:	4b18      	ldr	r3, [pc, #96]	; (8005638 <xPortStartScheduler+0x138>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a17      	ldr	r2, [pc, #92]	; (8005638 <xPortStartScheduler+0x138>)
 80055dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <xPortStartScheduler+0x138>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a14      	ldr	r2, [pc, #80]	; (8005638 <xPortStartScheduler+0x138>)
 80055e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055ee:	f000 f8dd 	bl	80057ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055f2:	4b12      	ldr	r3, [pc, #72]	; (800563c <xPortStartScheduler+0x13c>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055f8:	f000 f8fc 	bl	80057f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055fc:	4b10      	ldr	r3, [pc, #64]	; (8005640 <xPortStartScheduler+0x140>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a0f      	ldr	r2, [pc, #60]	; (8005640 <xPortStartScheduler+0x140>)
 8005602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005608:	f7ff ff66 	bl	80054d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800560c:	f7ff fba8 	bl	8004d60 <vTaskSwitchContext>
	prvTaskExitError();
 8005610:	f7ff ff20 	bl	8005454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	e000ed00 	.word	0xe000ed00
 8005624:	410fc271 	.word	0x410fc271
 8005628:	410fc270 	.word	0x410fc270
 800562c:	e000e400 	.word	0xe000e400
 8005630:	20000440 	.word	0x20000440
 8005634:	20000444 	.word	0x20000444
 8005638:	e000ed20 	.word	0xe000ed20
 800563c:	2000002c 	.word	0x2000002c
 8005640:	e000ef34 	.word	0xe000ef34

08005644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	607b      	str	r3, [r7, #4]
}
 800565c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <vPortEnterCritical+0x58>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	4a0d      	ldr	r2, [pc, #52]	; (800569c <vPortEnterCritical+0x58>)
 8005666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005668:	4b0c      	ldr	r3, [pc, #48]	; (800569c <vPortEnterCritical+0x58>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10f      	bne.n	8005690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <vPortEnterCritical+0x5c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <vPortEnterCritical+0x4c>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	603b      	str	r3, [r7, #0]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <vPortEnterCritical+0x4a>
	}
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	2000002c 	.word	0x2000002c
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056aa:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <vPortExitCritical+0x50>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <vPortExitCritical+0x24>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	607b      	str	r3, [r7, #4]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <vPortExitCritical+0x50>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <vPortExitCritical+0x50>)
 80056d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <vPortExitCritical+0x50>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <vPortExitCritical+0x42>
 80056da:	2300      	movs	r3, #0
 80056dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000002c 	.word	0x2000002c
	...

08005700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005700:	f3ef 8009 	mrs	r0, PSP
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	4b15      	ldr	r3, [pc, #84]	; (8005760 <pxCurrentTCBConst>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f01e 0f10 	tst.w	lr, #16
 8005710:	bf08      	it	eq
 8005712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571a:	6010      	str	r0, [r2, #0]
 800571c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005724:	f380 8811 	msr	BASEPRI, r0
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f7ff fb16 	bl	8004d60 <vTaskSwitchContext>
 8005734:	f04f 0000 	mov.w	r0, #0
 8005738:	f380 8811 	msr	BASEPRI, r0
 800573c:	bc09      	pop	{r0, r3}
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	6808      	ldr	r0, [r1, #0]
 8005742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005746:	f01e 0f10 	tst.w	lr, #16
 800574a:	bf08      	it	eq
 800574c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005750:	f380 8809 	msr	PSP, r0
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w

08005760 <pxCurrentTCBConst>:
 8005760:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop

08005768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	607b      	str	r3, [r7, #4]
}
 8005780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005782:	f7ff fa35 	bl	8004bf0 <xTaskIncrementTick>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <SysTick_Handler+0x40>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f383 8811 	msr	BASEPRI, r3
}
 800579e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <vPortSetupTimerInterrupt+0x34>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <vPortSetupTimerInterrupt+0x38>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <vPortSetupTimerInterrupt+0x3c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <vPortSetupTimerInterrupt+0x40>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	4a09      	ldr	r2, [pc, #36]	; (80057f0 <vPortSetupTimerInterrupt+0x44>)
 80057ca:	3b01      	subs	r3, #1
 80057cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ce:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <vPortSetupTimerInterrupt+0x34>)
 80057d0:	2207      	movs	r2, #7
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000e010 	.word	0xe000e010
 80057e4:	e000e018 	.word	0xe000e018
 80057e8:	20000020 	.word	0x20000020
 80057ec:	10624dd3 	.word	0x10624dd3
 80057f0:	e000e014 	.word	0xe000e014

080057f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005804 <vPortEnableVFP+0x10>
 80057f8:	6801      	ldr	r1, [r0, #0]
 80057fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057fe:	6001      	str	r1, [r0, #0]
 8005800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005802:	bf00      	nop
 8005804:	e000ed88 	.word	0xe000ed88

08005808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005814:	f7ff f942 	bl	8004a9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005818:	4b58      	ldr	r3, [pc, #352]	; (800597c <pvPortMalloc+0x174>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005820:	f000 f91c 	bl	8005a5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005824:	4b56      	ldr	r3, [pc, #344]	; (8005980 <pvPortMalloc+0x178>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	f040 808e 	bne.w	800594e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01d      	beq.n	8005874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005838:	2208      	movs	r2, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4413      	add	r3, r2
 800583e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f023 0307 	bic.w	r3, r3, #7
 8005850:	3308      	adds	r3, #8
 8005852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <pvPortMalloc+0x6c>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	617b      	str	r3, [r7, #20]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d069      	beq.n	800594e <pvPortMalloc+0x146>
 800587a:	4b42      	ldr	r3, [pc, #264]	; (8005984 <pvPortMalloc+0x17c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	429a      	cmp	r2, r3
 8005882:	d864      	bhi.n	800594e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005884:	4b40      	ldr	r3, [pc, #256]	; (8005988 <pvPortMalloc+0x180>)
 8005886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005888:	4b3f      	ldr	r3, [pc, #252]	; (8005988 <pvPortMalloc+0x180>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800588e:	e004      	b.n	800589a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d903      	bls.n	80058ac <pvPortMalloc+0xa4>
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f1      	bne.n	8005890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058ac:	4b33      	ldr	r3, [pc, #204]	; (800597c <pvPortMalloc+0x174>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d04b      	beq.n	800594e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2208      	movs	r2, #8
 80058bc:	4413      	add	r3, r2
 80058be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	2308      	movs	r3, #8
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d91f      	bls.n	8005918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4413      	add	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <pvPortMalloc+0xf8>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	613b      	str	r3, [r7, #16]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005912:	69b8      	ldr	r0, [r7, #24]
 8005914:	f000 f904 	bl	8005b20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005918:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <pvPortMalloc+0x17c>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	4a18      	ldr	r2, [pc, #96]	; (8005984 <pvPortMalloc+0x17c>)
 8005924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005926:	4b17      	ldr	r3, [pc, #92]	; (8005984 <pvPortMalloc+0x17c>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <pvPortMalloc+0x184>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d203      	bcs.n	800593a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005932:	4b14      	ldr	r3, [pc, #80]	; (8005984 <pvPortMalloc+0x17c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <pvPortMalloc+0x184>)
 8005938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4b10      	ldr	r3, [pc, #64]	; (8005980 <pvPortMalloc+0x178>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	431a      	orrs	r2, r3
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800594e:	f7ff f8b3 	bl	8004ab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <pvPortMalloc+0x16a>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <pvPortMalloc+0x168>
	return pvReturn;
 8005972:	69fb      	ldr	r3, [r7, #28]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3728      	adds	r7, #40	; 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20004050 	.word	0x20004050
 8005980:	2000405c 	.word	0x2000405c
 8005984:	20004054 	.word	0x20004054
 8005988:	20004048 	.word	0x20004048
 800598c:	20004058 	.word	0x20004058

08005990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d048      	beq.n	8005a34 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059a2:	2308      	movs	r3, #8
 80059a4:	425b      	negs	r3, r3
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4413      	add	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <vPortFree+0xac>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <vPortFree+0x44>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60fb      	str	r3, [r7, #12]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <vPortFree+0x62>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60bb      	str	r3, [r7, #8]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <vPortFree+0xac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d019      	beq.n	8005a34 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d115      	bne.n	8005a34 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <vPortFree+0xac>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	401a      	ands	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a18:	f7ff f840 	bl	8004a9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <vPortFree+0xb0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4413      	add	r3, r2
 8005a26:	4a06      	ldr	r2, [pc, #24]	; (8005a40 <vPortFree+0xb0>)
 8005a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a2a:	6938      	ldr	r0, [r7, #16]
 8005a2c:	f000 f878 	bl	8005b20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a30:	f7ff f842 	bl	8004ab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	2000405c 	.word	0x2000405c
 8005a40:	20004054 	.word	0x20004054

08005a44 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8005a48:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <xPortGetFreeHeapSize+0x14>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20004054 	.word	0x20004054

08005a5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a62:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a68:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <prvHeapInit+0xac>)
 8005a6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3307      	adds	r3, #7
 8005a7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <prvHeapInit+0xac>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <prvHeapInit+0xb0>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a9a:	4b1c      	ldr	r3, [pc, #112]	; (8005b0c <prvHeapInit+0xb0>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <prvHeapInit+0xb4>)
 8005abc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <prvHeapInit+0xb4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <prvHeapInit+0xb4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <prvHeapInit+0xb4>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <prvHeapInit+0xb8>)
 8005aea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <prvHeapInit+0xbc>)
 8005af2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <prvHeapInit+0xc0>)
 8005af6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005afa:	601a      	str	r2, [r3, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	20000448 	.word	0x20000448
 8005b0c:	20004048 	.word	0x20004048
 8005b10:	20004050 	.word	0x20004050
 8005b14:	20004058 	.word	0x20004058
 8005b18:	20004054 	.word	0x20004054
 8005b1c:	2000405c 	.word	0x2000405c

08005b20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b28:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <prvInsertBlockIntoFreeList+0xac>)
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e002      	b.n	8005b34 <prvInsertBlockIntoFreeList+0x14>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d8f7      	bhi.n	8005b2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	4413      	add	r3, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d108      	bne.n	8005b62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	441a      	add	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	441a      	add	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d118      	bne.n	8005ba8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <prvInsertBlockIntoFreeList+0xb0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d00d      	beq.n	8005b9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e008      	b.n	8005bb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <prvInsertBlockIntoFreeList+0xb0>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e003      	b.n	8005bb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d002      	beq.n	8005bbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20004048 	.word	0x20004048
 8005bd0:	20004050 	.word	0x20004050

08005bd4 <__errno>:
 8005bd4:	4b01      	ldr	r3, [pc, #4]	; (8005bdc <__errno+0x8>)
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000030 	.word	0x20000030

08005be0 <__sflush_r>:
 8005be0:	898a      	ldrh	r2, [r1, #12]
 8005be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	4605      	mov	r5, r0
 8005be8:	0710      	lsls	r0, r2, #28
 8005bea:	460c      	mov	r4, r1
 8005bec:	d458      	bmi.n	8005ca0 <__sflush_r+0xc0>
 8005bee:	684b      	ldr	r3, [r1, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc05      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dc02      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d0f9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c06:	2300      	movs	r3, #0
 8005c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c0c:	682f      	ldr	r7, [r5, #0]
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	d032      	beq.n	8005c78 <__sflush_r+0x98>
 8005c12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	075a      	lsls	r2, r3, #29
 8005c18:	d505      	bpl.n	8005c26 <__sflush_r+0x46>
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	1ac0      	subs	r0, r0, r3
 8005c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c20:	b10b      	cbz	r3, 8005c26 <__sflush_r+0x46>
 8005c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c24:	1ac0      	subs	r0, r0, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2c:	6a21      	ldr	r1, [r4, #32]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b0      	blx	r6
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	d106      	bne.n	8005c46 <__sflush_r+0x66>
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	291d      	cmp	r1, #29
 8005c3c:	d82c      	bhi.n	8005c98 <__sflush_r+0xb8>
 8005c3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <__sflush_r+0x108>)
 8005c40:	40ca      	lsrs	r2, r1
 8005c42:	07d6      	lsls	r6, r2, #31
 8005c44:	d528      	bpl.n	8005c98 <__sflush_r+0xb8>
 8005c46:	2200      	movs	r2, #0
 8005c48:	6062      	str	r2, [r4, #4]
 8005c4a:	04d9      	lsls	r1, r3, #19
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	6022      	str	r2, [r4, #0]
 8005c50:	d504      	bpl.n	8005c5c <__sflush_r+0x7c>
 8005c52:	1c42      	adds	r2, r0, #1
 8005c54:	d101      	bne.n	8005c5a <__sflush_r+0x7a>
 8005c56:	682b      	ldr	r3, [r5, #0]
 8005c58:	b903      	cbnz	r3, 8005c5c <__sflush_r+0x7c>
 8005c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c5e:	602f      	str	r7, [r5, #0]
 8005c60:	2900      	cmp	r1, #0
 8005c62:	d0ca      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <__sflush_r+0x92>
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 f9ad 	bl	8005fcc <_free_r>
 8005c72:	2000      	movs	r0, #0
 8005c74:	6360      	str	r0, [r4, #52]	; 0x34
 8005c76:	e7c1      	b.n	8005bfc <__sflush_r+0x1c>
 8005c78:	6a21      	ldr	r1, [r4, #32]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	1c41      	adds	r1, r0, #1
 8005c82:	d1c7      	bne.n	8005c14 <__sflush_r+0x34>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0c4      	beq.n	8005c14 <__sflush_r+0x34>
 8005c8a:	2b1d      	cmp	r3, #29
 8005c8c:	d001      	beq.n	8005c92 <__sflush_r+0xb2>
 8005c8e:	2b16      	cmp	r3, #22
 8005c90:	d101      	bne.n	8005c96 <__sflush_r+0xb6>
 8005c92:	602f      	str	r7, [r5, #0]
 8005c94:	e7b1      	b.n	8005bfa <__sflush_r+0x1a>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	e7ad      	b.n	8005bfc <__sflush_r+0x1c>
 8005ca0:	690f      	ldr	r7, [r1, #16]
 8005ca2:	2f00      	cmp	r7, #0
 8005ca4:	d0a9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005ca6:	0793      	lsls	r3, r2, #30
 8005ca8:	680e      	ldr	r6, [r1, #0]
 8005caa:	bf08      	it	eq
 8005cac:	694b      	ldreq	r3, [r1, #20]
 8005cae:	600f      	str	r7, [r1, #0]
 8005cb0:	bf18      	it	ne
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	eba6 0807 	sub.w	r8, r6, r7
 8005cb8:	608b      	str	r3, [r1, #8]
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	dd9c      	ble.n	8005bfa <__sflush_r+0x1a>
 8005cc0:	6a21      	ldr	r1, [r4, #32]
 8005cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cc4:	4643      	mov	r3, r8
 8005cc6:	463a      	mov	r2, r7
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b0      	blx	r6
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	dc06      	bgt.n	8005cde <__sflush_r+0xfe>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e78e      	b.n	8005bfc <__sflush_r+0x1c>
 8005cde:	4407      	add	r7, r0
 8005ce0:	eba8 0800 	sub.w	r8, r8, r0
 8005ce4:	e7e9      	b.n	8005cba <__sflush_r+0xda>
 8005ce6:	bf00      	nop
 8005ce8:	20400001 	.word	0x20400001

08005cec <_fflush_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	b913      	cbnz	r3, 8005cfc <_fflush_r+0x10>
 8005cf6:	2500      	movs	r5, #0
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	b118      	cbz	r0, 8005d06 <_fflush_r+0x1a>
 8005cfe:	6983      	ldr	r3, [r0, #24]
 8005d00:	b90b      	cbnz	r3, 8005d06 <_fflush_r+0x1a>
 8005d02:	f000 f887 	bl	8005e14 <__sinit>
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <_fflush_r+0x6c>)
 8005d08:	429c      	cmp	r4, r3
 8005d0a:	d11b      	bne.n	8005d44 <_fflush_r+0x58>
 8005d0c:	686c      	ldr	r4, [r5, #4]
 8005d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ef      	beq.n	8005cf6 <_fflush_r+0xa>
 8005d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d18:	07d0      	lsls	r0, r2, #31
 8005d1a:	d404      	bmi.n	8005d26 <_fflush_r+0x3a>
 8005d1c:	0599      	lsls	r1, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_fflush_r+0x3a>
 8005d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d22:	f000 f93a 	bl	8005f9a <__retarget_lock_acquire_recursive>
 8005d26:	4628      	mov	r0, r5
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f7ff ff59 	bl	8005be0 <__sflush_r>
 8005d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d30:	07da      	lsls	r2, r3, #31
 8005d32:	4605      	mov	r5, r0
 8005d34:	d4e0      	bmi.n	8005cf8 <_fflush_r+0xc>
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	059b      	lsls	r3, r3, #22
 8005d3a:	d4dd      	bmi.n	8005cf8 <_fflush_r+0xc>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d3e:	f000 f92d 	bl	8005f9c <__retarget_lock_release_recursive>
 8005d42:	e7d9      	b.n	8005cf8 <_fflush_r+0xc>
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <_fflush_r+0x70>)
 8005d46:	429c      	cmp	r4, r3
 8005d48:	d101      	bne.n	8005d4e <_fflush_r+0x62>
 8005d4a:	68ac      	ldr	r4, [r5, #8]
 8005d4c:	e7df      	b.n	8005d0e <_fflush_r+0x22>
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <_fflush_r+0x74>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	bf08      	it	eq
 8005d54:	68ec      	ldreq	r4, [r5, #12]
 8005d56:	e7da      	b.n	8005d0e <_fflush_r+0x22>
 8005d58:	0800737c 	.word	0x0800737c
 8005d5c:	0800739c 	.word	0x0800739c
 8005d60:	0800735c 	.word	0x0800735c

08005d64 <std>:
 8005d64:	2300      	movs	r3, #0
 8005d66:	b510      	push	{r4, lr}
 8005d68:	4604      	mov	r4, r0
 8005d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d72:	6083      	str	r3, [r0, #8]
 8005d74:	8181      	strh	r1, [r0, #12]
 8005d76:	6643      	str	r3, [r0, #100]	; 0x64
 8005d78:	81c2      	strh	r2, [r0, #14]
 8005d7a:	6183      	str	r3, [r0, #24]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	2208      	movs	r2, #8
 8005d80:	305c      	adds	r0, #92	; 0x5c
 8005d82:	f000 f91a 	bl	8005fba <memset>
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <std+0x38>)
 8005d88:	6263      	str	r3, [r4, #36]	; 0x24
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <std+0x3c>)
 8005d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <std+0x40>)
 8005d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <std+0x44>)
 8005d94:	6224      	str	r4, [r4, #32]
 8005d96:	6323      	str	r3, [r4, #48]	; 0x30
 8005d98:	bd10      	pop	{r4, pc}
 8005d9a:	bf00      	nop
 8005d9c:	080061d9 	.word	0x080061d9
 8005da0:	080061fb 	.word	0x080061fb
 8005da4:	08006233 	.word	0x08006233
 8005da8:	08006257 	.word	0x08006257

08005dac <_cleanup_r>:
 8005dac:	4901      	ldr	r1, [pc, #4]	; (8005db4 <_cleanup_r+0x8>)
 8005dae:	f000 b8af 	b.w	8005f10 <_fwalk_reent>
 8005db2:	bf00      	nop
 8005db4:	08005ced 	.word	0x08005ced

08005db8 <__sfmoreglue>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	1e4a      	subs	r2, r1, #1
 8005dbc:	2568      	movs	r5, #104	; 0x68
 8005dbe:	4355      	muls	r5, r2
 8005dc0:	460e      	mov	r6, r1
 8005dc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dc6:	f000 f951 	bl	800606c <_malloc_r>
 8005dca:	4604      	mov	r4, r0
 8005dcc:	b140      	cbz	r0, 8005de0 <__sfmoreglue+0x28>
 8005dce:	2100      	movs	r1, #0
 8005dd0:	e9c0 1600 	strd	r1, r6, [r0]
 8005dd4:	300c      	adds	r0, #12
 8005dd6:	60a0      	str	r0, [r4, #8]
 8005dd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ddc:	f000 f8ed 	bl	8005fba <memset>
 8005de0:	4620      	mov	r0, r4
 8005de2:	bd70      	pop	{r4, r5, r6, pc}

08005de4 <__sfp_lock_acquire>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__sfp_lock_acquire+0x8>)
 8005de6:	f000 b8d8 	b.w	8005f9a <__retarget_lock_acquire_recursive>
 8005dea:	bf00      	nop
 8005dec:	200044a8 	.word	0x200044a8

08005df0 <__sfp_lock_release>:
 8005df0:	4801      	ldr	r0, [pc, #4]	; (8005df8 <__sfp_lock_release+0x8>)
 8005df2:	f000 b8d3 	b.w	8005f9c <__retarget_lock_release_recursive>
 8005df6:	bf00      	nop
 8005df8:	200044a8 	.word	0x200044a8

08005dfc <__sinit_lock_acquire>:
 8005dfc:	4801      	ldr	r0, [pc, #4]	; (8005e04 <__sinit_lock_acquire+0x8>)
 8005dfe:	f000 b8cc 	b.w	8005f9a <__retarget_lock_acquire_recursive>
 8005e02:	bf00      	nop
 8005e04:	200044a3 	.word	0x200044a3

08005e08 <__sinit_lock_release>:
 8005e08:	4801      	ldr	r0, [pc, #4]	; (8005e10 <__sinit_lock_release+0x8>)
 8005e0a:	f000 b8c7 	b.w	8005f9c <__retarget_lock_release_recursive>
 8005e0e:	bf00      	nop
 8005e10:	200044a3 	.word	0x200044a3

08005e14 <__sinit>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	4604      	mov	r4, r0
 8005e18:	f7ff fff0 	bl	8005dfc <__sinit_lock_acquire>
 8005e1c:	69a3      	ldr	r3, [r4, #24]
 8005e1e:	b11b      	cbz	r3, 8005e28 <__sinit+0x14>
 8005e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e24:	f7ff bff0 	b.w	8005e08 <__sinit_lock_release>
 8005e28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <__sinit+0x68>)
 8005e30:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <__sinit+0x6c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	bf04      	itt	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	61a3      	streq	r3, [r4, #24]
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 f820 	bl	8005e84 <__sfp>
 8005e44:	6060      	str	r0, [r4, #4]
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 f81c 	bl	8005e84 <__sfp>
 8005e4c:	60a0      	str	r0, [r4, #8]
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 f818 	bl	8005e84 <__sfp>
 8005e54:	2200      	movs	r2, #0
 8005e56:	60e0      	str	r0, [r4, #12]
 8005e58:	2104      	movs	r1, #4
 8005e5a:	6860      	ldr	r0, [r4, #4]
 8005e5c:	f7ff ff82 	bl	8005d64 <std>
 8005e60:	68a0      	ldr	r0, [r4, #8]
 8005e62:	2201      	movs	r2, #1
 8005e64:	2109      	movs	r1, #9
 8005e66:	f7ff ff7d 	bl	8005d64 <std>
 8005e6a:	68e0      	ldr	r0, [r4, #12]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	2112      	movs	r1, #18
 8005e70:	f7ff ff78 	bl	8005d64 <std>
 8005e74:	2301      	movs	r3, #1
 8005e76:	61a3      	str	r3, [r4, #24]
 8005e78:	e7d2      	b.n	8005e20 <__sinit+0xc>
 8005e7a:	bf00      	nop
 8005e7c:	080073bc 	.word	0x080073bc
 8005e80:	08005dad 	.word	0x08005dad

08005e84 <__sfp>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	4607      	mov	r7, r0
 8005e88:	f7ff ffac 	bl	8005de4 <__sfp_lock_acquire>
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	; (8005f08 <__sfp+0x84>)
 8005e8e:	681e      	ldr	r6, [r3, #0]
 8005e90:	69b3      	ldr	r3, [r6, #24]
 8005e92:	b913      	cbnz	r3, 8005e9a <__sfp+0x16>
 8005e94:	4630      	mov	r0, r6
 8005e96:	f7ff ffbd 	bl	8005e14 <__sinit>
 8005e9a:	3648      	adds	r6, #72	; 0x48
 8005e9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	d503      	bpl.n	8005eac <__sfp+0x28>
 8005ea4:	6833      	ldr	r3, [r6, #0]
 8005ea6:	b30b      	cbz	r3, 8005eec <__sfp+0x68>
 8005ea8:	6836      	ldr	r6, [r6, #0]
 8005eaa:	e7f7      	b.n	8005e9c <__sfp+0x18>
 8005eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005eb0:	b9d5      	cbnz	r5, 8005ee8 <__sfp+0x64>
 8005eb2:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <__sfp+0x88>)
 8005eb4:	60e3      	str	r3, [r4, #12]
 8005eb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eba:	6665      	str	r5, [r4, #100]	; 0x64
 8005ebc:	f000 f86c 	bl	8005f98 <__retarget_lock_init_recursive>
 8005ec0:	f7ff ff96 	bl	8005df0 <__sfp_lock_release>
 8005ec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ecc:	6025      	str	r5, [r4, #0]
 8005ece:	61a5      	str	r5, [r4, #24]
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ed8:	f000 f86f 	bl	8005fba <memset>
 8005edc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee8:	3468      	adds	r4, #104	; 0x68
 8005eea:	e7d9      	b.n	8005ea0 <__sfp+0x1c>
 8005eec:	2104      	movs	r1, #4
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f7ff ff62 	bl	8005db8 <__sfmoreglue>
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	6030      	str	r0, [r6, #0]
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d1d5      	bne.n	8005ea8 <__sfp+0x24>
 8005efc:	f7ff ff78 	bl	8005df0 <__sfp_lock_release>
 8005f00:	230c      	movs	r3, #12
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	e7ee      	b.n	8005ee4 <__sfp+0x60>
 8005f06:	bf00      	nop
 8005f08:	080073bc 	.word	0x080073bc
 8005f0c:	ffff0001 	.word	0xffff0001

08005f10 <_fwalk_reent>:
 8005f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f14:	4606      	mov	r6, r0
 8005f16:	4688      	mov	r8, r1
 8005f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f1c:	2700      	movs	r7, #0
 8005f1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f22:	f1b9 0901 	subs.w	r9, r9, #1
 8005f26:	d505      	bpl.n	8005f34 <_fwalk_reent+0x24>
 8005f28:	6824      	ldr	r4, [r4, #0]
 8005f2a:	2c00      	cmp	r4, #0
 8005f2c:	d1f7      	bne.n	8005f1e <_fwalk_reent+0xe>
 8005f2e:	4638      	mov	r0, r7
 8005f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f34:	89ab      	ldrh	r3, [r5, #12]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d907      	bls.n	8005f4a <_fwalk_reent+0x3a>
 8005f3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	d003      	beq.n	8005f4a <_fwalk_reent+0x3a>
 8005f42:	4629      	mov	r1, r5
 8005f44:	4630      	mov	r0, r6
 8005f46:	47c0      	blx	r8
 8005f48:	4307      	orrs	r7, r0
 8005f4a:	3568      	adds	r5, #104	; 0x68
 8005f4c:	e7e9      	b.n	8005f22 <_fwalk_reent+0x12>
	...

08005f50 <__libc_init_array>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	4d0d      	ldr	r5, [pc, #52]	; (8005f88 <__libc_init_array+0x38>)
 8005f54:	4c0d      	ldr	r4, [pc, #52]	; (8005f8c <__libc_init_array+0x3c>)
 8005f56:	1b64      	subs	r4, r4, r5
 8005f58:	10a4      	asrs	r4, r4, #2
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	42a6      	cmp	r6, r4
 8005f5e:	d109      	bne.n	8005f74 <__libc_init_array+0x24>
 8005f60:	4d0b      	ldr	r5, [pc, #44]	; (8005f90 <__libc_init_array+0x40>)
 8005f62:	4c0c      	ldr	r4, [pc, #48]	; (8005f94 <__libc_init_array+0x44>)
 8005f64:	f000 ffbc 	bl	8006ee0 <_init>
 8005f68:	1b64      	subs	r4, r4, r5
 8005f6a:	10a4      	asrs	r4, r4, #2
 8005f6c:	2600      	movs	r6, #0
 8005f6e:	42a6      	cmp	r6, r4
 8005f70:	d105      	bne.n	8005f7e <__libc_init_array+0x2e>
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f78:	4798      	blx	r3
 8005f7a:	3601      	adds	r6, #1
 8005f7c:	e7ee      	b.n	8005f5c <__libc_init_array+0xc>
 8005f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f82:	4798      	blx	r3
 8005f84:	3601      	adds	r6, #1
 8005f86:	e7f2      	b.n	8005f6e <__libc_init_array+0x1e>
 8005f88:	080073fc 	.word	0x080073fc
 8005f8c:	080073fc 	.word	0x080073fc
 8005f90:	080073fc 	.word	0x080073fc
 8005f94:	08007400 	.word	0x08007400

08005f98 <__retarget_lock_init_recursive>:
 8005f98:	4770      	bx	lr

08005f9a <__retarget_lock_acquire_recursive>:
 8005f9a:	4770      	bx	lr

08005f9c <__retarget_lock_release_recursive>:
 8005f9c:	4770      	bx	lr

08005f9e <memcpy>:
 8005f9e:	440a      	add	r2, r1
 8005fa0:	4291      	cmp	r1, r2
 8005fa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fa6:	d100      	bne.n	8005faa <memcpy+0xc>
 8005fa8:	4770      	bx	lr
 8005faa:	b510      	push	{r4, lr}
 8005fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fb4:	4291      	cmp	r1, r2
 8005fb6:	d1f9      	bne.n	8005fac <memcpy+0xe>
 8005fb8:	bd10      	pop	{r4, pc}

08005fba <memset>:
 8005fba:	4402      	add	r2, r0
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d100      	bne.n	8005fc4 <memset+0xa>
 8005fc2:	4770      	bx	lr
 8005fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc8:	e7f9      	b.n	8005fbe <memset+0x4>
	...

08005fcc <_free_r>:
 8005fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fce:	2900      	cmp	r1, #0
 8005fd0:	d048      	beq.n	8006064 <_free_r+0x98>
 8005fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd6:	9001      	str	r0, [sp, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f1a1 0404 	sub.w	r4, r1, #4
 8005fde:	bfb8      	it	lt
 8005fe0:	18e4      	addlt	r4, r4, r3
 8005fe2:	f000 faab 	bl	800653c <__malloc_lock>
 8005fe6:	4a20      	ldr	r2, [pc, #128]	; (8006068 <_free_r+0x9c>)
 8005fe8:	9801      	ldr	r0, [sp, #4]
 8005fea:	6813      	ldr	r3, [r2, #0]
 8005fec:	4615      	mov	r5, r2
 8005fee:	b933      	cbnz	r3, 8005ffe <_free_r+0x32>
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	6014      	str	r4, [r2, #0]
 8005ff4:	b003      	add	sp, #12
 8005ff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ffa:	f000 baa5 	b.w	8006548 <__malloc_unlock>
 8005ffe:	42a3      	cmp	r3, r4
 8006000:	d90b      	bls.n	800601a <_free_r+0x4e>
 8006002:	6821      	ldr	r1, [r4, #0]
 8006004:	1862      	adds	r2, r4, r1
 8006006:	4293      	cmp	r3, r2
 8006008:	bf04      	itt	eq
 800600a:	681a      	ldreq	r2, [r3, #0]
 800600c:	685b      	ldreq	r3, [r3, #4]
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	bf04      	itt	eq
 8006012:	1852      	addeq	r2, r2, r1
 8006014:	6022      	streq	r2, [r4, #0]
 8006016:	602c      	str	r4, [r5, #0]
 8006018:	e7ec      	b.n	8005ff4 <_free_r+0x28>
 800601a:	461a      	mov	r2, r3
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	b10b      	cbz	r3, 8006024 <_free_r+0x58>
 8006020:	42a3      	cmp	r3, r4
 8006022:	d9fa      	bls.n	800601a <_free_r+0x4e>
 8006024:	6811      	ldr	r1, [r2, #0]
 8006026:	1855      	adds	r5, r2, r1
 8006028:	42a5      	cmp	r5, r4
 800602a:	d10b      	bne.n	8006044 <_free_r+0x78>
 800602c:	6824      	ldr	r4, [r4, #0]
 800602e:	4421      	add	r1, r4
 8006030:	1854      	adds	r4, r2, r1
 8006032:	42a3      	cmp	r3, r4
 8006034:	6011      	str	r1, [r2, #0]
 8006036:	d1dd      	bne.n	8005ff4 <_free_r+0x28>
 8006038:	681c      	ldr	r4, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	6053      	str	r3, [r2, #4]
 800603e:	4421      	add	r1, r4
 8006040:	6011      	str	r1, [r2, #0]
 8006042:	e7d7      	b.n	8005ff4 <_free_r+0x28>
 8006044:	d902      	bls.n	800604c <_free_r+0x80>
 8006046:	230c      	movs	r3, #12
 8006048:	6003      	str	r3, [r0, #0]
 800604a:	e7d3      	b.n	8005ff4 <_free_r+0x28>
 800604c:	6825      	ldr	r5, [r4, #0]
 800604e:	1961      	adds	r1, r4, r5
 8006050:	428b      	cmp	r3, r1
 8006052:	bf04      	itt	eq
 8006054:	6819      	ldreq	r1, [r3, #0]
 8006056:	685b      	ldreq	r3, [r3, #4]
 8006058:	6063      	str	r3, [r4, #4]
 800605a:	bf04      	itt	eq
 800605c:	1949      	addeq	r1, r1, r5
 800605e:	6021      	streq	r1, [r4, #0]
 8006060:	6054      	str	r4, [r2, #4]
 8006062:	e7c7      	b.n	8005ff4 <_free_r+0x28>
 8006064:	b003      	add	sp, #12
 8006066:	bd30      	pop	{r4, r5, pc}
 8006068:	20004060 	.word	0x20004060

0800606c <_malloc_r>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	1ccd      	adds	r5, r1, #3
 8006070:	f025 0503 	bic.w	r5, r5, #3
 8006074:	3508      	adds	r5, #8
 8006076:	2d0c      	cmp	r5, #12
 8006078:	bf38      	it	cc
 800607a:	250c      	movcc	r5, #12
 800607c:	2d00      	cmp	r5, #0
 800607e:	4606      	mov	r6, r0
 8006080:	db01      	blt.n	8006086 <_malloc_r+0x1a>
 8006082:	42a9      	cmp	r1, r5
 8006084:	d903      	bls.n	800608e <_malloc_r+0x22>
 8006086:	230c      	movs	r3, #12
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	2000      	movs	r0, #0
 800608c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608e:	f000 fa55 	bl	800653c <__malloc_lock>
 8006092:	4921      	ldr	r1, [pc, #132]	; (8006118 <_malloc_r+0xac>)
 8006094:	680a      	ldr	r2, [r1, #0]
 8006096:	4614      	mov	r4, r2
 8006098:	b99c      	cbnz	r4, 80060c2 <_malloc_r+0x56>
 800609a:	4f20      	ldr	r7, [pc, #128]	; (800611c <_malloc_r+0xb0>)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	b923      	cbnz	r3, 80060aa <_malloc_r+0x3e>
 80060a0:	4621      	mov	r1, r4
 80060a2:	4630      	mov	r0, r6
 80060a4:	f000 f854 	bl	8006150 <_sbrk_r>
 80060a8:	6038      	str	r0, [r7, #0]
 80060aa:	4629      	mov	r1, r5
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 f84f 	bl	8006150 <_sbrk_r>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	d123      	bne.n	80060fe <_malloc_r+0x92>
 80060b6:	230c      	movs	r3, #12
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	4630      	mov	r0, r6
 80060bc:	f000 fa44 	bl	8006548 <__malloc_unlock>
 80060c0:	e7e3      	b.n	800608a <_malloc_r+0x1e>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	1b5b      	subs	r3, r3, r5
 80060c6:	d417      	bmi.n	80060f8 <_malloc_r+0x8c>
 80060c8:	2b0b      	cmp	r3, #11
 80060ca:	d903      	bls.n	80060d4 <_malloc_r+0x68>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	441c      	add	r4, r3
 80060d0:	6025      	str	r5, [r4, #0]
 80060d2:	e004      	b.n	80060de <_malloc_r+0x72>
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	42a2      	cmp	r2, r4
 80060d8:	bf0c      	ite	eq
 80060da:	600b      	streq	r3, [r1, #0]
 80060dc:	6053      	strne	r3, [r2, #4]
 80060de:	4630      	mov	r0, r6
 80060e0:	f000 fa32 	bl	8006548 <__malloc_unlock>
 80060e4:	f104 000b 	add.w	r0, r4, #11
 80060e8:	1d23      	adds	r3, r4, #4
 80060ea:	f020 0007 	bic.w	r0, r0, #7
 80060ee:	1ac2      	subs	r2, r0, r3
 80060f0:	d0cc      	beq.n	800608c <_malloc_r+0x20>
 80060f2:	1a1b      	subs	r3, r3, r0
 80060f4:	50a3      	str	r3, [r4, r2]
 80060f6:	e7c9      	b.n	800608c <_malloc_r+0x20>
 80060f8:	4622      	mov	r2, r4
 80060fa:	6864      	ldr	r4, [r4, #4]
 80060fc:	e7cc      	b.n	8006098 <_malloc_r+0x2c>
 80060fe:	1cc4      	adds	r4, r0, #3
 8006100:	f024 0403 	bic.w	r4, r4, #3
 8006104:	42a0      	cmp	r0, r4
 8006106:	d0e3      	beq.n	80060d0 <_malloc_r+0x64>
 8006108:	1a21      	subs	r1, r4, r0
 800610a:	4630      	mov	r0, r6
 800610c:	f000 f820 	bl	8006150 <_sbrk_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d1dd      	bne.n	80060d0 <_malloc_r+0x64>
 8006114:	e7cf      	b.n	80060b6 <_malloc_r+0x4a>
 8006116:	bf00      	nop
 8006118:	20004060 	.word	0x20004060
 800611c:	20004064 	.word	0x20004064

08006120 <iprintf>:
 8006120:	b40f      	push	{r0, r1, r2, r3}
 8006122:	4b0a      	ldr	r3, [pc, #40]	; (800614c <iprintf+0x2c>)
 8006124:	b513      	push	{r0, r1, r4, lr}
 8006126:	681c      	ldr	r4, [r3, #0]
 8006128:	b124      	cbz	r4, 8006134 <iprintf+0x14>
 800612a:	69a3      	ldr	r3, [r4, #24]
 800612c:	b913      	cbnz	r3, 8006134 <iprintf+0x14>
 800612e:	4620      	mov	r0, r4
 8006130:	f7ff fe70 	bl	8005e14 <__sinit>
 8006134:	ab05      	add	r3, sp, #20
 8006136:	9a04      	ldr	r2, [sp, #16]
 8006138:	68a1      	ldr	r1, [r4, #8]
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	4620      	mov	r0, r4
 800613e:	f000 fb8f 	bl	8006860 <_vfiprintf_r>
 8006142:	b002      	add	sp, #8
 8006144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006148:	b004      	add	sp, #16
 800614a:	4770      	bx	lr
 800614c:	20000030 	.word	0x20000030

08006150 <_sbrk_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d06      	ldr	r5, [pc, #24]	; (800616c <_sbrk_r+0x1c>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	f7fb f914 	bl	8001388 <_sbrk>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_sbrk_r+0x1a>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_sbrk_r+0x1a>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	200044ac 	.word	0x200044ac

08006170 <sniprintf>:
 8006170:	b40c      	push	{r2, r3}
 8006172:	b530      	push	{r4, r5, lr}
 8006174:	4b17      	ldr	r3, [pc, #92]	; (80061d4 <sniprintf+0x64>)
 8006176:	1e0c      	subs	r4, r1, #0
 8006178:	681d      	ldr	r5, [r3, #0]
 800617a:	b09d      	sub	sp, #116	; 0x74
 800617c:	da08      	bge.n	8006190 <sniprintf+0x20>
 800617e:	238b      	movs	r3, #139	; 0x8b
 8006180:	602b      	str	r3, [r5, #0]
 8006182:	f04f 30ff 	mov.w	r0, #4294967295
 8006186:	b01d      	add	sp, #116	; 0x74
 8006188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800618c:	b002      	add	sp, #8
 800618e:	4770      	bx	lr
 8006190:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006194:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006198:	bf14      	ite	ne
 800619a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800619e:	4623      	moveq	r3, r4
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	9307      	str	r3, [sp, #28]
 80061a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061a8:	9002      	str	r0, [sp, #8]
 80061aa:	9006      	str	r0, [sp, #24]
 80061ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061b2:	ab21      	add	r3, sp, #132	; 0x84
 80061b4:	a902      	add	r1, sp, #8
 80061b6:	4628      	mov	r0, r5
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	f000 fa27 	bl	800660c <_svfiprintf_r>
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	bfbc      	itt	lt
 80061c2:	238b      	movlt	r3, #139	; 0x8b
 80061c4:	602b      	strlt	r3, [r5, #0]
 80061c6:	2c00      	cmp	r4, #0
 80061c8:	d0dd      	beq.n	8006186 <sniprintf+0x16>
 80061ca:	9b02      	ldr	r3, [sp, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e7d9      	b.n	8006186 <sniprintf+0x16>
 80061d2:	bf00      	nop
 80061d4:	20000030 	.word	0x20000030

080061d8 <__sread>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	460c      	mov	r4, r1
 80061dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e0:	f000 fe02 	bl	8006de8 <_read_r>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	bfab      	itete	ge
 80061e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ea:	89a3      	ldrhlt	r3, [r4, #12]
 80061ec:	181b      	addge	r3, r3, r0
 80061ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061f2:	bfac      	ite	ge
 80061f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80061f6:	81a3      	strhlt	r3, [r4, #12]
 80061f8:	bd10      	pop	{r4, pc}

080061fa <__swrite>:
 80061fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fe:	461f      	mov	r7, r3
 8006200:	898b      	ldrh	r3, [r1, #12]
 8006202:	05db      	lsls	r3, r3, #23
 8006204:	4605      	mov	r5, r0
 8006206:	460c      	mov	r4, r1
 8006208:	4616      	mov	r6, r2
 800620a:	d505      	bpl.n	8006218 <__swrite+0x1e>
 800620c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006210:	2302      	movs	r3, #2
 8006212:	2200      	movs	r2, #0
 8006214:	f000 f91c 	bl	8006450 <_lseek_r>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800621e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	4632      	mov	r2, r6
 8006226:	463b      	mov	r3, r7
 8006228:	4628      	mov	r0, r5
 800622a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800622e:	f000 b87f 	b.w	8006330 <_write_r>

08006232 <__sseek>:
 8006232:	b510      	push	{r4, lr}
 8006234:	460c      	mov	r4, r1
 8006236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623a:	f000 f909 	bl	8006450 <_lseek_r>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	bf15      	itete	ne
 8006244:	6560      	strne	r0, [r4, #84]	; 0x54
 8006246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800624a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800624e:	81a3      	strheq	r3, [r4, #12]
 8006250:	bf18      	it	ne
 8006252:	81a3      	strhne	r3, [r4, #12]
 8006254:	bd10      	pop	{r4, pc}

08006256 <__sclose>:
 8006256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625a:	f000 b8e9 	b.w	8006430 <_close_r>

0800625e <strstr>:
 800625e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006260:	780c      	ldrb	r4, [r1, #0]
 8006262:	b164      	cbz	r4, 800627e <strstr+0x20>
 8006264:	4603      	mov	r3, r0
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	1c5e      	adds	r6, r3, #1
 800626c:	b90a      	cbnz	r2, 8006272 <strstr+0x14>
 800626e:	4610      	mov	r0, r2
 8006270:	e005      	b.n	800627e <strstr+0x20>
 8006272:	4294      	cmp	r4, r2
 8006274:	d108      	bne.n	8006288 <strstr+0x2a>
 8006276:	460d      	mov	r5, r1
 8006278:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800627c:	b902      	cbnz	r2, 8006280 <strstr+0x22>
 800627e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006280:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006284:	4297      	cmp	r7, r2
 8006286:	d0f7      	beq.n	8006278 <strstr+0x1a>
 8006288:	4633      	mov	r3, r6
 800628a:	e7ec      	b.n	8006266 <strstr+0x8>

0800628c <__swbuf_r>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	460e      	mov	r6, r1
 8006290:	4614      	mov	r4, r2
 8006292:	4605      	mov	r5, r0
 8006294:	b118      	cbz	r0, 800629e <__swbuf_r+0x12>
 8006296:	6983      	ldr	r3, [r0, #24]
 8006298:	b90b      	cbnz	r3, 800629e <__swbuf_r+0x12>
 800629a:	f7ff fdbb 	bl	8005e14 <__sinit>
 800629e:	4b21      	ldr	r3, [pc, #132]	; (8006324 <__swbuf_r+0x98>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d12b      	bne.n	80062fc <__swbuf_r+0x70>
 80062a4:	686c      	ldr	r4, [r5, #4]
 80062a6:	69a3      	ldr	r3, [r4, #24]
 80062a8:	60a3      	str	r3, [r4, #8]
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	071a      	lsls	r2, r3, #28
 80062ae:	d52f      	bpl.n	8006310 <__swbuf_r+0x84>
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	b36b      	cbz	r3, 8006310 <__swbuf_r+0x84>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	1ac0      	subs	r0, r0, r3
 80062ba:	6963      	ldr	r3, [r4, #20]
 80062bc:	b2f6      	uxtb	r6, r6
 80062be:	4283      	cmp	r3, r0
 80062c0:	4637      	mov	r7, r6
 80062c2:	dc04      	bgt.n	80062ce <__swbuf_r+0x42>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7ff fd10 	bl	8005cec <_fflush_r>
 80062cc:	bb30      	cbnz	r0, 800631c <__swbuf_r+0x90>
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	60a3      	str	r3, [r4, #8]
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	6022      	str	r2, [r4, #0]
 80062da:	701e      	strb	r6, [r3, #0]
 80062dc:	6963      	ldr	r3, [r4, #20]
 80062de:	3001      	adds	r0, #1
 80062e0:	4283      	cmp	r3, r0
 80062e2:	d004      	beq.n	80062ee <__swbuf_r+0x62>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	07db      	lsls	r3, r3, #31
 80062e8:	d506      	bpl.n	80062f8 <__swbuf_r+0x6c>
 80062ea:	2e0a      	cmp	r6, #10
 80062ec:	d104      	bne.n	80062f8 <__swbuf_r+0x6c>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7ff fcfb 	bl	8005cec <_fflush_r>
 80062f6:	b988      	cbnz	r0, 800631c <__swbuf_r+0x90>
 80062f8:	4638      	mov	r0, r7
 80062fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <__swbuf_r+0x9c>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	d101      	bne.n	8006306 <__swbuf_r+0x7a>
 8006302:	68ac      	ldr	r4, [r5, #8]
 8006304:	e7cf      	b.n	80062a6 <__swbuf_r+0x1a>
 8006306:	4b09      	ldr	r3, [pc, #36]	; (800632c <__swbuf_r+0xa0>)
 8006308:	429c      	cmp	r4, r3
 800630a:	bf08      	it	eq
 800630c:	68ec      	ldreq	r4, [r5, #12]
 800630e:	e7ca      	b.n	80062a6 <__swbuf_r+0x1a>
 8006310:	4621      	mov	r1, r4
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f81e 	bl	8006354 <__swsetup_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	d0cb      	beq.n	80062b4 <__swbuf_r+0x28>
 800631c:	f04f 37ff 	mov.w	r7, #4294967295
 8006320:	e7ea      	b.n	80062f8 <__swbuf_r+0x6c>
 8006322:	bf00      	nop
 8006324:	0800737c 	.word	0x0800737c
 8006328:	0800739c 	.word	0x0800739c
 800632c:	0800735c 	.word	0x0800735c

08006330 <_write_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d07      	ldr	r5, [pc, #28]	; (8006350 <_write_r+0x20>)
 8006334:	4604      	mov	r4, r0
 8006336:	4608      	mov	r0, r1
 8006338:	4611      	mov	r1, r2
 800633a:	2200      	movs	r2, #0
 800633c:	602a      	str	r2, [r5, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	f7fa ffd1 	bl	80012e6 <_write>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_write_r+0x1e>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_write_r+0x1e>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	200044ac 	.word	0x200044ac

08006354 <__swsetup_r>:
 8006354:	4b32      	ldr	r3, [pc, #200]	; (8006420 <__swsetup_r+0xcc>)
 8006356:	b570      	push	{r4, r5, r6, lr}
 8006358:	681d      	ldr	r5, [r3, #0]
 800635a:	4606      	mov	r6, r0
 800635c:	460c      	mov	r4, r1
 800635e:	b125      	cbz	r5, 800636a <__swsetup_r+0x16>
 8006360:	69ab      	ldr	r3, [r5, #24]
 8006362:	b913      	cbnz	r3, 800636a <__swsetup_r+0x16>
 8006364:	4628      	mov	r0, r5
 8006366:	f7ff fd55 	bl	8005e14 <__sinit>
 800636a:	4b2e      	ldr	r3, [pc, #184]	; (8006424 <__swsetup_r+0xd0>)
 800636c:	429c      	cmp	r4, r3
 800636e:	d10f      	bne.n	8006390 <__swsetup_r+0x3c>
 8006370:	686c      	ldr	r4, [r5, #4]
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006378:	0719      	lsls	r1, r3, #28
 800637a:	d42c      	bmi.n	80063d6 <__swsetup_r+0x82>
 800637c:	06dd      	lsls	r5, r3, #27
 800637e:	d411      	bmi.n	80063a4 <__swsetup_r+0x50>
 8006380:	2309      	movs	r3, #9
 8006382:	6033      	str	r3, [r6, #0]
 8006384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006388:	81a3      	strh	r3, [r4, #12]
 800638a:	f04f 30ff 	mov.w	r0, #4294967295
 800638e:	e03e      	b.n	800640e <__swsetup_r+0xba>
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <__swsetup_r+0xd4>)
 8006392:	429c      	cmp	r4, r3
 8006394:	d101      	bne.n	800639a <__swsetup_r+0x46>
 8006396:	68ac      	ldr	r4, [r5, #8]
 8006398:	e7eb      	b.n	8006372 <__swsetup_r+0x1e>
 800639a:	4b24      	ldr	r3, [pc, #144]	; (800642c <__swsetup_r+0xd8>)
 800639c:	429c      	cmp	r4, r3
 800639e:	bf08      	it	eq
 80063a0:	68ec      	ldreq	r4, [r5, #12]
 80063a2:	e7e6      	b.n	8006372 <__swsetup_r+0x1e>
 80063a4:	0758      	lsls	r0, r3, #29
 80063a6:	d512      	bpl.n	80063ce <__swsetup_r+0x7a>
 80063a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063aa:	b141      	cbz	r1, 80063be <__swsetup_r+0x6a>
 80063ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b0:	4299      	cmp	r1, r3
 80063b2:	d002      	beq.n	80063ba <__swsetup_r+0x66>
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff fe09 	bl	8005fcc <_free_r>
 80063ba:	2300      	movs	r3, #0
 80063bc:	6363      	str	r3, [r4, #52]	; 0x34
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	2300      	movs	r3, #0
 80063c8:	6063      	str	r3, [r4, #4]
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f043 0308 	orr.w	r3, r3, #8
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	b94b      	cbnz	r3, 80063ee <__swsetup_r+0x9a>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e4:	d003      	beq.n	80063ee <__swsetup_r+0x9a>
 80063e6:	4621      	mov	r1, r4
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 f867 	bl	80064bc <__smakebuf_r>
 80063ee:	89a0      	ldrh	r0, [r4, #12]
 80063f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063f4:	f010 0301 	ands.w	r3, r0, #1
 80063f8:	d00a      	beq.n	8006410 <__swsetup_r+0xbc>
 80063fa:	2300      	movs	r3, #0
 80063fc:	60a3      	str	r3, [r4, #8]
 80063fe:	6963      	ldr	r3, [r4, #20]
 8006400:	425b      	negs	r3, r3
 8006402:	61a3      	str	r3, [r4, #24]
 8006404:	6923      	ldr	r3, [r4, #16]
 8006406:	b943      	cbnz	r3, 800641a <__swsetup_r+0xc6>
 8006408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800640c:	d1ba      	bne.n	8006384 <__swsetup_r+0x30>
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	0781      	lsls	r1, r0, #30
 8006412:	bf58      	it	pl
 8006414:	6963      	ldrpl	r3, [r4, #20]
 8006416:	60a3      	str	r3, [r4, #8]
 8006418:	e7f4      	b.n	8006404 <__swsetup_r+0xb0>
 800641a:	2000      	movs	r0, #0
 800641c:	e7f7      	b.n	800640e <__swsetup_r+0xba>
 800641e:	bf00      	nop
 8006420:	20000030 	.word	0x20000030
 8006424:	0800737c 	.word	0x0800737c
 8006428:	0800739c 	.word	0x0800739c
 800642c:	0800735c 	.word	0x0800735c

08006430 <_close_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d06      	ldr	r5, [pc, #24]	; (800644c <_close_r+0x1c>)
 8006434:	2300      	movs	r3, #0
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	f7fa ff6f 	bl	800131e <_close>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_close_r+0x1a>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_close_r+0x1a>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	200044ac 	.word	0x200044ac

08006450 <_lseek_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d07      	ldr	r5, [pc, #28]	; (8006470 <_lseek_r+0x20>)
 8006454:	4604      	mov	r4, r0
 8006456:	4608      	mov	r0, r1
 8006458:	4611      	mov	r1, r2
 800645a:	2200      	movs	r2, #0
 800645c:	602a      	str	r2, [r5, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	f7fa ff84 	bl	800136c <_lseek>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_lseek_r+0x1e>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_lseek_r+0x1e>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	200044ac 	.word	0x200044ac

08006474 <__swhatbuf_r>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	460e      	mov	r6, r1
 8006478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647c:	2900      	cmp	r1, #0
 800647e:	b096      	sub	sp, #88	; 0x58
 8006480:	4614      	mov	r4, r2
 8006482:	461d      	mov	r5, r3
 8006484:	da07      	bge.n	8006496 <__swhatbuf_r+0x22>
 8006486:	2300      	movs	r3, #0
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	89b3      	ldrh	r3, [r6, #12]
 800648c:	061a      	lsls	r2, r3, #24
 800648e:	d410      	bmi.n	80064b2 <__swhatbuf_r+0x3e>
 8006490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006494:	e00e      	b.n	80064b4 <__swhatbuf_r+0x40>
 8006496:	466a      	mov	r2, sp
 8006498:	f000 fcb8 	bl	8006e0c <_fstat_r>
 800649c:	2800      	cmp	r0, #0
 800649e:	dbf2      	blt.n	8006486 <__swhatbuf_r+0x12>
 80064a0:	9a01      	ldr	r2, [sp, #4]
 80064a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064aa:	425a      	negs	r2, r3
 80064ac:	415a      	adcs	r2, r3
 80064ae:	602a      	str	r2, [r5, #0]
 80064b0:	e7ee      	b.n	8006490 <__swhatbuf_r+0x1c>
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	2000      	movs	r0, #0
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	b016      	add	sp, #88	; 0x58
 80064ba:	bd70      	pop	{r4, r5, r6, pc}

080064bc <__smakebuf_r>:
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064c0:	079d      	lsls	r5, r3, #30
 80064c2:	4606      	mov	r6, r0
 80064c4:	460c      	mov	r4, r1
 80064c6:	d507      	bpl.n	80064d8 <__smakebuf_r+0x1c>
 80064c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	2301      	movs	r3, #1
 80064d2:	6163      	str	r3, [r4, #20]
 80064d4:	b002      	add	sp, #8
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	ab01      	add	r3, sp, #4
 80064da:	466a      	mov	r2, sp
 80064dc:	f7ff ffca 	bl	8006474 <__swhatbuf_r>
 80064e0:	9900      	ldr	r1, [sp, #0]
 80064e2:	4605      	mov	r5, r0
 80064e4:	4630      	mov	r0, r6
 80064e6:	f7ff fdc1 	bl	800606c <_malloc_r>
 80064ea:	b948      	cbnz	r0, 8006500 <__smakebuf_r+0x44>
 80064ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f0:	059a      	lsls	r2, r3, #22
 80064f2:	d4ef      	bmi.n	80064d4 <__smakebuf_r+0x18>
 80064f4:	f023 0303 	bic.w	r3, r3, #3
 80064f8:	f043 0302 	orr.w	r3, r3, #2
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	e7e3      	b.n	80064c8 <__smakebuf_r+0xc>
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <__smakebuf_r+0x7c>)
 8006502:	62b3      	str	r3, [r6, #40]	; 0x28
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	6020      	str	r0, [r4, #0]
 8006508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	9b00      	ldr	r3, [sp, #0]
 8006510:	6163      	str	r3, [r4, #20]
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	6120      	str	r0, [r4, #16]
 8006516:	b15b      	cbz	r3, 8006530 <__smakebuf_r+0x74>
 8006518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800651c:	4630      	mov	r0, r6
 800651e:	f000 fc87 	bl	8006e30 <_isatty_r>
 8006522:	b128      	cbz	r0, 8006530 <__smakebuf_r+0x74>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	89a0      	ldrh	r0, [r4, #12]
 8006532:	4305      	orrs	r5, r0
 8006534:	81a5      	strh	r5, [r4, #12]
 8006536:	e7cd      	b.n	80064d4 <__smakebuf_r+0x18>
 8006538:	08005dad 	.word	0x08005dad

0800653c <__malloc_lock>:
 800653c:	4801      	ldr	r0, [pc, #4]	; (8006544 <__malloc_lock+0x8>)
 800653e:	f7ff bd2c 	b.w	8005f9a <__retarget_lock_acquire_recursive>
 8006542:	bf00      	nop
 8006544:	200044a4 	.word	0x200044a4

08006548 <__malloc_unlock>:
 8006548:	4801      	ldr	r0, [pc, #4]	; (8006550 <__malloc_unlock+0x8>)
 800654a:	f7ff bd27 	b.w	8005f9c <__retarget_lock_release_recursive>
 800654e:	bf00      	nop
 8006550:	200044a4 	.word	0x200044a4

08006554 <__ssputs_r>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	688e      	ldr	r6, [r1, #8]
 800655a:	429e      	cmp	r6, r3
 800655c:	4682      	mov	sl, r0
 800655e:	460c      	mov	r4, r1
 8006560:	4690      	mov	r8, r2
 8006562:	461f      	mov	r7, r3
 8006564:	d838      	bhi.n	80065d8 <__ssputs_r+0x84>
 8006566:	898a      	ldrh	r2, [r1, #12]
 8006568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800656c:	d032      	beq.n	80065d4 <__ssputs_r+0x80>
 800656e:	6825      	ldr	r5, [r4, #0]
 8006570:	6909      	ldr	r1, [r1, #16]
 8006572:	eba5 0901 	sub.w	r9, r5, r1
 8006576:	6965      	ldr	r5, [r4, #20]
 8006578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800657c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006580:	3301      	adds	r3, #1
 8006582:	444b      	add	r3, r9
 8006584:	106d      	asrs	r5, r5, #1
 8006586:	429d      	cmp	r5, r3
 8006588:	bf38      	it	cc
 800658a:	461d      	movcc	r5, r3
 800658c:	0553      	lsls	r3, r2, #21
 800658e:	d531      	bpl.n	80065f4 <__ssputs_r+0xa0>
 8006590:	4629      	mov	r1, r5
 8006592:	f7ff fd6b 	bl	800606c <_malloc_r>
 8006596:	4606      	mov	r6, r0
 8006598:	b950      	cbnz	r0, 80065b0 <__ssputs_r+0x5c>
 800659a:	230c      	movs	r3, #12
 800659c:	f8ca 3000 	str.w	r3, [sl]
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b0:	6921      	ldr	r1, [r4, #16]
 80065b2:	464a      	mov	r2, r9
 80065b4:	f7ff fcf3 	bl	8005f9e <memcpy>
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	6126      	str	r6, [r4, #16]
 80065c6:	6165      	str	r5, [r4, #20]
 80065c8:	444e      	add	r6, r9
 80065ca:	eba5 0509 	sub.w	r5, r5, r9
 80065ce:	6026      	str	r6, [r4, #0]
 80065d0:	60a5      	str	r5, [r4, #8]
 80065d2:	463e      	mov	r6, r7
 80065d4:	42be      	cmp	r6, r7
 80065d6:	d900      	bls.n	80065da <__ssputs_r+0x86>
 80065d8:	463e      	mov	r6, r7
 80065da:	4632      	mov	r2, r6
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	4641      	mov	r1, r8
 80065e0:	f000 fc36 	bl	8006e50 <memmove>
 80065e4:	68a3      	ldr	r3, [r4, #8]
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	1b9b      	subs	r3, r3, r6
 80065ea:	4432      	add	r2, r6
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	6022      	str	r2, [r4, #0]
 80065f0:	2000      	movs	r0, #0
 80065f2:	e7db      	b.n	80065ac <__ssputs_r+0x58>
 80065f4:	462a      	mov	r2, r5
 80065f6:	f000 fc45 	bl	8006e84 <_realloc_r>
 80065fa:	4606      	mov	r6, r0
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d1e1      	bne.n	80065c4 <__ssputs_r+0x70>
 8006600:	6921      	ldr	r1, [r4, #16]
 8006602:	4650      	mov	r0, sl
 8006604:	f7ff fce2 	bl	8005fcc <_free_r>
 8006608:	e7c7      	b.n	800659a <__ssputs_r+0x46>
	...

0800660c <_svfiprintf_r>:
 800660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006610:	4698      	mov	r8, r3
 8006612:	898b      	ldrh	r3, [r1, #12]
 8006614:	061b      	lsls	r3, r3, #24
 8006616:	b09d      	sub	sp, #116	; 0x74
 8006618:	4607      	mov	r7, r0
 800661a:	460d      	mov	r5, r1
 800661c:	4614      	mov	r4, r2
 800661e:	d50e      	bpl.n	800663e <_svfiprintf_r+0x32>
 8006620:	690b      	ldr	r3, [r1, #16]
 8006622:	b963      	cbnz	r3, 800663e <_svfiprintf_r+0x32>
 8006624:	2140      	movs	r1, #64	; 0x40
 8006626:	f7ff fd21 	bl	800606c <_malloc_r>
 800662a:	6028      	str	r0, [r5, #0]
 800662c:	6128      	str	r0, [r5, #16]
 800662e:	b920      	cbnz	r0, 800663a <_svfiprintf_r+0x2e>
 8006630:	230c      	movs	r3, #12
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	f04f 30ff 	mov.w	r0, #4294967295
 8006638:	e0d1      	b.n	80067de <_svfiprintf_r+0x1d2>
 800663a:	2340      	movs	r3, #64	; 0x40
 800663c:	616b      	str	r3, [r5, #20]
 800663e:	2300      	movs	r3, #0
 8006640:	9309      	str	r3, [sp, #36]	; 0x24
 8006642:	2320      	movs	r3, #32
 8006644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006648:	f8cd 800c 	str.w	r8, [sp, #12]
 800664c:	2330      	movs	r3, #48	; 0x30
 800664e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067f8 <_svfiprintf_r+0x1ec>
 8006652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006656:	f04f 0901 	mov.w	r9, #1
 800665a:	4623      	mov	r3, r4
 800665c:	469a      	mov	sl, r3
 800665e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006662:	b10a      	cbz	r2, 8006668 <_svfiprintf_r+0x5c>
 8006664:	2a25      	cmp	r2, #37	; 0x25
 8006666:	d1f9      	bne.n	800665c <_svfiprintf_r+0x50>
 8006668:	ebba 0b04 	subs.w	fp, sl, r4
 800666c:	d00b      	beq.n	8006686 <_svfiprintf_r+0x7a>
 800666e:	465b      	mov	r3, fp
 8006670:	4622      	mov	r2, r4
 8006672:	4629      	mov	r1, r5
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff ff6d 	bl	8006554 <__ssputs_r>
 800667a:	3001      	adds	r0, #1
 800667c:	f000 80aa 	beq.w	80067d4 <_svfiprintf_r+0x1c8>
 8006680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006682:	445a      	add	r2, fp
 8006684:	9209      	str	r2, [sp, #36]	; 0x24
 8006686:	f89a 3000 	ldrb.w	r3, [sl]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80a2 	beq.w	80067d4 <_svfiprintf_r+0x1c8>
 8006690:	2300      	movs	r3, #0
 8006692:	f04f 32ff 	mov.w	r2, #4294967295
 8006696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800669a:	f10a 0a01 	add.w	sl, sl, #1
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	9307      	str	r3, [sp, #28]
 80066a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066a6:	931a      	str	r3, [sp, #104]	; 0x68
 80066a8:	4654      	mov	r4, sl
 80066aa:	2205      	movs	r2, #5
 80066ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b0:	4851      	ldr	r0, [pc, #324]	; (80067f8 <_svfiprintf_r+0x1ec>)
 80066b2:	f7f9 fd95 	bl	80001e0 <memchr>
 80066b6:	9a04      	ldr	r2, [sp, #16]
 80066b8:	b9d8      	cbnz	r0, 80066f2 <_svfiprintf_r+0xe6>
 80066ba:	06d0      	lsls	r0, r2, #27
 80066bc:	bf44      	itt	mi
 80066be:	2320      	movmi	r3, #32
 80066c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c4:	0711      	lsls	r1, r2, #28
 80066c6:	bf44      	itt	mi
 80066c8:	232b      	movmi	r3, #43	; 0x2b
 80066ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ce:	f89a 3000 	ldrb.w	r3, [sl]
 80066d2:	2b2a      	cmp	r3, #42	; 0x2a
 80066d4:	d015      	beq.n	8006702 <_svfiprintf_r+0xf6>
 80066d6:	9a07      	ldr	r2, [sp, #28]
 80066d8:	4654      	mov	r4, sl
 80066da:	2000      	movs	r0, #0
 80066dc:	f04f 0c0a 	mov.w	ip, #10
 80066e0:	4621      	mov	r1, r4
 80066e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066e6:	3b30      	subs	r3, #48	; 0x30
 80066e8:	2b09      	cmp	r3, #9
 80066ea:	d94e      	bls.n	800678a <_svfiprintf_r+0x17e>
 80066ec:	b1b0      	cbz	r0, 800671c <_svfiprintf_r+0x110>
 80066ee:	9207      	str	r2, [sp, #28]
 80066f0:	e014      	b.n	800671c <_svfiprintf_r+0x110>
 80066f2:	eba0 0308 	sub.w	r3, r0, r8
 80066f6:	fa09 f303 	lsl.w	r3, r9, r3
 80066fa:	4313      	orrs	r3, r2
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	46a2      	mov	sl, r4
 8006700:	e7d2      	b.n	80066a8 <_svfiprintf_r+0x9c>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	1d19      	adds	r1, r3, #4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	9103      	str	r1, [sp, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfbb      	ittet	lt
 800670e:	425b      	neglt	r3, r3
 8006710:	f042 0202 	orrlt.w	r2, r2, #2
 8006714:	9307      	strge	r3, [sp, #28]
 8006716:	9307      	strlt	r3, [sp, #28]
 8006718:	bfb8      	it	lt
 800671a:	9204      	strlt	r2, [sp, #16]
 800671c:	7823      	ldrb	r3, [r4, #0]
 800671e:	2b2e      	cmp	r3, #46	; 0x2e
 8006720:	d10c      	bne.n	800673c <_svfiprintf_r+0x130>
 8006722:	7863      	ldrb	r3, [r4, #1]
 8006724:	2b2a      	cmp	r3, #42	; 0x2a
 8006726:	d135      	bne.n	8006794 <_svfiprintf_r+0x188>
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	1d1a      	adds	r2, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	9203      	str	r2, [sp, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	bfb8      	it	lt
 8006734:	f04f 33ff 	movlt.w	r3, #4294967295
 8006738:	3402      	adds	r4, #2
 800673a:	9305      	str	r3, [sp, #20]
 800673c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006808 <_svfiprintf_r+0x1fc>
 8006740:	7821      	ldrb	r1, [r4, #0]
 8006742:	2203      	movs	r2, #3
 8006744:	4650      	mov	r0, sl
 8006746:	f7f9 fd4b 	bl	80001e0 <memchr>
 800674a:	b140      	cbz	r0, 800675e <_svfiprintf_r+0x152>
 800674c:	2340      	movs	r3, #64	; 0x40
 800674e:	eba0 000a 	sub.w	r0, r0, sl
 8006752:	fa03 f000 	lsl.w	r0, r3, r0
 8006756:	9b04      	ldr	r3, [sp, #16]
 8006758:	4303      	orrs	r3, r0
 800675a:	3401      	adds	r4, #1
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006762:	4826      	ldr	r0, [pc, #152]	; (80067fc <_svfiprintf_r+0x1f0>)
 8006764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006768:	2206      	movs	r2, #6
 800676a:	f7f9 fd39 	bl	80001e0 <memchr>
 800676e:	2800      	cmp	r0, #0
 8006770:	d038      	beq.n	80067e4 <_svfiprintf_r+0x1d8>
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <_svfiprintf_r+0x1f4>)
 8006774:	bb1b      	cbnz	r3, 80067be <_svfiprintf_r+0x1b2>
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	3307      	adds	r3, #7
 800677a:	f023 0307 	bic.w	r3, r3, #7
 800677e:	3308      	adds	r3, #8
 8006780:	9303      	str	r3, [sp, #12]
 8006782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006784:	4433      	add	r3, r6
 8006786:	9309      	str	r3, [sp, #36]	; 0x24
 8006788:	e767      	b.n	800665a <_svfiprintf_r+0x4e>
 800678a:	fb0c 3202 	mla	r2, ip, r2, r3
 800678e:	460c      	mov	r4, r1
 8006790:	2001      	movs	r0, #1
 8006792:	e7a5      	b.n	80066e0 <_svfiprintf_r+0xd4>
 8006794:	2300      	movs	r3, #0
 8006796:	3401      	adds	r4, #1
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	4619      	mov	r1, r3
 800679c:	f04f 0c0a 	mov.w	ip, #10
 80067a0:	4620      	mov	r0, r4
 80067a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a6:	3a30      	subs	r2, #48	; 0x30
 80067a8:	2a09      	cmp	r2, #9
 80067aa:	d903      	bls.n	80067b4 <_svfiprintf_r+0x1a8>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0c5      	beq.n	800673c <_svfiprintf_r+0x130>
 80067b0:	9105      	str	r1, [sp, #20]
 80067b2:	e7c3      	b.n	800673c <_svfiprintf_r+0x130>
 80067b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067b8:	4604      	mov	r4, r0
 80067ba:	2301      	movs	r3, #1
 80067bc:	e7f0      	b.n	80067a0 <_svfiprintf_r+0x194>
 80067be:	ab03      	add	r3, sp, #12
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	462a      	mov	r2, r5
 80067c4:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <_svfiprintf_r+0x1f8>)
 80067c6:	a904      	add	r1, sp, #16
 80067c8:	4638      	mov	r0, r7
 80067ca:	f3af 8000 	nop.w
 80067ce:	1c42      	adds	r2, r0, #1
 80067d0:	4606      	mov	r6, r0
 80067d2:	d1d6      	bne.n	8006782 <_svfiprintf_r+0x176>
 80067d4:	89ab      	ldrh	r3, [r5, #12]
 80067d6:	065b      	lsls	r3, r3, #25
 80067d8:	f53f af2c 	bmi.w	8006634 <_svfiprintf_r+0x28>
 80067dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067de:	b01d      	add	sp, #116	; 0x74
 80067e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e4:	ab03      	add	r3, sp, #12
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	462a      	mov	r2, r5
 80067ea:	4b06      	ldr	r3, [pc, #24]	; (8006804 <_svfiprintf_r+0x1f8>)
 80067ec:	a904      	add	r1, sp, #16
 80067ee:	4638      	mov	r0, r7
 80067f0:	f000 f9d4 	bl	8006b9c <_printf_i>
 80067f4:	e7eb      	b.n	80067ce <_svfiprintf_r+0x1c2>
 80067f6:	bf00      	nop
 80067f8:	080073c0 	.word	0x080073c0
 80067fc:	080073ca 	.word	0x080073ca
 8006800:	00000000 	.word	0x00000000
 8006804:	08006555 	.word	0x08006555
 8006808:	080073c6 	.word	0x080073c6

0800680c <__sfputc_r>:
 800680c:	6893      	ldr	r3, [r2, #8]
 800680e:	3b01      	subs	r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	b410      	push	{r4}
 8006814:	6093      	str	r3, [r2, #8]
 8006816:	da08      	bge.n	800682a <__sfputc_r+0x1e>
 8006818:	6994      	ldr	r4, [r2, #24]
 800681a:	42a3      	cmp	r3, r4
 800681c:	db01      	blt.n	8006822 <__sfputc_r+0x16>
 800681e:	290a      	cmp	r1, #10
 8006820:	d103      	bne.n	800682a <__sfputc_r+0x1e>
 8006822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006826:	f7ff bd31 	b.w	800628c <__swbuf_r>
 800682a:	6813      	ldr	r3, [r2, #0]
 800682c:	1c58      	adds	r0, r3, #1
 800682e:	6010      	str	r0, [r2, #0]
 8006830:	7019      	strb	r1, [r3, #0]
 8006832:	4608      	mov	r0, r1
 8006834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006838:	4770      	bx	lr

0800683a <__sfputs_r>:
 800683a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683c:	4606      	mov	r6, r0
 800683e:	460f      	mov	r7, r1
 8006840:	4614      	mov	r4, r2
 8006842:	18d5      	adds	r5, r2, r3
 8006844:	42ac      	cmp	r4, r5
 8006846:	d101      	bne.n	800684c <__sfputs_r+0x12>
 8006848:	2000      	movs	r0, #0
 800684a:	e007      	b.n	800685c <__sfputs_r+0x22>
 800684c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006850:	463a      	mov	r2, r7
 8006852:	4630      	mov	r0, r6
 8006854:	f7ff ffda 	bl	800680c <__sfputc_r>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d1f3      	bne.n	8006844 <__sfputs_r+0xa>
 800685c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006860 <_vfiprintf_r>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	460d      	mov	r5, r1
 8006866:	b09d      	sub	sp, #116	; 0x74
 8006868:	4614      	mov	r4, r2
 800686a:	4698      	mov	r8, r3
 800686c:	4606      	mov	r6, r0
 800686e:	b118      	cbz	r0, 8006878 <_vfiprintf_r+0x18>
 8006870:	6983      	ldr	r3, [r0, #24]
 8006872:	b90b      	cbnz	r3, 8006878 <_vfiprintf_r+0x18>
 8006874:	f7ff face 	bl	8005e14 <__sinit>
 8006878:	4b89      	ldr	r3, [pc, #548]	; (8006aa0 <_vfiprintf_r+0x240>)
 800687a:	429d      	cmp	r5, r3
 800687c:	d11b      	bne.n	80068b6 <_vfiprintf_r+0x56>
 800687e:	6875      	ldr	r5, [r6, #4]
 8006880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006882:	07d9      	lsls	r1, r3, #31
 8006884:	d405      	bmi.n	8006892 <_vfiprintf_r+0x32>
 8006886:	89ab      	ldrh	r3, [r5, #12]
 8006888:	059a      	lsls	r2, r3, #22
 800688a:	d402      	bmi.n	8006892 <_vfiprintf_r+0x32>
 800688c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800688e:	f7ff fb84 	bl	8005f9a <__retarget_lock_acquire_recursive>
 8006892:	89ab      	ldrh	r3, [r5, #12]
 8006894:	071b      	lsls	r3, r3, #28
 8006896:	d501      	bpl.n	800689c <_vfiprintf_r+0x3c>
 8006898:	692b      	ldr	r3, [r5, #16]
 800689a:	b9eb      	cbnz	r3, 80068d8 <_vfiprintf_r+0x78>
 800689c:	4629      	mov	r1, r5
 800689e:	4630      	mov	r0, r6
 80068a0:	f7ff fd58 	bl	8006354 <__swsetup_r>
 80068a4:	b1c0      	cbz	r0, 80068d8 <_vfiprintf_r+0x78>
 80068a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a8:	07dc      	lsls	r4, r3, #31
 80068aa:	d50e      	bpl.n	80068ca <_vfiprintf_r+0x6a>
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	b01d      	add	sp, #116	; 0x74
 80068b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b6:	4b7b      	ldr	r3, [pc, #492]	; (8006aa4 <_vfiprintf_r+0x244>)
 80068b8:	429d      	cmp	r5, r3
 80068ba:	d101      	bne.n	80068c0 <_vfiprintf_r+0x60>
 80068bc:	68b5      	ldr	r5, [r6, #8]
 80068be:	e7df      	b.n	8006880 <_vfiprintf_r+0x20>
 80068c0:	4b79      	ldr	r3, [pc, #484]	; (8006aa8 <_vfiprintf_r+0x248>)
 80068c2:	429d      	cmp	r5, r3
 80068c4:	bf08      	it	eq
 80068c6:	68f5      	ldreq	r5, [r6, #12]
 80068c8:	e7da      	b.n	8006880 <_vfiprintf_r+0x20>
 80068ca:	89ab      	ldrh	r3, [r5, #12]
 80068cc:	0598      	lsls	r0, r3, #22
 80068ce:	d4ed      	bmi.n	80068ac <_vfiprintf_r+0x4c>
 80068d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068d2:	f7ff fb63 	bl	8005f9c <__retarget_lock_release_recursive>
 80068d6:	e7e9      	b.n	80068ac <_vfiprintf_r+0x4c>
 80068d8:	2300      	movs	r3, #0
 80068da:	9309      	str	r3, [sp, #36]	; 0x24
 80068dc:	2320      	movs	r3, #32
 80068de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e6:	2330      	movs	r3, #48	; 0x30
 80068e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006aac <_vfiprintf_r+0x24c>
 80068ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068f0:	f04f 0901 	mov.w	r9, #1
 80068f4:	4623      	mov	r3, r4
 80068f6:	469a      	mov	sl, r3
 80068f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068fc:	b10a      	cbz	r2, 8006902 <_vfiprintf_r+0xa2>
 80068fe:	2a25      	cmp	r2, #37	; 0x25
 8006900:	d1f9      	bne.n	80068f6 <_vfiprintf_r+0x96>
 8006902:	ebba 0b04 	subs.w	fp, sl, r4
 8006906:	d00b      	beq.n	8006920 <_vfiprintf_r+0xc0>
 8006908:	465b      	mov	r3, fp
 800690a:	4622      	mov	r2, r4
 800690c:	4629      	mov	r1, r5
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff ff93 	bl	800683a <__sfputs_r>
 8006914:	3001      	adds	r0, #1
 8006916:	f000 80aa 	beq.w	8006a6e <_vfiprintf_r+0x20e>
 800691a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800691c:	445a      	add	r2, fp
 800691e:	9209      	str	r2, [sp, #36]	; 0x24
 8006920:	f89a 3000 	ldrb.w	r3, [sl]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80a2 	beq.w	8006a6e <_vfiprintf_r+0x20e>
 800692a:	2300      	movs	r3, #0
 800692c:	f04f 32ff 	mov.w	r2, #4294967295
 8006930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006934:	f10a 0a01 	add.w	sl, sl, #1
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	9307      	str	r3, [sp, #28]
 800693c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006940:	931a      	str	r3, [sp, #104]	; 0x68
 8006942:	4654      	mov	r4, sl
 8006944:	2205      	movs	r2, #5
 8006946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800694a:	4858      	ldr	r0, [pc, #352]	; (8006aac <_vfiprintf_r+0x24c>)
 800694c:	f7f9 fc48 	bl	80001e0 <memchr>
 8006950:	9a04      	ldr	r2, [sp, #16]
 8006952:	b9d8      	cbnz	r0, 800698c <_vfiprintf_r+0x12c>
 8006954:	06d1      	lsls	r1, r2, #27
 8006956:	bf44      	itt	mi
 8006958:	2320      	movmi	r3, #32
 800695a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800695e:	0713      	lsls	r3, r2, #28
 8006960:	bf44      	itt	mi
 8006962:	232b      	movmi	r3, #43	; 0x2b
 8006964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006968:	f89a 3000 	ldrb.w	r3, [sl]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d015      	beq.n	800699c <_vfiprintf_r+0x13c>
 8006970:	9a07      	ldr	r2, [sp, #28]
 8006972:	4654      	mov	r4, sl
 8006974:	2000      	movs	r0, #0
 8006976:	f04f 0c0a 	mov.w	ip, #10
 800697a:	4621      	mov	r1, r4
 800697c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006980:	3b30      	subs	r3, #48	; 0x30
 8006982:	2b09      	cmp	r3, #9
 8006984:	d94e      	bls.n	8006a24 <_vfiprintf_r+0x1c4>
 8006986:	b1b0      	cbz	r0, 80069b6 <_vfiprintf_r+0x156>
 8006988:	9207      	str	r2, [sp, #28]
 800698a:	e014      	b.n	80069b6 <_vfiprintf_r+0x156>
 800698c:	eba0 0308 	sub.w	r3, r0, r8
 8006990:	fa09 f303 	lsl.w	r3, r9, r3
 8006994:	4313      	orrs	r3, r2
 8006996:	9304      	str	r3, [sp, #16]
 8006998:	46a2      	mov	sl, r4
 800699a:	e7d2      	b.n	8006942 <_vfiprintf_r+0xe2>
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	1d19      	adds	r1, r3, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	9103      	str	r1, [sp, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bfbb      	ittet	lt
 80069a8:	425b      	neglt	r3, r3
 80069aa:	f042 0202 	orrlt.w	r2, r2, #2
 80069ae:	9307      	strge	r3, [sp, #28]
 80069b0:	9307      	strlt	r3, [sp, #28]
 80069b2:	bfb8      	it	lt
 80069b4:	9204      	strlt	r2, [sp, #16]
 80069b6:	7823      	ldrb	r3, [r4, #0]
 80069b8:	2b2e      	cmp	r3, #46	; 0x2e
 80069ba:	d10c      	bne.n	80069d6 <_vfiprintf_r+0x176>
 80069bc:	7863      	ldrb	r3, [r4, #1]
 80069be:	2b2a      	cmp	r3, #42	; 0x2a
 80069c0:	d135      	bne.n	8006a2e <_vfiprintf_r+0x1ce>
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	1d1a      	adds	r2, r3, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	9203      	str	r2, [sp, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bfb8      	it	lt
 80069ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80069d2:	3402      	adds	r4, #2
 80069d4:	9305      	str	r3, [sp, #20]
 80069d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006abc <_vfiprintf_r+0x25c>
 80069da:	7821      	ldrb	r1, [r4, #0]
 80069dc:	2203      	movs	r2, #3
 80069de:	4650      	mov	r0, sl
 80069e0:	f7f9 fbfe 	bl	80001e0 <memchr>
 80069e4:	b140      	cbz	r0, 80069f8 <_vfiprintf_r+0x198>
 80069e6:	2340      	movs	r3, #64	; 0x40
 80069e8:	eba0 000a 	sub.w	r0, r0, sl
 80069ec:	fa03 f000 	lsl.w	r0, r3, r0
 80069f0:	9b04      	ldr	r3, [sp, #16]
 80069f2:	4303      	orrs	r3, r0
 80069f4:	3401      	adds	r4, #1
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069fc:	482c      	ldr	r0, [pc, #176]	; (8006ab0 <_vfiprintf_r+0x250>)
 80069fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a02:	2206      	movs	r2, #6
 8006a04:	f7f9 fbec 	bl	80001e0 <memchr>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d03f      	beq.n	8006a8c <_vfiprintf_r+0x22c>
 8006a0c:	4b29      	ldr	r3, [pc, #164]	; (8006ab4 <_vfiprintf_r+0x254>)
 8006a0e:	bb1b      	cbnz	r3, 8006a58 <_vfiprintf_r+0x1f8>
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	3307      	adds	r3, #7
 8006a14:	f023 0307 	bic.w	r3, r3, #7
 8006a18:	3308      	adds	r3, #8
 8006a1a:	9303      	str	r3, [sp, #12]
 8006a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1e:	443b      	add	r3, r7
 8006a20:	9309      	str	r3, [sp, #36]	; 0x24
 8006a22:	e767      	b.n	80068f4 <_vfiprintf_r+0x94>
 8006a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a28:	460c      	mov	r4, r1
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	e7a5      	b.n	800697a <_vfiprintf_r+0x11a>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	3401      	adds	r4, #1
 8006a32:	9305      	str	r3, [sp, #20]
 8006a34:	4619      	mov	r1, r3
 8006a36:	f04f 0c0a 	mov.w	ip, #10
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a40:	3a30      	subs	r2, #48	; 0x30
 8006a42:	2a09      	cmp	r2, #9
 8006a44:	d903      	bls.n	8006a4e <_vfiprintf_r+0x1ee>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0c5      	beq.n	80069d6 <_vfiprintf_r+0x176>
 8006a4a:	9105      	str	r1, [sp, #20]
 8006a4c:	e7c3      	b.n	80069d6 <_vfiprintf_r+0x176>
 8006a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a52:	4604      	mov	r4, r0
 8006a54:	2301      	movs	r3, #1
 8006a56:	e7f0      	b.n	8006a3a <_vfiprintf_r+0x1da>
 8006a58:	ab03      	add	r3, sp, #12
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	462a      	mov	r2, r5
 8006a5e:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <_vfiprintf_r+0x258>)
 8006a60:	a904      	add	r1, sp, #16
 8006a62:	4630      	mov	r0, r6
 8006a64:	f3af 8000 	nop.w
 8006a68:	4607      	mov	r7, r0
 8006a6a:	1c78      	adds	r0, r7, #1
 8006a6c:	d1d6      	bne.n	8006a1c <_vfiprintf_r+0x1bc>
 8006a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a70:	07d9      	lsls	r1, r3, #31
 8006a72:	d405      	bmi.n	8006a80 <_vfiprintf_r+0x220>
 8006a74:	89ab      	ldrh	r3, [r5, #12]
 8006a76:	059a      	lsls	r2, r3, #22
 8006a78:	d402      	bmi.n	8006a80 <_vfiprintf_r+0x220>
 8006a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a7c:	f7ff fa8e 	bl	8005f9c <__retarget_lock_release_recursive>
 8006a80:	89ab      	ldrh	r3, [r5, #12]
 8006a82:	065b      	lsls	r3, r3, #25
 8006a84:	f53f af12 	bmi.w	80068ac <_vfiprintf_r+0x4c>
 8006a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a8a:	e711      	b.n	80068b0 <_vfiprintf_r+0x50>
 8006a8c:	ab03      	add	r3, sp, #12
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <_vfiprintf_r+0x258>)
 8006a94:	a904      	add	r1, sp, #16
 8006a96:	4630      	mov	r0, r6
 8006a98:	f000 f880 	bl	8006b9c <_printf_i>
 8006a9c:	e7e4      	b.n	8006a68 <_vfiprintf_r+0x208>
 8006a9e:	bf00      	nop
 8006aa0:	0800737c 	.word	0x0800737c
 8006aa4:	0800739c 	.word	0x0800739c
 8006aa8:	0800735c 	.word	0x0800735c
 8006aac:	080073c0 	.word	0x080073c0
 8006ab0:	080073ca 	.word	0x080073ca
 8006ab4:	00000000 	.word	0x00000000
 8006ab8:	0800683b 	.word	0x0800683b
 8006abc:	080073c6 	.word	0x080073c6

08006ac0 <_printf_common>:
 8006ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	4699      	mov	r9, r3
 8006ac8:	688a      	ldr	r2, [r1, #8]
 8006aca:	690b      	ldr	r3, [r1, #16]
 8006acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	bfb8      	it	lt
 8006ad4:	4613      	movlt	r3, r2
 8006ad6:	6033      	str	r3, [r6, #0]
 8006ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006adc:	4607      	mov	r7, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	b10a      	cbz	r2, 8006ae6 <_printf_common+0x26>
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	6033      	str	r3, [r6, #0]
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	0699      	lsls	r1, r3, #26
 8006aea:	bf42      	ittt	mi
 8006aec:	6833      	ldrmi	r3, [r6, #0]
 8006aee:	3302      	addmi	r3, #2
 8006af0:	6033      	strmi	r3, [r6, #0]
 8006af2:	6825      	ldr	r5, [r4, #0]
 8006af4:	f015 0506 	ands.w	r5, r5, #6
 8006af8:	d106      	bne.n	8006b08 <_printf_common+0x48>
 8006afa:	f104 0a19 	add.w	sl, r4, #25
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	6832      	ldr	r2, [r6, #0]
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	42ab      	cmp	r3, r5
 8006b06:	dc26      	bgt.n	8006b56 <_printf_common+0x96>
 8006b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b0c:	1e13      	subs	r3, r2, #0
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	bf18      	it	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	0692      	lsls	r2, r2, #26
 8006b16:	d42b      	bmi.n	8006b70 <_printf_common+0xb0>
 8006b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4638      	mov	r0, r7
 8006b20:	47c0      	blx	r8
 8006b22:	3001      	adds	r0, #1
 8006b24:	d01e      	beq.n	8006b64 <_printf_common+0xa4>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	68e5      	ldr	r5, [r4, #12]
 8006b2a:	6832      	ldr	r2, [r6, #0]
 8006b2c:	f003 0306 	and.w	r3, r3, #6
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	bf08      	it	eq
 8006b34:	1aad      	subeq	r5, r5, r2
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	6922      	ldr	r2, [r4, #16]
 8006b3a:	bf0c      	ite	eq
 8006b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b40:	2500      	movne	r5, #0
 8006b42:	4293      	cmp	r3, r2
 8006b44:	bfc4      	itt	gt
 8006b46:	1a9b      	subgt	r3, r3, r2
 8006b48:	18ed      	addgt	r5, r5, r3
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	341a      	adds	r4, #26
 8006b4e:	42b5      	cmp	r5, r6
 8006b50:	d11a      	bne.n	8006b88 <_printf_common+0xc8>
 8006b52:	2000      	movs	r0, #0
 8006b54:	e008      	b.n	8006b68 <_printf_common+0xa8>
 8006b56:	2301      	movs	r3, #1
 8006b58:	4652      	mov	r2, sl
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	47c0      	blx	r8
 8006b60:	3001      	adds	r0, #1
 8006b62:	d103      	bne.n	8006b6c <_printf_common+0xac>
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6c:	3501      	adds	r5, #1
 8006b6e:	e7c6      	b.n	8006afe <_printf_common+0x3e>
 8006b70:	18e1      	adds	r1, r4, r3
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	2030      	movs	r0, #48	; 0x30
 8006b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b7a:	4422      	add	r2, r4
 8006b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b84:	3302      	adds	r3, #2
 8006b86:	e7c7      	b.n	8006b18 <_printf_common+0x58>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	4638      	mov	r0, r7
 8006b90:	47c0      	blx	r8
 8006b92:	3001      	adds	r0, #1
 8006b94:	d0e6      	beq.n	8006b64 <_printf_common+0xa4>
 8006b96:	3601      	adds	r6, #1
 8006b98:	e7d9      	b.n	8006b4e <_printf_common+0x8e>
	...

08006b9c <_printf_i>:
 8006b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	4691      	mov	r9, r2
 8006ba4:	7e27      	ldrb	r7, [r4, #24]
 8006ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ba8:	2f78      	cmp	r7, #120	; 0x78
 8006baa:	4680      	mov	r8, r0
 8006bac:	469a      	mov	sl, r3
 8006bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bb2:	d807      	bhi.n	8006bc4 <_printf_i+0x28>
 8006bb4:	2f62      	cmp	r7, #98	; 0x62
 8006bb6:	d80a      	bhi.n	8006bce <_printf_i+0x32>
 8006bb8:	2f00      	cmp	r7, #0
 8006bba:	f000 80d8 	beq.w	8006d6e <_printf_i+0x1d2>
 8006bbe:	2f58      	cmp	r7, #88	; 0x58
 8006bc0:	f000 80a3 	beq.w	8006d0a <_printf_i+0x16e>
 8006bc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bcc:	e03a      	b.n	8006c44 <_printf_i+0xa8>
 8006bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bd2:	2b15      	cmp	r3, #21
 8006bd4:	d8f6      	bhi.n	8006bc4 <_printf_i+0x28>
 8006bd6:	a001      	add	r0, pc, #4	; (adr r0, 8006bdc <_printf_i+0x40>)
 8006bd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006bdc:	08006c35 	.word	0x08006c35
 8006be0:	08006c49 	.word	0x08006c49
 8006be4:	08006bc5 	.word	0x08006bc5
 8006be8:	08006bc5 	.word	0x08006bc5
 8006bec:	08006bc5 	.word	0x08006bc5
 8006bf0:	08006bc5 	.word	0x08006bc5
 8006bf4:	08006c49 	.word	0x08006c49
 8006bf8:	08006bc5 	.word	0x08006bc5
 8006bfc:	08006bc5 	.word	0x08006bc5
 8006c00:	08006bc5 	.word	0x08006bc5
 8006c04:	08006bc5 	.word	0x08006bc5
 8006c08:	08006d55 	.word	0x08006d55
 8006c0c:	08006c79 	.word	0x08006c79
 8006c10:	08006d37 	.word	0x08006d37
 8006c14:	08006bc5 	.word	0x08006bc5
 8006c18:	08006bc5 	.word	0x08006bc5
 8006c1c:	08006d77 	.word	0x08006d77
 8006c20:	08006bc5 	.word	0x08006bc5
 8006c24:	08006c79 	.word	0x08006c79
 8006c28:	08006bc5 	.word	0x08006bc5
 8006c2c:	08006bc5 	.word	0x08006bc5
 8006c30:	08006d3f 	.word	0x08006d3f
 8006c34:	680b      	ldr	r3, [r1, #0]
 8006c36:	1d1a      	adds	r2, r3, #4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	600a      	str	r2, [r1, #0]
 8006c3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c44:	2301      	movs	r3, #1
 8006c46:	e0a3      	b.n	8006d90 <_printf_i+0x1f4>
 8006c48:	6825      	ldr	r5, [r4, #0]
 8006c4a:	6808      	ldr	r0, [r1, #0]
 8006c4c:	062e      	lsls	r6, r5, #24
 8006c4e:	f100 0304 	add.w	r3, r0, #4
 8006c52:	d50a      	bpl.n	8006c6a <_printf_i+0xce>
 8006c54:	6805      	ldr	r5, [r0, #0]
 8006c56:	600b      	str	r3, [r1, #0]
 8006c58:	2d00      	cmp	r5, #0
 8006c5a:	da03      	bge.n	8006c64 <_printf_i+0xc8>
 8006c5c:	232d      	movs	r3, #45	; 0x2d
 8006c5e:	426d      	negs	r5, r5
 8006c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c64:	485e      	ldr	r0, [pc, #376]	; (8006de0 <_printf_i+0x244>)
 8006c66:	230a      	movs	r3, #10
 8006c68:	e019      	b.n	8006c9e <_printf_i+0x102>
 8006c6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c6e:	6805      	ldr	r5, [r0, #0]
 8006c70:	600b      	str	r3, [r1, #0]
 8006c72:	bf18      	it	ne
 8006c74:	b22d      	sxthne	r5, r5
 8006c76:	e7ef      	b.n	8006c58 <_printf_i+0xbc>
 8006c78:	680b      	ldr	r3, [r1, #0]
 8006c7a:	6825      	ldr	r5, [r4, #0]
 8006c7c:	1d18      	adds	r0, r3, #4
 8006c7e:	6008      	str	r0, [r1, #0]
 8006c80:	0628      	lsls	r0, r5, #24
 8006c82:	d501      	bpl.n	8006c88 <_printf_i+0xec>
 8006c84:	681d      	ldr	r5, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <_printf_i+0xf2>
 8006c88:	0669      	lsls	r1, r5, #25
 8006c8a:	d5fb      	bpl.n	8006c84 <_printf_i+0xe8>
 8006c8c:	881d      	ldrh	r5, [r3, #0]
 8006c8e:	4854      	ldr	r0, [pc, #336]	; (8006de0 <_printf_i+0x244>)
 8006c90:	2f6f      	cmp	r7, #111	; 0x6f
 8006c92:	bf0c      	ite	eq
 8006c94:	2308      	moveq	r3, #8
 8006c96:	230a      	movne	r3, #10
 8006c98:	2100      	movs	r1, #0
 8006c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c9e:	6866      	ldr	r6, [r4, #4]
 8006ca0:	60a6      	str	r6, [r4, #8]
 8006ca2:	2e00      	cmp	r6, #0
 8006ca4:	bfa2      	ittt	ge
 8006ca6:	6821      	ldrge	r1, [r4, #0]
 8006ca8:	f021 0104 	bicge.w	r1, r1, #4
 8006cac:	6021      	strge	r1, [r4, #0]
 8006cae:	b90d      	cbnz	r5, 8006cb4 <_printf_i+0x118>
 8006cb0:	2e00      	cmp	r6, #0
 8006cb2:	d04d      	beq.n	8006d50 <_printf_i+0x1b4>
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cba:	fb03 5711 	mls	r7, r3, r1, r5
 8006cbe:	5dc7      	ldrb	r7, [r0, r7]
 8006cc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cc4:	462f      	mov	r7, r5
 8006cc6:	42bb      	cmp	r3, r7
 8006cc8:	460d      	mov	r5, r1
 8006cca:	d9f4      	bls.n	8006cb6 <_printf_i+0x11a>
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d10b      	bne.n	8006ce8 <_printf_i+0x14c>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	07df      	lsls	r7, r3, #31
 8006cd4:	d508      	bpl.n	8006ce8 <_printf_i+0x14c>
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	6861      	ldr	r1, [r4, #4]
 8006cda:	4299      	cmp	r1, r3
 8006cdc:	bfde      	ittt	le
 8006cde:	2330      	movle	r3, #48	; 0x30
 8006ce0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ce4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ce8:	1b92      	subs	r2, r2, r6
 8006cea:	6122      	str	r2, [r4, #16]
 8006cec:	f8cd a000 	str.w	sl, [sp]
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	aa03      	add	r2, sp, #12
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	f7ff fee2 	bl	8006ac0 <_printf_common>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d14c      	bne.n	8006d9a <_printf_i+0x1fe>
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	b004      	add	sp, #16
 8006d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0a:	4835      	ldr	r0, [pc, #212]	; (8006de0 <_printf_i+0x244>)
 8006d0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	680e      	ldr	r6, [r1, #0]
 8006d14:	061f      	lsls	r7, r3, #24
 8006d16:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d1a:	600e      	str	r6, [r1, #0]
 8006d1c:	d514      	bpl.n	8006d48 <_printf_i+0x1ac>
 8006d1e:	07d9      	lsls	r1, r3, #31
 8006d20:	bf44      	itt	mi
 8006d22:	f043 0320 	orrmi.w	r3, r3, #32
 8006d26:	6023      	strmi	r3, [r4, #0]
 8006d28:	b91d      	cbnz	r5, 8006d32 <_printf_i+0x196>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	f023 0320 	bic.w	r3, r3, #32
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	2310      	movs	r3, #16
 8006d34:	e7b0      	b.n	8006c98 <_printf_i+0xfc>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f043 0320 	orr.w	r3, r3, #32
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	2378      	movs	r3, #120	; 0x78
 8006d40:	4828      	ldr	r0, [pc, #160]	; (8006de4 <_printf_i+0x248>)
 8006d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d46:	e7e3      	b.n	8006d10 <_printf_i+0x174>
 8006d48:	065e      	lsls	r6, r3, #25
 8006d4a:	bf48      	it	mi
 8006d4c:	b2ad      	uxthmi	r5, r5
 8006d4e:	e7e6      	b.n	8006d1e <_printf_i+0x182>
 8006d50:	4616      	mov	r6, r2
 8006d52:	e7bb      	b.n	8006ccc <_printf_i+0x130>
 8006d54:	680b      	ldr	r3, [r1, #0]
 8006d56:	6826      	ldr	r6, [r4, #0]
 8006d58:	6960      	ldr	r0, [r4, #20]
 8006d5a:	1d1d      	adds	r5, r3, #4
 8006d5c:	600d      	str	r5, [r1, #0]
 8006d5e:	0635      	lsls	r5, r6, #24
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	d501      	bpl.n	8006d68 <_printf_i+0x1cc>
 8006d64:	6018      	str	r0, [r3, #0]
 8006d66:	e002      	b.n	8006d6e <_printf_i+0x1d2>
 8006d68:	0671      	lsls	r1, r6, #25
 8006d6a:	d5fb      	bpl.n	8006d64 <_printf_i+0x1c8>
 8006d6c:	8018      	strh	r0, [r3, #0]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	4616      	mov	r6, r2
 8006d74:	e7ba      	b.n	8006cec <_printf_i+0x150>
 8006d76:	680b      	ldr	r3, [r1, #0]
 8006d78:	1d1a      	adds	r2, r3, #4
 8006d7a:	600a      	str	r2, [r1, #0]
 8006d7c:	681e      	ldr	r6, [r3, #0]
 8006d7e:	6862      	ldr	r2, [r4, #4]
 8006d80:	2100      	movs	r1, #0
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7f9 fa2c 	bl	80001e0 <memchr>
 8006d88:	b108      	cbz	r0, 8006d8e <_printf_i+0x1f2>
 8006d8a:	1b80      	subs	r0, r0, r6
 8006d8c:	6060      	str	r0, [r4, #4]
 8006d8e:	6863      	ldr	r3, [r4, #4]
 8006d90:	6123      	str	r3, [r4, #16]
 8006d92:	2300      	movs	r3, #0
 8006d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d98:	e7a8      	b.n	8006cec <_printf_i+0x150>
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4640      	mov	r0, r8
 8006da2:	47d0      	blx	sl
 8006da4:	3001      	adds	r0, #1
 8006da6:	d0ab      	beq.n	8006d00 <_printf_i+0x164>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	079b      	lsls	r3, r3, #30
 8006dac:	d413      	bmi.n	8006dd6 <_printf_i+0x23a>
 8006dae:	68e0      	ldr	r0, [r4, #12]
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	4298      	cmp	r0, r3
 8006db4:	bfb8      	it	lt
 8006db6:	4618      	movlt	r0, r3
 8006db8:	e7a4      	b.n	8006d04 <_printf_i+0x168>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	47d0      	blx	sl
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d09b      	beq.n	8006d00 <_printf_i+0x164>
 8006dc8:	3501      	adds	r5, #1
 8006dca:	68e3      	ldr	r3, [r4, #12]
 8006dcc:	9903      	ldr	r1, [sp, #12]
 8006dce:	1a5b      	subs	r3, r3, r1
 8006dd0:	42ab      	cmp	r3, r5
 8006dd2:	dcf2      	bgt.n	8006dba <_printf_i+0x21e>
 8006dd4:	e7eb      	b.n	8006dae <_printf_i+0x212>
 8006dd6:	2500      	movs	r5, #0
 8006dd8:	f104 0619 	add.w	r6, r4, #25
 8006ddc:	e7f5      	b.n	8006dca <_printf_i+0x22e>
 8006dde:	bf00      	nop
 8006de0:	080073d1 	.word	0x080073d1
 8006de4:	080073e2 	.word	0x080073e2

08006de8 <_read_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4d07      	ldr	r5, [pc, #28]	; (8006e08 <_read_r+0x20>)
 8006dec:	4604      	mov	r4, r0
 8006dee:	4608      	mov	r0, r1
 8006df0:	4611      	mov	r1, r2
 8006df2:	2200      	movs	r2, #0
 8006df4:	602a      	str	r2, [r5, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f7fa fa58 	bl	80012ac <_read>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_read_r+0x1e>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_read_r+0x1e>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	200044ac 	.word	0x200044ac

08006e0c <_fstat_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d07      	ldr	r5, [pc, #28]	; (8006e2c <_fstat_r+0x20>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	4604      	mov	r4, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	602b      	str	r3, [r5, #0]
 8006e1a:	f7fa fa8c 	bl	8001336 <_fstat>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d102      	bne.n	8006e28 <_fstat_r+0x1c>
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	b103      	cbz	r3, 8006e28 <_fstat_r+0x1c>
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	bd38      	pop	{r3, r4, r5, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200044ac 	.word	0x200044ac

08006e30 <_isatty_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d06      	ldr	r5, [pc, #24]	; (8006e4c <_isatty_r+0x1c>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	f7fa fa8b 	bl	8001356 <_isatty>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_isatty_r+0x1a>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_isatty_r+0x1a>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	200044ac 	.word	0x200044ac

08006e50 <memmove>:
 8006e50:	4288      	cmp	r0, r1
 8006e52:	b510      	push	{r4, lr}
 8006e54:	eb01 0402 	add.w	r4, r1, r2
 8006e58:	d902      	bls.n	8006e60 <memmove+0x10>
 8006e5a:	4284      	cmp	r4, r0
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	d807      	bhi.n	8006e70 <memmove+0x20>
 8006e60:	1e43      	subs	r3, r0, #1
 8006e62:	42a1      	cmp	r1, r4
 8006e64:	d008      	beq.n	8006e78 <memmove+0x28>
 8006e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e6e:	e7f8      	b.n	8006e62 <memmove+0x12>
 8006e70:	4402      	add	r2, r0
 8006e72:	4601      	mov	r1, r0
 8006e74:	428a      	cmp	r2, r1
 8006e76:	d100      	bne.n	8006e7a <memmove+0x2a>
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e82:	e7f7      	b.n	8006e74 <memmove+0x24>

08006e84 <_realloc_r>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	4607      	mov	r7, r0
 8006e88:	4614      	mov	r4, r2
 8006e8a:	460e      	mov	r6, r1
 8006e8c:	b921      	cbnz	r1, 8006e98 <_realloc_r+0x14>
 8006e8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e92:	4611      	mov	r1, r2
 8006e94:	f7ff b8ea 	b.w	800606c <_malloc_r>
 8006e98:	b922      	cbnz	r2, 8006ea4 <_realloc_r+0x20>
 8006e9a:	f7ff f897 	bl	8005fcc <_free_r>
 8006e9e:	4625      	mov	r5, r4
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea4:	f000 f814 	bl	8006ed0 <_malloc_usable_size_r>
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d20f      	bcs.n	8006ecc <_realloc_r+0x48>
 8006eac:	4621      	mov	r1, r4
 8006eae:	4638      	mov	r0, r7
 8006eb0:	f7ff f8dc 	bl	800606c <_malloc_r>
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d0f2      	beq.n	8006ea0 <_realloc_r+0x1c>
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	f7ff f86e 	bl	8005f9e <memcpy>
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff f881 	bl	8005fcc <_free_r>
 8006eca:	e7e9      	b.n	8006ea0 <_realloc_r+0x1c>
 8006ecc:	4635      	mov	r5, r6
 8006ece:	e7e7      	b.n	8006ea0 <_realloc_r+0x1c>

08006ed0 <_malloc_usable_size_r>:
 8006ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ed4:	1f18      	subs	r0, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bfbc      	itt	lt
 8006eda:	580b      	ldrlt	r3, [r1, r0]
 8006edc:	18c0      	addlt	r0, r0, r3
 8006ede:	4770      	bx	lr

08006ee0 <_init>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr

08006eec <_fini>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr

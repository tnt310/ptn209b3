
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800bc2c  0800bc2c  0001bc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c208  0800c208  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800c208  0800c208  0001c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c210  0800c210  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c210  0800c210  0001c210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c214  0800c214  0001c214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800c218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c6c  20000240  0800c458  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004eac  0800c458  00024eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224ea  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000491e  00000000  00000000  0004275a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001988  00000000  00000000  00047078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001790  00000000  00000000  00048a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026f9a  00000000  00000000  0004a190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018a96  00000000  00000000  0007112a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8949  00000000  00000000  00089bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162509  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073d4  00000000  00000000  00162584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc14 	.word	0x0800bc14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800bc14 	.word	0x0800bc14

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
int
CmdLineProcess(char *pcCmdLine)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 80005a8:	2301      	movs	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 80005b4:	e020      	b.n	80005f8 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b20      	cmp	r3, #32
 80005bc:	d105      	bne.n	80005ca <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e013      	b.n	80005f2 <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d010      	beq.n	80005f2 <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b09      	cmp	r3, #9
 80005d4:	d80a      	bhi.n	80005ec <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 80005d6:	491d      	ldr	r1, [pc, #116]	; (800064c <CmdLineProcess+0xac>)
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	3301      	adds	r3, #1
 80005e4:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e002      	b.n	80005f2 <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 80005ec:	f06f 0301 	mvn.w	r3, #1
 80005f0:	e028      	b.n	8000644 <CmdLineProcess+0xa4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1da      	bne.n	80005b6 <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d01c      	beq.n	8000640 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <CmdLineProcess+0xb0>)
 8000608:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 800060a:	e015      	b.n	8000638 <CmdLineProcess+0x98>
        {
            //
            // If this command entry command string matches argv[0], then call
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <CmdLineProcess+0xac>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4610      	mov	r0, r2
 8000618:	f7ff fdda 	bl	80001d0 <strcmp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <CmdLineProcess+0x92>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	4908      	ldr	r1, [pc, #32]	; (800064c <CmdLineProcess+0xac>)
 800062a:	4610      	mov	r0, r2
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	e008      	b.n	8000644 <CmdLineProcess+0xa4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	330c      	adds	r3, #12
 8000636:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1e5      	bne.n	800060c <CmdLineProcess+0x6c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000025c 	.word	0x2000025c
 8000650:	20000000 	.word	0x20000000

08000654 <UARTIntHandler>:
uint8_t commandBuffer[200];
uint32_t commandBufferIndex = 0;
uint32_t gotCommandFlag = 0;
uint8_t temp[100];

void UARTIntHandler(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint8_t receivedChar;
	char *EnterCMD = "\r\n>";
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <UARTIntHandler+0xa0>)
 800065c:	607b      	str	r3, [r7, #4]
	receivedChar = (uint8_t) ((huart6).Instance->DR & (uint8_t) 0x00FF);
 800065e:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <UARTIntHandler+0xa4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart6, &receivedChar, 1, 100);
 8000668:	1cf9      	adds	r1, r7, #3
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	4822      	ldr	r0, [pc, #136]	; (80006f8 <UARTIntHandler+0xa4>)
 8000670:	f004 f9e3 	bl	8004a3a <HAL_UART_Transmit>
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <UARTIntHandler+0xa4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <UARTIntHandler+0xa4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f042 0220 	orr.w	r2, r2, #32
 8000682:	60da      	str	r2, [r3, #12]
	if (receivedChar != 13) {
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b0d      	cmp	r3, #13
 8000688:	d01a      	beq.n	80006c0 <UARTIntHandler+0x6c>
		if ((receivedChar == 8) || (receivedChar == 127)) {
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	2b08      	cmp	r3, #8
 800068e:	d002      	beq.n	8000696 <UARTIntHandler+0x42>
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b7f      	cmp	r3, #127	; 0x7f
 8000694:	d109      	bne.n	80006aa <UARTIntHandler+0x56>
			if (commandBufferIndex > 0)
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <UARTIntHandler+0xa8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d026      	beq.n	80006ec <UARTIntHandler+0x98>
				commandBufferIndex--;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <UARTIntHandler+0xa8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a15      	ldr	r2, [pc, #84]	; (80006fc <UARTIntHandler+0xa8>)
 80006a6:	6013      	str	r3, [r2, #0]
			if (commandBufferIndex > 0)
 80006a8:	e020      	b.n	80006ec <UARTIntHandler+0x98>
		} else {
			commandBuffer[commandBufferIndex] = receivedChar;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <UARTIntHandler+0xa8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	78f9      	ldrb	r1, [r7, #3]
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <UARTIntHandler+0xac>)
 80006b2:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex++;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <UARTIntHandler+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <UARTIntHandler+0xa8>)
 80006bc:	6013      	str	r3, [r2, #0]
			gotCommandFlag = 1;
		}
		HAL_UART_Transmit(&huart6, (uint8_t*)EnterCMD, 3, 100);
	}

}
 80006be:	e015      	b.n	80006ec <UARTIntHandler+0x98>
		if (commandBufferIndex != 0) {
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <UARTIntHandler+0xa8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00a      	beq.n	80006de <UARTIntHandler+0x8a>
			commandBuffer[commandBufferIndex] = 0;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <UARTIntHandler+0xa8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <UARTIntHandler+0xac>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex = 0;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <UARTIntHandler+0xa8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			gotCommandFlag = 1;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <UARTIntHandler+0xb0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, (uint8_t*)EnterCMD, 3, 100);
 80006de:	2364      	movs	r3, #100	; 0x64
 80006e0:	2203      	movs	r2, #3
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <UARTIntHandler+0xa4>)
 80006e6:	f004 f9a8 	bl	8004a3a <HAL_UART_Transmit>
}
 80006ea:	e7ff      	b.n	80006ec <UARTIntHandler+0x98>
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	0800bce8 	.word	0x0800bce8
 80006f8:	20004490 	.word	0x20004490
 80006fc:	20000288 	.word	0x20000288
 8000700:	2000429c 	.word	0x2000429c
 8000704:	2000028c 	.word	0x2000028c

08000708 <Cmd_create_file>:
int Cmd_create_file(int argc, char *argv[])
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]

	printf("\nCmd_create_file\r\n");
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <Cmd_create_file+0x2c>)
 8000714:	f00a f916 	bl	800a944 <puts>
	printf("------------------\r\n");
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <Cmd_create_file+0x30>)
 800071a:	f00a f913 	bl	800a944 <puts>
	char *file = *(argv+1);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	60fb      	str	r3, [r7, #12]
	SD_CREATE_FILE(file);
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f001 fe9d 	bl	8002464 <SD_CREATE_FILE>
}
 800072a:	bf00      	nop
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800bcec 	.word	0x0800bcec
 8000738:	0800bd00 	.word	0x0800bd00

0800073c <Cmd_write_sdcard>:
 * 5. Device Type
 * 6. Device Name
 * 7. Device Title
 * 8. value type */
int Cmd_write_sdcard(int argc, char *argv[])
{
 800073c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000740:	b0c0      	sub	sp, #256	; 0x100
 8000742:	af06      	add	r7, sp, #24
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
	printf("\nCmd_write_sdcard\r\n");
 8000748:	483c      	ldr	r0, [pc, #240]	; (800083c <Cmd_write_sdcard+0x100>)
 800074a:	f00a f8fb 	bl	800a944 <puts>
	printf("------------------\r\n");
 800074e:	483c      	ldr	r0, [pc, #240]	; (8000840 <Cmd_write_sdcard+0x104>)
 8000750:	f00a f8f8 	bl	800a944 <puts>
	SDcard_t sd;
	char sd_temp[200];
	sd.port= atoi(*(argv+1));
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	3304      	adds	r3, #4
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f00a f83c 	bl	800a7d8 <atoi>
 8000760:	4603      	mov	r3, r0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
	sd.deviceID = atoi(*(argv+2));
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	3308      	adds	r3, #8
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f00a f832 	bl	800a7d8 <atoi>
 8000774:	4603      	mov	r3, r0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
	sd.func = atoi(*(argv+3));
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	330c      	adds	r3, #12
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f00a f828 	bl	800a7d8 <atoi>
 8000788:	4603      	mov	r3, r0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	sd.deviceChannel= atoi(*(argv+4));
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	3310      	adds	r3, #16
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f00a f81e 	bl	800a7d8 <atoi>
 800079c:	4603      	mov	r3, r0
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	sd.deviceType= *(argv+5);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	sd.deviceName = *(argv+6);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	sd.deviceTitle= *(argv+7);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	sd.valueType= *(argv+8);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	6a1b      	ldr	r3, [r3, #32]
 80007c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	sd.deviceStatus= atoi(*(argv+9));
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	3324      	adds	r3, #36	; 0x24
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00a f804 	bl	800a7d8 <atoi>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
	SD_Json(sd_temp,sd.port,sd.deviceID,sd.func,sd.deviceChannel,sd.deviceType,sd.deviceTitle,sd.deviceName,sd.valueType,sd.deviceStatus);
 80007d8:	f897 c0d1 	ldrb.w	ip, [r7, #209]	; 0xd1
 80007dc:	f897 e0d2 	ldrb.w	lr, [r7, #210]	; 0xd2
 80007e0:	f897 80d3 	ldrb.w	r8, [r7, #211]	; 0xd3
 80007e4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80007e8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80007ec:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80007f0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80007f4:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80007f8:	f897 50d0 	ldrb.w	r5, [r7, #208]	; 0xd0
 80007fc:	f107 0608 	add.w	r6, r7, #8
 8000800:	9505      	str	r5, [sp, #20]
 8000802:	9404      	str	r4, [sp, #16]
 8000804:	9003      	str	r0, [sp, #12]
 8000806:	9102      	str	r1, [sp, #8]
 8000808:	9201      	str	r2, [sp, #4]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4643      	mov	r3, r8
 800080e:	4672      	mov	r2, lr
 8000810:	4661      	mov	r1, ip
 8000812:	4630      	mov	r0, r6
 8000814:	f001 ff8e 	bl	8002734 <SD_Json>
	printf("%s",sd_temp);
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4619      	mov	r1, r3
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <Cmd_write_sdcard+0x108>)
 8000820:	f00a f81c 	bl	800a85c <iprintf>
	SD_WRITE_LINE("DEVICE.txt",sd_temp);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <Cmd_write_sdcard+0x10c>)
 800082c:	f001 ff60 	bl	80026f0 <SD_WRITE_LINE>
}
 8000830:	bf00      	nop
 8000832:	4618      	mov	r0, r3
 8000834:	37e8      	adds	r7, #232	; 0xe8
 8000836:	46bd      	mov	sp, r7
 8000838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800083c:	0800bd14 	.word	0x0800bd14
 8000840:	0800bd00 	.word	0x0800bd00
 8000844:	0800bd28 	.word	0x0800bd28
 8000848:	0800bd2c 	.word	0x0800bd2c

0800084c <Cmd_read_sdcard>:
int Cmd_read_sdcard(int argc, char *argv[])
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	printf("\nCmd_read_sdcard\r\n");
 8000856:	4809      	ldr	r0, [pc, #36]	; (800087c <Cmd_read_sdcard+0x30>)
 8000858:	f00a f874 	bl	800a944 <puts>
	printf("------------------\r\n");
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <Cmd_read_sdcard+0x34>)
 800085e:	f00a f871 	bl	800a944 <puts>
	SD_READ_LINE("DEVICE.txt");
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <Cmd_read_sdcard+0x38>)
 8000864:	f001 fe28 	bl	80024b8 <SD_READ_LINE>
	printf("%s",SDbuffer);
 8000868:	4907      	ldr	r1, [pc, #28]	; (8000888 <Cmd_read_sdcard+0x3c>)
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <Cmd_read_sdcard+0x40>)
 800086c:	f009 fff6 	bl	800a85c <iprintf>
}
 8000870:	bf00      	nop
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	0800bd38 	.word	0x0800bd38
 8000880:	0800bd00 	.word	0x0800bd00
 8000884:	0800bd2c 	.word	0x0800bd2c
 8000888:	200043c8 	.word	0x200043c8
 800088c:	0800bd28 	.word	0x0800bd28

08000890 <Cmd_read_all>:
int Cmd_read_all(int argc, char *argv[])
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	printf("\nCmd_read_all\r\n");
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <Cmd_read_all+0x28>)
 800089c:	f00a f852 	bl	800a944 <puts>
	printf("------------------\r\n");
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <Cmd_read_all+0x2c>)
 80008a2:	f00a f84f 	bl	800a944 <puts>
	SD_READ_ALL("DEVICE.TXT");
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <Cmd_read_all+0x30>)
 80008a8:	f001 fe3c 	bl	8002524 <SD_READ_ALL>
}
 80008ac:	bf00      	nop
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	0800bd4c 	.word	0x0800bd4c
 80008bc:	0800bd00 	.word	0x0800bd00
 80008c0:	0800bd5c 	.word	0x0800bd5c

080008c4 <Cmd_load_all>:
int Cmd_load_all(int argc, char *argv[])
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	printf("\nCmd_load_all\r\n");
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <Cmd_load_all+0x28>)
 80008d0:	f00a f838 	bl	800a944 <puts>
	printf("------------------\r\n");
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <Cmd_load_all+0x2c>)
 80008d6:	f00a f835 	bl	800a944 <puts>
	SD_LOAD_ALL("DEVICE.TXT");
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <Cmd_load_all+0x30>)
 80008dc:	f001 fe78 	bl	80025d0 <SD_LOAD_ALL>
}
 80008e0:	bf00      	nop
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	0800bd68 	.word	0x0800bd68
 80008f0:	0800bd00 	.word	0x0800bd00
 80008f4:	0800bd5c 	.word	0x0800bd5c

080008f8 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2101      	movs	r1, #1
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <SELECT+0x14>)
 8000902:	f002 fccf 	bl	80032a4 <HAL_GPIO_WritePin>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020400 	.word	0x40020400

08000910 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DESELECT+0x14>)
 800091a:	f002 fcc3 	bl	80032a4 <HAL_GPIO_WritePin>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020400 	.word	0x40020400

08000928 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000932:	bf00      	nop
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <SPI_TxByte+0x30>)
 8000936:	f003 fcac 	bl	8004292 <HAL_SPI_GetState>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d1f9      	bne.n	8000934 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000940:	1df9      	adds	r1, r7, #7
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	2201      	movs	r2, #1
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <SPI_TxByte+0x30>)
 800094a:	f003 f9c4 	bl	8003cd6 <HAL_SPI_Transmit>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20004724 	.word	0x20004724

0800095c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000962:	23ff      	movs	r3, #255	; 0xff
 8000964:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800096a:	bf00      	nop
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <SPI_RxByte+0x38>)
 800096e:	f003 fc90 	bl	8004292 <HAL_SPI_GetState>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d1f9      	bne.n	800096c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000978:	1dba      	adds	r2, r7, #6
 800097a:	1df9      	adds	r1, r7, #7
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <SPI_RxByte+0x38>)
 8000986:	f003 fae2 	bl	8003f4e <HAL_SPI_TransmitReceive>

  return data;
 800098a:	79bb      	ldrb	r3, [r7, #6]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20004724 	.word	0x20004724

08000998 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80009a0:	f7ff ffdc 	bl	800095c <SPI_RxByte>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	701a      	strb	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <SD_ReadyWait+0x34>)
 80009bc:	2232      	movs	r2, #50	; 0x32
 80009be:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80009c0:	f7ff ffcc 	bl	800095c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80009c4:	f7ff ffca 	bl	800095c <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2bff      	cmp	r3, #255	; 0xff
 80009d0:	d004      	beq.n	80009dc <SD_ReadyWait+0x28>
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SD_ReadyWait+0x34>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1f3      	bne.n	80009c4 <SD_ReadyWait+0x10>

  return res;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200049f4 	.word	0x200049f4

080009ec <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80009f2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009f6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80009f8:	f7ff ff8a 	bl	8000910 <DESELECT>

  for(int i = 0; i < 10; i++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	e005      	b.n	8000a0e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000a02:	20ff      	movs	r0, #255	; 0xff
 8000a04:	f7ff ff90 	bl	8000928 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	2b09      	cmp	r3, #9
 8000a12:	ddf6      	ble.n	8000a02 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000a14:	f7ff ff70 	bl	80008f8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000a2c:	2395      	movs	r3, #149	; 0x95
 8000a2e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e009      	b.n	8000a4a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000a36:	1d3a      	adds	r2, r7, #4
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff72 	bl	8000928 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b05      	cmp	r3, #5
 8000a4e:	ddf2      	ble.n	8000a36 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000a50:	e002      	b.n	8000a58 <SD_PowerOn+0x6c>
  {
    Count--;
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000a58:	f7ff ff80 	bl	800095c <SPI_RxByte>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d002      	beq.n	8000a68 <SD_PowerOn+0x7c>
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f4      	bne.n	8000a52 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000a68:	f7ff ff52 	bl	8000910 <DESELECT>
  SPI_TxByte(0XFF);
 8000a6c:	20ff      	movs	r0, #255	; 0xff
 8000a6e:	f7ff ff5b 	bl	8000928 <SPI_TxByte>

  PowerFlag = 1;
 8000a72:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <SD_PowerOn+0x94>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000291 	.word	0x20000291

08000a84 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <SD_PowerOff+0x14>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	20000291 	.word	0x20000291

08000a9c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SD_CheckPower+0x14>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000291 	.word	0x20000291

08000ab4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <SD_RxDataBlock+0x68>)
 8000ac0:	220a      	movs	r2, #10
 8000ac2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000ac4:	f7ff ff4a 	bl	800095c <SPI_RxByte>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	d104      	bne.n	8000adc <SD_RxDataBlock+0x28>
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <SD_RxDataBlock+0x68>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f3      	bne.n	8000ac4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	2bfe      	cmp	r3, #254	; 0xfe
 8000ae0:	d001      	beq.n	8000ae6 <SD_RxDataBlock+0x32>
    return FALSE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e016      	b.n	8000b14 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff53 	bl	8000998 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff4d 	bl	8000998 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	3b02      	subs	r3, #2
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1ed      	bne.n	8000ae6 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000b0a:	f7ff ff27 	bl	800095c <SPI_RxByte>
  SPI_RxByte();
 8000b0e:	f7ff ff25 	bl	800095c <SPI_RxByte>

  return TRUE;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200049f5 	.word	0x200049f5

08000b20 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000b30:	f7ff ff40 	bl	80009b4 <SD_ReadyWait>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2bff      	cmp	r3, #255	; 0xff
 8000b38:	d001      	beq.n	8000b3e <SD_TxDataBlock+0x1e>
    return FALSE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e040      	b.n	8000bc0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fef1 	bl	8000928 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	2bfd      	cmp	r3, #253	; 0xfd
 8000b4a:	d031      	beq.n	8000bb0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fee5 	bl	8000928 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fede 	bl	8000928 <SPI_TxByte>
    } while (--wc);
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	73bb      	strb	r3, [r7, #14]
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1eb      	bne.n	8000b50 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000b78:	f7ff fef0 	bl	800095c <SPI_RxByte>
    SPI_RxByte();
 8000b7c:	f7ff feee 	bl	800095c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000b80:	e00b      	b.n	8000b9a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000b82:	f7ff feeb 	bl	800095c <SPI_RxByte>
 8000b86:	4603      	mov	r3, r0
 8000b88:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	d006      	beq.n	8000ba2 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000b94:	7b7b      	ldrb	r3, [r7, #13]
 8000b96:	3301      	adds	r3, #1
 8000b98:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	2b40      	cmp	r3, #64	; 0x40
 8000b9e:	d9f0      	bls.n	8000b82 <SD_TxDataBlock+0x62>
 8000ba0:	e000      	b.n	8000ba4 <SD_TxDataBlock+0x84>
        break;
 8000ba2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000ba4:	bf00      	nop
 8000ba6:	f7ff fed9 	bl	800095c <SPI_RxByte>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0fa      	beq.n	8000ba6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	2b05      	cmp	r3, #5
 8000bb8:	d101      	bne.n	8000bbe <SD_TxDataBlock+0x9e>
    return TRUE;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000bd4:	f7ff feee 	bl	80009b4 <SD_ReadyWait>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2bff      	cmp	r3, #255	; 0xff
 8000bdc:	d001      	beq.n	8000be2 <SD_SendCmd+0x1a>
    return 0xFF;
 8000bde:	23ff      	movs	r3, #255	; 0xff
 8000be0:	e040      	b.n	8000c64 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe9f 	bl	8000928 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	0e1b      	lsrs	r3, r3, #24
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe99 	bl	8000928 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	0c1b      	lsrs	r3, r3, #16
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe93 	bl	8000928 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fe8d 	bl	8000928 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fe88 	bl	8000928 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b40      	cmp	r3, #64	; 0x40
 8000c20:	d101      	bne.n	8000c26 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000c22:	2395      	movs	r3, #149	; 0x95
 8000c24:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b48      	cmp	r3, #72	; 0x48
 8000c2a:	d101      	bne.n	8000c30 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000c2c:	2387      	movs	r3, #135	; 0x87
 8000c2e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe78 	bl	8000928 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b4c      	cmp	r3, #76	; 0x4c
 8000c3c:	d101      	bne.n	8000c42 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000c3e:	f7ff fe8d 	bl	800095c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000c42:	230a      	movs	r3, #10
 8000c44:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000c46:	f7ff fe89 	bl	800095c <SPI_RxByte>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000c4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da05      	bge.n	8000c62 <SD_SendCmd+0x9a>
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	73bb      	strb	r3, [r7, #14]
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f1      	bne.n	8000c46 <SD_SendCmd+0x7e>

  return res;
 8000c62:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e0d5      	b.n	8000e2c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000c80:	4b6c      	ldr	r3, [pc, #432]	; (8000e34 <SD_disk_initialize+0x1c8>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <SD_disk_initialize+0x2a>
    return Stat;
 8000c8e:	4b69      	ldr	r3, [pc, #420]	; (8000e34 <SD_disk_initialize+0x1c8>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	e0ca      	b.n	8000e2c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000c96:	f7ff fea9 	bl	80009ec <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000c9a:	f7ff fe2d 	bl	80008f8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2040      	movs	r0, #64	; 0x40
 8000ca6:	f7ff ff8f 	bl	8000bc8 <SD_SendCmd>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	f040 80a5 	bne.w	8000dfc <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000cb2:	4b61      	ldr	r3, [pc, #388]	; (8000e38 <SD_disk_initialize+0x1cc>)
 8000cb4:	2264      	movs	r2, #100	; 0x64
 8000cb6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000cb8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000cbc:	2048      	movs	r0, #72	; 0x48
 8000cbe:	f7ff ff83 	bl	8000bc8 <SD_SendCmd>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d158      	bne.n	8000d7a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e00c      	b.n	8000ce8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000cce:	7bfc      	ldrb	r4, [r7, #15]
 8000cd0:	f7ff fe44 	bl	800095c <SPI_RxByte>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4423      	add	r3, r4
 8000cde:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d9ef      	bls.n	8000cce <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000cee:	7abb      	ldrb	r3, [r7, #10]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	f040 8083 	bne.w	8000dfc <SD_disk_initialize+0x190>
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	2baa      	cmp	r3, #170	; 0xaa
 8000cfa:	d17f      	bne.n	8000dfc <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2077      	movs	r0, #119	; 0x77
 8000d00:	f7ff ff62 	bl	8000bc8 <SD_SendCmd>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d807      	bhi.n	8000d1a <SD_disk_initialize+0xae>
 8000d0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d0e:	2069      	movs	r0, #105	; 0x69
 8000d10:	f7ff ff5a 	bl	8000bc8 <SD_SendCmd>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d005      	beq.n	8000d26 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <SD_disk_initialize+0x1cc>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1eb      	bne.n	8000cfc <SD_disk_initialize+0x90>
 8000d24:	e000      	b.n	8000d28 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000d26:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <SD_disk_initialize+0x1cc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d064      	beq.n	8000dfc <SD_disk_initialize+0x190>
 8000d32:	2100      	movs	r1, #0
 8000d34:	207a      	movs	r0, #122	; 0x7a
 8000d36:	f7ff ff47 	bl	8000bc8 <SD_SendCmd>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d15d      	bne.n	8000dfc <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e00c      	b.n	8000d60 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000d46:	7bfc      	ldrb	r4, [r7, #15]
 8000d48:	f7ff fe08 	bl	800095c <SPI_RxByte>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4423      	add	r3, r4
 8000d56:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d9ef      	bls.n	8000d46 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000d66:	7a3b      	ldrb	r3, [r7, #8]
 8000d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SD_disk_initialize+0x108>
 8000d70:	2306      	movs	r3, #6
 8000d72:	e000      	b.n	8000d76 <SD_disk_initialize+0x10a>
 8000d74:	2302      	movs	r3, #2
 8000d76:	73bb      	strb	r3, [r7, #14]
 8000d78:	e040      	b.n	8000dfc <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2077      	movs	r0, #119	; 0x77
 8000d7e:	f7ff ff23 	bl	8000bc8 <SD_SendCmd>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d808      	bhi.n	8000d9a <SD_disk_initialize+0x12e>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2069      	movs	r0, #105	; 0x69
 8000d8c:	f7ff ff1c 	bl	8000bc8 <SD_SendCmd>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d801      	bhi.n	8000d9a <SD_disk_initialize+0x12e>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e000      	b.n	8000d9c <SD_disk_initialize+0x130>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d10e      	bne.n	8000dc2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000da4:	2100      	movs	r1, #0
 8000da6:	2077      	movs	r0, #119	; 0x77
 8000da8:	f7ff ff0e 	bl	8000bc8 <SD_SendCmd>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d80e      	bhi.n	8000dd0 <SD_disk_initialize+0x164>
 8000db2:	2100      	movs	r1, #0
 8000db4:	2069      	movs	r0, #105	; 0x69
 8000db6:	f7ff ff07 	bl	8000bc8 <SD_SendCmd>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d107      	bne.n	8000dd0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000dc0:	e00d      	b.n	8000dde <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2041      	movs	r0, #65	; 0x41
 8000dc6:	f7ff feff 	bl	8000bc8 <SD_SendCmd>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <SD_disk_initialize+0x1cc>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1e1      	bne.n	8000d9e <SD_disk_initialize+0x132>
 8000dda:	e000      	b.n	8000dde <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000ddc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <SD_disk_initialize+0x1cc>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <SD_disk_initialize+0x18c>
 8000de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dec:	2050      	movs	r0, #80	; 0x50
 8000dee:	f7ff feeb 	bl	8000bc8 <SD_SendCmd>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <SD_disk_initialize+0x1d0>)
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000e02:	f7ff fd85 	bl	8000910 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000e06:	f7ff fda9 	bl	800095c <SPI_RxByte>

  if (type)
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d008      	beq.n	8000e22 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <SD_disk_initialize+0x1c8>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SD_disk_initialize+0x1c8>)
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e001      	b.n	8000e26 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000e22:	f7ff fe2f 	bl	8000a84 <SD_PowerOff>
  }

  return Stat;
 8000e26:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <SD_disk_initialize+0x1c8>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	20000048 	.word	0x20000048
 8000e38:	200049f5 	.word	0x200049f5
 8000e3c:	20000290 	.word	0x20000290

08000e40 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e002      	b.n	8000e5a <SD_disk_status+0x1a>

  return Stat;
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <SD_disk_status+0x28>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2db      	uxtb	r3, r3
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000048 	.word	0x20000048

08000e6c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <SD_disk_read+0x1c>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <SD_disk_read+0x20>
    return RES_PARERR;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	e051      	b.n	8000f30 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <SD_disk_read+0xcc>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e048      	b.n	8000f30 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <SD_disk_read+0xd0>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	025b      	lsls	r3, r3, #9
 8000eae:	607b      	str	r3, [r7, #4]

  SELECT();
 8000eb0:	f7ff fd22 	bl	80008f8 <SELECT>

  if (count == 1)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d111      	bne.n	8000ede <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	2051      	movs	r0, #81	; 0x51
 8000ebe:	f7ff fe83 	bl	8000bc8 <SD_SendCmd>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d129      	bne.n	8000f1c <SD_disk_read+0xb0>
 8000ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ecc:	68b8      	ldr	r0, [r7, #8]
 8000ece:	f7ff fdf1 	bl	8000ab4 <SD_RxDataBlock>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d021      	beq.n	8000f1c <SD_disk_read+0xb0>
      count = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	e01e      	b.n	8000f1c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	2052      	movs	r0, #82	; 0x52
 8000ee2:	f7ff fe71 	bl	8000bc8 <SD_SendCmd>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d117      	bne.n	8000f1c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	68b8      	ldr	r0, [r7, #8]
 8000ef2:	f7ff fddf 	bl	8000ab4 <SD_RxDataBlock>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00a      	beq.n	8000f12 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f02:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ed      	bne.n	8000eec <SD_disk_read+0x80>
 8000f10:	e000      	b.n	8000f14 <SD_disk_read+0xa8>
          break;
 8000f12:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000f14:	2100      	movs	r1, #0
 8000f16:	204c      	movs	r0, #76	; 0x4c
 8000f18:	f7ff fe56 	bl	8000bc8 <SD_SendCmd>
    }
  }

  DESELECT();
 8000f1c:	f7ff fcf8 	bl	8000910 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000f20:	f7ff fd1c 	bl	800095c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bf14      	ite	ne
 8000f2a:	2301      	movne	r3, #1
 8000f2c:	2300      	moveq	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000048 	.word	0x20000048
 8000f3c:	20000290 	.word	0x20000290

08000f40 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d102      	bne.n	8000f5c <SD_disk_write+0x1c>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <SD_disk_write+0x20>
    return RES_PARERR;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	e06b      	b.n	8001038 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000f60:	4b37      	ldr	r3, [pc, #220]	; (8001040 <SD_disk_write+0x100>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e062      	b.n	8001038 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <SD_disk_write+0x100>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000f80:	2302      	movs	r3, #2
 8000f82:	e059      	b.n	8001038 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <SD_disk_write+0x104>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	025b      	lsls	r3, r3, #9
 8000f94:	607b      	str	r3, [r7, #4]

  SELECT();
 8000f96:	f7ff fcaf 	bl	80008f8 <SELECT>

  if (count == 1)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d110      	bne.n	8000fc2 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	2058      	movs	r0, #88	; 0x58
 8000fa4:	f7ff fe10 	bl	8000bc8 <SD_SendCmd>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d13a      	bne.n	8001024 <SD_disk_write+0xe4>
 8000fae:	21fe      	movs	r1, #254	; 0xfe
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f7ff fdb5 	bl	8000b20 <SD_TxDataBlock>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d033      	beq.n	8001024 <SD_disk_write+0xe4>
      count = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	e030      	b.n	8001024 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <SD_disk_write+0x104>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2077      	movs	r0, #119	; 0x77
 8000fd2:	f7ff fdf9 	bl	8000bc8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	2057      	movs	r0, #87	; 0x57
 8000fda:	f7ff fdf5 	bl	8000bc8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	2059      	movs	r0, #89	; 0x59
 8000fe2:	f7ff fdf1 	bl	8000bc8 <SD_SendCmd>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d11b      	bne.n	8001024 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000fec:	21fc      	movs	r1, #252	; 0xfc
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f7ff fd96 	bl	8000b20 <SD_TxDataBlock>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00a      	beq.n	8001010 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001000:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3b01      	subs	r3, #1
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1ee      	bne.n	8000fec <SD_disk_write+0xac>
 800100e:	e000      	b.n	8001012 <SD_disk_write+0xd2>
          break;
 8001010:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001012:	21fd      	movs	r1, #253	; 0xfd
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fd83 	bl	8000b20 <SD_TxDataBlock>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <SD_disk_write+0xe4>
      {
        count = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001024:	f7ff fc74 	bl	8000910 <DESELECT>
  SPI_RxByte();
 8001028:	f7ff fc98 	bl	800095c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2db      	uxtb	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000048 	.word	0x20000048
 8001044:	20000290 	.word	0x20000290

08001048 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08b      	sub	sp, #44	; 0x2c
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	603a      	str	r2, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	460b      	mov	r3, r1
 8001056:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001062:	2304      	movs	r3, #4
 8001064:	e117      	b.n	8001296 <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d126      	bne.n	80010c0 <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d00e      	beq.n	8001098 <SD_disk_ioctl+0x50>
 800107a:	2b02      	cmp	r3, #2
 800107c:	d012      	beq.n	80010a4 <SD_disk_ioctl+0x5c>
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11a      	bne.n	80010b8 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001082:	f7ff fd0b 	bl	8000a9c <SD_CheckPower>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 800108c:	f7ff fcfa 	bl	8000a84 <SD_PowerOff>
      res = RES_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001096:	e0fc      	b.n	8001292 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8001098:	f7ff fca8 	bl	80009ec <SD_PowerOn>
      res = RES_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010a2:	e0f6      	b.n	8001292 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	1c5c      	adds	r4, r3, #1
 80010a8:	f7ff fcf8 	bl	8000a9c <SD_CheckPower>
 80010ac:	4603      	mov	r3, r0
 80010ae:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010b6:	e0ec      	b.n	8001292 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80010b8:	2304      	movs	r3, #4
 80010ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010be:	e0e8      	b.n	8001292 <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80010c0:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <SD_disk_ioctl+0x258>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e0e1      	b.n	8001296 <SD_disk_ioctl+0x24e>

    SELECT();
 80010d2:	f7ff fc11 	bl	80008f8 <SELECT>

    switch (ctrl)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	2b0d      	cmp	r3, #13
 80010da:	f200 80cb 	bhi.w	8001274 <SD_disk_ioctl+0x22c>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <SD_disk_ioctl+0x9c>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	080011df 	.word	0x080011df
 80010e8:	0800111d 	.word	0x0800111d
 80010ec:	080011cf 	.word	0x080011cf
 80010f0:	08001275 	.word	0x08001275
 80010f4:	08001275 	.word	0x08001275
 80010f8:	08001275 	.word	0x08001275
 80010fc:	08001275 	.word	0x08001275
 8001100:	08001275 	.word	0x08001275
 8001104:	08001275 	.word	0x08001275
 8001108:	08001275 	.word	0x08001275
 800110c:	08001275 	.word	0x08001275
 8001110:	080011f1 	.word	0x080011f1
 8001114:	08001215 	.word	0x08001215
 8001118:	08001239 	.word	0x08001239
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800111c:	2100      	movs	r1, #0
 800111e:	2049      	movs	r0, #73	; 0x49
 8001120:	f7ff fd52 	bl	8000bc8 <SD_SendCmd>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 80a8 	bne.w	800127c <SD_disk_ioctl+0x234>
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2110      	movs	r1, #16
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fcbe 	bl	8000ab4 <SD_RxDataBlock>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 809e 	beq.w	800127c <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	099b      	lsrs	r3, r3, #6
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d10e      	bne.n	8001168 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800114a:	7d7b      	ldrb	r3, [r7, #21]
 800114c:	b29a      	uxth	r2, r3
 800114e:	7d3b      	ldrb	r3, [r7, #20]
 8001150:	b29b      	uxth	r3, r3
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	3301      	adds	r3, #1
 800115c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800115e:	8bfb      	ldrh	r3, [r7, #30]
 8001160:	029a      	lsls	r2, r3, #10
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e02e      	b.n	80011c6 <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001168:	7c7b      	ldrb	r3, [r7, #17]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	b2da      	uxtb	r2, r3
 8001170:	7dbb      	ldrb	r3, [r7, #22]
 8001172:	09db      	lsrs	r3, r3, #7
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b2da      	uxtb	r2, r3
 800117a:	7d7b      	ldrb	r3, [r7, #21]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 0306 	and.w	r3, r3, #6
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3302      	adds	r3, #2
 800118c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001190:	7d3b      	ldrb	r3, [r7, #20]
 8001192:	099b      	lsrs	r3, r3, #6
 8001194:	b2db      	uxtb	r3, r3
 8001196:	b29a      	uxth	r2, r3
 8001198:	7cfb      	ldrb	r3, [r7, #19]
 800119a:	b29b      	uxth	r3, r3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	7cbb      	ldrb	r3, [r7, #18]
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80011b8:	8bfa      	ldrh	r2, [r7, #30]
 80011ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011be:	3b09      	subs	r3, #9
 80011c0:	409a      	lsls	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80011cc:	e056      	b.n	800127c <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80011dc:	e055      	b.n	800128a <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80011de:	f7ff fbe9 	bl	80009b4 <SD_ReadyWait>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2bff      	cmp	r3, #255	; 0xff
 80011e6:	d14b      	bne.n	8001280 <SD_disk_ioctl+0x238>
        res = RES_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80011ee:	e047      	b.n	8001280 <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80011f0:	2100      	movs	r1, #0
 80011f2:	2049      	movs	r0, #73	; 0x49
 80011f4:	f7ff fce8 	bl	8000bc8 <SD_SendCmd>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d142      	bne.n	8001284 <SD_disk_ioctl+0x23c>
 80011fe:	2110      	movs	r1, #16
 8001200:	6a38      	ldr	r0, [r7, #32]
 8001202:	f7ff fc57 	bl	8000ab4 <SD_RxDataBlock>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d03b      	beq.n	8001284 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001212:	e037      	b.n	8001284 <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001214:	2100      	movs	r1, #0
 8001216:	204a      	movs	r0, #74	; 0x4a
 8001218:	f7ff fcd6 	bl	8000bc8 <SD_SendCmd>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d132      	bne.n	8001288 <SD_disk_ioctl+0x240>
 8001222:	2110      	movs	r1, #16
 8001224:	6a38      	ldr	r0, [r7, #32]
 8001226:	f7ff fc45 	bl	8000ab4 <SD_RxDataBlock>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d02b      	beq.n	8001288 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001236:	e027      	b.n	8001288 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001238:	2100      	movs	r1, #0
 800123a:	207a      	movs	r0, #122	; 0x7a
 800123c:	f7ff fcc4 	bl	8000bc8 <SD_SendCmd>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d116      	bne.n	8001274 <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 8001246:	2300      	movs	r3, #0
 8001248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800124c:	e00b      	b.n	8001266 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 800124e:	6a3c      	ldr	r4, [r7, #32]
 8001250:	1c63      	adds	r3, r4, #1
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	f7ff fb82 	bl	800095c <SPI_RxByte>
 8001258:	4603      	mov	r3, r0
 800125a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800125c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001260:	3301      	adds	r3, #1
 8001262:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001266:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800126a:	2b03      	cmp	r3, #3
 800126c:	d9ef      	bls.n	800124e <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001274:	2304      	movs	r3, #4
 8001276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800127a:	e006      	b.n	800128a <SD_disk_ioctl+0x242>
      break;
 800127c:	bf00      	nop
 800127e:	e004      	b.n	800128a <SD_disk_ioctl+0x242>
      break;
 8001280:	bf00      	nop
 8001282:	e002      	b.n	800128a <SD_disk_ioctl+0x242>
      break;
 8001284:	bf00      	nop
 8001286:	e000      	b.n	800128a <SD_disk_ioctl+0x242>
      break;
 8001288:	bf00      	nop
    }

    DESELECT();
 800128a:	f7ff fb41 	bl	8000910 <DESELECT>
    SPI_RxByte();
 800128e:	f7ff fb65 	bl	800095c <SPI_RxByte>
  }

  return res;
 8001292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001296:	4618      	mov	r0, r3
 8001298:	372c      	adds	r7, #44	; 0x2c
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000048 	.word	0x20000048

080012a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80012b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <vApplicationGetIdleTaskMemory+0x30>)
 80012ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000294 	.word	0x20000294
 80012d4:	200002e8 	.word	0x200002e8

080012d8 <MX_FREERTOS_Init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MX_FREERTOS_Init(void) {
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b098      	sub	sp, #96	; 0x60
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */

	osMessageQDef(xQueueControl, 1, xQueueControl_t);
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <MX_FREERTOS_Init+0xbc>)
 80012e0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueControlHandle = osMessageCreate(osMessageQ(xQueueControl), NULL);
 80012ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f007 f81a 	bl	800832a <osMessageCreate>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MX_FREERTOS_Init+0xc0>)
 80012fa:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueMessage, 1, uint8_t);
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_FREERTOS_Init+0xc4>)
 80012fe:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueMessageHandle = osMessageCreate(osMessageQ(xQueueMessage), NULL);
 8001308:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f007 f80b 	bl	800832a <osMessageCreate>
 8001314:	4602      	mov	r2, r0
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_FREERTOS_Init+0xc8>)
 8001318:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueDownlink, 1, xQueueMbMqtt_t);
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <MX_FREERTOS_Init+0xcc>)
 800131c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueDownlinkHandle = osMessageCreate(osMessageQ(xQueueDownlink), NULL);
 8001326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f006 fffc 	bl	800832a <osMessageCreate>
 8001332:	4602      	mov	r2, r0
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_FREERTOS_Init+0xd0>)
 8001336:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueUplink, 1, xQueueMbMqtt_t);
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_FREERTOS_Init+0xcc>)
 800133a:	f107 0420 	add.w	r4, r7, #32
 800133e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueUplinkHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f006 ffed 	bl	800832a <osMessageCreate>
 8001350:	4602      	mov	r2, r0
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_FREERTOS_Init+0xd4>)
 8001354:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueReset, 1, sizeof(uint32_t));
	xQueueResetHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f006 ffe4 	bl	800832a <osMessageCreate>
 8001362:	4602      	mov	r2, r0
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_FREERTOS_Init+0xd8>)
 8001366:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_FREERTOS_Init+0xdc>)
 800136a:	1d3c      	adds	r4, r7, #4
 800136c:	461d      	mov	r5, r3
 800136e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f006 febc 	bl	80080fc <osThreadCreate>
 8001384:	4602      	mov	r2, r0
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_FREERTOS_Init+0xe0>)
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	3760      	adds	r7, #96	; 0x60
 800138e:	46bd      	mov	sp, r7
 8001390:	bdb0      	pop	{r4, r5, r7, pc}
 8001392:	bf00      	nop
 8001394:	0800bd78 	.word	0x0800bd78
 8001398:	200044d4 	.word	0x200044d4
 800139c:	0800bd88 	.word	0x0800bd88
 80013a0:	200044e8 	.word	0x200044e8
 80013a4:	0800bd98 	.word	0x0800bd98
 80013a8:	200044e0 	.word	0x200044e0
 80013ac:	200044e4 	.word	0x200044e4
 80013b0:	200044dc 	.word	0x200044dc
 80013b4:	0800bdb4 	.word	0x0800bdb4
 80013b8:	200044d8 	.word	0x200044d8

080013bc <StartDefaultTask>:
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
 void StartDefaultTask(void const * argument)
  {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  	/*SIm serive*/

  	/*Controller*/
  	xQueueControl_t xQueueControl;
  	#define PORT_DEFAULT_DELAY	1000
  	uint8_t uiSysState = SYS_START;
 80013c4:	2300      	movs	r3, #0
 80013c6:	72fb      	strb	r3, [r7, #11]
  	uint8_t uiSysUpdate = FALSE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	77fb      	strb	r3, [r7, #31]
  	BaseType_t sysError;
  	int ret;
  	char *Badcommand = "Bad Command\r\n>";
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <StartDefaultTask+0x84>)
 80013ce:	61bb      	str	r3, [r7, #24]
  	/* Infinite loop */
  	for (;;) {
  		switch (uiSysState) {
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <StartDefaultTask+0x20>
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d007      	beq.n	80013ea <StartDefaultTask+0x2e>
 80013da:	e020      	b.n	800141e <StartDefaultTask+0x62>
  		case SYS_START:
  			//printf("\r\n Task Controller: Implementing...  \r\n");
  			uiSysUpdate = TRUE;
 80013dc:	2301      	movs	r3, #1
 80013de:	77fb      	strb	r3, [r7, #31]
  			uiSysState++;
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	72fb      	strb	r3, [r7, #11]
  			break;
 80013e8:	e019      	b.n	800141e <StartDefaultTask+0x62>
		case SYS_DEFAULT:
			if (gotCommandFlag == 1) {
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <StartDefaultTask+0x88>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d114      	bne.n	800141c <StartDefaultTask+0x60>
				gotCommandFlag = 0;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <StartDefaultTask+0x88>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
				ret = CmdLineProcess(commandBuffer);
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <StartDefaultTask+0x8c>)
 80013fa:	f7ff f8d1 	bl	80005a0 <CmdLineProcess>
 80013fe:	6178      	str	r0, [r7, #20]
				if (ret == CMDLINE_BAD_CMD){
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001406:	d109      	bne.n	800141c <StartDefaultTask+0x60>
					HAL_UART_Transmit(&huart6, Badcommand, strlen(Badcommand),100);
 8001408:	69b8      	ldr	r0, [r7, #24]
 800140a:	f7fe feeb 	bl	80001e4 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b29a      	uxth	r2, r3
 8001412:	2364      	movs	r3, #100	; 0x64
 8001414:	69b9      	ldr	r1, [r7, #24]
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <StartDefaultTask+0x90>)
 8001418:	f003 fb0f 	bl	8004a3a <HAL_UART_Transmit>
				}
			}
			//osDelay(10);
			break;
 800141c:	bf00      	nop
		}
		if ((uiSysUpdate == TRUE) && (uiSysState != SYS_DEFAULT)) {
 800141e:	7ffb      	ldrb	r3, [r7, #31]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d1d5      	bne.n	80013d0 <StartDefaultTask+0x14>
 8001424:	7afb      	ldrb	r3, [r7, #11]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d0d2      	beq.n	80013d0 <StartDefaultTask+0x14>
			xQueueSend(xQueueMessageHandle, &uiSysState, 0);
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <StartDefaultTask+0x94>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	f107 010b 	add.w	r1, r7, #11
 8001432:	2300      	movs	r3, #0
 8001434:	2200      	movs	r2, #0
 8001436:	f007 f989 	bl	800874c <xQueueGenericSend>
			uiSysUpdate = FALSE;
 800143a:	2300      	movs	r3, #0
 800143c:	77fb      	strb	r3, [r7, #31]
  		switch (uiSysState) {
 800143e:	e7c7      	b.n	80013d0 <StartDefaultTask+0x14>
 8001440:	0800bdd0 	.word	0x0800bdd0
 8001444:	2000028c 	.word	0x2000028c
 8001448:	2000429c 	.word	0x2000429c
 800144c:	20004490 	.word	0x20004490
 8001450:	200044e8 	.word	0x200044e8

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8001458:	f001 fbd4 	bl	8002c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145c:	f000 f826 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //   fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001460:	f000 f8ee 	bl	8001640 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001464:	f000 f88c 	bl	8001580 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001468:	f004 f8b6 	bl	80055d8 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 800146c:	f000 f8be 	bl	80015ec <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n ********* Access Controller Board **************** \r\n");
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <main+0x48>)
 8001472:	f009 fa67 	bl	800a944 <puts>
	printf("\r\n NTT BK \r\n");
 8001476:	480a      	ldr	r0, [pc, #40]	; (80014a0 <main+0x4c>)
 8001478:	f009 fa64 	bl	800a944 <puts>
	printf("\r\n System  starting \r\n");
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <main+0x50>)
 800147e:	f009 fa61 	bl	800a944 <puts>
 __HAL_UART_ENABLE_IT(&huart6,UART_IT_RXNE);
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <main+0x54>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <main+0x54>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0220 	orr.w	r2, r2, #32
 8001490:	60da      	str	r2, [r3, #12]
  MX_FREERTOS_Init();
 8001492:	f7ff ff21 	bl	80012d8 <MX_FREERTOS_Init>

  /* USER CODE END 2 */
  /* Start scheduler */
  osKernelStart();
 8001496:	f006 fe2a 	bl	80080ee <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149a:	e7fe      	b.n	800149a <main+0x46>
 800149c:	0800bde0 	.word	0x0800bde0
 80014a0:	0800be18 	.word	0x0800be18
 80014a4:	0800be24 	.word	0x0800be24
 80014a8:	20004490 	.word	0x20004490

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	; 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2230      	movs	r2, #48	; 0x30
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f009 f9c5 	bl	800a84a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <SystemClock_Config+0xcc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <SystemClock_Config+0xcc>)
 80014da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <SystemClock_Config+0xcc>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <SystemClock_Config+0xd0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <SystemClock_Config+0xd0>)
 80014f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <SystemClock_Config+0xd0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2310      	movs	r3, #16
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001514:	2302      	movs	r3, #2
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	2300      	movs	r3, #0
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151c:	2308      	movs	r3, #8
 800151e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001520:	23a8      	movs	r3, #168	; 0xa8
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001528:	2304      	movs	r3, #4
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fed1 	bl	80032d8 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800153c:	f000 f90a 	bl	8001754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800154c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2105      	movs	r1, #5
 800155e:	4618      	mov	r0, r3
 8001560:	f002 f932 	bl	80037c8 <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800156a:	f000 f8f3 	bl	8001754 <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3750      	adds	r7, #80	; 0x50
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000

08001580 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi1.Instance = SPI1;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_SPI1_Init+0x64>)
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <MX_SPI1_Init+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_SPI1_Init+0x64>)
 800158c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015b4:	2220      	movs	r2, #32
 80015b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015cc:	220a      	movs	r2, #10
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(& hspi1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015d2:	f002 faf7 	bl	8003bc4 <HAL_SPI_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015dc:	f000 f8ba 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20004724 	.word	0x20004724
 80015e8:	40013000 	.word	0x40013000

080015ec <MX_USART6_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart6.Instance = USART6;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_USART6_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 80015f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USART6_UART_Init+0x4c>)
 8001624:	f003 f9bc 	bl	80049a0 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 f891 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20004490 	.word	0x20004490
 800163c:	40011400 	.word	0x40011400

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <MX_GPIO_Init+0xe4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a31      	ldr	r2, [pc, #196]	; (8001724 <MX_GPIO_Init+0xe4>)
 8001660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <MX_GPIO_Init+0xe4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MX_GPIO_Init+0xe4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <MX_GPIO_Init+0xe4>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <MX_GPIO_Init+0xe4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_GPIO_Init+0xe4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <MX_GPIO_Init+0xe4>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_GPIO_Init+0xe4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_GPIO_Init+0xe4>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <MX_GPIO_Init+0xe4>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_GPIO_Init+0xe4>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016cc:	4816      	ldr	r0, [pc, #88]	; (8001728 <MX_GPIO_Init+0xe8>)
 80016ce:	f001 fde9 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	480f      	ldr	r0, [pc, #60]	; (8001728 <MX_GPIO_Init+0xe8>)
 80016ec:	f001 fc40 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_GPIO_Init+0xec>)
 80016f8:	f001 fdd4 	bl	80032a4 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_GPIO_Init+0xe8>)
 8001716:	f001 fc2b 	bl	8002f70 <HAL_GPIO_Init>

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020c00 	.word	0x40020c00

08001730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001742:	f001 fa81 	bl	8002c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40010000 	.word	0x40010000

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175a:	e7fe      	b.n	800175a <Error_Handler+0x6>

0800175c <__io_putchar>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
PUTCHAR_PROTOTYPE
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
//  USART_SendData(EVAL_COM1, (uint8_t) ch);
	HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8001764:	1d39      	adds	r1, r7, #4
 8001766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176a:	2201      	movs	r2, #1
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <__io_putchar+0x20>)
 800176e:	f003 f964 	bl	8004a3a <HAL_UART_Transmit>

  /* Loop until the end of transmission */
//  while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
//  {}

  return ch;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20004490 	.word	0x20004490

08001780 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	d801      	bhi.n	800179a <jsmn_alloc_token+0x1a>
    return NULL;
 8001796:	2300      	movs	r3, #0
 8001798:	e014      	b.n	80017c4 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	1c59      	adds	r1, r3, #1
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	6051      	str	r1, [r2, #4]
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4413      	add	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 80017c2:	697b      	ldr	r3, [r7, #20]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	460b      	mov	r3, r1
 80017de:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	7afa      	ldrb	r2, [r7, #11]
 80017e4:	701a      	strb	r2, [r3, #0]
  token->start = start;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	605a      	str	r2, [r3, #4]
  token->end = end;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	609a      	str	r2, [r3, #8]
  token->size = 0;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001818:	e034      	b.n	8001884 <jsmn_parse_primitive+0x80>
    switch (js[parser->pos]) {
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b20      	cmp	r3, #32
 8001826:	d03a      	beq.n	800189e <jsmn_parse_primitive+0x9a>
 8001828:	2b20      	cmp	r3, #32
 800182a:	dc06      	bgt.n	800183a <jsmn_parse_primitive+0x36>
 800182c:	2b09      	cmp	r3, #9
 800182e:	db0f      	blt.n	8001850 <jsmn_parse_primitive+0x4c>
 8001830:	2b0a      	cmp	r3, #10
 8001832:	dd34      	ble.n	800189e <jsmn_parse_primitive+0x9a>
 8001834:	2b0d      	cmp	r3, #13
 8001836:	d032      	beq.n	800189e <jsmn_parse_primitive+0x9a>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8001838:	e00a      	b.n	8001850 <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 800183a:	2b3a      	cmp	r3, #58	; 0x3a
 800183c:	d02f      	beq.n	800189e <jsmn_parse_primitive+0x9a>
 800183e:	2b3a      	cmp	r3, #58	; 0x3a
 8001840:	dc02      	bgt.n	8001848 <jsmn_parse_primitive+0x44>
 8001842:	2b2c      	cmp	r3, #44	; 0x2c
 8001844:	d02b      	beq.n	800189e <jsmn_parse_primitive+0x9a>
      break;
 8001846:	e003      	b.n	8001850 <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8001848:	2b5d      	cmp	r3, #93	; 0x5d
 800184a:	d028      	beq.n	800189e <jsmn_parse_primitive+0x9a>
 800184c:	2b7d      	cmp	r3, #125	; 0x7d
 800184e:	d026      	beq.n	800189e <jsmn_parse_primitive+0x9a>
      break;
 8001850:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b1f      	cmp	r3, #31
 800185e:	d906      	bls.n	800186e <jsmn_parse_primitive+0x6a>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b7e      	cmp	r3, #126	; 0x7e
 800186c:	d905      	bls.n	800187a <jsmn_parse_primitive+0x76>
      parser->pos = start;
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8001874:	f06f 0301 	mvn.w	r3, #1
 8001878:	e03a      	b.n	80018f0 <jsmn_parse_primitive+0xec>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d909      	bls.n	80018a2 <jsmn_parse_primitive+0x9e>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1be      	bne.n	800181a <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 800189c:	e001      	b.n	80018a2 <jsmn_parse_primitive+0x9e>
      goto found;
 800189e:	bf00      	nop
 80018a0:	e000      	b.n	80018a4 <jsmn_parse_primitive+0xa0>
found:
 80018a2:	bf00      	nop
  if (tokens == NULL) {
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <jsmn_parse_primitive+0xb4>
    parser->pos--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	1e5a      	subs	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	601a      	str	r2, [r3, #0]
    return 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e01b      	b.n	80018f0 <jsmn_parse_primitive+0xec>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	6839      	ldr	r1, [r7, #0]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff ff5f 	bl	8001780 <jsmn_alloc_token>
 80018c2:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <jsmn_parse_primitive+0xd2>
    parser->pos = start;
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	e00c      	b.n	80018f0 <jsmn_parse_primitive+0xec>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	2104      	movs	r1, #4
 80018de:	6938      	ldr	r0, [r7, #16]
 80018e0:	f7ff ff76 	bl	80017d0 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	601a      	str	r2, [r3, #0]
  return 0;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	61bb      	str	r3, [r7, #24]

  parser->pos++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	601a      	str	r2, [r3, #0]

  /* Skip starting quote */
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001916:	e14e      	b.n	8001bb6 <jsmn_parse_string+0x2be>
    char c = js[parser->pos];
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b22      	cmp	r3, #34	; 0x22
 8001928:	d11d      	bne.n	8001966 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <jsmn_parse_string+0x3c>
        return 0;
 8001930:	2300      	movs	r3, #0
 8001932:	e152      	b.n	8001bda <jsmn_parse_string+0x2e2>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7ff ff21 	bl	8001780 <jsmn_alloc_token>
 800193e:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d105      	bne.n	8001952 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	e143      	b.n	8001bda <jsmn_parse_string+0x2e2>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2103      	movs	r1, #3
 800195c:	6938      	ldr	r0, [r7, #16]
 800195e:	f7ff ff37 	bl	80017d0 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8001962:	2300      	movs	r3, #0
 8001964:	e139      	b.n	8001bda <jsmn_parse_string+0x2e2>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b5c      	cmp	r3, #92	; 0x5c
 800196a:	f040 811c 	bne.w	8001ba6 <jsmn_parse_string+0x2ae>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	f240 8115 	bls.w	8001ba6 <jsmn_parse_string+0x2ae>
      int i;
      parser->pos++;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	3b22      	subs	r3, #34	; 0x22
 8001992:	2b53      	cmp	r3, #83	; 0x53
 8001994:	f200 8101 	bhi.w	8001b9a <jsmn_parse_string+0x2a2>
 8001998:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <jsmn_parse_string+0xa8>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	08001bab 	.word	0x08001bab
 80019a4:	08001b9b 	.word	0x08001b9b
 80019a8:	08001b9b 	.word	0x08001b9b
 80019ac:	08001b9b 	.word	0x08001b9b
 80019b0:	08001b9b 	.word	0x08001b9b
 80019b4:	08001b9b 	.word	0x08001b9b
 80019b8:	08001b9b 	.word	0x08001b9b
 80019bc:	08001b9b 	.word	0x08001b9b
 80019c0:	08001b9b 	.word	0x08001b9b
 80019c4:	08001b9b 	.word	0x08001b9b
 80019c8:	08001b9b 	.word	0x08001b9b
 80019cc:	08001b9b 	.word	0x08001b9b
 80019d0:	08001b9b 	.word	0x08001b9b
 80019d4:	08001bab 	.word	0x08001bab
 80019d8:	08001b9b 	.word	0x08001b9b
 80019dc:	08001b9b 	.word	0x08001b9b
 80019e0:	08001b9b 	.word	0x08001b9b
 80019e4:	08001b9b 	.word	0x08001b9b
 80019e8:	08001b9b 	.word	0x08001b9b
 80019ec:	08001b9b 	.word	0x08001b9b
 80019f0:	08001b9b 	.word	0x08001b9b
 80019f4:	08001b9b 	.word	0x08001b9b
 80019f8:	08001b9b 	.word	0x08001b9b
 80019fc:	08001b9b 	.word	0x08001b9b
 8001a00:	08001b9b 	.word	0x08001b9b
 8001a04:	08001b9b 	.word	0x08001b9b
 8001a08:	08001b9b 	.word	0x08001b9b
 8001a0c:	08001b9b 	.word	0x08001b9b
 8001a10:	08001b9b 	.word	0x08001b9b
 8001a14:	08001b9b 	.word	0x08001b9b
 8001a18:	08001b9b 	.word	0x08001b9b
 8001a1c:	08001b9b 	.word	0x08001b9b
 8001a20:	08001b9b 	.word	0x08001b9b
 8001a24:	08001b9b 	.word	0x08001b9b
 8001a28:	08001b9b 	.word	0x08001b9b
 8001a2c:	08001b9b 	.word	0x08001b9b
 8001a30:	08001b9b 	.word	0x08001b9b
 8001a34:	08001b9b 	.word	0x08001b9b
 8001a38:	08001b9b 	.word	0x08001b9b
 8001a3c:	08001b9b 	.word	0x08001b9b
 8001a40:	08001b9b 	.word	0x08001b9b
 8001a44:	08001b9b 	.word	0x08001b9b
 8001a48:	08001b9b 	.word	0x08001b9b
 8001a4c:	08001b9b 	.word	0x08001b9b
 8001a50:	08001b9b 	.word	0x08001b9b
 8001a54:	08001b9b 	.word	0x08001b9b
 8001a58:	08001b9b 	.word	0x08001b9b
 8001a5c:	08001b9b 	.word	0x08001b9b
 8001a60:	08001b9b 	.word	0x08001b9b
 8001a64:	08001b9b 	.word	0x08001b9b
 8001a68:	08001b9b 	.word	0x08001b9b
 8001a6c:	08001b9b 	.word	0x08001b9b
 8001a70:	08001b9b 	.word	0x08001b9b
 8001a74:	08001b9b 	.word	0x08001b9b
 8001a78:	08001b9b 	.word	0x08001b9b
 8001a7c:	08001b9b 	.word	0x08001b9b
 8001a80:	08001b9b 	.word	0x08001b9b
 8001a84:	08001b9b 	.word	0x08001b9b
 8001a88:	08001bab 	.word	0x08001bab
 8001a8c:	08001b9b 	.word	0x08001b9b
 8001a90:	08001b9b 	.word	0x08001b9b
 8001a94:	08001b9b 	.word	0x08001b9b
 8001a98:	08001b9b 	.word	0x08001b9b
 8001a9c:	08001b9b 	.word	0x08001b9b
 8001aa0:	08001bab 	.word	0x08001bab
 8001aa4:	08001b9b 	.word	0x08001b9b
 8001aa8:	08001b9b 	.word	0x08001b9b
 8001aac:	08001b9b 	.word	0x08001b9b
 8001ab0:	08001bab 	.word	0x08001bab
 8001ab4:	08001b9b 	.word	0x08001b9b
 8001ab8:	08001b9b 	.word	0x08001b9b
 8001abc:	08001b9b 	.word	0x08001b9b
 8001ac0:	08001b9b 	.word	0x08001b9b
 8001ac4:	08001b9b 	.word	0x08001b9b
 8001ac8:	08001b9b 	.word	0x08001b9b
 8001acc:	08001b9b 	.word	0x08001b9b
 8001ad0:	08001bab 	.word	0x08001bab
 8001ad4:	08001b9b 	.word	0x08001b9b
 8001ad8:	08001b9b 	.word	0x08001b9b
 8001adc:	08001b9b 	.word	0x08001b9b
 8001ae0:	08001bab 	.word	0x08001bab
 8001ae4:	08001b9b 	.word	0x08001b9b
 8001ae8:	08001bab 	.word	0x08001bab
 8001aec:	08001af1 	.word	0x08001af1
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e037      	b.n	8001b70 <jsmn_parse_string+0x278>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b0c:	d906      	bls.n	8001b1c <jsmn_parse_string+0x224>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b39      	cmp	r3, #57	; 0x39
 8001b1a:	d921      	bls.n	8001b60 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	4413      	add	r3, r2
 8001b24:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001b26:	2b40      	cmp	r3, #64	; 0x40
 8001b28:	d906      	bls.n	8001b38 <jsmn_parse_string+0x240>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b46      	cmp	r3, #70	; 0x46
 8001b36:	d913      	bls.n	8001b60 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001b42:	2b60      	cmp	r3, #96	; 0x60
 8001b44:	d906      	bls.n	8001b54 <jsmn_parse_string+0x25c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b66      	cmp	r3, #102	; 0x66
 8001b52:	d905      	bls.n	8001b60 <jsmn_parse_string+0x268>
            parser->pos = start;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8001b5a:	f06f 0301 	mvn.w	r3, #1
 8001b5e:	e03c      	b.n	8001bda <jsmn_parse_string+0x2e2>
          }
          parser->pos++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	601a      	str	r2, [r3, #0]
             i++) {
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	dc0b      	bgt.n	8001b8e <jsmn_parse_string+0x296>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d906      	bls.n	8001b8e <jsmn_parse_string+0x296>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1b8      	bne.n	8001b00 <jsmn_parse_string+0x208>
        }
        parser->pos--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1e5a      	subs	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	601a      	str	r2, [r3, #0]
        break;
 8001b98:	e008      	b.n	8001bac <jsmn_parse_string+0x2b4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8001ba0:	f06f 0301 	mvn.w	r3, #1
 8001ba4:	e019      	b.n	8001bda <jsmn_parse_string+0x2e2>
      }
    }
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <jsmn_parse_string+0x2b4>
        break;
 8001baa:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d907      	bls.n	8001bd0 <jsmn_parse_string+0x2d8>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f aea4 	bne.w	8001918 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8001bd6:	f06f 0302 	mvn.w	r3, #2
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop

08001be4 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001bf8:	e15f      	b.n	8001eba <jsmn_parse+0x2d6>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
 8001c08:	2b2c      	cmp	r3, #44	; 0x2c
 8001c0a:	f000 80dd 	beq.w	8001dc8 <jsmn_parse+0x1e4>
 8001c0e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c10:	dc10      	bgt.n	8001c34 <jsmn_parse+0x50>
 8001c12:	2b0d      	cmp	r3, #13
 8001c14:	f000 8141 	beq.w	8001e9a <jsmn_parse+0x2b6>
 8001c18:	2b0d      	cmp	r3, #13
 8001c1a:	dc04      	bgt.n	8001c26 <jsmn_parse+0x42>
 8001c1c:	3b09      	subs	r3, #9
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	f200 8119 	bhi.w	8001e56 <jsmn_parse+0x272>
      break;
    case '\t':
    case '\r':
    case '\n':
    case ' ':
      break;
 8001c24:	e139      	b.n	8001e9a <jsmn_parse+0x2b6>
    switch (c) {
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	f000 8137 	beq.w	8001e9a <jsmn_parse+0x2b6>
 8001c2c:	2b22      	cmp	r3, #34	; 0x22
 8001c2e:	f000 80a1 	beq.w	8001d74 <jsmn_parse+0x190>
 8001c32:	e110      	b.n	8001e56 <jsmn_parse+0x272>
 8001c34:	2b5d      	cmp	r3, #93	; 0x5d
 8001c36:	d043      	beq.n	8001cc0 <jsmn_parse+0xdc>
 8001c38:	2b5d      	cmp	r3, #93	; 0x5d
 8001c3a:	dc05      	bgt.n	8001c48 <jsmn_parse+0x64>
 8001c3c:	2b3a      	cmp	r3, #58	; 0x3a
 8001c3e:	f000 80bc 	beq.w	8001dba <jsmn_parse+0x1d6>
 8001c42:	2b5b      	cmp	r3, #91	; 0x5b
 8001c44:	d005      	beq.n	8001c52 <jsmn_parse+0x6e>
 8001c46:	e106      	b.n	8001e56 <jsmn_parse+0x272>
 8001c48:	2b7b      	cmp	r3, #123	; 0x7b
 8001c4a:	d002      	beq.n	8001c52 <jsmn_parse+0x6e>
 8001c4c:	2b7d      	cmp	r3, #125	; 0x7d
 8001c4e:	d037      	beq.n	8001cc0 <jsmn_parse+0xdc>
 8001c50:	e101      	b.n	8001e56 <jsmn_parse+0x272>
      count++;
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	3301      	adds	r3, #1
 8001c56:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 811f 	beq.w	8001e9e <jsmn_parse+0x2ba>
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff fd8b 	bl	8001780 <jsmn_alloc_token>
 8001c6a:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <jsmn_parse+0x94>
        return JSMN_ERROR_NOMEM;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e14f      	b.n	8001f18 <jsmn_parse+0x334>
      if (parser->toksuper != -1) {
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d00a      	beq.n	8001c98 <jsmn_parse+0xb4>
        jsmntok_t *t = &tokens[parser->toksuper];
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
        t->size++;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	60da      	str	r2, [r3, #12]
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8001c98:	7ffb      	ldrb	r3, [r7, #31]
 8001c9a:	2b7b      	cmp	r3, #123	; 0x7b
 8001c9c:	d101      	bne.n	8001ca2 <jsmn_parse+0xbe>
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	e000      	b.n	8001ca4 <jsmn_parse+0xc0>
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	609a      	str	r2, [r3, #8]
      break;
 8001cbe:	e0f7      	b.n	8001eb0 <jsmn_parse+0x2cc>
      if (tokens == NULL) {
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80ed 	beq.w	8001ea2 <jsmn_parse+0x2be>
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	2b7d      	cmp	r3, #125	; 0x7d
 8001ccc:	d101      	bne.n	8001cd2 <jsmn_parse+0xee>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <jsmn_parse+0xf0>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	77bb      	strb	r3, [r7, #30]
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cde:	e024      	b.n	8001d2a <jsmn_parse+0x146>
        token = &tokens[i];
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf2:	d017      	beq.n	8001d24 <jsmn_parse+0x140>
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d112      	bne.n	8001d24 <jsmn_parse+0x140>
          if (token->type != type) {
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	7fba      	ldrb	r2, [r7, #30]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d002      	beq.n	8001d0e <jsmn_parse+0x12a>
            return JSMN_ERROR_INVAL;
 8001d08:	f06f 0301 	mvn.w	r3, #1
 8001d0c:	e104      	b.n	8001f18 <jsmn_parse+0x334>
          parser->toksuper = -1;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	609a      	str	r2, [r3, #8]
          break;
 8001d22:	e005      	b.n	8001d30 <jsmn_parse+0x14c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	3b01      	subs	r3, #1
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	dad7      	bge.n	8001ce0 <jsmn_parse+0xfc>
      if (i == -1) {
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d36:	d119      	bne.n	8001d6c <jsmn_parse+0x188>
        return JSMN_ERROR_INVAL;
 8001d38:	f06f 0301 	mvn.w	r3, #1
 8001d3c:	e0ec      	b.n	8001f18 <jsmn_parse+0x334>
        token = &tokens[i];
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d009      	beq.n	8001d66 <jsmn_parse+0x182>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5a:	d104      	bne.n	8001d66 <jsmn_parse+0x182>
          parser->toksuper = i;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	609a      	str	r2, [r3, #8]
          break;
 8001d62:	bf00      	nop
      break;
 8001d64:	e0a4      	b.n	8001eb0 <jsmn_parse+0x2cc>
      for (; i >= 0; i--) {
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	dae5      	bge.n	8001d3e <jsmn_parse+0x15a>
      break;
 8001d72:	e09d      	b.n	8001eb0 <jsmn_parse+0x2cc>
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff fdba 	bl	80018f8 <jsmn_parse_string>
 8001d84:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da01      	bge.n	8001d90 <jsmn_parse+0x1ac>
        return r;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	e0c3      	b.n	8001f18 <jsmn_parse+0x334>
      count++;
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	3301      	adds	r3, #1
 8001d94:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9e:	f000 8082 	beq.w	8001ea6 <jsmn_parse+0x2c2>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d07e      	beq.n	8001ea6 <jsmn_parse+0x2c2>
        tokens[parser->toksuper].size++;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	3201      	adds	r2, #1
 8001db6:	60da      	str	r2, [r3, #12]
      break;
 8001db8:	e075      	b.n	8001ea6 <jsmn_parse+0x2c2>
    case ':':
      parser->toksuper = parser->toknext - 1;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	609a      	str	r2, [r3, #8]
      break;
 8001dc6:	e073      	b.n	8001eb0 <jsmn_parse+0x2cc>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d06d      	beq.n	8001eaa <jsmn_parse+0x2c6>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd6:	d068      	beq.n	8001eaa <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d060      	beq.n	8001eaa <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d058      	beq.n	8001eaa <jsmn_parse+0x2c6>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001e00:	e025      	b.n	8001e4e <jsmn_parse+0x26a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d006      	beq.n	8001e1e <jsmn_parse+0x23a>
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d114      	bne.n	8001e48 <jsmn_parse+0x264>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d00c      	beq.n	8001e48 <jsmn_parse+0x264>
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d104      	bne.n	8001e48 <jsmn_parse+0x264>
              parser->toksuper = i;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	609a      	str	r2, [r3, #8]
              break;
 8001e44:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8001e46:	e030      	b.n	8001eaa <jsmn_parse+0x2c6>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	dad6      	bge.n	8001e02 <jsmn_parse+0x21e>
      break;
 8001e54:	e029      	b.n	8001eaa <jsmn_parse+0x2c6>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff fccf 	bl	8001804 <jsmn_parse_primitive>
 8001e66:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da01      	bge.n	8001e72 <jsmn_parse+0x28e>
        return r;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	e052      	b.n	8001f18 <jsmn_parse+0x334>
      }
      count++;
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	3301      	adds	r3, #1
 8001e76:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d015      	beq.n	8001eae <jsmn_parse+0x2ca>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d012      	beq.n	8001eae <jsmn_parse+0x2ca>
        tokens[parser->toksuper].size++;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	3201      	adds	r2, #1
 8001e96:	60da      	str	r2, [r3, #12]
      }
      break;
 8001e98:	e009      	b.n	8001eae <jsmn_parse+0x2ca>
      break;
 8001e9a:	bf00      	nop
 8001e9c:	e008      	b.n	8001eb0 <jsmn_parse+0x2cc>
        break;
 8001e9e:	bf00      	nop
 8001ea0:	e006      	b.n	8001eb0 <jsmn_parse+0x2cc>
        break;
 8001ea2:	bf00      	nop
 8001ea4:	e004      	b.n	8001eb0 <jsmn_parse+0x2cc>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <jsmn_parse+0x2cc>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <jsmn_parse+0x2cc>
      break;
 8001eae:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d907      	bls.n	8001ed4 <jsmn_parse+0x2f0>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	4413      	add	r3, r2
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f47f ae93 	bne.w	8001bfa <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01d      	beq.n	8001f16 <jsmn_parse+0x332>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	e015      	b.n	8001f10 <jsmn_parse+0x32c>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef2:	d00a      	beq.n	8001f0a <jsmn_parse+0x326>
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f02:	d102      	bne.n	8001f0a <jsmn_parse+0x326>
        return JSMN_ERROR_PART;
 8001f04:	f06f 0302 	mvn.w	r3, #2
 8001f08:	e006      	b.n	8001f18 <jsmn_parse+0x334>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	dae6      	bge.n	8001ee4 <jsmn_parse+0x300>
      }
    }
  }

  return count;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3a:	609a      	str	r2, [r3, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <jsoneq>:
/* Private Variables -------------------------*/


/* Start implementation ---------------------- ---------------------- ---------------------- ---------------------- ----------------------*/

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int) strlen(s) == tok->end - tok->start
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d11e      	bne.n	8001f9a <jsoneq+0x52>
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe f941 	bl	80001e4 <strlen>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4619      	mov	r1, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	4299      	cmp	r1, r3
 8001f72:	d112      	bne.n	8001f9a <jsoneq+0x52>
			&& strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1898      	adds	r0, r3, r2
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	f008 fd02 	bl	800a994 <strncmp>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <jsoneq+0x52>
		return 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e001      	b.n	8001f9e <jsoneq+0x56>
	}
	return -1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <parse_device>:


data1_t *parse_device(char *Buffer, uint16_t BufferLen)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	f6ad 5d0c 	subw	sp, sp, #3340	; 0xd0c
 8001fae:	af02      	add	r7, sp, #8
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	6018      	str	r0, [r3, #0]
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	1cbb      	adds	r3, r7, #2
 8001fb8:	801a      	strh	r2, [r3, #0]
	ptr = &test;
 8001fba:	4bb9      	ldr	r3, [pc, #740]	; (80022a0 <parse_device+0x2f8>)
 8001fbc:	4ab9      	ldr	r2, [pc, #740]	; (80022a4 <parse_device+0x2fc>)
 8001fbe:	601a      	str	r2, [r3, #0]
	int i,r;
	jsmn_parser p;
	jsmntok_t t[JSON_MAX_LEN]; /* We expect no more than JSON_MAX_LEN tokens */
	jsmn_init(&p);
 8001fc0:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ffab 	bl	8001f20 <jsmn_init>
	r = jsmn_parse(&p, Buffer,BufferLen, t,sizeof(t) / sizeof(t[0]));
 8001fca:	1cbb      	adds	r3, r7, #2
 8001fcc:	881a      	ldrh	r2, [r3, #0]
 8001fce:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001fd2:	1d39      	adds	r1, r7, #4
 8001fd4:	f607 40ec 	addw	r0, r7, #3308	; 0xcec
 8001fd8:	23c8      	movs	r3, #200	; 0xc8
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4623      	mov	r3, r4
 8001fde:	6809      	ldr	r1, [r1, #0]
 8001fe0:	f7ff fe00 	bl	8001be4 <jsmn_parse>
 8001fe4:	f8c7 0cf8 	str.w	r0, [r7, #3320]	; 0xcf8
	for (i = 1; i < r; i++) {
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001fee:	e222      	b.n	8002436 <parse_device+0x48e>
		if (jsoneq(Buffer, &t[i], "PORT") == 0) {
 8001ff0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001ff4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	18d1      	adds	r1, r2, r3
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4aaa      	ldr	r2, [pc, #680]	; (80022a8 <parse_device+0x300>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	f7ff ffa1 	bl	8001f48 <jsoneq>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d11a      	bne.n	8002042 <parse_device+0x9a>
			(ptr)->channel = atoi(Buffer + t[i + 1].start);
 800200c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002010:	3301      	adds	r3, #1
 8002012:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4413      	add	r3, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f008 fbd6 	bl	800a7d8 <atoi>
 800202c:	4602      	mov	r2, r0
 800202e:	4b9c      	ldr	r3, [pc, #624]	; (80022a0 <parse_device+0x2f8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]
			// printf("\nPORT = %d\t",(*ptr)->channel);
			i++;
 8002036:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800203a:	3301      	adds	r3, #1
 800203c:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8002040:	e1f4      	b.n	800242c <parse_device+0x484>

		} else if (jsoneq(Buffer, &t[i], "ID") == 0) {
 8002042:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002046:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	18d1      	adds	r1, r2, r3
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4a96      	ldr	r2, [pc, #600]	; (80022ac <parse_device+0x304>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f7ff ff78 	bl	8001f48 <jsoneq>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11a      	bne.n	8002094 <parse_device+0xec>
			(ptr)->deviceID = atoi(Buffer + t[i + 1].start);
 800205e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002062:	3301      	adds	r3, #1
 8002064:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f008 fbad 	bl	800a7d8 <atoi>
 800207e:	4602      	mov	r2, r0
 8002080:	4b87      	ldr	r3, [pc, #540]	; (80022a0 <parse_device+0x2f8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	705a      	strb	r2, [r3, #1]
			//printf("ID = %d\t",ptr->deviceID);
			i++;
 8002088:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800208c:	3301      	adds	r3, #1
 800208e:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8002092:	e1cb      	b.n	800242c <parse_device+0x484>
		} else if (jsoneq(Buffer, &t[i], "FC") == 0) {
 8002094:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002098:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	18d1      	adds	r1, r2, r3
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	4a83      	ldr	r2, [pc, #524]	; (80022b0 <parse_device+0x308>)
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	f7ff ff4f 	bl	8001f48 <jsoneq>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11a      	bne.n	80020e6 <parse_device+0x13e>
			(ptr)->func = atoi(Buffer + t[i + 1].start);
 80020b0:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80020b4:	3301      	adds	r3, #1
 80020b6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f008 fb84 	bl	800a7d8 <atoi>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <parse_device+0x2f8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	709a      	strb	r2, [r3, #2]
			//printf("FC = %d\t",ptr->func);
			i++;
 80020da:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80020de:	3301      	adds	r3, #1
 80020e0:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80020e4:	e1a2      	b.n	800242c <parse_device+0x484>

		} else if (jsoneq(Buffer, &t[i], "CHANNEL") == 0) {
 80020e6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80020ea:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	18d1      	adds	r1, r2, r3
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4a6f      	ldr	r2, [pc, #444]	; (80022b4 <parse_device+0x30c>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	f7ff ff26 	bl	8001f48 <jsoneq>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d13f      	bne.n	8002182 <parse_device+0x1da>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 8002102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002106:	2214      	movs	r2, #20
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f008 fb9d 	bl	800a84a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 8002110:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002114:	3301      	adds	r3, #1
 8002116:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1898      	adds	r0, r3, r2
 800212a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800212e:	3301      	adds	r3, #1
 8002130:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4413      	add	r3, r2
 8002138:	3308      	adds	r3, #8
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002140:	3301      	adds	r3, #1
 8002142:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	440b      	add	r3, r1
 800214a:	3304      	adds	r3, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	461a      	mov	r2, r3
 8002152:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002156:	4601      	mov	r1, r0
 8002158:	4618      	mov	r0, r3
 800215a:	f008 fc2d 	bl	800a9b8 <strncpy>
			(ptr)->deviceChannel = (uint16_t)strtol(temp, NULL, 0);
 800215e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f008 fcb6 	bl	800aad8 <strtol>
 800216c:	4602      	mov	r2, r0
 800216e:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <parse_device+0x2f8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b292      	uxth	r2, r2
 8002174:	809a      	strh	r2, [r3, #4]
			//printf("CHANNEL: %d\t",ptr->deviceChannel);
			i++;
 8002176:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800217a:	3301      	adds	r3, #1
 800217c:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8002180:	e154      	b.n	800242c <parse_device+0x484>
		} else if (jsoneq(Buffer, &t[i], "DEVICETYPE") == 0) {
 8002182:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002186:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	18d1      	adds	r1, r2, r3
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4a49      	ldr	r2, [pc, #292]	; (80022b8 <parse_device+0x310>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	f7ff fed8 	bl	8001f48 <jsoneq>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d138      	bne.n	8002210 <parse_device+0x268>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 800219e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021a2:	2214      	movs	r2, #20
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f008 fb4f 	bl	800a84a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 80021ac:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80021b0:	3301      	adds	r3, #1
 80021b2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	1898      	adds	r0, r3, r2
 80021c6:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80021ca:	3301      	adds	r3, #1
 80021cc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	3308      	adds	r3, #8
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80021dc:	3301      	adds	r3, #1
 80021de:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	440b      	add	r3, r1
 80021e6:	3304      	adds	r3, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021f2:	4601      	mov	r1, r0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f008 fbdf 	bl	800a9b8 <strncpy>
			(ptr)->deviceType = temp;
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <parse_device+0x2f8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002202:	609a      	str	r2, [r3, #8]
			//printf("DEVICETYPE: %s\t",ptr->deviceType);
			i++;
 8002204:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002208:	3301      	adds	r3, #1
 800220a:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800220e:	e10d      	b.n	800242c <parse_device+0x484>
		} else if (jsoneq(Buffer, &t[i], "DEVICENAME") == 0) {
 8002210:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002214:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	18d1      	adds	r1, r2, r3
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <parse_device+0x314>)
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	f7ff fe91 	bl	8001f48 <jsoneq>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d149      	bne.n	80022c0 <parse_device+0x318>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 800222c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002230:	2214      	movs	r2, #20
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f008 fb08 	bl	800a84a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 800223a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800223e:	3301      	adds	r3, #1
 8002240:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1898      	adds	r0, r3, r2
 8002254:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002258:	3301      	adds	r3, #1
 800225a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	4413      	add	r3, r2
 8002262:	3308      	adds	r3, #8
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800226a:	3301      	adds	r3, #1
 800226c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	440b      	add	r3, r1
 8002274:	3304      	adds	r3, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	461a      	mov	r2, r3
 800227c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002280:	4601      	mov	r1, r0
 8002282:	4618      	mov	r0, r3
 8002284:	f008 fb98 	bl	800a9b8 <strncpy>
			(ptr)->deviceName = temp;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <parse_device+0x2f8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002290:	60da      	str	r2, [r3, #12]
			//printf("DEVICENAME: %s\t",ptr->deviceName);
			i++;
 8002292:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002296:	3301      	adds	r3, #1
 8002298:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800229c:	e0c6      	b.n	800242c <parse_device+0x484>
 800229e:	bf00      	nop
 80022a0:	200004e8 	.word	0x200004e8
 80022a4:	200004ec 	.word	0x200004ec
 80022a8:	0800be3c 	.word	0x0800be3c
 80022ac:	0800be44 	.word	0x0800be44
 80022b0:	0800be48 	.word	0x0800be48
 80022b4:	0800be4c 	.word	0x0800be4c
 80022b8:	0800be54 	.word	0x0800be54
 80022bc:	0800be60 	.word	0x0800be60
		} else if (jsoneq(Buffer, &t[i], "CHANNELTITLE") == 0) {
 80022c0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80022c4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	18d1      	adds	r1, r2, r3
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	4a61      	ldr	r2, [pc, #388]	; (8002454 <parse_device+0x4ac>)
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	f7ff fe39 	bl	8001f48 <jsoneq>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d138      	bne.n	800234e <parse_device+0x3a6>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	2214      	movs	r2, #20
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f008 fab0 	bl	800a84a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 80022ea:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80022ee:	3301      	adds	r3, #1
 80022f0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1898      	adds	r0, r3, r2
 8002304:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002308:	3301      	adds	r3, #1
 800230a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	3308      	adds	r3, #8
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800231a:	3301      	adds	r3, #1
 800231c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	440b      	add	r3, r1
 8002324:	3304      	adds	r3, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	461a      	mov	r2, r3
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4601      	mov	r1, r0
 8002332:	4618      	mov	r0, r3
 8002334:	f008 fb40 	bl	800a9b8 <strncpy>
			(ptr)->channeltitle = temp;
 8002338:	4b47      	ldr	r3, [pc, #284]	; (8002458 <parse_device+0x4b0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f107 021c 	add.w	r2, r7, #28
 8002340:	611a      	str	r2, [r3, #16]
			//printf("CHANNELTITLE: %s\t",ptr->channeltitle);
			i++;
 8002342:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002346:	3301      	adds	r3, #1
 8002348:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800234c:	e06e      	b.n	800242c <parse_device+0x484>
		}else if (jsoneq(Buffer, &t[i], "VALUETYPE") == 0) {
 800234e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002352:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	18d1      	adds	r1, r2, r3
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4a3f      	ldr	r2, [pc, #252]	; (800245c <parse_device+0x4b4>)
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	f7ff fdf2 	bl	8001f48 <jsoneq>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d138      	bne.n	80023dc <parse_device+0x434>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	2214      	movs	r2, #20
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f008 fa69 	bl	800a84a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 8002378:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800237c:	3301      	adds	r3, #1
 800237e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1898      	adds	r0, r3, r2
 8002392:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002396:	3301      	adds	r3, #1
 8002398:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	3308      	adds	r3, #8
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80023a8:	3301      	adds	r3, #1
 80023aa:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	440b      	add	r3, r1
 80023b2:	3304      	adds	r3, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	4601      	mov	r1, r0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f008 faf9 	bl	800a9b8 <strncpy>
			(ptr)->valueType= temp;
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <parse_device+0x4b0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f107 0208 	add.w	r2, r7, #8
 80023ce:	615a      	str	r2, [r3, #20]
			//printf("VALUETYPE: %s\t",ptr->valueType);
			i++;
 80023d0:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80023d4:	3301      	adds	r3, #1
 80023d6:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80023da:	e027      	b.n	800242c <parse_device+0x484>
		} else if (jsoneq(Buffer, &t[i], "DEVICESTATUS") == 0) {
 80023dc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80023e0:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	18d1      	adds	r1, r2, r3
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <parse_device+0x4b8>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	f7ff fdab 	bl	8001f48 <jsoneq>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d119      	bne.n	800242c <parse_device+0x484>
			//printf("DEVICESTATUS: %.*s\t", t[i + 1].end - t[i + 1].start,Buffer + t[i + 1].start);
			(ptr)->devicestatus = atoi(Buffer + t[i + 1].start);
 80023f8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80023fc:	3301      	adds	r3, #1
 80023fe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4413      	add	r3, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f008 f9e0 	bl	800a7d8 <atoi>
 8002418:	4602      	mov	r2, r0
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <parse_device+0x4b0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	70da      	strb	r2, [r3, #3]
			i++;
 8002422:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002426:	3301      	adds	r3, #1
 8002428:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
	for (i = 1; i < r; i++) {
 800242c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002430:	3301      	adds	r3, #1
 8002432:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8002436:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
 800243a:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800243e:	429a      	cmp	r2, r3
 8002440:	f6ff add6 	blt.w	8001ff0 <parse_device+0x48>
		}
	}
	return ptr;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <parse_device+0x4b0>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	f607 5704 	addw	r7, r7, #3332	; 0xd04
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	0800be6c 	.word	0x0800be6c
 8002458:	200004e8 	.word	0x200004e8
 800245c:	0800be7c 	.word	0x0800be7c
 8002460:	0800be88 	.word	0x0800be88

08002464 <SD_CREATE_FILE>:

extern char SDbuffer[200];
extern data1_t table1[];
uint16_t lines = 0;
uint8_t  SD_CREATE_FILE(char *filename)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, "/", 1);
 800246c:	2201      	movs	r2, #1
 800246e:	490e      	ldr	r1, [pc, #56]	; (80024a8 <SD_CREATE_FILE+0x44>)
 8002470:	480e      	ldr	r0, [pc, #56]	; (80024ac <SD_CREATE_FILE+0x48>)
 8002472:	f004 fea9 	bl	80071c8 <f_mount>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <SD_CREATE_FILE+0x4c>)
 800247c:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil,filename, FA_CREATE_ALWAYS|FA_WRITE);
 800247e:	220a      	movs	r2, #10
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	480c      	ldr	r0, [pc, #48]	; (80024b4 <SD_CREATE_FILE+0x50>)
 8002484:	f004 ff04 	bl	8007290 <f_open>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <SD_CREATE_FILE+0x4c>)
 800248e:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8002490:	4808      	ldr	r0, [pc, #32]	; (80024b4 <SD_CREATE_FILE+0x50>)
 8002492:	f005 fc5d 	bl	8007d50 <f_close>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SD_CREATE_FILE+0x4c>)
 800249c:	701a      	strb	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	0800be98 	.word	0x0800be98
 80024ac:	200044ec 	.word	0x200044ec
 80024b0:	20004720 	.word	0x20004720
 80024b4:	2000477c 	.word	0x2000477c

080024b8 <SD_READ_LINE>:
/*-----------------------------------------------------------------------------------------*/
uint8_t  SD_READ_LINE(char *filename)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	memset(SDbuffer,0, sizeof(SDbuffer));
 80024c0:	22c8      	movs	r2, #200	; 0xc8
 80024c2:	2100      	movs	r1, #0
 80024c4:	4812      	ldr	r0, [pc, #72]	; (8002510 <SD_READ_LINE+0x58>)
 80024c6:	f008 f9c0 	bl	800a84a <memset>
	fresult = f_mount(&fs, "/", 1);
 80024ca:	2201      	movs	r2, #1
 80024cc:	4911      	ldr	r1, [pc, #68]	; (8002514 <SD_READ_LINE+0x5c>)
 80024ce:	4812      	ldr	r0, [pc, #72]	; (8002518 <SD_READ_LINE+0x60>)
 80024d0:	f004 fe7a 	bl	80071c8 <f_mount>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <SD_READ_LINE+0x64>)
 80024da:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil,filename, FA_READ|FA_WRITE);
 80024dc:	2203      	movs	r2, #3
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	480f      	ldr	r0, [pc, #60]	; (8002520 <SD_READ_LINE+0x68>)
 80024e2:	f004 fed5 	bl	8007290 <f_open>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <SD_READ_LINE+0x64>)
 80024ec:	701a      	strb	r2, [r3, #0]
	f_gets(SDbuffer,sizeof(SDbuffer), &fil);
 80024ee:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <SD_READ_LINE+0x68>)
 80024f0:	21c8      	movs	r1, #200	; 0xc8
 80024f2:	4807      	ldr	r0, [pc, #28]	; (8002510 <SD_READ_LINE+0x58>)
 80024f4:	f005 fc5b 	bl	8007dae <f_gets>
	fresult = f_close(&fil);
 80024f8:	4809      	ldr	r0, [pc, #36]	; (8002520 <SD_READ_LINE+0x68>)
 80024fa:	f005 fc29 	bl	8007d50 <f_close>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <SD_READ_LINE+0x64>)
 8002504:	701a      	strb	r2, [r3, #0]
}
 8002506:	bf00      	nop
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200043c8 	.word	0x200043c8
 8002514:	0800be98 	.word	0x0800be98
 8002518:	200044ec 	.word	0x200044ec
 800251c:	20004720 	.word	0x20004720
 8002520:	2000477c 	.word	0x2000477c

08002524 <SD_READ_ALL>:
/*-----------------------------------------------------------------------------------------*/
uint8_t  SD_READ_ALL(char *filename)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	uint16_t lines = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	81fb      	strh	r3, [r7, #14]
	memset(SDbuffer,0, sizeof(SDbuffer));
 8002530:	22c8      	movs	r2, #200	; 0xc8
 8002532:	2100      	movs	r1, #0
 8002534:	481f      	ldr	r0, [pc, #124]	; (80025b4 <SD_READ_ALL+0x90>)
 8002536:	f008 f988 	bl	800a84a <memset>
	fresult = f_mount(&fs, "", 1);
 800253a:	2201      	movs	r2, #1
 800253c:	491e      	ldr	r1, [pc, #120]	; (80025b8 <SD_READ_ALL+0x94>)
 800253e:	481f      	ldr	r0, [pc, #124]	; (80025bc <SD_READ_ALL+0x98>)
 8002540:	f004 fe42 	bl	80071c8 <f_mount>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <SD_READ_ALL+0x9c>)
 800254a:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil,filename, FA_READ|FA_WRITE);
 800254c:	2203      	movs	r2, #3
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	481c      	ldr	r0, [pc, #112]	; (80025c4 <SD_READ_ALL+0xa0>)
 8002552:	f004 fe9d 	bl	8007290 <f_open>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <SD_READ_ALL+0x9c>)
 800255c:	701a      	strb	r2, [r3, #0]
	for (lines = 0; (f_eof(&fil) == 0); lines++)
 800255e:	2300      	movs	r3, #0
 8002560:	81fb      	strh	r3, [r7, #14]
 8002562:	e010      	b.n	8002586 <SD_READ_ALL+0x62>
	{
	   memset(SDbuffer,0, sizeof(SDbuffer));
 8002564:	22c8      	movs	r2, #200	; 0xc8
 8002566:	2100      	movs	r1, #0
 8002568:	4812      	ldr	r0, [pc, #72]	; (80025b4 <SD_READ_ALL+0x90>)
 800256a:	f008 f96e 	bl	800a84a <memset>
	   f_gets((char*)SDbuffer, sizeof(SDbuffer), &fil);
 800256e:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <SD_READ_ALL+0xa0>)
 8002570:	21c8      	movs	r1, #200	; 0xc8
 8002572:	4810      	ldr	r0, [pc, #64]	; (80025b4 <SD_READ_ALL+0x90>)
 8002574:	f005 fc1b 	bl	8007dae <f_gets>
	   printf("%s\r",SDbuffer);
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <SD_READ_ALL+0x90>)
 800257a:	4813      	ldr	r0, [pc, #76]	; (80025c8 <SD_READ_ALL+0xa4>)
 800257c:	f008 f96e 	bl	800a85c <iprintf>
	for (lines = 0; (f_eof(&fil) == 0); lines++)
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	3301      	adds	r3, #1
 8002584:	81fb      	strh	r3, [r7, #14]
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <SD_READ_ALL+0xa0>)
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <SD_READ_ALL+0xa0>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	429a      	cmp	r2, r3
 8002590:	d1e8      	bne.n	8002564 <SD_READ_ALL+0x40>
	}
	printf("%d lines in file\r\n", lines);
 8002592:	89fb      	ldrh	r3, [r7, #14]
 8002594:	4619      	mov	r1, r3
 8002596:	480d      	ldr	r0, [pc, #52]	; (80025cc <SD_READ_ALL+0xa8>)
 8002598:	f008 f960 	bl	800a85c <iprintf>
	fresult = f_close(&fil);
 800259c:	4809      	ldr	r0, [pc, #36]	; (80025c4 <SD_READ_ALL+0xa0>)
 800259e:	f005 fbd7 	bl	8007d50 <f_close>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <SD_READ_ALL+0x9c>)
 80025a8:	701a      	strb	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200043c8 	.word	0x200043c8
 80025b8:	0800be9c 	.word	0x0800be9c
 80025bc:	200044ec 	.word	0x200044ec
 80025c0:	20004720 	.word	0x20004720
 80025c4:	2000477c 	.word	0x2000477c
 80025c8:	0800bea0 	.word	0x0800bea0
 80025cc:	0800bea4 	.word	0x0800bea4

080025d0 <SD_LOAD_ALL>:
/*-----------------------------------------------------------------------------------------*/
uint8_t  SD_LOAD_ALL(char *filename)
{
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d2:	b08d      	sub	sp, #52	; 0x34
 80025d4:	af08      	add	r7, sp, #32
 80025d6:	6078      	str	r0, [r7, #4]
	uint16_t lines = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	81fb      	strh	r3, [r7, #14]
	memset(SDbuffer,0, sizeof(SDbuffer));
 80025dc:	22c8      	movs	r2, #200	; 0xc8
 80025de:	2100      	movs	r1, #0
 80025e0:	483b      	ldr	r0, [pc, #236]	; (80026d0 <SD_LOAD_ALL+0x100>)
 80025e2:	f008 f932 	bl	800a84a <memset>
	fresult = f_mount(&fs, "", 1);
 80025e6:	2201      	movs	r2, #1
 80025e8:	493a      	ldr	r1, [pc, #232]	; (80026d4 <SD_LOAD_ALL+0x104>)
 80025ea:	483b      	ldr	r0, [pc, #236]	; (80026d8 <SD_LOAD_ALL+0x108>)
 80025ec:	f004 fdec 	bl	80071c8 <f_mount>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <SD_LOAD_ALL+0x10c>)
 80025f6:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil,filename, FA_READ|FA_WRITE);
 80025f8:	2203      	movs	r2, #3
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4838      	ldr	r0, [pc, #224]	; (80026e0 <SD_LOAD_ALL+0x110>)
 80025fe:	f004 fe47 	bl	8007290 <f_open>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	4b35      	ldr	r3, [pc, #212]	; (80026dc <SD_LOAD_ALL+0x10c>)
 8002608:	701a      	strb	r2, [r3, #0]
	for (lines = 0; (f_eof(&fil) == 0); lines++)
 800260a:	2300      	movs	r3, #0
 800260c:	81fb      	strh	r3, [r7, #14]
 800260e:	e047      	b.n	80026a0 <SD_LOAD_ALL+0xd0>
	{
	   memset(SDbuffer,0, sizeof(SDbuffer));
 8002610:	22c8      	movs	r2, #200	; 0xc8
 8002612:	2100      	movs	r1, #0
 8002614:	482e      	ldr	r0, [pc, #184]	; (80026d0 <SD_LOAD_ALL+0x100>)
 8002616:	f008 f918 	bl	800a84a <memset>
	   f_gets((char*)SDbuffer, sizeof(SDbuffer), &fil);
 800261a:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <SD_LOAD_ALL+0x110>)
 800261c:	21c8      	movs	r1, #200	; 0xc8
 800261e:	482c      	ldr	r0, [pc, #176]	; (80026d0 <SD_LOAD_ALL+0x100>)
 8002620:	f005 fbc5 	bl	8007dae <f_gets>
	   ptr = parse_device(SDbuffer, strlen(SDbuffer));
 8002624:	482a      	ldr	r0, [pc, #168]	; (80026d0 <SD_LOAD_ALL+0x100>)
 8002626:	f7fd fddd 	bl	80001e4 <strlen>
 800262a:	4603      	mov	r3, r0
 800262c:	b29b      	uxth	r3, r3
 800262e:	4619      	mov	r1, r3
 8002630:	4827      	ldr	r0, [pc, #156]	; (80026d0 <SD_LOAD_ALL+0x100>)
 8002632:	f7ff fcb9 	bl	8001fa8 <parse_device>
 8002636:	4602      	mov	r2, r0
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <SD_LOAD_ALL+0x114>)
 800263a:	601a      	str	r2, [r3, #0]
	   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",lines,(ptr)->channel,(ptr)->deviceID,(ptr)->func,(ptr)->devicestatus,
 800263c:	89fc      	ldrh	r4, [r7, #14]
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <SD_LOAD_ALL+0x114>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	469c      	mov	ip, r3
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <SD_LOAD_ALL+0x114>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	469e      	mov	lr, r3
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <SD_LOAD_ALL+0x114>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	789b      	ldrb	r3, [r3, #2]
 8002654:	461d      	mov	r5, r3
 8002656:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <SD_LOAD_ALL+0x114>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	78db      	ldrb	r3, [r3, #3]
 800265c:	461e      	mov	r6, r3
			   (ptr)->deviceChannel,(ptr)->deviceType,(ptr)->deviceName,
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <SD_LOAD_ALL+0x114>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	889b      	ldrh	r3, [r3, #4]
	   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",lines,(ptr)->channel,(ptr)->deviceID,(ptr)->func,(ptr)->devicestatus,
 8002664:	603b      	str	r3, [r7, #0]
			   (ptr)->deviceChannel,(ptr)->deviceType,(ptr)->deviceName,
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <SD_LOAD_ALL+0x114>)
 8002668:	681b      	ldr	r3, [r3, #0]
	   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",lines,(ptr)->channel,(ptr)->deviceID,(ptr)->func,(ptr)->devicestatus,
 800266a:	689b      	ldr	r3, [r3, #8]
			   (ptr)->deviceChannel,(ptr)->deviceType,(ptr)->deviceName,
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <SD_LOAD_ALL+0x114>)
 800266e:	6812      	ldr	r2, [r2, #0]
	   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",lines,(ptr)->channel,(ptr)->deviceID,(ptr)->func,(ptr)->devicestatus,
 8002670:	68d2      	ldr	r2, [r2, #12]
	           (ptr)->channeltitle,(ptr)->valueType);
 8002672:	491c      	ldr	r1, [pc, #112]	; (80026e4 <SD_LOAD_ALL+0x114>)
 8002674:	6809      	ldr	r1, [r1, #0]
	   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",lines,(ptr)->channel,(ptr)->deviceID,(ptr)->func,(ptr)->devicestatus,
 8002676:	6909      	ldr	r1, [r1, #16]
	           (ptr)->channeltitle,(ptr)->valueType);
 8002678:	481a      	ldr	r0, [pc, #104]	; (80026e4 <SD_LOAD_ALL+0x114>)
 800267a:	6800      	ldr	r0, [r0, #0]
	   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",lines,(ptr)->channel,(ptr)->deviceID,(ptr)->func,(ptr)->devicestatus,
 800267c:	6940      	ldr	r0, [r0, #20]
 800267e:	9006      	str	r0, [sp, #24]
 8002680:	9105      	str	r1, [sp, #20]
 8002682:	9204      	str	r2, [sp, #16]
 8002684:	9303      	str	r3, [sp, #12]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	9601      	str	r6, [sp, #4]
 800268c:	9500      	str	r5, [sp, #0]
 800268e:	4673      	mov	r3, lr
 8002690:	4662      	mov	r2, ip
 8002692:	4621      	mov	r1, r4
 8002694:	4814      	ldr	r0, [pc, #80]	; (80026e8 <SD_LOAD_ALL+0x118>)
 8002696:	f008 f8e1 	bl	800a85c <iprintf>
	for (lines = 0; (f_eof(&fil) == 0); lines++)
 800269a:	89fb      	ldrh	r3, [r7, #14]
 800269c:	3301      	adds	r3, #1
 800269e:	81fb      	strh	r3, [r7, #14]
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <SD_LOAD_ALL+0x110>)
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <SD_LOAD_ALL+0x110>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1b1      	bne.n	8002610 <SD_LOAD_ALL+0x40>
	}
	printf("\r\n%d lines in file\r\n", lines);
 80026ac:	89fb      	ldrh	r3, [r7, #14]
 80026ae:	4619      	mov	r1, r3
 80026b0:	480e      	ldr	r0, [pc, #56]	; (80026ec <SD_LOAD_ALL+0x11c>)
 80026b2:	f008 f8d3 	bl	800a85c <iprintf>
	fresult = f_close(&fil);
 80026b6:	480a      	ldr	r0, [pc, #40]	; (80026e0 <SD_LOAD_ALL+0x110>)
 80026b8:	f005 fb4a 	bl	8007d50 <f_close>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SD_LOAD_ALL+0x10c>)
 80026c2:	701a      	strb	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200043c8 	.word	0x200043c8
 80026d4:	0800be9c 	.word	0x0800be9c
 80026d8:	200044ec 	.word	0x200044ec
 80026dc:	20004720 	.word	0x20004720
 80026e0:	2000477c 	.word	0x2000477c
 80026e4:	20000504 	.word	0x20000504
 80026e8:	0800beb8 	.word	0x0800beb8
 80026ec:	0800bee0 	.word	0x0800bee0

080026f0 <SD_WRITE_LINE>:
/*-----------------------------------------------------------------------------------------*/
uint8_t  SD_WRITE_LINE(char *filename, const TCHAR* data)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	f_mount(&fs,"/", 1);
 80026fa:	2201      	movs	r2, #1
 80026fc:	490a      	ldr	r1, [pc, #40]	; (8002728 <SD_WRITE_LINE+0x38>)
 80026fe:	480b      	ldr	r0, [pc, #44]	; (800272c <SD_WRITE_LINE+0x3c>)
 8002700:	f004 fd62 	bl	80071c8 <f_mount>
	f_open(&fil,filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002704:	2213      	movs	r2, #19
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4809      	ldr	r0, [pc, #36]	; (8002730 <SD_WRITE_LINE+0x40>)
 800270a:	f004 fdc1 	bl	8007290 <f_open>
	f_puts(data, &fil);
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <SD_WRITE_LINE+0x40>)
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	f005 fbf6 	bl	8007f02 <f_puts>
	f_close(&fil);
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <SD_WRITE_LINE+0x40>)
 8002718:	f005 fb1a 	bl	8007d50 <f_close>
}
 800271c:	bf00      	nop
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	0800be98 	.word	0x0800be98
 800272c:	200044ec 	.word	0x200044ec
 8002730:	2000477c 	.word	0x2000477c

08002734 <SD_Json>:
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
	return free_space;
}
uint8_t SD_Json(char buffer[200],uint8_t port,uint8_t deviceID,uint8_t func,uint16_t deviceChannel,char *deviceType,char *deviceTitle,char *deviceName,char *valueType, uint8_t devicestatus)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b08b      	sub	sp, #44	; 0x2c
 8002738:	af08      	add	r7, sp, #32
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4603      	mov	r3, r0
 8002744:	70fb      	strb	r3, [r7, #3]
 8002746:	460b      	mov	r3, r1
 8002748:	70bb      	strb	r3, [r7, #2]
 800274a:	4613      	mov	r3, r2
 800274c:	707b      	strb	r3, [r7, #1]
    memset(buffer,0,200);
 800274e:	22c8      	movs	r2, #200	; 0xc8
 8002750:	2100      	movs	r1, #0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f008 f879 	bl	800a84a <memset>
    sprintf(buffer,"{\"PORT\":%d,\"ID\":%d,\"FC\":%d,\"CHANNEL\":%d,\"DEVICETYPE\":\"%s\",\"DEVICENAME\":\"%s\",\"CHANNELTITLE\":\"%s\",\"VALUETYPE\":\"%s\",\"DEVICESTATUS\":%d}\n",port,deviceID,func,deviceChannel,deviceType,deviceName,deviceTitle,valueType,devicestatus);
 8002758:	78f8      	ldrb	r0, [r7, #3]
 800275a:	78bc      	ldrb	r4, [r7, #2]
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	8b3a      	ldrh	r2, [r7, #24]
 8002760:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002764:	9106      	str	r1, [sp, #24]
 8002766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002768:	9105      	str	r1, [sp, #20]
 800276a:	6a39      	ldr	r1, [r7, #32]
 800276c:	9104      	str	r1, [sp, #16]
 800276e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002770:	9103      	str	r1, [sp, #12]
 8002772:	69f9      	ldr	r1, [r7, #28]
 8002774:	9102      	str	r1, [sp, #8]
 8002776:	9201      	str	r2, [sp, #4]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4623      	mov	r3, r4
 800277c:	4602      	mov	r2, r0
 800277e:	4904      	ldr	r1, [pc, #16]	; (8002790 <SD_Json+0x5c>)
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f008 f8e7 	bl	800a954 <siprintf>
}
 8002786:	bf00      	nop
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bd90      	pop	{r4, r7, pc}
 8002790:	0800bef8 	.word	0x0800bef8

08002794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_MspInit+0x54>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_MspInit+0x54>)
 80027a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_MspInit+0x54>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_MspInit+0x54>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_MspInit+0x54>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_MspInit+0x54>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	210f      	movs	r1, #15
 80027d6:	f06f 0001 	mvn.w	r0, #1
 80027da:	f000 fb0d 	bl	8002df8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_SPI_MspInit+0x84>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d12b      	bne.n	8002866 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_SPI_MspInit+0x88>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a17      	ldr	r2, [pc, #92]	; (8002874 <HAL_SPI_MspInit+0x88>)
 8002818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_SPI_MspInit+0x88>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_SPI_MspInit+0x88>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <HAL_SPI_MspInit+0x88>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_SPI_MspInit+0x88>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002846:	23e0      	movs	r3, #224	; 0xe0
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002856:	2305      	movs	r3, #5
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4805      	ldr	r0, [pc, #20]	; (8002878 <HAL_SPI_MspInit+0x8c>)
 8002862:	f000 fb85 	bl	8002f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40013000 	.word	0x40013000
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_UART_MspInit>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_UART_MspInit+0x94>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d133      	bne.n	8002906 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_UART_MspInit+0x98>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_UART_MspInit+0x98>)
 80028a8:	f043 0320 	orr.w	r3, r3, #32
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_UART_MspInit+0x98>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_UART_MspInit+0x98>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a14      	ldr	r2, [pc, #80]	; (8002914 <HAL_UART_MspInit+0x98>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_UART_MspInit+0x98>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028d6:	23c0      	movs	r3, #192	; 0xc0
 80028d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028e6:	2308      	movs	r3, #8
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	4809      	ldr	r0, [pc, #36]	; (8002918 <HAL_UART_MspInit+0x9c>)
 80028f2:	f000 fb3d 	bl	8002f70 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	2047      	movs	r0, #71	; 0x47
 80028fc:	f000 fa7c 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002900:	2047      	movs	r0, #71	; 0x47
 8002902:	f000 fa95 	bl	8002e30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	3728      	adds	r7, #40	; 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40011400 	.word	0x40011400
 8002914:	40023800 	.word	0x40023800
 8002918:	40020800 	.word	0x40020800

0800291c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	2019      	movs	r0, #25
 8002932:	f000 fa61 	bl	8002df8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002936:	2019      	movs	r0, #25
 8002938:	f000 fa7a 	bl	8002e30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_InitTick+0xa4>)
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_InitTick+0xa4>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6453      	str	r3, [r2, #68]	; 0x44
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_InitTick+0xa4>)
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002958:	f107 0210 	add.w	r2, r7, #16
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f001 f8fc 	bl	8003b60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002968:	f001 f8e6 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 800296c:	4603      	mov	r3, r0
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_InitTick+0xa8>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	3b01      	subs	r3, #1
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_InitTick+0xac>)
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <HAL_InitTick+0xb0>)
 8002984:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_InitTick+0xac>)
 8002988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800298c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <HAL_InitTick+0xac>)
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_InitTick+0xac>)
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_InitTick+0xac>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80029a0:	4809      	ldr	r0, [pc, #36]	; (80029c8 <HAL_InitTick+0xac>)
 80029a2:	f001 fd4f 	bl	8004444 <HAL_TIM_Base_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80029ac:	4806      	ldr	r0, [pc, #24]	; (80029c8 <HAL_InitTick+0xac>)
 80029ae:	f001 fda3 	bl	80044f8 <HAL_TIM_Base_Start_IT>
 80029b2:	4603      	mov	r3, r0
 80029b4:	e000      	b.n	80029b8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3730      	adds	r7, #48	; 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	431bde83 	.word	0x431bde83
 80029c8:	200049ac 	.word	0x200049ac
 80029cc:	40010000 	.word	0x40010000

080029d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <NMI_Handler+0x4>

080029d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029da:	e7fe      	b.n	80029da <HardFault_Handler+0x4>

080029dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <MemManage_Handler+0x4>

080029e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e6:	e7fe      	b.n	80029e6 <BusFault_Handler+0x4>

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <UsageFault_Handler+0x4>

080029ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a02:	f001 fde9 	bl	80045d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200049ac 	.word	0x200049ac

08002a10 <USART6_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	UARTIntHandler();
 8002a16:	f7fd fe1d 	bl	8000654 <UARTIntHandler>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 8002a1a:	4809      	ldr	r0, [pc, #36]	; (8002a40 <USART6_IRQHandler+0x30>)
 8002a1c:	f002 f8a0 	bl	8004b60 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	__HAL_UART_CLEAR_PEFLAG(&huart6);
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <USART6_IRQHandler+0x30>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <USART6_IRQHandler+0x30>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END USART1_IRQn 1 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20004490 	.word	0x20004490

08002a44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e00a      	b.n	8002a6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a56:	f3af 8000 	nop.w
 8002a5a:	4601      	mov	r1, r0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	60ba      	str	r2, [r7, #8]
 8002a62:	b2ca      	uxtb	r2, r1
 8002a64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbf0      	blt.n	8002a56 <_read+0x12>
	}

return len;
 8002a74:	687b      	ldr	r3, [r7, #4]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e009      	b.n	8002aa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	60ba      	str	r2, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe fe5f 	bl	800175c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	dbf1      	blt.n	8002a90 <_write+0x12>
	}
	return len;
 8002aac:	687b      	ldr	r3, [r7, #4]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_close>:

int _close(int file)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
	return -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ade:	605a      	str	r2, [r3, #4]
	return 0;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <_isatty>:

int _isatty(int file)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	return 1;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <_sbrk+0x5c>)
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <_sbrk+0x60>)
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <_sbrk+0x64>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <_sbrk+0x64>)
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <_sbrk+0x68>)
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <_sbrk+0x64>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d207      	bcs.n	8002b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b50:	f007 fe46 	bl	800a7e0 <__errno>
 8002b54:	4602      	mov	r2, r0
 8002b56:	230c      	movs	r3, #12
 8002b58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	e009      	b.n	8002b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <_sbrk+0x64>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <_sbrk+0x64>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <_sbrk+0x64>)
 8002b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20020000 	.word	0x20020000
 8002b80:	00000400 	.word	0x00000400
 8002b84:	20000508 	.word	0x20000508
 8002b88:	20004eb0 	.word	0x20004eb0

08002b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <SystemInit+0x20>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <SystemInit+0x20>)
 8002b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bb6:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bbc:	e002      	b.n	8002bc4 <LoopCopyDataInit>

08002bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc2:	3304      	adds	r3, #4

08002bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc8:	d3f9      	bcc.n	8002bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bca:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bcc:	4c0b      	ldr	r4, [pc, #44]	; (8002bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd0:	e001      	b.n	8002bd6 <LoopFillZerobss>

08002bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd4:	3204      	adds	r2, #4

08002bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd8:	d3fb      	bcc.n	8002bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bda:	f7ff ffd7 	bl	8002b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bde:	f007 fe05 	bl	800a7ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be2:	f7fe fc37 	bl	8001454 <main>
  bx  lr    
 8002be6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf0:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8002bf4:	0800c218 	.word	0x0800c218
  ldr r2, =_sbss
 8002bf8:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002bfc:	20004eac 	.word	0x20004eac

08002c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c00:	e7fe      	b.n	8002c00 <ADC_IRQHandler>
	...

08002c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_Init+0x40>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <HAL_Init+0x40>)
 8002c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_Init+0x40>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <HAL_Init+0x40>)
 8002c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_Init+0x40>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <HAL_Init+0x40>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c2c:	2003      	movs	r0, #3
 8002c2e:	f000 f8d8 	bl	8002de2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7ff fe72 	bl	800291c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c38:	f7ff fdac 	bl	8002794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00

08002c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_IncTick+0x20>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_IncTick+0x24>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <HAL_IncTick+0x24>)
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000054 	.word	0x20000054
 8002c6c:	200049f8 	.word	0x200049f8

08002c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return uwTick;
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_GetTick+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	200049f8 	.word	0x200049f8

08002c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <__NVIC_SetPriorityGrouping+0x44>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cba:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <__NVIC_SetPriorityGrouping+0x44>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60d3      	str	r3, [r2, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	f003 0307 	and.w	r3, r3, #7
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db0b      	blt.n	8002d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	4907      	ldr	r1, [pc, #28]	; (8002d24 <__NVIC_EnableIRQ+0x38>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100

08002d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	db0a      	blt.n	8002d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	490c      	ldr	r1, [pc, #48]	; (8002d74 <__NVIC_SetPriority+0x4c>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d50:	e00a      	b.n	8002d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4908      	ldr	r1, [pc, #32]	; (8002d78 <__NVIC_SetPriority+0x50>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	3b04      	subs	r3, #4
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	440b      	add	r3, r1
 8002d66:	761a      	strb	r2, [r3, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000e100 	.word	0xe000e100
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f1c3 0307 	rsb	r3, r3, #7
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	bf28      	it	cs
 8002d9a:	2304      	movcs	r3, #4
 8002d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3304      	adds	r3, #4
 8002da2:	2b06      	cmp	r3, #6
 8002da4:	d902      	bls.n	8002dac <NVIC_EncodePriority+0x30>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3b03      	subs	r3, #3
 8002daa:	e000      	b.n	8002dae <NVIC_EncodePriority+0x32>
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	43d9      	mvns	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	4313      	orrs	r3, r2
         );
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ff4c 	bl	8002c88 <__NVIC_SetPriorityGrouping>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e0a:	f7ff ff61 	bl	8002cd0 <__NVIC_GetPriorityGrouping>
 8002e0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	6978      	ldr	r0, [r7, #20]
 8002e16:	f7ff ffb1 	bl	8002d7c <NVIC_EncodePriority>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff80 	bl	8002d28 <__NVIC_SetPriority>
}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff54 	bl	8002cec <__NVIC_EnableIRQ>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e5a:	f7ff ff09 	bl	8002c70 <HAL_GetTick>
 8002e5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d008      	beq.n	8002e7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e052      	b.n	8002f24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0216 	bic.w	r2, r2, #22
 8002e8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_DMA_Abort+0x62>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0208 	bic.w	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ece:	e013      	b.n	8002ef8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed0:	f7ff fece 	bl	8002c70 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d90c      	bls.n	8002ef8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e015      	b.n	8002f24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e4      	bne.n	8002ed0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	223f      	movs	r2, #63	; 0x3f
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d004      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00c      	b.n	8002f64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2205      	movs	r2, #5
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e16b      	b.n	8003264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f040 815a 	bne.w	800325e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d005      	beq.n	8002fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d130      	bne.n	8003024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0201 	and.w	r2, r3, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d017      	beq.n	8003060 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d123      	bne.n	80030b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80b4 	beq.w	800325e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b5f      	ldr	r3, [pc, #380]	; (8003278 <HAL_GPIO_Init+0x308>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <HAL_GPIO_Init+0x308>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b5c      	ldr	r3, [pc, #368]	; (8003278 <HAL_GPIO_Init+0x308>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003112:	4a5a      	ldr	r2, [pc, #360]	; (800327c <HAL_GPIO_Init+0x30c>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a51      	ldr	r2, [pc, #324]	; (8003280 <HAL_GPIO_Init+0x310>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <HAL_GPIO_Init+0x226>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a50      	ldr	r2, [pc, #320]	; (8003284 <HAL_GPIO_Init+0x314>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d025      	beq.n	8003192 <HAL_GPIO_Init+0x222>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a4f      	ldr	r2, [pc, #316]	; (8003288 <HAL_GPIO_Init+0x318>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <HAL_GPIO_Init+0x21e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4e      	ldr	r2, [pc, #312]	; (800328c <HAL_GPIO_Init+0x31c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x21a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4d      	ldr	r2, [pc, #308]	; (8003290 <HAL_GPIO_Init+0x320>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x216>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4c      	ldr	r2, [pc, #304]	; (8003294 <HAL_GPIO_Init+0x324>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x212>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a4b      	ldr	r2, [pc, #300]	; (8003298 <HAL_GPIO_Init+0x328>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x20e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4a      	ldr	r2, [pc, #296]	; (800329c <HAL_GPIO_Init+0x32c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x20a>
 8003176:	2307      	movs	r3, #7
 8003178:	e00e      	b.n	8003198 <HAL_GPIO_Init+0x228>
 800317a:	2308      	movs	r3, #8
 800317c:	e00c      	b.n	8003198 <HAL_GPIO_Init+0x228>
 800317e:	2306      	movs	r3, #6
 8003180:	e00a      	b.n	8003198 <HAL_GPIO_Init+0x228>
 8003182:	2305      	movs	r3, #5
 8003184:	e008      	b.n	8003198 <HAL_GPIO_Init+0x228>
 8003186:	2304      	movs	r3, #4
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x228>
 800318a:	2303      	movs	r3, #3
 800318c:	e004      	b.n	8003198 <HAL_GPIO_Init+0x228>
 800318e:	2302      	movs	r3, #2
 8003190:	e002      	b.n	8003198 <HAL_GPIO_Init+0x228>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x228>
 8003196:	2300      	movs	r3, #0
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f002 0203 	and.w	r2, r2, #3
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	4093      	lsls	r3, r2
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a8:	4934      	ldr	r1, [pc, #208]	; (800327c <HAL_GPIO_Init+0x30c>)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3302      	adds	r3, #2
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b6:	4b3a      	ldr	r3, [pc, #232]	; (80032a0 <HAL_GPIO_Init+0x330>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031da:	4a31      	ldr	r2, [pc, #196]	; (80032a0 <HAL_GPIO_Init+0x330>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <HAL_GPIO_Init+0x330>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320a:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_GPIO_Init+0x330>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003258:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_GPIO_Init+0x330>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	f67f ae90 	bls.w	8002f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800326c:	bf00      	nop
 800326e:	3724      	adds	r7, #36	; 0x24
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40023800 	.word	0x40023800
 800327c:	40013800 	.word	0x40013800
 8003280:	40020000 	.word	0x40020000
 8003284:	40020400 	.word	0x40020400
 8003288:	40020800 	.word	0x40020800
 800328c:	40020c00 	.word	0x40020c00
 8003290:	40021000 	.word	0x40021000
 8003294:	40021400 	.word	0x40021400
 8003298:	40021800 	.word	0x40021800
 800329c:	40021c00 	.word	0x40021c00
 80032a0:	40013c00 	.word	0x40013c00

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c0:	e003      	b.n	80032ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e264      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d075      	beq.n	80033e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f6:	4ba3      	ldr	r3, [pc, #652]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d00c      	beq.n	800331c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003302:	4ba0      	ldr	r3, [pc, #640]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d112      	bne.n	8003334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b9d      	ldr	r3, [pc, #628]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331a:	d10b      	bne.n	8003334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	4b99      	ldr	r3, [pc, #612]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d05b      	beq.n	80033e0 <HAL_RCC_OscConfig+0x108>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d157      	bne.n	80033e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e23f      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333c:	d106      	bne.n	800334c <HAL_RCC_OscConfig+0x74>
 800333e:	4b91      	ldr	r3, [pc, #580]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a90      	ldr	r2, [pc, #576]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e01d      	b.n	8003388 <HAL_RCC_OscConfig+0xb0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x98>
 8003356:	4b8b      	ldr	r3, [pc, #556]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a8a      	ldr	r2, [pc, #552]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a87      	ldr	r2, [pc, #540]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0xb0>
 8003370:	4b84      	ldr	r3, [pc, #528]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a83      	ldr	r2, [pc, #524]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b81      	ldr	r3, [pc, #516]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a80      	ldr	r2, [pc, #512]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7ff fc6e 	bl	8002c70 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003398:	f7ff fc6a 	bl	8002c70 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e204      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b76      	ldr	r3, [pc, #472]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0xc0>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7ff fc5a 	bl	8002c70 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c0:	f7ff fc56 	bl	8002c70 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e1f0      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	4b6c      	ldr	r3, [pc, #432]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0xe8>
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d063      	beq.n	80034b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ee:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fa:	4b62      	ldr	r3, [pc, #392]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003402:	2b08      	cmp	r3, #8
 8003404:	d11c      	bne.n	8003440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b5f      	ldr	r3, [pc, #380]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	4b5c      	ldr	r3, [pc, #368]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_RCC_OscConfig+0x152>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e1c4      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342a:	4b56      	ldr	r3, [pc, #344]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4952      	ldr	r1, [pc, #328]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	e03a      	b.n	80034b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d020      	beq.n	800348a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003448:	4b4f      	ldr	r3, [pc, #316]	; (8003588 <HAL_RCC_OscConfig+0x2b0>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7ff fc0f 	bl	8002c70 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003456:	f7ff fc0b 	bl	8002c70 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e1a5      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4940      	ldr	r1, [pc, #256]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
 8003488:	e015      	b.n	80034b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348a:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <HAL_RCC_OscConfig+0x2b0>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7ff fbee 	bl	8002c70 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003498:	f7ff fbea 	bl	8002c70 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e184      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d030      	beq.n	8003524 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ca:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_RCC_OscConfig+0x2b4>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7ff fbce 	bl	8002c70 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d8:	f7ff fbca 	bl	8002c70 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e164      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	4b26      	ldr	r3, [pc, #152]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x200>
 80034f6:	e015      	b.n	8003524 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f8:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCC_OscConfig+0x2b4>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fe:	f7ff fbb7 	bl	8002c70 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003506:	f7ff fbb3 	bl	8002c70 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e14d      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 800351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a0 	beq.w	8003672 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x2b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d121      	bne.n	80035b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_RCC_OscConfig+0x2b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a07      	ldr	r2, [pc, #28]	; (8003590 <HAL_RCC_OscConfig+0x2b8>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357a:	f7ff fb79 	bl	8002c70 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003580:	e011      	b.n	80035a6 <HAL_RCC_OscConfig+0x2ce>
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	42470000 	.word	0x42470000
 800358c:	42470e80 	.word	0x42470e80
 8003590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003594:	f7ff fb6c 	bl	8002c70 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e106      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <HAL_RCC_OscConfig+0x4e4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d106      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
 80035ba:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a80      	ldr	r2, [pc, #512]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	e01c      	b.n	8003602 <HAL_RCC_OscConfig+0x32a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d10c      	bne.n	80035ea <HAL_RCC_OscConfig+0x312>
 80035d0:	4b7b      	ldr	r3, [pc, #492]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a7a      	ldr	r2, [pc, #488]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	4b78      	ldr	r3, [pc, #480]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a77      	ldr	r2, [pc, #476]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	e00b      	b.n	8003602 <HAL_RCC_OscConfig+0x32a>
 80035ea:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a74      	ldr	r2, [pc, #464]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a71      	ldr	r2, [pc, #452]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d015      	beq.n	8003636 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7ff fb31 	bl	8002c70 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7ff fb2d 	bl	8002c70 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e0c5      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ee      	beq.n	8003612 <HAL_RCC_OscConfig+0x33a>
 8003634:	e014      	b.n	8003660 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7ff fb1b 	bl	8002c70 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7ff fb17 	bl	8002c70 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0af      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003654:	4b5a      	ldr	r3, [pc, #360]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ee      	bne.n	800363e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003666:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a55      	ldr	r2, [pc, #340]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 809b 	beq.w	80037b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b08      	cmp	r3, #8
 8003686:	d05c      	beq.n	8003742 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d141      	bne.n	8003714 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_RCC_OscConfig+0x4ec>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7ff faeb 	bl	8002c70 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369e:	f7ff fae7 	bl	8002c70 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e081      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	019b      	lsls	r3, r3, #6
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	3b01      	subs	r3, #1
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	061b      	lsls	r3, r3, #24
 80036e0:	4937      	ldr	r1, [pc, #220]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCC_OscConfig+0x4ec>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7ff fac0 	bl	8002c70 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f4:	f7ff fabc 	bl	8002c70 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e056      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x41c>
 8003712:	e04e      	b.n	80037b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCC_OscConfig+0x4ec>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7ff faa9 	bl	8002c70 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003722:	f7ff faa5 	bl	8002c70 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e03f      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCC_OscConfig+0x44a>
 8003740:	e037      	b.n	80037b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e032      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_RCC_OscConfig+0x4e8>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d028      	beq.n	80037ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d121      	bne.n	80037ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d11a      	bne.n	80037ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800377e:	4013      	ands	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003784:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003786:	4293      	cmp	r3, r2
 8003788:	d111      	bne.n	80037ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d107      	bne.n	80037ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40007000 	.word	0x40007000
 80037c0:	40023800 	.word	0x40023800
 80037c4:	42470060 	.word	0x42470060

080037c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0cc      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b68      	ldr	r3, [pc, #416]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d90c      	bls.n	8003804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b65      	ldr	r3, [pc, #404]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0b8      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d020      	beq.n	8003852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a58      	ldr	r2, [pc, #352]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	494d      	ldr	r1, [pc, #308]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d044      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d119      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d003      	beq.n	8003886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	2b03      	cmp	r3, #3
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003886:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e06f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e067      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a6:	4b37      	ldr	r3, [pc, #220]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f023 0203 	bic.w	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4934      	ldr	r1, [pc, #208]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b8:	f7ff f9da 	bl	8002c70 <HAL_GetTick>
 80038bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c0:	f7ff f9d6 	bl	8002c70 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e04f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 020c 	and.w	r2, r3, #12
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d1eb      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d20c      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b22      	ldr	r3, [pc, #136]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e032      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4916      	ldr	r1, [pc, #88]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800394e:	f000 f821 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003952:	4601      	mov	r1, r0
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	5cd3      	ldrb	r3, [r2, r3]
 8003962:	fa21 f303 	lsr.w	r3, r1, r3
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe ffd4 	bl	800291c <HAL_InitTick>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00
 8003984:	40023800 	.word	0x40023800
 8003988:	0800bfcc 	.word	0x0800bfcc
 800398c:	2000004c 	.word	0x2000004c
 8003990:	20000050 	.word	0x20000050

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	2300      	movs	r3, #0
 80039a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039aa:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCC_GetSysClockFreq+0x158>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d007      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x32>
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d008      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x38>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 808d 	bne.w	8003ada <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80039c2:	60bb      	str	r3, [r7, #8]
       break;
 80039c4:	e08c      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c6:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039c8:	60bb      	str	r3, [r7, #8]
      break;
 80039ca:	e089      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039cc:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_GetSysClockFreq+0x158>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d6:	4b45      	ldr	r3, [pc, #276]	; (8003aec <HAL_RCC_GetSysClockFreq+0x158>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d023      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b42      	ldr	r3, [pc, #264]	; (8003aec <HAL_RCC_GetSysClockFreq+0x158>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	f04f 0400 	mov.w	r4, #0
 80039ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	ea03 0501 	and.w	r5, r3, r1
 80039f8:	ea04 0602 	and.w	r6, r4, r2
 80039fc:	4a3d      	ldr	r2, [pc, #244]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039fe:	fb02 f106 	mul.w	r1, r2, r6
 8003a02:	2200      	movs	r2, #0
 8003a04:	fb02 f205 	mul.w	r2, r2, r5
 8003a08:	440a      	add	r2, r1
 8003a0a:	493a      	ldr	r1, [pc, #232]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a0c:	fba5 0101 	umull	r0, r1, r5, r1
 8003a10:	1853      	adds	r3, r2, r1
 8003a12:	4619      	mov	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f04f 0400 	mov.w	r4, #0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	f7fc fc3f 	bl	80002a0 <__aeabi_uldivmod>
 8003a22:	4603      	mov	r3, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e049      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b30      	ldr	r3, [pc, #192]	; (8003aec <HAL_RCC_GetSysClockFreq+0x158>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	ea03 0501 	and.w	r5, r3, r1
 8003a40:	ea04 0602 	and.w	r6, r4, r2
 8003a44:	4629      	mov	r1, r5
 8003a46:	4632      	mov	r2, r6
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	f04f 0400 	mov.w	r4, #0
 8003a50:	0154      	lsls	r4, r2, #5
 8003a52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a56:	014b      	lsls	r3, r1, #5
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	1b49      	subs	r1, r1, r5
 8003a5e:	eb62 0206 	sbc.w	r2, r2, r6
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	f04f 0400 	mov.w	r4, #0
 8003a6a:	0194      	lsls	r4, r2, #6
 8003a6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a70:	018b      	lsls	r3, r1, #6
 8003a72:	1a5b      	subs	r3, r3, r1
 8003a74:	eb64 0402 	sbc.w	r4, r4, r2
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	00e2      	lsls	r2, r4, #3
 8003a82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a86:	00d9      	lsls	r1, r3, #3
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4614      	mov	r4, r2
 8003a8c:	195b      	adds	r3, r3, r5
 8003a8e:	eb44 0406 	adc.w	r4, r4, r6
 8003a92:	f04f 0100 	mov.w	r1, #0
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	02a2      	lsls	r2, r4, #10
 8003a9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aa0:	0299      	lsls	r1, r3, #10
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f04f 0400 	mov.w	r4, #0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	f7fc fbf4 	bl	80002a0 <__aeabi_uldivmod>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_GetSysClockFreq+0x158>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	60bb      	str	r3, [r7, #8]
      break;
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003adc:	60bb      	str	r3, [r7, #8]
      break;
 8003ade:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	00f42400 	.word	0x00f42400
 8003af4:	017d7840 	.word	0x017d7840

08003af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	2000004c 	.word	0x2000004c

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b14:	f7ff fff0 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b18:	4601      	mov	r1, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0a9b      	lsrs	r3, r3, #10
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	0800bfdc 	.word	0x0800bfdc

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b3c:	f7ff ffdc 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b40:	4601      	mov	r1, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0b5b      	lsrs	r3, r3, #13
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4a03      	ldr	r2, [pc, #12]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	0800bfdc 	.word	0x0800bfdc

08003b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	220f      	movs	r2, #15
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCC_GetClockConfig+0x5c>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0203 	and.w	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <HAL_RCC_GetClockConfig+0x5c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_RCC_GetClockConfig+0x5c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_GetClockConfig+0x5c>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	08db      	lsrs	r3, r3, #3
 8003b9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_RCC_GetClockConfig+0x60>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0207 	and.w	r2, r3, #7
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40023c00 	.word	0x40023c00

08003bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07b      	b.n	8003cce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d108      	bne.n	8003bf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be6:	d009      	beq.n	8003bfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	61da      	str	r2, [r3, #28]
 8003bee:	e005      	b.n	8003bfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fe fde8 	bl	80027ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	ea42 0103 	orr.w	r1, r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	f003 0104 	and.w	r1, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0210 	and.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b088      	sub	sp, #32
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_SPI_Transmit+0x22>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e126      	b.n	8003f46 <HAL_SPI_Transmit+0x270>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d00:	f7fe ffb6 	bl	8002c70 <HAL_GetTick>
 8003d04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d002      	beq.n	8003d1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
 8003d18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d1a:	e10b      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_SPI_Transmit+0x52>
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2c:	e102      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2203      	movs	r2, #3
 8003d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	d10f      	bne.n	8003d96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d007      	beq.n	8003db4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbc:	d14b      	bne.n	8003e56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_SPI_Transmit+0xf6>
 8003dc6:	8afb      	ldrh	r3, [r7, #22]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d13e      	bne.n	8003e4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	1c9a      	adds	r2, r3, #2
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003df0:	e02b      	b.n	8003e4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d112      	bne.n	8003e26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	881a      	ldrh	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e24:	e011      	b.n	8003e4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e26:	f7fe ff23 	bl	8002c70 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d803      	bhi.n	8003e3e <HAL_SPI_Transmit+0x168>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d102      	bne.n	8003e44 <HAL_SPI_Transmit+0x16e>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e48:	e074      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ce      	bne.n	8003df2 <HAL_SPI_Transmit+0x11c>
 8003e54:	e04c      	b.n	8003ef0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Transmit+0x18e>
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d140      	bne.n	8003ee6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	7812      	ldrb	r2, [r2, #0]
 8003e70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e8a:	e02c      	b.n	8003ee6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d113      	bne.n	8003ec2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ec0:	e011      	b.n	8003ee6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec2:	f7fe fed5 	bl	8002c70 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d803      	bhi.n	8003eda <HAL_SPI_Transmit+0x204>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Transmit+0x20a>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee4:	e026      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1cd      	bne.n	8003e8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fa63 	bl	80043c0 <SPI_EndRxTxTransaction>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e000      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08c      	sub	sp, #48	; 0x30
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x26>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e18a      	b.n	800428a <HAL_SPI_TransmitReceive+0x33c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f7c:	f7fe fe78 	bl	8002c70 <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f92:	887b      	ldrh	r3, [r7, #2]
 8003f94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d00f      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x70>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fa4:	d107      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x68>
 8003fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d003      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fbc:	e15b      	b.n	8004276 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x82>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x82>
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d103      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fd6:	e14e      	b.n	8004276 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d003      	beq.n	8003fec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2205      	movs	r2, #5
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	887a      	ldrh	r2, [r7, #2]
 8004002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d007      	beq.n	8004040 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004048:	d178      	bne.n	800413c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x10a>
 8004052:	8b7b      	ldrh	r3, [r7, #26]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d166      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407c:	e053      	b.n	8004126 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	d11b      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x176>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_SPI_TransmitReceive+0x176>
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d113      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d119      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x1b8>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d014      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	b292      	uxth	r2, r2
 80040e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	1c9a      	adds	r2, r3, #2
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004102:	2301      	movs	r3, #1
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004106:	f7fe fdb3 	bl	8002c70 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004112:	429a      	cmp	r2, r3
 8004114:	d807      	bhi.n	8004126 <HAL_SPI_TransmitReceive+0x1d8>
 8004116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d003      	beq.n	8004126 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004124:	e0a7      	b.n	8004276 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1a6      	bne.n	800407e <HAL_SPI_TransmitReceive+0x130>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1a1      	bne.n	800407e <HAL_SPI_TransmitReceive+0x130>
 800413a:	e07c      	b.n	8004236 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_SPI_TransmitReceive+0x1fc>
 8004144:	8b7b      	ldrh	r3, [r7, #26]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d16b      	bne.n	8004222 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004170:	e057      	b.n	8004222 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d11c      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x26c>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d017      	beq.n	80041ba <HAL_SPI_TransmitReceive+0x26c>
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d114      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d119      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x2ae>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d014      	beq.n	80041fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041f8:	2301      	movs	r3, #1
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041fc:	f7fe fd38 	bl	8002c70 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004208:	429a      	cmp	r2, r3
 800420a:	d803      	bhi.n	8004214 <HAL_SPI_TransmitReceive+0x2c6>
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d102      	bne.n	800421a <HAL_SPI_TransmitReceive+0x2cc>
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004220:	e029      	b.n	8004276 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1a2      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x224>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d19d      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f8c0 	bl	80043c0 <SPI_EndRxTxTransaction>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d006      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004252:	e010      	b.n	8004276 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	e000      	b.n	8004276 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004274:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004286:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800428a:	4618      	mov	r0, r3
 800428c:	3730      	adds	r7, #48	; 0x30
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a0:	b2db      	uxtb	r3, r3
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042c0:	f7fe fcd6 	bl	8002c70 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4413      	add	r3, r2
 80042ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042d0:	f7fe fcce 	bl	8002c70 <HAL_GetTick>
 80042d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042d6:	4b39      	ldr	r3, [pc, #228]	; (80043bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	015b      	lsls	r3, r3, #5
 80042dc:	0d1b      	lsrs	r3, r3, #20
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e6:	e054      	b.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d050      	beq.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042f0:	f7fe fcbe 	bl	8002c70 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d902      	bls.n	8004306 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d13d      	bne.n	8004382 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004314:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800431e:	d111      	bne.n	8004344 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004328:	d004      	beq.n	8004334 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d107      	bne.n	8004344 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004342:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434c:	d10f      	bne.n	800436e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800436c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e017      	b.n	80043b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	3b01      	subs	r3, #1
 8004390:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d19b      	bne.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	2000004c 	.word	0x2000004c

080043c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <SPI_EndRxTxTransaction+0x7c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <SPI_EndRxTxTransaction+0x80>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	0d5b      	lsrs	r3, r3, #21
 80043d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
 80043e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ea:	d112      	bne.n	8004412 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2200      	movs	r2, #0
 80043f4:	2180      	movs	r1, #128	; 0x80
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff ff5a 	bl	80042b0 <SPI_WaitFlagStateUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d016      	beq.n	8004430 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	f043 0220 	orr.w	r2, r3, #32
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e00f      	b.n	8004432 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3b01      	subs	r3, #1
 800441c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d0f2      	beq.n	8004412 <SPI_EndRxTxTransaction+0x52>
 800442c:	e000      	b.n	8004430 <SPI_EndRxTxTransaction+0x70>
        break;
 800442e:	bf00      	nop
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	2000004c 	.word	0x2000004c
 8004440:	165e9f81 	.word	0x165e9f81

08004444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e041      	b.n	80044da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f839 	bl	80044e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f000 f9d8 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d001      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e04e      	b.n	80045ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a23      	ldr	r2, [pc, #140]	; (80045bc <HAL_TIM_Base_Start_IT+0xc4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d022      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d01d      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d018      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00e      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d111      	bne.n	800459c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b06      	cmp	r3, #6
 8004588:	d010      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	e007      	b.n	80045ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40010000 	.word	0x40010000
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40010400 	.word	0x40010400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40001800 	.word	0x40001800

080045d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d122      	bne.n	8004634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d11b      	bne.n	8004634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0202 	mvn.w	r2, #2
 8004604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8ee 	bl	80047fc <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8e0 	bl	80047e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8f1 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d122      	bne.n	8004688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d11b      	bne.n	8004688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0204 	mvn.w	r2, #4
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8c4 	bl	80047fc <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8b6 	bl	80047e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f8c7 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b08      	cmp	r3, #8
 8004694:	d122      	bne.n	80046dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d11b      	bne.n	80046dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0208 	mvn.w	r2, #8
 80046ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2204      	movs	r2, #4
 80046b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f89a 	bl	80047fc <HAL_TIM_IC_CaptureCallback>
 80046c8:	e005      	b.n	80046d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f88c 	bl	80047e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f89d 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d122      	bne.n	8004730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	d11b      	bne.n	8004730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0210 	mvn.w	r2, #16
 8004700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2208      	movs	r2, #8
 8004706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f870 	bl	80047fc <HAL_TIM_IC_CaptureCallback>
 800471c:	e005      	b.n	800472a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f862 	bl	80047e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f873 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b01      	cmp	r3, #1
 800473c:	d10e      	bne.n	800475c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0201 	mvn.w	r2, #1
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc ffea 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b80      	cmp	r3, #128	; 0x80
 8004768:	d10e      	bne.n	8004788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	d107      	bne.n	8004788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f902 	bl	800498c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d10e      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d107      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f838 	bl	8004824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d10e      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d107      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0220 	mvn.w	r2, #32
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8cc 	bl	8004978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a40      	ldr	r2, [pc, #256]	; (800494c <TIM_Base_SetConfig+0x114>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00f      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <TIM_Base_SetConfig+0x118>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <TIM_Base_SetConfig+0x11c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <TIM_Base_SetConfig+0x120>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3a      	ldr	r2, [pc, #232]	; (800495c <TIM_Base_SetConfig+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2f      	ldr	r2, [pc, #188]	; (800494c <TIM_Base_SetConfig+0x114>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d02b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d027      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2c      	ldr	r2, [pc, #176]	; (8004950 <TIM_Base_SetConfig+0x118>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d023      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <TIM_Base_SetConfig+0x11c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01f      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <TIM_Base_SetConfig+0x120>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a29      	ldr	r2, [pc, #164]	; (800495c <TIM_Base_SetConfig+0x124>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d017      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a28      	ldr	r2, [pc, #160]	; (8004960 <TIM_Base_SetConfig+0x128>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a27      	ldr	r2, [pc, #156]	; (8004964 <TIM_Base_SetConfig+0x12c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a26      	ldr	r2, [pc, #152]	; (8004968 <TIM_Base_SetConfig+0x130>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a25      	ldr	r2, [pc, #148]	; (800496c <TIM_Base_SetConfig+0x134>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a24      	ldr	r2, [pc, #144]	; (8004970 <TIM_Base_SetConfig+0x138>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <TIM_Base_SetConfig+0x13c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <TIM_Base_SetConfig+0x114>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_Base_SetConfig+0xf8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0c      	ldr	r2, [pc, #48]	; (800495c <TIM_Base_SetConfig+0x124>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d103      	bne.n	8004938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	615a      	str	r2, [r3, #20]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40010400 	.word	0x40010400
 8004960:	40014000 	.word	0x40014000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800
 800496c:	40001800 	.word	0x40001800
 8004970:	40001c00 	.word	0x40001c00
 8004974:	40002000 	.word	0x40002000

08004978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e03f      	b.n	8004a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd ff58 	bl	800287c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fc1b 	bl	8005220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b08a      	sub	sp, #40	; 0x28
 8004a3e:	af02      	add	r7, sp, #8
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d17c      	bne.n	8004b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_UART_Transmit+0x2c>
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e075      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_UART_Transmit+0x3e>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e06e      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2221      	movs	r2, #33	; 0x21
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a8e:	f7fe f8ef 	bl	8002c70 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d108      	bne.n	8004abc <HAL_UART_Transmit+0x82>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	e003      	b.n	8004ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004acc:	e02a      	b.n	8004b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2180      	movs	r1, #128	; 0x80
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fa17 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e036      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	3302      	adds	r3, #2
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e007      	b.n	8004b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	3301      	adds	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1cf      	bne.n	8004ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2140      	movs	r1, #64	; 0x40
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f9e7 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e006      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10d      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x52>
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 faa1 	bl	80050f2 <UART_Receive_IT>
      return;
 8004bb0:	e17d      	b.n	8004eae <HAL_UART_IRQHandler+0x34e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80b1 	beq.w	8004d1c <HAL_UART_IRQHandler+0x1bc>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x70>
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a6 	beq.w	8004d1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x90>
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_UART_IRQHandler+0xb0>
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f043 0202 	orr.w	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_UART_IRQHandler+0xd0>
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0204 	orr.w	r2, r3, #4
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00f      	beq.n	8004c5a <HAL_UART_IRQHandler+0xfa>
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <HAL_UART_IRQHandler+0xee>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f043 0208 	orr.w	r2, r3, #8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8120 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x344>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <HAL_UART_IRQHandler+0x11e>
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fa3a 	bl	80050f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x146>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d031      	beq.n	8004d0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f97a 	bl	8004fa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d123      	bne.n	8004d02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d013      	beq.n	8004cfa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	4a77      	ldr	r2, [pc, #476]	; (8004eb4 <HAL_UART_IRQHandler+0x354>)
 8004cd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe f924 	bl	8002f2c <HAL_DMA_Abort_IT>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d016      	beq.n	8004d18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	e00e      	b.n	8004d18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8f0 	bl	8004ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	e00a      	b.n	8004d18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8ec 	bl	8004ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	e006      	b.n	8004d18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8e8 	bl	8004ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d16:	e0c5      	b.n	8004ea4 <HAL_UART_IRQHandler+0x344>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	bf00      	nop
    return;
 8004d1a:	e0c3      	b.n	8004ea4 <HAL_UART_IRQHandler+0x344>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 80a2 	bne.w	8004e6a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 809c 	beq.w	8004e6a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8096 	beq.w	8004e6a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d14f      	bne.n	8004e02 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d6c:	8a3b      	ldrh	r3, [r7, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 809a 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x348>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d78:	8a3a      	ldrh	r2, [r7, #16]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	f080 8094 	bcs.w	8004ea8 <HAL_UART_IRQHandler+0x348>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8a3a      	ldrh	r2, [r7, #16]
 8004d84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d90:	d02b      	beq.n	8004dea <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0210 	bic.w	r2, r2, #16
 8004dde:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fe f831 	bl	8002e4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f87a 	bl	8004ef4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e00:	e052      	b.n	8004ea8 <HAL_UART_IRQHandler+0x348>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d048      	beq.n	8004eac <HAL_UART_IRQHandler+0x34c>
          &&(nb_rx_data > 0U) )
 8004e1a:	8a7b      	ldrh	r3, [r7, #18]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d045      	beq.n	8004eac <HAL_UART_IRQHandler+0x34c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e2e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0210 	bic.w	r2, r2, #16
 8004e5c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e5e:	8a7b      	ldrh	r3, [r7, #18]
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f846 	bl	8004ef4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e68:	e020      	b.n	8004eac <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_UART_IRQHandler+0x326>
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8cf 	bl	8005022 <UART_Transmit_IT>
    return;
 8004e84:	e013      	b.n	8004eae <HAL_UART_IRQHandler+0x34e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <HAL_UART_IRQHandler+0x34e>
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_UART_IRQHandler+0x34e>
  {
    UART_EndTransmit_IT(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f911 	bl	80050c2 <UART_EndTransmit_IT>
    return;
 8004ea0:	bf00      	nop
 8004ea2:	e004      	b.n	8004eae <HAL_UART_IRQHandler+0x34e>
    return;
 8004ea4:	bf00      	nop
 8004ea6:	e002      	b.n	8004eae <HAL_UART_IRQHandler+0x34e>
      return;
 8004ea8:	bf00      	nop
 8004eaa:	e000      	b.n	8004eae <HAL_UART_IRQHandler+0x34e>
      return;
 8004eac:	bf00      	nop
  }
}
 8004eae:	3728      	adds	r7, #40	; 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	08004ffb 	.word	0x08004ffb

08004eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1c:	e02c      	b.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d028      	beq.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f2c:	f7fd fea0 	bl	8002c70 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d21d      	bcs.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e00f      	b.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d0c3      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0210 	bic.w	r2, r2, #16
 8004fde:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff ff63 	bl	8004ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b21      	cmp	r3, #33	; 0x21
 8005034:	d13e      	bne.n	80050b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	d114      	bne.n	800506a <UART_Transmit_IT+0x48>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d110      	bne.n	800506a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800505c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	1c9a      	adds	r2, r3, #2
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	621a      	str	r2, [r3, #32]
 8005068:	e008      	b.n	800507c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	1c59      	adds	r1, r3, #1
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6211      	str	r1, [r2, #32]
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4619      	mov	r1, r3
 800508a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10f      	bne.n	80050b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800509e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	e000      	b.n	80050b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fee8 	bl	8004eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b22      	cmp	r3, #34	; 0x22
 8005104:	f040 8087 	bne.w	8005216 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005110:	d117      	bne.n	8005142 <UART_Receive_IT+0x50>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d113      	bne.n	8005142 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005130:	b29a      	uxth	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	1c9a      	adds	r2, r3, #2
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
 8005140:	e026      	b.n	8005190 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005154:	d007      	beq.n	8005166 <UART_Receive_IT+0x74>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <UART_Receive_IT+0x82>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e008      	b.n	8005186 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29b      	uxth	r3, r3
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4619      	mov	r1, r3
 800519e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d136      	bne.n	8005212 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0220 	bic.w	r2, r2, #32
 80051b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10e      	bne.n	8005202 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0210 	bic.w	r2, r2, #16
 80051f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fe7a 	bl	8004ef4 <HAL_UARTEx_RxEventCallback>
 8005200:	e002      	b.n	8005208 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff fe62 	bl	8004ecc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e002      	b.n	8005218 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e000      	b.n	8005218 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005216:	2302      	movs	r3, #2
  }
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	4313      	orrs	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005262:	f023 030c 	bic.w	r3, r3, #12
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	430b      	orrs	r3, r1
 800526e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4ad0      	ldr	r2, [pc, #832]	; (80055cc <UART_SetConfig+0x3ac>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <UART_SetConfig+0x7a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4ace      	ldr	r2, [pc, #824]	; (80055d0 <UART_SetConfig+0x3b0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d103      	bne.n	80052a2 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800529a:	f7fe fc4d 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	e002      	b.n	80052a8 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052a2:	f7fe fc35 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80052a6:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b0:	f040 80ba 	bne.w	8005428 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	461d      	mov	r5, r3
 80052b8:	f04f 0600 	mov.w	r6, #0
 80052bc:	46a8      	mov	r8, r5
 80052be:	46b1      	mov	r9, r6
 80052c0:	eb18 0308 	adds.w	r3, r8, r8
 80052c4:	eb49 0409 	adc.w	r4, r9, r9
 80052c8:	4698      	mov	r8, r3
 80052ca:	46a1      	mov	r9, r4
 80052cc:	eb18 0805 	adds.w	r8, r8, r5
 80052d0:	eb49 0906 	adc.w	r9, r9, r6
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052e8:	4688      	mov	r8, r1
 80052ea:	4691      	mov	r9, r2
 80052ec:	eb18 0005 	adds.w	r0, r8, r5
 80052f0:	eb49 0106 	adc.w	r1, r9, r6
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	461d      	mov	r5, r3
 80052fa:	f04f 0600 	mov.w	r6, #0
 80052fe:	196b      	adds	r3, r5, r5
 8005300:	eb46 0406 	adc.w	r4, r6, r6
 8005304:	461a      	mov	r2, r3
 8005306:	4623      	mov	r3, r4
 8005308:	f7fa ffca 	bl	80002a0 <__aeabi_uldivmod>
 800530c:	4603      	mov	r3, r0
 800530e:	460c      	mov	r4, r1
 8005310:	461a      	mov	r2, r3
 8005312:	4bb0      	ldr	r3, [pc, #704]	; (80055d4 <UART_SetConfig+0x3b4>)
 8005314:	fba3 2302 	umull	r2, r3, r3, r2
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	461d      	mov	r5, r3
 8005322:	f04f 0600 	mov.w	r6, #0
 8005326:	46a9      	mov	r9, r5
 8005328:	46b2      	mov	sl, r6
 800532a:	eb19 0309 	adds.w	r3, r9, r9
 800532e:	eb4a 040a 	adc.w	r4, sl, sl
 8005332:	4699      	mov	r9, r3
 8005334:	46a2      	mov	sl, r4
 8005336:	eb19 0905 	adds.w	r9, r9, r5
 800533a:	eb4a 0a06 	adc.w	sl, sl, r6
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800534a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800534e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005352:	4689      	mov	r9, r1
 8005354:	4692      	mov	sl, r2
 8005356:	eb19 0005 	adds.w	r0, r9, r5
 800535a:	eb4a 0106 	adc.w	r1, sl, r6
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	461d      	mov	r5, r3
 8005364:	f04f 0600 	mov.w	r6, #0
 8005368:	196b      	adds	r3, r5, r5
 800536a:	eb46 0406 	adc.w	r4, r6, r6
 800536e:	461a      	mov	r2, r3
 8005370:	4623      	mov	r3, r4
 8005372:	f7fa ff95 	bl	80002a0 <__aeabi_uldivmod>
 8005376:	4603      	mov	r3, r0
 8005378:	460c      	mov	r4, r1
 800537a:	461a      	mov	r2, r3
 800537c:	4b95      	ldr	r3, [pc, #596]	; (80055d4 <UART_SetConfig+0x3b4>)
 800537e:	fba3 1302 	umull	r1, r3, r3, r2
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2164      	movs	r1, #100	; 0x64
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	3332      	adds	r3, #50	; 0x32
 8005390:	4a90      	ldr	r2, [pc, #576]	; (80055d4 <UART_SetConfig+0x3b4>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800539e:	4498      	add	r8, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	461d      	mov	r5, r3
 80053a4:	f04f 0600 	mov.w	r6, #0
 80053a8:	46a9      	mov	r9, r5
 80053aa:	46b2      	mov	sl, r6
 80053ac:	eb19 0309 	adds.w	r3, r9, r9
 80053b0:	eb4a 040a 	adc.w	r4, sl, sl
 80053b4:	4699      	mov	r9, r3
 80053b6:	46a2      	mov	sl, r4
 80053b8:	eb19 0905 	adds.w	r9, r9, r5
 80053bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80053c0:	f04f 0100 	mov.w	r1, #0
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053d4:	4689      	mov	r9, r1
 80053d6:	4692      	mov	sl, r2
 80053d8:	eb19 0005 	adds.w	r0, r9, r5
 80053dc:	eb4a 0106 	adc.w	r1, sl, r6
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	461d      	mov	r5, r3
 80053e6:	f04f 0600 	mov.w	r6, #0
 80053ea:	196b      	adds	r3, r5, r5
 80053ec:	eb46 0406 	adc.w	r4, r6, r6
 80053f0:	461a      	mov	r2, r3
 80053f2:	4623      	mov	r3, r4
 80053f4:	f7fa ff54 	bl	80002a0 <__aeabi_uldivmod>
 80053f8:	4603      	mov	r3, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	461a      	mov	r2, r3
 80053fe:	4b75      	ldr	r3, [pc, #468]	; (80055d4 <UART_SetConfig+0x3b4>)
 8005400:	fba3 1302 	umull	r1, r3, r3, r2
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	2164      	movs	r1, #100	; 0x64
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	3332      	adds	r3, #50	; 0x32
 8005412:	4a70      	ldr	r2, [pc, #448]	; (80055d4 <UART_SetConfig+0x3b4>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	f003 0207 	and.w	r2, r3, #7
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4442      	add	r2, r8
 8005424:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005426:	e0cc      	b.n	80055c2 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	469a      	mov	sl, r3
 800542c:	f04f 0b00 	mov.w	fp, #0
 8005430:	46d0      	mov	r8, sl
 8005432:	46d9      	mov	r9, fp
 8005434:	eb18 0308 	adds.w	r3, r8, r8
 8005438:	eb49 0409 	adc.w	r4, r9, r9
 800543c:	4698      	mov	r8, r3
 800543e:	46a1      	mov	r9, r4
 8005440:	eb18 080a 	adds.w	r8, r8, sl
 8005444:	eb49 090b 	adc.w	r9, r9, fp
 8005448:	f04f 0100 	mov.w	r1, #0
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005454:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005458:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800545c:	4688      	mov	r8, r1
 800545e:	4691      	mov	r9, r2
 8005460:	eb1a 0508 	adds.w	r5, sl, r8
 8005464:	eb4b 0609 	adc.w	r6, fp, r9
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4619      	mov	r1, r3
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	f04f 0400 	mov.w	r4, #0
 800547a:	0094      	lsls	r4, r2, #2
 800547c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005480:	008b      	lsls	r3, r1, #2
 8005482:	461a      	mov	r2, r3
 8005484:	4623      	mov	r3, r4
 8005486:	4628      	mov	r0, r5
 8005488:	4631      	mov	r1, r6
 800548a:	f7fa ff09 	bl	80002a0 <__aeabi_uldivmod>
 800548e:	4603      	mov	r3, r0
 8005490:	460c      	mov	r4, r1
 8005492:	461a      	mov	r2, r3
 8005494:	4b4f      	ldr	r3, [pc, #316]	; (80055d4 <UART_SetConfig+0x3b4>)
 8005496:	fba3 2302 	umull	r2, r3, r3, r2
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	469b      	mov	fp, r3
 80054a4:	f04f 0c00 	mov.w	ip, #0
 80054a8:	46d9      	mov	r9, fp
 80054aa:	46e2      	mov	sl, ip
 80054ac:	eb19 0309 	adds.w	r3, r9, r9
 80054b0:	eb4a 040a 	adc.w	r4, sl, sl
 80054b4:	4699      	mov	r9, r3
 80054b6:	46a2      	mov	sl, r4
 80054b8:	eb19 090b 	adds.w	r9, r9, fp
 80054bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054c0:	f04f 0100 	mov.w	r1, #0
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054d4:	4689      	mov	r9, r1
 80054d6:	4692      	mov	sl, r2
 80054d8:	eb1b 0509 	adds.w	r5, fp, r9
 80054dc:	eb4c 060a 	adc.w	r6, ip, sl
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4619      	mov	r1, r3
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	0094      	lsls	r4, r2, #2
 80054f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054f8:	008b      	lsls	r3, r1, #2
 80054fa:	461a      	mov	r2, r3
 80054fc:	4623      	mov	r3, r4
 80054fe:	4628      	mov	r0, r5
 8005500:	4631      	mov	r1, r6
 8005502:	f7fa fecd 	bl	80002a0 <__aeabi_uldivmod>
 8005506:	4603      	mov	r3, r0
 8005508:	460c      	mov	r4, r1
 800550a:	461a      	mov	r2, r3
 800550c:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <UART_SetConfig+0x3b4>)
 800550e:	fba3 1302 	umull	r1, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2164      	movs	r1, #100	; 0x64
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	3332      	adds	r3, #50	; 0x32
 8005520:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <UART_SetConfig+0x3b4>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800552c:	4498      	add	r8, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	469b      	mov	fp, r3
 8005532:	f04f 0c00 	mov.w	ip, #0
 8005536:	46d9      	mov	r9, fp
 8005538:	46e2      	mov	sl, ip
 800553a:	eb19 0309 	adds.w	r3, r9, r9
 800553e:	eb4a 040a 	adc.w	r4, sl, sl
 8005542:	4699      	mov	r9, r3
 8005544:	46a2      	mov	sl, r4
 8005546:	eb19 090b 	adds.w	r9, r9, fp
 800554a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800554e:	f04f 0100 	mov.w	r1, #0
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800555a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800555e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005562:	4689      	mov	r9, r1
 8005564:	4692      	mov	sl, r2
 8005566:	eb1b 0509 	adds.w	r5, fp, r9
 800556a:	eb4c 060a 	adc.w	r6, ip, sl
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4619      	mov	r1, r3
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	0094      	lsls	r4, r2, #2
 8005582:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005586:	008b      	lsls	r3, r1, #2
 8005588:	461a      	mov	r2, r3
 800558a:	4623      	mov	r3, r4
 800558c:	4628      	mov	r0, r5
 800558e:	4631      	mov	r1, r6
 8005590:	f7fa fe86 	bl	80002a0 <__aeabi_uldivmod>
 8005594:	4603      	mov	r3, r0
 8005596:	460c      	mov	r4, r1
 8005598:	461a      	mov	r2, r3
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <UART_SetConfig+0x3b4>)
 800559c:	fba3 1302 	umull	r1, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	2164      	movs	r1, #100	; 0x64
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	3332      	adds	r3, #50	; 0x32
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <UART_SetConfig+0x3b4>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4442      	add	r2, r8
 80055c0:	609a      	str	r2, [r3, #8]
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055cc:	40011000 	.word	0x40011000
 80055d0:	40011400 	.word	0x40011400
 80055d4:	51eb851f 	.word	0x51eb851f

080055d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055dc:	4904      	ldr	r1, [pc, #16]	; (80055f0 <MX_FATFS_Init+0x18>)
 80055de:	4805      	ldr	r0, [pc, #20]	; (80055f4 <MX_FATFS_Init+0x1c>)
 80055e0:	f002 fd00 	bl	8007fe4 <FATFS_LinkDriver>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <MX_FATFS_Init+0x20>)
 80055ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80055ec:	bf00      	nop
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	200049fc 	.word	0x200049fc
 80055f4:	20000058 	.word	0x20000058
 80055f8:	20004a00 	.word	0x20004a00

080055fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005600:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005602:	4618      	mov	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fb fb27 	bl	8000c6c <SD_disk_initialize>
 800561e:	4603      	mov	r3, r0
 8005620:	461a      	mov	r2, r3
 8005622:	4b04      	ldr	r3, [pc, #16]	; (8005634 <USER_initialize+0x28>)
 8005624:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005626:	4b03      	ldr	r3, [pc, #12]	; (8005634 <USER_initialize+0x28>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000055 	.word	0x20000055

08005638 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	4618      	mov	r0, r3
 8005646:	f7fb fbfb 	bl	8000e40 <SD_disk_status>
 800564a:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8005664:	7bf8      	ldrb	r0, [r7, #15]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	f7fb fbfe 	bl	8000e6c <SD_disk_read>
 8005670:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
 8005686:	4603      	mov	r3, r0
 8005688:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800568a:	7bf8      	ldrb	r0, [r7, #15]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	f7fb fc55 	bl	8000f40 <SD_disk_write>
 8005696:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	603a      	str	r2, [r7, #0]
 80056aa:	71fb      	strb	r3, [r7, #7]
 80056ac:	460b      	mov	r3, r1
 80056ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80056b0:	79b9      	ldrb	r1, [r7, #6]
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fb fcc6 	bl	8001048 <SD_disk_ioctl>
 80056bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <disk_status+0x30>)
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	79fa      	ldrb	r2, [r7, #7]
 80056e0:	4905      	ldr	r1, [pc, #20]	; (80056f8 <disk_status+0x30>)
 80056e2:	440a      	add	r2, r1
 80056e4:	7a12      	ldrb	r2, [r2, #8]
 80056e6:	4610      	mov	r0, r2
 80056e8:	4798      	blx	r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000534 	.word	0x20000534

080056fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	4a0d      	ldr	r2, [pc, #52]	; (8005744 <disk_initialize+0x48>)
 800570e:	5cd3      	ldrb	r3, [r2, r3]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d111      	bne.n	8005738 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	4a0b      	ldr	r2, [pc, #44]	; (8005744 <disk_initialize+0x48>)
 8005718:	2101      	movs	r1, #1
 800571a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	4a09      	ldr	r2, [pc, #36]	; (8005744 <disk_initialize+0x48>)
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	79fa      	ldrb	r2, [r7, #7]
 800572a:	4906      	ldr	r1, [pc, #24]	; (8005744 <disk_initialize+0x48>)
 800572c:	440a      	add	r2, r1
 800572e:	7a12      	ldrb	r2, [r2, #8]
 8005730:	4610      	mov	r0, r2
 8005732:	4798      	blx	r3
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000534 	.word	0x20000534

08005748 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005748:	b590      	push	{r4, r7, lr}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <disk_read+0x3c>)
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	689c      	ldr	r4, [r3, #8]
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	4a07      	ldr	r2, [pc, #28]	; (8005784 <disk_read+0x3c>)
 8005768:	4413      	add	r3, r2
 800576a:	7a18      	ldrb	r0, [r3, #8]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	47a0      	blx	r4
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]
  return res;
 8005778:	7dfb      	ldrb	r3, [r7, #23]
}
 800577a:	4618      	mov	r0, r3
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd90      	pop	{r4, r7, pc}
 8005782:	bf00      	nop
 8005784:	20000534 	.word	0x20000534

08005788 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <disk_write+0x3c>)
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	68dc      	ldr	r4, [r3, #12]
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <disk_write+0x3c>)
 80057a8:	4413      	add	r3, r2
 80057aa:	7a18      	ldrb	r0, [r3, #8]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	47a0      	blx	r4
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd90      	pop	{r4, r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000534 	.word	0x20000534

080057c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	603a      	str	r2, [r7, #0]
 80057d2:	71fb      	strb	r3, [r7, #7]
 80057d4:	460b      	mov	r3, r1
 80057d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	4a09      	ldr	r2, [pc, #36]	; (8005800 <disk_ioctl+0x38>)
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	79fa      	ldrb	r2, [r7, #7]
 80057e6:	4906      	ldr	r1, [pc, #24]	; (8005800 <disk_ioctl+0x38>)
 80057e8:	440a      	add	r2, r1
 80057ea:	7a10      	ldrb	r0, [r2, #8]
 80057ec:	79b9      	ldrb	r1, [r7, #6]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	4798      	blx	r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000534 	.word	0x20000534

08005804 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3301      	adds	r3, #1
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	b21a      	sxth	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	b21b      	sxth	r3, r3
 8005820:	4313      	orrs	r3, r2
 8005822:	b21b      	sxth	r3, r3
 8005824:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005826:	89fb      	ldrh	r3, [r7, #14]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3303      	adds	r3, #3
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	3202      	adds	r2, #2
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	3201      	adds	r2, #1
 800585a:	7812      	ldrb	r2, [r2, #0]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
	return rv;
 800586c:	68fb      	ldr	r3, [r7, #12]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	887a      	ldrh	r2, [r7, #2]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	887b      	ldrh	r3, [r7, #2]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	887a      	ldrh	r2, [r7, #2]
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	0a1b      	lsrs	r3, r3, #8
 80058ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00d      	beq.n	800593e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	1c53      	adds	r3, r2, #1
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	1c59      	adds	r1, r3, #1
 800592c:	6179      	str	r1, [r7, #20]
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3b01      	subs	r3, #1
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f1      	bne.n	8005922 <mem_cpy+0x1a>
	}
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800594a:	b480      	push	{r7}
 800594c:	b087      	sub	sp, #28
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	617a      	str	r2, [r7, #20]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3b01      	subs	r3, #1
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f3      	bne.n	800595a <mem_set+0x10>
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800597e:	b480      	push	{r7}
 8005980:	b089      	sub	sp, #36	; 0x24
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	61fa      	str	r2, [r7, #28]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	4619      	mov	r1, r3
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	61ba      	str	r2, [r7, #24]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	1acb      	subs	r3, r1, r3
 80059aa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	607b      	str	r3, [r7, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <mem_cmp+0x40>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0eb      	beq.n	8005996 <mem_cmp+0x18>

	return r;
 80059be:	697b      	ldr	r3, [r7, #20]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3724      	adds	r7, #36	; 0x24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059d6:	e002      	b.n	80059de <chk_chr+0x12>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3301      	adds	r3, #1
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <chk_chr+0x26>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d1f2      	bne.n	80059d8 <chk_chr+0xc>
	return *str;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	781b      	ldrb	r3, [r3, #0]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <lock_fs+0x22>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 fb20 	bl	800805a <ff_req_grant>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <lock_fs+0x22>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <lock_fs+0x24>
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00d      	beq.n	8005a5c <unlock_fs+0x2e>
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	2b0c      	cmp	r3, #12
 8005a44:	d00a      	beq.n	8005a5c <unlock_fs+0x2e>
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	2b0b      	cmp	r3, #11
 8005a4a:	d007      	beq.n	8005a5c <unlock_fs+0x2e>
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d004      	beq.n	8005a5c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f002 fb14 	bl	8008084 <ff_rel_grant>
	}
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e029      	b.n	8005acc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a78:	4a27      	ldr	r2, [pc, #156]	; (8005b18 <chk_lock+0xb4>)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	4413      	add	r3, r2
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01d      	beq.n	8005ac2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a86:	4a24      	ldr	r2, [pc, #144]	; (8005b18 <chk_lock+0xb4>)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	4413      	add	r3, r2
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d116      	bne.n	8005ac6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a98:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <chk_lock+0xb4>)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d10c      	bne.n	8005ac6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005aac:	4a1a      	ldr	r2, [pc, #104]	; (8005b18 <chk_lock+0xb4>)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d102      	bne.n	8005ac6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ac0:	e007      	b.n	8005ad2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d9d2      	bls.n	8005a78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d109      	bne.n	8005aec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <chk_lock+0x80>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d101      	bne.n	8005ae8 <chk_lock+0x84>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e010      	b.n	8005b0a <chk_lock+0xa6>
 8005ae8:	2312      	movs	r3, #18
 8005aea:	e00e      	b.n	8005b0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d108      	bne.n	8005b04 <chk_lock+0xa0>
 8005af2:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <chk_lock+0xb4>)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	4413      	add	r3, r2
 8005afa:	330c      	adds	r3, #12
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b02:	d101      	bne.n	8005b08 <chk_lock+0xa4>
 8005b04:	2310      	movs	r3, #16
 8005b06:	e000      	b.n	8005b0a <chk_lock+0xa6>
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000514 	.word	0x20000514

08005b1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	e002      	b.n	8005b2e <enq_lock+0x12>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d806      	bhi.n	8005b42 <enq_lock+0x26>
 8005b34:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <enq_lock+0x40>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	4413      	add	r3, r2
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f2      	bne.n	8005b28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	bf14      	ite	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	2300      	moveq	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000514 	.word	0x20000514

08005b60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e01f      	b.n	8005bb0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b70:	4a41      	ldr	r2, [pc, #260]	; (8005c78 <inc_lock+0x118>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	4413      	add	r3, r2
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d113      	bne.n	8005baa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b82:	4a3d      	ldr	r2, [pc, #244]	; (8005c78 <inc_lock+0x118>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	4413      	add	r3, r2
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d109      	bne.n	8005baa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b96:	4a38      	ldr	r2, [pc, #224]	; (8005c78 <inc_lock+0x118>)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d006      	beq.n	8005bb8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d9dc      	bls.n	8005b70 <inc_lock+0x10>
 8005bb6:	e000      	b.n	8005bba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005bb8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d132      	bne.n	8005c26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e002      	b.n	8005bcc <inc_lock+0x6c>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d806      	bhi.n	8005be0 <inc_lock+0x80>
 8005bd2:	4a29      	ldr	r2, [pc, #164]	; (8005c78 <inc_lock+0x118>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	4413      	add	r3, r2
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f2      	bne.n	8005bc6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d101      	bne.n	8005bea <inc_lock+0x8a>
 8005be6:	2300      	movs	r3, #0
 8005be8:	e040      	b.n	8005c6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4922      	ldr	r1, [pc, #136]	; (8005c78 <inc_lock+0x118>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	440b      	add	r3, r1
 8005bf6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	491e      	ldr	r1, [pc, #120]	; (8005c78 <inc_lock+0x118>)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	440b      	add	r3, r1
 8005c04:	3304      	adds	r3, #4
 8005c06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	491a      	ldr	r1, [pc, #104]	; (8005c78 <inc_lock+0x118>)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	440b      	add	r3, r1
 8005c14:	3308      	adds	r3, #8
 8005c16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c18:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <inc_lock+0x118>)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	4413      	add	r3, r2
 8005c20:	330c      	adds	r3, #12
 8005c22:	2200      	movs	r2, #0
 8005c24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <inc_lock+0xe0>
 8005c2c:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <inc_lock+0x118>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	4413      	add	r3, r2
 8005c34:	330c      	adds	r3, #12
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <inc_lock+0xe0>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e015      	b.n	8005c6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <inc_lock+0xf8>
 8005c46:	4a0c      	ldr	r2, [pc, #48]	; (8005c78 <inc_lock+0x118>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	4413      	add	r3, r2
 8005c4e:	330c      	adds	r3, #12
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	e001      	b.n	8005c5c <inc_lock+0xfc>
 8005c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c5c:	4906      	ldr	r1, [pc, #24]	; (8005c78 <inc_lock+0x118>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	440b      	add	r3, r1
 8005c64:	330c      	adds	r3, #12
 8005c66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	20000514 	.word	0x20000514

08005c7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d825      	bhi.n	8005cdc <dec_lock+0x60>
		n = Files[i].ctr;
 8005c90:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <dec_lock+0x74>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	4413      	add	r3, r2
 8005c98:	330c      	adds	r3, #12
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c9e:	89fb      	ldrh	r3, [r7, #14]
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca4:	d101      	bne.n	8005caa <dec_lock+0x2e>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005caa:	89fb      	ldrh	r3, [r7, #14]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <dec_lock+0x3a>
 8005cb0:	89fb      	ldrh	r3, [r7, #14]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005cb6:	4a0e      	ldr	r2, [pc, #56]	; (8005cf0 <dec_lock+0x74>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	4413      	add	r3, r2
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	89fa      	ldrh	r2, [r7, #14]
 8005cc2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005cc4:	89fb      	ldrh	r3, [r7, #14]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <dec_lock+0x5a>
 8005cca:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <dec_lock+0x74>)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	737b      	strb	r3, [r7, #13]
 8005cda:	e001      	b.n	8005ce0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005cdc:	2302      	movs	r3, #2
 8005cde:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005ce0:	7b7b      	ldrb	r3, [r7, #13]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20000514 	.word	0x20000514

08005cf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e010      	b.n	8005d24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d02:	4a0d      	ldr	r2, [pc, #52]	; (8005d38 <clear_lock+0x44>)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	4413      	add	r3, r2
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d105      	bne.n	8005d1e <clear_lock+0x2a>
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <clear_lock+0x44>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	4413      	add	r3, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d9eb      	bls.n	8005d02 <clear_lock+0xe>
	}
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000514 	.word	0x20000514

08005d3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d034      	beq.n	8005dba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	7858      	ldrb	r0, [r3, #1]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d60:	2301      	movs	r3, #1
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	f7ff fd10 	bl	8005788 <disk_write>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
 8005d72:	e022      	b.n	8005dba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	1ad2      	subs	r2, r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d217      	bcs.n	8005dba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	789b      	ldrb	r3, [r3, #2]
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e010      	b.n	8005db4 <sync_window+0x78>
					wsect += fs->fsize;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4413      	add	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	7858      	ldrb	r0, [r3, #1]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005da6:	2301      	movs	r3, #1
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	f7ff fced 	bl	8005788 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d8eb      	bhi.n	8005d92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d01b      	beq.n	8005e14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ffad 	bl	8005d3c <sync_window>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d113      	bne.n	8005e14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7858      	ldrb	r0, [r3, #1]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005df6:	2301      	movs	r3, #1
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	f7ff fca5 	bl	8005748 <disk_read>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
 8005e08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ff87 	bl	8005d3c <sync_window>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d158      	bne.n	8005eea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d148      	bne.n	8005ed2 <sync_fs+0xb2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	791b      	ldrb	r3, [r3, #4]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d144      	bne.n	8005ed2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3334      	adds	r3, #52	; 0x34
 8005e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fd79 	bl	800594a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3334      	adds	r3, #52	; 0x34
 8005e5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fd08 	bl	800587a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3334      	adds	r3, #52	; 0x34
 8005e6e:	4921      	ldr	r1, [pc, #132]	; (8005ef4 <sync_fs+0xd4>)
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fd1d 	bl	80058b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3334      	adds	r3, #52	; 0x34
 8005e7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e7e:	491e      	ldr	r1, [pc, #120]	; (8005ef8 <sync_fs+0xd8>)
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fd15 	bl	80058b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3334      	adds	r3, #52	; 0x34
 8005e8a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7ff fd0b 	bl	80058b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3334      	adds	r3, #52	; 0x34
 8005e9e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7ff fd01 	bl	80058b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7858      	ldrb	r0, [r3, #1]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f7ff fc5e 	bl	8005788 <disk_write>
			fs->fsi_flag = 0;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fc74 	bl	80057c8 <disk_ioctl>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <sync_fs+0xca>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	41615252 	.word	0x41615252
 8005ef8:	61417272 	.word	0x61417272

08005efc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	3b02      	subs	r3, #2
 8005f0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	3b02      	subs	r3, #2
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d301      	bcc.n	8005f1c <clust2sect+0x20>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e008      	b.n	8005f2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	895b      	ldrh	r3, [r3, #10]
 8005f20:	461a      	mov	r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	fb03 f202 	mul.w	r2, r3, r2
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	4413      	add	r3, r2
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d904      	bls.n	8005f5a <get_fat+0x20>
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d302      	bcc.n	8005f60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e08c      	b.n	800607a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295
 8005f64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d045      	beq.n	8005ffa <get_fat+0xc0>
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d05d      	beq.n	800602e <get_fat+0xf4>
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d177      	bne.n	8006066 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	0a5b      	lsrs	r3, r3, #9
 8005f8c:	4413      	add	r3, r2
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6938      	ldr	r0, [r7, #16]
 8005f92:	f7ff ff17 	bl	8005dc4 <move_window>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d167      	bne.n	800606c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	60fa      	str	r2, [r7, #12]
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fae:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	0a5b      	lsrs	r3, r3, #9
 8005fb8:	4413      	add	r3, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6938      	ldr	r0, [r7, #16]
 8005fbe:	f7ff ff01 	bl	8005dc4 <move_window>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d153      	bne.n	8006070 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <get_fat+0xb6>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	091b      	lsrs	r3, r3, #4
 8005fee:	e002      	b.n	8005ff6 <get_fat+0xbc>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff6:	617b      	str	r3, [r7, #20]
			break;
 8005ff8:	e03f      	b.n	800607a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	4413      	add	r3, r2
 8006004:	4619      	mov	r1, r3
 8006006:	6938      	ldr	r0, [r7, #16]
 8006008:	f7ff fedc 	bl	8005dc4 <move_window>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d130      	bne.n	8006074 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006020:	4413      	add	r3, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fbee 	bl	8005804 <ld_word>
 8006028:	4603      	mov	r3, r0
 800602a:	617b      	str	r3, [r7, #20]
			break;
 800602c:	e025      	b.n	800607a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	09db      	lsrs	r3, r3, #7
 8006036:	4413      	add	r3, r2
 8006038:	4619      	mov	r1, r3
 800603a:	6938      	ldr	r0, [r7, #16]
 800603c:	f7ff fec2 	bl	8005dc4 <move_window>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d118      	bne.n	8006078 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006054:	4413      	add	r3, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fbec 	bl	8005834 <ld_dword>
 800605c:	4603      	mov	r3, r0
 800605e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006062:	617b      	str	r3, [r7, #20]
			break;
 8006064:	e009      	b.n	800607a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006066:	2301      	movs	r3, #1
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e006      	b.n	800607a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800606c:	bf00      	nop
 800606e:	e004      	b.n	800607a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006070:	bf00      	nop
 8006072:	e002      	b.n	800607a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006078:	bf00      	nop
		}
	}

	return val;
 800607a:	697b      	ldr	r3, [r7, #20]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b089      	sub	sp, #36	; 0x24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006090:	2302      	movs	r3, #2
 8006092:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b01      	cmp	r3, #1
 8006098:	f240 80d6 	bls.w	8006248 <put_fat+0x1c4>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	f080 80d0 	bcs.w	8006248 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d073      	beq.n	8006198 <put_fat+0x114>
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	f000 8091 	beq.w	80061d8 <put_fat+0x154>
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	f040 80c6 	bne.w	8006248 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4413      	add	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	0a5b      	lsrs	r3, r3, #9
 80060d2:	4413      	add	r3, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fe74 	bl	8005dc4 <move_window>
 80060dc:	4603      	mov	r3, r0
 80060de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060e0:	7ffb      	ldrb	r3, [r7, #31]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 80a9 	bne.w	800623a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	1c59      	adds	r1, r3, #1
 80060f2:	61b9      	str	r1, [r7, #24]
 80060f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f8:	4413      	add	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <put_fat+0x9e>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	b25b      	sxtb	r3, r3
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	b25a      	sxtb	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	b25b      	sxtb	r3, r3
 800611a:	4313      	orrs	r3, r2
 800611c:	b25b      	sxtb	r3, r3
 800611e:	b2db      	uxtb	r3, r3
 8006120:	e001      	b.n	8006126 <put_fat+0xa2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	0a5b      	lsrs	r3, r3, #9
 8006138:	4413      	add	r3, r2
 800613a:	4619      	mov	r1, r3
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fe41 	bl	8005dc4 <move_window>
 8006142:	4603      	mov	r3, r0
 8006144:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006146:	7ffb      	ldrb	r3, [r7, #31]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d178      	bne.n	800623e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006158:	4413      	add	r3, r2
 800615a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <put_fat+0xea>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	b2db      	uxtb	r3, r3
 800616c:	e00e      	b.n	800618c <put_fat+0x108>
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b25b      	sxtb	r3, r3
 8006174:	f023 030f 	bic.w	r3, r3, #15
 8006178:	b25a      	sxtb	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	b25b      	sxtb	r3, r3
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	b25b      	sxtb	r3, r3
 8006186:	4313      	orrs	r3, r2
 8006188:	b25b      	sxtb	r3, r3
 800618a:	b2db      	uxtb	r3, r3
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	70da      	strb	r2, [r3, #3]
			break;
 8006196:	e057      	b.n	8006248 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	4413      	add	r3, r2
 80061a2:	4619      	mov	r1, r3
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff fe0d 	bl	8005dc4 <move_window>
 80061aa:	4603      	mov	r3, r0
 80061ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061ae:	7ffb      	ldrb	r3, [r7, #31]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d146      	bne.n	8006242 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80061c2:	4413      	add	r3, r2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	b292      	uxth	r2, r2
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fb55 	bl	800587a <st_word>
			fs->wflag = 1;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	70da      	strb	r2, [r3, #3]
			break;
 80061d6:	e037      	b.n	8006248 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	09db      	lsrs	r3, r3, #7
 80061e0:	4413      	add	r3, r2
 80061e2:	4619      	mov	r1, r3
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff fded 	bl	8005dc4 <move_window>
 80061ea:	4603      	mov	r3, r0
 80061ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061ee:	7ffb      	ldrb	r3, [r7, #31]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d128      	bne.n	8006246 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006208:	4413      	add	r3, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fb12 	bl	8005834 <ld_dword>
 8006210:	4603      	mov	r3, r0
 8006212:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006216:	4323      	orrs	r3, r4
 8006218:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006228:	4413      	add	r3, r2
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fb3f 	bl	80058b0 <st_dword>
			fs->wflag = 1;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	70da      	strb	r2, [r3, #3]
			break;
 8006238:	e006      	b.n	8006248 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800623a:	bf00      	nop
 800623c:	e004      	b.n	8006248 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800623e:	bf00      	nop
 8006240:	e002      	b.n	8006248 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006246:	bf00      	nop
		}
	}
	return res;
 8006248:	7ffb      	ldrb	r3, [r7, #31]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3724      	adds	r7, #36	; 0x24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd90      	pop	{r4, r7, pc}

08006252 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b088      	sub	sp, #32
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d904      	bls.n	8006278 <remove_chain+0x26>
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	429a      	cmp	r2, r3
 8006276:	d301      	bcc.n	800627c <remove_chain+0x2a>
 8006278:	2302      	movs	r3, #2
 800627a:	e04b      	b.n	8006314 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00c      	beq.n	800629c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	69b8      	ldr	r0, [r7, #24]
 800628a:	f7ff fefb 	bl	8006084 <put_fat>
 800628e:	4603      	mov	r3, r0
 8006290:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006292:	7ffb      	ldrb	r3, [r7, #31]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <remove_chain+0x4a>
 8006298:	7ffb      	ldrb	r3, [r7, #31]
 800629a:	e03b      	b.n	8006314 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff fe4b 	bl	8005f3a <get_fat>
 80062a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d031      	beq.n	8006310 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <remove_chain+0x64>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e02e      	b.n	8006314 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d101      	bne.n	80062c2 <remove_chain+0x70>
 80062be:	2301      	movs	r3, #1
 80062c0:	e028      	b.n	8006314 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80062c2:	2200      	movs	r2, #0
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	69b8      	ldr	r0, [r7, #24]
 80062c8:	f7ff fedc 	bl	8006084 <put_fat>
 80062cc:	4603      	mov	r3, r0
 80062ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80062d0:	7ffb      	ldrb	r3, [r7, #31]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <remove_chain+0x88>
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
 80062d8:	e01c      	b.n	8006314 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	3b02      	subs	r3, #2
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d20b      	bcs.n	8006300 <remove_chain+0xae>
			fs->free_clst++;
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	791b      	ldrb	r3, [r3, #4]
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d3c6      	bcc.n	800629c <remove_chain+0x4a>
 800630e:	e000      	b.n	8006312 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006310:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10d      	bne.n	800634e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <create_chain+0x2c>
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	429a      	cmp	r2, r3
 8006346:	d31b      	bcc.n	8006380 <create_chain+0x64>
 8006348:	2301      	movs	r3, #1
 800634a:	61bb      	str	r3, [r7, #24]
 800634c:	e018      	b.n	8006380 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fdf2 	bl	8005f3a <get_fat>
 8006356:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d801      	bhi.n	8006362 <create_chain+0x46>
 800635e:	2301      	movs	r3, #1
 8006360:	e070      	b.n	8006444 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d101      	bne.n	800636e <create_chain+0x52>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	e06a      	b.n	8006444 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	429a      	cmp	r2, r3
 8006376:	d201      	bcs.n	800637c <create_chain+0x60>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	e063      	b.n	8006444 <create_chain+0x128>
		scl = clst;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	429a      	cmp	r2, r3
 8006392:	d307      	bcc.n	80063a4 <create_chain+0x88>
				ncl = 2;
 8006394:	2302      	movs	r3, #2
 8006396:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	429a      	cmp	r2, r3
 800639e:	d901      	bls.n	80063a4 <create_chain+0x88>
 80063a0:	2300      	movs	r3, #0
 80063a2:	e04f      	b.n	8006444 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fdc7 	bl	8005f3a <get_fat>
 80063ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d003      	beq.n	80063c2 <create_chain+0xa6>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d101      	bne.n	80063c6 <create_chain+0xaa>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	e03e      	b.n	8006444 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d1da      	bne.n	8006384 <create_chain+0x68>
 80063ce:	2300      	movs	r3, #0
 80063d0:	e038      	b.n	8006444 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80063d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295
 80063d8:	69f9      	ldr	r1, [r7, #28]
 80063da:	6938      	ldr	r0, [r7, #16]
 80063dc:	f7ff fe52 	bl	8006084 <put_fat>
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <create_chain+0xe2>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d006      	beq.n	80063fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6938      	ldr	r0, [r7, #16]
 80063f6:	f7ff fe45 	bl	8006084 <put_fat>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d116      	bne.n	8006432 <create_chain+0x116>
		fs->last_clst = ncl;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	3b02      	subs	r3, #2
 8006414:	429a      	cmp	r2, r3
 8006416:	d804      	bhi.n	8006422 <create_chain+0x106>
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	1e5a      	subs	r2, r3, #1
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	791b      	ldrb	r3, [r3, #4]
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	711a      	strb	r2, [r3, #4]
 8006430:	e007      	b.n	8006442 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d102      	bne.n	800643e <create_chain+0x122>
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	e000      	b.n	8006440 <create_chain+0x124>
 800643e:	2301      	movs	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006442:	69fb      	ldr	r3, [r7, #28]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	3304      	adds	r3, #4
 8006462:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	0a5b      	lsrs	r3, r3, #9
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	8952      	ldrh	r2, [r2, #10]
 800646c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006470:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1d1a      	adds	r2, r3, #4
 8006476:	613a      	str	r2, [r7, #16]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <clmt_clust+0x3a>
 8006482:	2300      	movs	r3, #0
 8006484:	e010      	b.n	80064a8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	429a      	cmp	r2, r3
 800648c:	d307      	bcc.n	800649e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	3304      	adds	r3, #4
 800649a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800649c:	e7e9      	b.n	8006472 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800649e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064ca:	d204      	bcs.n	80064d6 <dir_sdi+0x22>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <dir_sdi+0x26>
		return FR_INT_ERR;
 80064d6:	2302      	movs	r3, #2
 80064d8:	e063      	b.n	80065a2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <dir_sdi+0x46>
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d902      	bls.n	80064fa <dir_sdi+0x46>
		clst = fs->dirbase;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10c      	bne.n	800651a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	8912      	ldrh	r2, [r2, #8]
 8006508:	4293      	cmp	r3, r2
 800650a:	d301      	bcc.n	8006510 <dir_sdi+0x5c>
 800650c:	2302      	movs	r3, #2
 800650e:	e048      	b.n	80065a2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	61da      	str	r2, [r3, #28]
 8006518:	e029      	b.n	800656e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	895b      	ldrh	r3, [r3, #10]
 800651e:	025b      	lsls	r3, r3, #9
 8006520:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006522:	e019      	b.n	8006558 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6979      	ldr	r1, [r7, #20]
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff fd06 	bl	8005f3a <get_fat>
 800652e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d101      	bne.n	800653c <dir_sdi+0x88>
 8006538:	2301      	movs	r3, #1
 800653a:	e032      	b.n	80065a2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d904      	bls.n	800654c <dir_sdi+0x98>
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	429a      	cmp	r2, r3
 800654a:	d301      	bcc.n	8006550 <dir_sdi+0x9c>
 800654c:	2302      	movs	r3, #2
 800654e:	e028      	b.n	80065a2 <dir_sdi+0xee>
			ofs -= csz;
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	429a      	cmp	r2, r3
 800655e:	d2e1      	bcs.n	8006524 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006560:	6979      	ldr	r1, [r7, #20]
 8006562:	6938      	ldr	r0, [r7, #16]
 8006564:	f7ff fcca 	bl	8005efc <clust2sect>
 8006568:	4602      	mov	r2, r0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <dir_sdi+0xcc>
 800657c:	2302      	movs	r3, #2
 800657e:	e010      	b.n	80065a2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	0a5b      	lsrs	r3, r3, #9
 8006588:	441a      	add	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659a:	441a      	add	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	3320      	adds	r3, #32
 80065c0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <dir_next+0x28>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065d0:	d301      	bcc.n	80065d6 <dir_next+0x2c>
 80065d2:	2304      	movs	r3, #4
 80065d4:	e0aa      	b.n	800672c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f040 8098 	bne.w	8006712 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	8912      	ldrh	r2, [r2, #8]
 80065fc:	4293      	cmp	r3, r2
 80065fe:	f0c0 8088 	bcc.w	8006712 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	61da      	str	r2, [r3, #28]
 8006608:	2304      	movs	r3, #4
 800660a:	e08f      	b.n	800672c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	0a5b      	lsrs	r3, r3, #9
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	8952      	ldrh	r2, [r2, #10]
 8006614:	3a01      	subs	r2, #1
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d17a      	bne.n	8006712 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f7ff fc88 	bl	8005f3a <get_fat>
 800662a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d801      	bhi.n	8006636 <dir_next+0x8c>
 8006632:	2302      	movs	r3, #2
 8006634:	e07a      	b.n	800672c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d101      	bne.n	8006642 <dir_next+0x98>
 800663e:	2301      	movs	r3, #1
 8006640:	e074      	b.n	800672c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	429a      	cmp	r2, r3
 800664a:	d358      	bcc.n	80066fe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	61da      	str	r2, [r3, #28]
 8006658:	2304      	movs	r3, #4
 800665a:	e067      	b.n	800672c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	4619      	mov	r1, r3
 8006664:	4610      	mov	r0, r2
 8006666:	f7ff fe59 	bl	800631c <create_chain>
 800666a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <dir_next+0xcc>
 8006672:	2307      	movs	r3, #7
 8006674:	e05a      	b.n	800672c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <dir_next+0xd6>
 800667c:	2302      	movs	r3, #2
 800667e:	e055      	b.n	800672c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d101      	bne.n	800668c <dir_next+0xe2>
 8006688:	2301      	movs	r3, #1
 800668a:	e04f      	b.n	800672c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff fb55 	bl	8005d3c <sync_window>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <dir_next+0xf2>
 8006698:	2301      	movs	r3, #1
 800669a:	e047      	b.n	800672c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3334      	adds	r3, #52	; 0x34
 80066a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff f94f 	bl	800594a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	6979      	ldr	r1, [r7, #20]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff fc22 	bl	8005efc <clust2sect>
 80066b8:	4602      	mov	r2, r0
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
 80066be:	e012      	b.n	80066e6 <dir_next+0x13c>
						fs->wflag = 1;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff fb38 	bl	8005d3c <sync_window>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <dir_next+0x12c>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e02a      	b.n	800672c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	3301      	adds	r3, #1
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	895b      	ldrh	r3, [r3, #10]
 80066ea:	461a      	mov	r2, r3
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d3e6      	bcc.n	80066c0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006704:	6979      	ldr	r1, [r7, #20]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff fbf8 	bl	8005efc <clust2sect>
 800670c:	4602      	mov	r2, r0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff feb4 	bl	80064b4 <dir_sdi>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d12b      	bne.n	80067ae <dir_alloc+0x7a>
		n = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	4619      	mov	r1, r3
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff fb2f 	bl	8005dc4 <move_window>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d11d      	bne.n	80067ac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2be5      	cmp	r3, #229	; 0xe5
 8006778:	d004      	beq.n	8006784 <dir_alloc+0x50>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d107      	bne.n	8006794 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	3301      	adds	r3, #1
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d102      	bne.n	8006798 <dir_alloc+0x64>
 8006792:	e00c      	b.n	80067ae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006798:	2101      	movs	r1, #1
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff ff05 	bl	80065aa <dir_next>
 80067a0:	4603      	mov	r3, r0
 80067a2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0d7      	beq.n	800675a <dir_alloc+0x26>
 80067aa:	e000      	b.n	80067ae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80067ac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d101      	bne.n	80067b8 <dir_alloc+0x84>
 80067b4:	2307      	movs	r3, #7
 80067b6:	75fb      	strb	r3, [r7, #23]
	return res;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	331a      	adds	r3, #26
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff f817 	bl	8005804 <ld_word>
 80067d6:	4603      	mov	r3, r0
 80067d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d109      	bne.n	80067f6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	3314      	adds	r3, #20
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff f80c 	bl	8005804 <ld_word>
 80067ec:	4603      	mov	r3, r0
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80067f6:	68fb      	ldr	r3, [r7, #12]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	331a      	adds	r3, #26
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	b292      	uxth	r2, r2
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff f82f 	bl	800587a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d109      	bne.n	8006838 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f103 0214 	add.w	r2, r3, #20
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	b29b      	uxth	r3, r3
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7ff f821 	bl	800587a <st_word>
	}
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800684e:	2100      	movs	r1, #0
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff fe2f 	bl	80064b4 <dir_sdi>
 8006856:	4603      	mov	r3, r0
 8006858:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <dir_find+0x24>
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	e03e      	b.n	80068e2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	4619      	mov	r1, r3
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f7ff faaa 	bl	8005dc4 <move_window>
 8006870:	4603      	mov	r3, r0
 8006872:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d12f      	bne.n	80068da <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <dir_find+0x4e>
 8006888:	2304      	movs	r3, #4
 800688a:	75fb      	strb	r3, [r7, #23]
 800688c:	e028      	b.n	80068e0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	330b      	adds	r3, #11
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800689a:	b2da      	uxtb	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	330b      	adds	r3, #11
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <dir_find+0x86>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a18      	ldr	r0, [r3, #32]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3324      	adds	r3, #36	; 0x24
 80068b8:	220b      	movs	r2, #11
 80068ba:	4619      	mov	r1, r3
 80068bc:	f7ff f85f 	bl	800597e <mem_cmp>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00b      	beq.n	80068de <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff fe6e 	bl	80065aa <dir_next>
 80068ce:	4603      	mov	r3, r0
 80068d0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0c5      	beq.n	8006864 <dir_find+0x24>
 80068d8:	e002      	b.n	80068e0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80068de:	bf00      	nop

	return res;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80068f8:	2101      	movs	r1, #1
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ff1a 	bl	8006734 <dir_alloc>
 8006900:	4603      	mov	r3, r0
 8006902:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d11c      	bne.n	8006944 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	4619      	mov	r1, r3
 8006910:	68b8      	ldr	r0, [r7, #8]
 8006912:	f7ff fa57 	bl	8005dc4 <move_window>
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d111      	bne.n	8006944 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	2220      	movs	r2, #32
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff f80e 	bl	800594a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a18      	ldr	r0, [r3, #32]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3324      	adds	r3, #36	; 0x24
 8006936:	220b      	movs	r2, #11
 8006938:	4619      	mov	r1, r3
 800693a:	f7fe ffe5 	bl	8005908 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2201      	movs	r2, #1
 8006942:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3324      	adds	r3, #36	; 0x24
 8006964:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006966:	220b      	movs	r2, #11
 8006968:	2120      	movs	r1, #32
 800696a:	68b8      	ldr	r0, [r7, #8]
 800696c:	f7fe ffed 	bl	800594a <mem_set>
	si = i = 0; ni = 8;
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	2308      	movs	r3, #8
 800697a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	617a      	str	r2, [r7, #20]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800698a:	7ffb      	ldrb	r3, [r7, #31]
 800698c:	2b20      	cmp	r3, #32
 800698e:	d94e      	bls.n	8006a2e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006990:	7ffb      	ldrb	r3, [r7, #31]
 8006992:	2b2f      	cmp	r3, #47	; 0x2f
 8006994:	d006      	beq.n	80069a4 <create_name+0x54>
 8006996:	7ffb      	ldrb	r3, [r7, #31]
 8006998:	2b5c      	cmp	r3, #92	; 0x5c
 800699a:	d110      	bne.n	80069be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800699c:	e002      	b.n	80069a4 <create_name+0x54>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	3301      	adds	r3, #1
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b2f      	cmp	r3, #47	; 0x2f
 80069ae:	d0f6      	beq.n	800699e <create_name+0x4e>
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	4413      	add	r3, r2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b5c      	cmp	r3, #92	; 0x5c
 80069ba:	d0f0      	beq.n	800699e <create_name+0x4e>
			break;
 80069bc:	e038      	b.n	8006a30 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80069be:	7ffb      	ldrb	r3, [r7, #31]
 80069c0:	2b2e      	cmp	r3, #46	; 0x2e
 80069c2:	d003      	beq.n	80069cc <create_name+0x7c>
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d30c      	bcc.n	80069e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b0b      	cmp	r3, #11
 80069d0:	d002      	beq.n	80069d8 <create_name+0x88>
 80069d2:	7ffb      	ldrb	r3, [r7, #31]
 80069d4:	2b2e      	cmp	r3, #46	; 0x2e
 80069d6:	d001      	beq.n	80069dc <create_name+0x8c>
 80069d8:	2306      	movs	r3, #6
 80069da:	e044      	b.n	8006a66 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80069dc:	2308      	movs	r3, #8
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	230b      	movs	r3, #11
 80069e2:	61bb      	str	r3, [r7, #24]
			continue;
 80069e4:	e022      	b.n	8006a2c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80069e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	da04      	bge.n	80069f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80069ee:	7ffb      	ldrb	r3, [r7, #31]
 80069f0:	3b80      	subs	r3, #128	; 0x80
 80069f2:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <create_name+0x120>)
 80069f4:	5cd3      	ldrb	r3, [r2, r3]
 80069f6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80069f8:	7ffb      	ldrb	r3, [r7, #31]
 80069fa:	4619      	mov	r1, r3
 80069fc:	481d      	ldr	r0, [pc, #116]	; (8006a74 <create_name+0x124>)
 80069fe:	f7fe ffe5 	bl	80059cc <chk_chr>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <create_name+0xbc>
 8006a08:	2306      	movs	r3, #6
 8006a0a:	e02c      	b.n	8006a66 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006a0c:	7ffb      	ldrb	r3, [r7, #31]
 8006a0e:	2b60      	cmp	r3, #96	; 0x60
 8006a10:	d905      	bls.n	8006a1e <create_name+0xce>
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
 8006a14:	2b7a      	cmp	r3, #122	; 0x7a
 8006a16:	d802      	bhi.n	8006a1e <create_name+0xce>
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
 8006a1a:	3b20      	subs	r3, #32
 8006a1c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	613a      	str	r2, [r7, #16]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4413      	add	r3, r2
 8006a28:	7ffa      	ldrb	r2, [r7, #31]
 8006a2a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006a2c:	e7a6      	b.n	800697c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a2e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	441a      	add	r2, r3
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <create_name+0xf4>
 8006a40:	2306      	movs	r3, #6
 8006a42:	e010      	b.n	8006a66 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2be5      	cmp	r3, #229	; 0xe5
 8006a4a:	d102      	bne.n	8006a52 <create_name+0x102>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2205      	movs	r2, #5
 8006a50:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a52:	7ffb      	ldrb	r3, [r7, #31]
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d801      	bhi.n	8006a5c <create_name+0x10c>
 8006a58:	2204      	movs	r2, #4
 8006a5a:	e000      	b.n	8006a5e <create_name+0x10e>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	330b      	adds	r3, #11
 8006a62:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006a64:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3720      	adds	r7, #32
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	0800bfe4 	.word	0x0800bfe4
 8006a74:	0800bf80 	.word	0x0800bf80

08006a78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006a8c:	e002      	b.n	8006a94 <follow_path+0x1c>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	3301      	adds	r3, #1
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b2f      	cmp	r3, #47	; 0x2f
 8006a9a:	d0f8      	beq.n	8006a8e <follow_path+0x16>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b5c      	cmp	r3, #92	; 0x5c
 8006aa2:	d0f4      	beq.n	8006a8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b1f      	cmp	r3, #31
 8006ab0:	d80a      	bhi.n	8006ac8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006aba:	2100      	movs	r1, #0
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff fcf9 	bl	80064b4 <dir_sdi>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]
 8006ac6:	e043      	b.n	8006b50 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ac8:	463b      	mov	r3, r7
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff ff3f 	bl	8006950 <create_name>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d134      	bne.n	8006b46 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff feaf 	bl	8006840 <dir_find>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006aec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d127      	bne.n	8006b4a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d122      	bne.n	8006b4a <follow_path+0xd2>
 8006b04:	2305      	movs	r3, #5
 8006b06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006b08:	e01f      	b.n	8006b4a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d11c      	bne.n	8006b4e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	799b      	ldrb	r3, [r3, #6]
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d102      	bne.n	8006b26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b20:	2305      	movs	r3, #5
 8006b22:	75fb      	strb	r3, [r7, #23]
 8006b24:	e014      	b.n	8006b50 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b34:	4413      	add	r3, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff fe42 	bl	80067c2 <ld_clust>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b44:	e7c0      	b.n	8006ac8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b46:	bf00      	nop
 8006b48:	e002      	b.n	8006b50 <follow_path+0xd8>
				break;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b4e:	bf00      	nop
			}
		}
	}

	return res;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b087      	sub	sp, #28
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b62:	f04f 33ff 	mov.w	r3, #4294967295
 8006b66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d031      	beq.n	8006bd4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	e002      	b.n	8006b7e <get_ldnumber+0x24>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d903      	bls.n	8006b8e <get_ldnumber+0x34>
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b3a      	cmp	r3, #58	; 0x3a
 8006b8c:	d1f4      	bne.n	8006b78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b3a      	cmp	r3, #58	; 0x3a
 8006b94:	d11c      	bne.n	8006bd0 <get_ldnumber+0x76>
			tp = *path;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	60fa      	str	r2, [r7, #12]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	3b30      	subs	r3, #48	; 0x30
 8006ba6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d80e      	bhi.n	8006bcc <get_ldnumber+0x72>
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d10a      	bne.n	8006bcc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d107      	bne.n	8006bcc <get_ldnumber+0x72>
					vol = (int)i;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	e002      	b.n	8006bd6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006bd4:	693b      	ldr	r3, [r7, #16]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	70da      	strb	r2, [r3, #3]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff f8e0 	bl	8005dc4 <move_window>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <check_fs+0x2a>
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	e038      	b.n	8006c80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3334      	adds	r3, #52	; 0x34
 8006c12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fdf4 	bl	8005804 <ld_word>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d001      	beq.n	8006c2c <check_fs+0x48>
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e029      	b.n	8006c80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c32:	2be9      	cmp	r3, #233	; 0xe9
 8006c34:	d009      	beq.n	8006c4a <check_fs+0x66>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c3c:	2beb      	cmp	r3, #235	; 0xeb
 8006c3e:	d11e      	bne.n	8006c7e <check_fs+0x9a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006c46:	2b90      	cmp	r3, #144	; 0x90
 8006c48:	d119      	bne.n	8006c7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3334      	adds	r3, #52	; 0x34
 8006c4e:	3336      	adds	r3, #54	; 0x36
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe fdef 	bl	8005834 <ld_dword>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c5c:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <check_fs+0xa4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d101      	bne.n	8006c66 <check_fs+0x82>
 8006c62:	2300      	movs	r3, #0
 8006c64:	e00c      	b.n	8006c80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3334      	adds	r3, #52	; 0x34
 8006c6a:	3352      	adds	r3, #82	; 0x52
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fde1 	bl	8005834 <ld_dword>
 8006c72:	4602      	mov	r2, r0
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <check_fs+0xa8>)
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d101      	bne.n	8006c7e <check_fs+0x9a>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e000      	b.n	8006c80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006c7e:	2302      	movs	r3, #2
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	00544146 	.word	0x00544146
 8006c8c:	33544146 	.word	0x33544146

08006c90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b096      	sub	sp, #88	; 0x58
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff ff58 	bl	8006b5a <get_ldnumber>
 8006caa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	da01      	bge.n	8006cb6 <find_volume+0x26>
 8006cb2:	230b      	movs	r3, #11
 8006cb4:	e236      	b.n	8007124 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cb6:	4aac      	ldr	r2, [pc, #688]	; (8006f68 <find_volume+0x2d8>)
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cbe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <find_volume+0x3a>
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	e22c      	b.n	8007124 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8006cca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ccc:	f7fe fe99 	bl	8005a02 <lock_fs>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <find_volume+0x4a>
 8006cd6:	230f      	movs	r3, #15
 8006cd8:	e224      	b.n	8007124 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01a      	beq.n	8006d26 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe fce7 	bl	80056c8 <disk_status>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10c      	bne.n	8006d26 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <find_volume+0x92>
 8006d12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006d1e:	230a      	movs	r3, #10
 8006d20:	e200      	b.n	8007124 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8006d22:	2300      	movs	r3, #0
 8006d24:	e1fe      	b.n	8007124 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fcdf 	bl	80056fc <disk_initialize>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d50:	2303      	movs	r3, #3
 8006d52:	e1e7      	b.n	8007124 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <find_volume+0xda>
 8006d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8006d66:	230a      	movs	r3, #10
 8006d68:	e1dc      	b.n	8007124 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d72:	f7ff ff37 	bl	8006be4 <check_fs>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d14b      	bne.n	8006e1c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d84:	2300      	movs	r3, #0
 8006d86:	643b      	str	r3, [r7, #64]	; 0x40
 8006d88:	e01f      	b.n	8006dca <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006d98:	4413      	add	r3, r2
 8006d9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	3304      	adds	r3, #4
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d006      	beq.n	8006db4 <find_volume+0x124>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	3308      	adds	r3, #8
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fd42 	bl	8005834 <ld_dword>
 8006db0:	4602      	mov	r2, r0
 8006db2:	e000      	b.n	8006db6 <find_volume+0x126>
 8006db4:	2200      	movs	r2, #0
 8006db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006dbe:	440b      	add	r3, r1
 8006dc0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d9dc      	bls.n	8006d8a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <find_volume+0x150>
 8006dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006de8:	4413      	add	r3, r2
 8006dea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006dee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <find_volume+0x172>
 8006df6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006df8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dfa:	f7ff fef3 	bl	8006be4 <check_fs>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	e000      	b.n	8006e04 <find_volume+0x174>
 8006e02:	2303      	movs	r3, #3
 8006e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d905      	bls.n	8006e1c <find_volume+0x18c>
 8006e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e12:	3301      	adds	r3, #1
 8006e14:	643b      	str	r3, [r7, #64]	; 0x40
 8006e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d9e1      	bls.n	8006de0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d101      	bne.n	8006e28 <find_volume+0x198>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e17d      	b.n	8007124 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d901      	bls.n	8006e34 <find_volume+0x1a4>
 8006e30:	230d      	movs	r3, #13
 8006e32:	e177      	b.n	8007124 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	3334      	adds	r3, #52	; 0x34
 8006e38:	330b      	adds	r3, #11
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fce2 	bl	8005804 <ld_word>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e46:	d001      	beq.n	8006e4c <find_volume+0x1bc>
 8006e48:	230d      	movs	r3, #13
 8006e4a:	e16b      	b.n	8007124 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	3334      	adds	r3, #52	; 0x34
 8006e50:	3316      	adds	r3, #22
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe fcd6 	bl	8005804 <ld_word>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <find_volume+0x1e0>
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	3334      	adds	r3, #52	; 0x34
 8006e66:	3324      	adds	r3, #36	; 0x24
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe fce3 	bl	8005834 <ld_dword>
 8006e6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	789b      	ldrb	r3, [r3, #2]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d005      	beq.n	8006e94 <find_volume+0x204>
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	789b      	ldrb	r3, [r3, #2]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d001      	beq.n	8006e94 <find_volume+0x204>
 8006e90:	230d      	movs	r3, #13
 8006e92:	e147      	b.n	8007124 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	789b      	ldrb	r3, [r3, #2]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	895b      	ldrh	r3, [r3, #10]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <find_volume+0x238>
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	895b      	ldrh	r3, [r3, #10]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	895b      	ldrh	r3, [r3, #10]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <find_volume+0x23c>
 8006ec8:	230d      	movs	r3, #13
 8006eca:	e12b      	b.n	8007124 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	3334      	adds	r3, #52	; 0x34
 8006ed0:	3311      	adds	r3, #17
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fc96 	bl	8005804 <ld_word>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	891b      	ldrh	r3, [r3, #8]
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <find_volume+0x262>
 8006eee:	230d      	movs	r3, #13
 8006ef0:	e118      	b.n	8007124 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	3334      	adds	r3, #52	; 0x34
 8006ef6:	3313      	adds	r3, #19
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe fc83 	bl	8005804 <ld_word>
 8006efe:	4603      	mov	r3, r0
 8006f00:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <find_volume+0x286>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	3334      	adds	r3, #52	; 0x34
 8006f0c:	3320      	adds	r3, #32
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fc90 	bl	8005834 <ld_dword>
 8006f14:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	3334      	adds	r3, #52	; 0x34
 8006f1a:	330e      	adds	r3, #14
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe fc71 	bl	8005804 <ld_word>
 8006f22:	4603      	mov	r3, r0
 8006f24:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <find_volume+0x2a0>
 8006f2c:	230d      	movs	r3, #13
 8006f2e:	e0f9      	b.n	8007124 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f34:	4413      	add	r3, r2
 8006f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f38:	8912      	ldrh	r2, [r2, #8]
 8006f3a:	0912      	lsrs	r2, r2, #4
 8006f3c:	b292      	uxth	r2, r2
 8006f3e:	4413      	add	r3, r2
 8006f40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d201      	bcs.n	8006f4e <find_volume+0x2be>
 8006f4a:	230d      	movs	r3, #13
 8006f4c:	e0ea      	b.n	8007124 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f56:	8952      	ldrh	r2, [r2, #10]
 8006f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d103      	bne.n	8006f6c <find_volume+0x2dc>
 8006f64:	230d      	movs	r3, #13
 8006f66:	e0dd      	b.n	8007124 <find_volume+0x494>
 8006f68:	2000050c 	.word	0x2000050c
		fmt = FS_FAT32;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d802      	bhi.n	8006f82 <find_volume+0x2f2>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d802      	bhi.n	8006f92 <find_volume+0x302>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f9e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006fa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa4:	441a      	add	r2, r3
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006faa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	441a      	add	r2, r3
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d11e      	bne.n	8006ffa <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	3334      	adds	r3, #52	; 0x34
 8006fc0:	332a      	adds	r3, #42	; 0x2a
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fc1e 	bl	8005804 <ld_word>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <find_volume+0x342>
 8006fce:	230d      	movs	r3, #13
 8006fd0:	e0a8      	b.n	8007124 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	891b      	ldrh	r3, [r3, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <find_volume+0x34e>
 8006fda:	230d      	movs	r3, #13
 8006fdc:	e0a2      	b.n	8007124 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	3334      	adds	r3, #52	; 0x34
 8006fe2:	332c      	adds	r3, #44	; 0x2c
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe fc25 	bl	8005834 <ld_dword>
 8006fea:	4602      	mov	r2, r0
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ff8:	e01f      	b.n	800703a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	891b      	ldrh	r3, [r3, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <find_volume+0x376>
 8007002:	230d      	movs	r3, #13
 8007004:	e08e      	b.n	8007124 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800700a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700c:	441a      	add	r2, r3
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007012:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007016:	2b02      	cmp	r3, #2
 8007018:	d103      	bne.n	8007022 <find_volume+0x392>
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	e00a      	b.n	8007038 <find_volume+0x3a8>
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	4613      	mov	r3, r2
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4413      	add	r3, r2
 800702c:	085a      	lsrs	r2, r3, #1
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007038:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	69da      	ldr	r2, [r3, #28]
 800703e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007040:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007044:	0a5b      	lsrs	r3, r3, #9
 8007046:	429a      	cmp	r2, r3
 8007048:	d201      	bcs.n	800704e <find_volume+0x3be>
 800704a:	230d      	movs	r3, #13
 800704c:	e06a      	b.n	8007124 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	615a      	str	r2, [r3, #20]
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	2280      	movs	r2, #128	; 0x80
 8007062:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007068:	2b03      	cmp	r3, #3
 800706a:	d149      	bne.n	8007100 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	3334      	adds	r3, #52	; 0x34
 8007070:	3330      	adds	r3, #48	; 0x30
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe fbc6 	bl	8005804 <ld_word>
 8007078:	4603      	mov	r3, r0
 800707a:	2b01      	cmp	r3, #1
 800707c:	d140      	bne.n	8007100 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800707e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007080:	3301      	adds	r3, #1
 8007082:	4619      	mov	r1, r3
 8007084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007086:	f7fe fe9d 	bl	8005dc4 <move_window>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d137      	bne.n	8007100 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	2200      	movs	r2, #0
 8007094:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	3334      	adds	r3, #52	; 0x34
 800709a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe fbb0 	bl	8005804 <ld_word>
 80070a4:	4603      	mov	r3, r0
 80070a6:	461a      	mov	r2, r3
 80070a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d127      	bne.n	8007100 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	3334      	adds	r3, #52	; 0x34
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fbbd 	bl	8005834 <ld_dword>
 80070ba:	4602      	mov	r2, r0
 80070bc:	4b1b      	ldr	r3, [pc, #108]	; (800712c <find_volume+0x49c>)
 80070be:	429a      	cmp	r2, r3
 80070c0:	d11e      	bne.n	8007100 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	3334      	adds	r3, #52	; 0x34
 80070c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fbb2 	bl	8005834 <ld_dword>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b17      	ldr	r3, [pc, #92]	; (8007130 <find_volume+0x4a0>)
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d113      	bne.n	8007100 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	3334      	adds	r3, #52	; 0x34
 80070dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fba7 	bl	8005834 <ld_dword>
 80070e6:	4602      	mov	r2, r0
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	3334      	adds	r3, #52	; 0x34
 80070f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fe fb9d 	bl	8005834 <ld_dword>
 80070fa:	4602      	mov	r2, r0
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007106:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007108:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <find_volume+0x4a4>)
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	3301      	adds	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	4b08      	ldr	r3, [pc, #32]	; (8007134 <find_volume+0x4a4>)
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	4b07      	ldr	r3, [pc, #28]	; (8007134 <find_volume+0x4a4>)
 8007116:	881a      	ldrh	r2, [r3, #0]
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800711c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800711e:	f7fe fde9 	bl	8005cf4 <clear_lock>
#endif
	return FR_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3758      	adds	r7, #88	; 0x58
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	41615252 	.word	0x41615252
 8007130:	61417272 	.word	0x61417272
 8007134:	20000510 	.word	0x20000510

08007138 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007142:	2309      	movs	r3, #9
 8007144:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02e      	beq.n	80071aa <validate+0x72>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d02a      	beq.n	80071aa <validate+0x72>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d025      	beq.n	80071aa <validate+0x72>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	889a      	ldrh	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	88db      	ldrh	r3, [r3, #6]
 8007168:	429a      	cmp	r2, r3
 800716a:	d11e      	bne.n	80071aa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f7fe fc46 	bl	8005a02 <lock_fs>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d014      	beq.n	80071a6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe faa0 	bl	80056c8 <disk_status>
 8007188:	4603      	mov	r3, r0
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d102      	bne.n	8007198 <validate+0x60>
				res = FR_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
 8007196:	e008      	b.n	80071aa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fc45 	bl	8005a2e <unlock_fs>
 80071a4:	e001      	b.n	80071aa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80071a6:	230f      	movs	r3, #15
 80071a8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <validate+0x7e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	e000      	b.n	80071b8 <validate+0x80>
 80071b6:	2300      	movs	r3, #0
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	6013      	str	r3, [r2, #0]
	return res;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80071da:	f107 0310 	add.w	r3, r7, #16
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fcbb 	bl	8006b5a <get_ldnumber>
 80071e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da01      	bge.n	80071f0 <f_mount+0x28>
 80071ec:	230b      	movs	r3, #11
 80071ee:	e048      	b.n	8007282 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071f0:	4a26      	ldr	r2, [pc, #152]	; (800728c <f_mount+0xc4>)
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00f      	beq.n	8007220 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007200:	69b8      	ldr	r0, [r7, #24]
 8007202:	f7fe fd77 	bl	8005cf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 ff19 	bl	8008042 <ff_del_syncobj>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <f_mount+0x52>
 8007216:	2302      	movs	r3, #2
 8007218:	e033      	b.n	8007282 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2200      	movs	r2, #0
 800721e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00f      	beq.n	8007246 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	b2da      	uxtb	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	330c      	adds	r3, #12
 8007234:	4619      	mov	r1, r3
 8007236:	4610      	mov	r0, r2
 8007238:	f000 fee3 	bl	8008002 <ff_cre_syncobj>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <f_mount+0x7e>
 8007242:	2302      	movs	r3, #2
 8007244:	e01d      	b.n	8007282 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4910      	ldr	r1, [pc, #64]	; (800728c <f_mount+0xc4>)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <f_mount+0x94>
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <f_mount+0x98>
 800725c:	2300      	movs	r3, #0
 800725e:	e010      	b.n	8007282 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007260:	f107 010c 	add.w	r1, r7, #12
 8007264:	f107 0308 	add.w	r3, r7, #8
 8007268:	2200      	movs	r2, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fd10 	bl	8006c90 <find_volume>
 8007270:	4603      	mov	r3, r0
 8007272:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	7dfa      	ldrb	r2, [r7, #23]
 8007278:	4611      	mov	r1, r2
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fbd7 	bl	8005a2e <unlock_fs>
 8007280:	7dfb      	ldrb	r3, [r7, #23]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	2000050c 	.word	0x2000050c

08007290 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b098      	sub	sp, #96	; 0x60
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <f_open+0x18>
 80072a4:	2309      	movs	r3, #9
 80072a6:	e1b4      	b.n	8007612 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80072b0:	79fa      	ldrb	r2, [r7, #7]
 80072b2:	f107 0110 	add.w	r1, r7, #16
 80072b6:	f107 0308 	add.w	r3, r7, #8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff fce8 	bl	8006c90 <find_volume>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80072c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 8191 	bne.w	80075f2 <f_open+0x362>
		dj.obj.fs = fs;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	f107 0314 	add.w	r3, r7, #20
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fbcb 	bl	8006a78 <follow_path>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80072e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d11a      	bne.n	8007326 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80072f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072f4:	b25b      	sxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	da03      	bge.n	8007302 <f_open+0x72>
				res = FR_INVALID_NAME;
 80072fa:	2306      	movs	r3, #6
 80072fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007300:	e011      	b.n	8007326 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf14      	ite	ne
 800730c:	2301      	movne	r3, #1
 800730e:	2300      	moveq	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fba2 	bl	8005a64 <chk_lock>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	f003 031c 	and.w	r3, r3, #28
 800732c:	2b00      	cmp	r3, #0
 800732e:	d07f      	beq.n	8007430 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007334:	2b00      	cmp	r3, #0
 8007336:	d017      	beq.n	8007368 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800733c:	2b04      	cmp	r3, #4
 800733e:	d10e      	bne.n	800735e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007340:	f7fe fbec 	bl	8005b1c <enq_lock>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <f_open+0xc8>
 800734a:	f107 0314 	add.w	r3, r7, #20
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff facb 	bl	80068ea <dir_register>
 8007354:	4603      	mov	r3, r0
 8007356:	e000      	b.n	800735a <f_open+0xca>
 8007358:	2312      	movs	r3, #18
 800735a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	f043 0308 	orr.w	r3, r3, #8
 8007364:	71fb      	strb	r3, [r7, #7]
 8007366:	e010      	b.n	800738a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007368:	7ebb      	ldrb	r3, [r7, #26]
 800736a:	f003 0311 	and.w	r3, r3, #17
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <f_open+0xea>
					res = FR_DENIED;
 8007372:	2307      	movs	r3, #7
 8007374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007378:	e007      	b.n	800738a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <f_open+0xfa>
 8007384:	2308      	movs	r3, #8
 8007386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800738a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800738e:	2b00      	cmp	r3, #0
 8007390:	d168      	bne.n	8007464 <f_open+0x1d4>
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d063      	beq.n	8007464 <f_open+0x1d4>
				dw = GET_FATTIME();
 800739c:	f7fe f92e 	bl	80055fc <get_fattime>
 80073a0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	330e      	adds	r3, #14
 80073a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe fa81 	bl	80058b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80073ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b0:	3316      	adds	r3, #22
 80073b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fa7b 	bl	80058b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80073ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073bc:	330b      	adds	r3, #11
 80073be:	2220      	movs	r2, #32
 80073c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff f9fa 	bl	80067c2 <ld_clust>
 80073ce:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073d4:	2200      	movs	r2, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff fa12 	bl	8006800 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	331c      	adds	r3, #28
 80073e0:	2100      	movs	r1, #0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fa64 	bl	80058b0 <st_dword>
					fs->wflag = 1;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2201      	movs	r2, #1
 80073ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80073ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d037      	beq.n	8007464 <f_open+0x1d4>
						dw = fs->winsect;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80073fa:	f107 0314 	add.w	r3, r7, #20
 80073fe:	2200      	movs	r2, #0
 8007400:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe ff25 	bl	8006252 <remove_chain>
 8007408:	4603      	mov	r3, r0
 800740a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800740e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007412:	2b00      	cmp	r3, #0
 8007414:	d126      	bne.n	8007464 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fcd2 	bl	8005dc4 <move_window>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800742a:	3a01      	subs	r2, #1
 800742c:	611a      	str	r2, [r3, #16]
 800742e:	e019      	b.n	8007464 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007434:	2b00      	cmp	r3, #0
 8007436:	d115      	bne.n	8007464 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007438:	7ebb      	ldrb	r3, [r7, #26]
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007442:	2304      	movs	r3, #4
 8007444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007448:	e00c      	b.n	8007464 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <f_open+0x1d4>
 8007454:	7ebb      	ldrb	r3, [r7, #26]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <f_open+0x1d4>
						res = FR_DENIED;
 800745e:	2307      	movs	r3, #7
 8007460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007468:	2b00      	cmp	r3, #0
 800746a:	d128      	bne.n	80074be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	f023 0301 	bic.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf14      	ite	ne
 8007496:	2301      	movne	r3, #1
 8007498:	2300      	moveq	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	f107 0314 	add.w	r3, r7, #20
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe fb5b 	bl	8005b60 <inc_lock>
 80074aa:	4602      	mov	r2, r0
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <f_open+0x22e>
 80074b8:	2302      	movs	r3, #2
 80074ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80074be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f040 8095 	bne.w	80075f2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff f977 	bl	80067c2 <ld_clust>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80074da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074dc:	331c      	adds	r3, #28
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f9a8 	bl	8005834 <ld_dword>
 80074e4:	4602      	mov	r2, r0
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	88da      	ldrh	r2, [r3, #6]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	79fa      	ldrb	r2, [r7, #7]
 8007502:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3330      	adds	r3, #48	; 0x30
 800751a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800751e:	2100      	movs	r1, #0
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe fa12 	bl	800594a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d060      	beq.n	80075f2 <f_open+0x362>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05c      	beq.n	80075f2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	895b      	ldrh	r3, [r3, #10]
 8007544:	025b      	lsls	r3, r3, #9
 8007546:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	657b      	str	r3, [r7, #84]	; 0x54
 8007554:	e016      	b.n	8007584 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fced 	bl	8005f3a <get_fat>
 8007560:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007564:	2b01      	cmp	r3, #1
 8007566:	d802      	bhi.n	800756e <f_open+0x2de>
 8007568:	2302      	movs	r3, #2
 800756a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800756e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d102      	bne.n	800757c <f_open+0x2ec>
 8007576:	2301      	movs	r3, #1
 8007578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800757c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800757e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	657b      	str	r3, [r7, #84]	; 0x54
 8007584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <f_open+0x304>
 800758c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800758e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007590:	429a      	cmp	r2, r3
 8007592:	d8e0      	bhi.n	8007556 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007598:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800759a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d127      	bne.n	80075f2 <f_open+0x362>
 80075a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d022      	beq.n	80075f2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fca3 	bl	8005efc <clust2sect>
 80075b6:	6478      	str	r0, [r7, #68]	; 0x44
 80075b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d103      	bne.n	80075c6 <f_open+0x336>
						res = FR_INT_ERR;
 80075be:	2302      	movs	r3, #2
 80075c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075c4:	e015      	b.n	80075f2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80075c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c8:	0a5a      	lsrs	r2, r3, #9
 80075ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075cc:	441a      	add	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	7858      	ldrb	r0, [r3, #1]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a1a      	ldr	r2, [r3, #32]
 80075e0:	2301      	movs	r3, #1
 80075e2:	f7fe f8b1 	bl	8005748 <disk_read>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <f_open+0x362>
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80075f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <f_open+0x370>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007606:	4611      	mov	r1, r2
 8007608:	4618      	mov	r0, r3
 800760a:	f7fe fa10 	bl	8005a2e <unlock_fs>
 800760e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007612:	4618      	mov	r0, r3
 8007614:	3760      	adds	r7, #96	; 0x60
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b08e      	sub	sp, #56	; 0x38
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f107 0214 	add.w	r2, r7, #20
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fd7c 	bl	8007138 <validate>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007646:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800764a:	2b00      	cmp	r3, #0
 800764c:	d107      	bne.n	800765e <f_read+0x44>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	7d5b      	ldrb	r3, [r3, #21]
 8007652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <f_read+0x58>
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe f9e1 	bl	8005a2e <unlock_fs>
 800766c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007670:	e13d      	b.n	80078ee <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	7d1b      	ldrb	r3, [r3, #20]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <f_read+0x72>
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2107      	movs	r1, #7
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe f9d3 	bl	8005a2e <unlock_fs>
 8007688:	2307      	movs	r3, #7
 800768a:	e130      	b.n	80078ee <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	429a      	cmp	r2, r3
 800769e:	f240 811c 	bls.w	80078da <f_read+0x2c0>
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80076a6:	e118      	b.n	80078da <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f040 80e4 	bne.w	800787e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	0a5b      	lsrs	r3, r3, #9
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	8952      	ldrh	r2, [r2, #10]
 80076c0:	3a01      	subs	r2, #1
 80076c2:	4013      	ands	r3, r2
 80076c4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d139      	bne.n	8007740 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d103      	bne.n	80076dc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	633b      	str	r3, [r7, #48]	; 0x30
 80076da:	e013      	b.n	8007704 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	4619      	mov	r1, r3
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7fe feae 	bl	800644c <clmt_clust>
 80076f0:	6338      	str	r0, [r7, #48]	; 0x30
 80076f2:	e007      	b.n	8007704 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	4619      	mov	r1, r3
 80076fc:	4610      	mov	r0, r2
 80076fe:	f7fe fc1c 	bl	8005f3a <get_fat>
 8007702:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2b01      	cmp	r3, #1
 8007708:	d809      	bhi.n	800771e <f_read+0x104>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2202      	movs	r2, #2
 800770e:	755a      	strb	r2, [r3, #21]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2102      	movs	r1, #2
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe f98a 	bl	8005a2e <unlock_fs>
 800771a:	2302      	movs	r3, #2
 800771c:	e0e7      	b.n	80078ee <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007724:	d109      	bne.n	800773a <f_read+0x120>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	755a      	strb	r2, [r3, #21]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2101      	movs	r1, #1
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe f97c 	bl	8005a2e <unlock_fs>
 8007736:	2301      	movs	r3, #1
 8007738:	e0d9      	b.n	80078ee <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fe fbd7 	bl	8005efc <clust2sect>
 800774e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <f_read+0x150>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2202      	movs	r2, #2
 800775a:	755a      	strb	r2, [r3, #21]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2102      	movs	r1, #2
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe f964 	bl	8005a2e <unlock_fs>
 8007766:	2302      	movs	r3, #2
 8007768:	e0c1      	b.n	80078ee <f_read+0x2d4>
			sect += csect;
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	4413      	add	r3, r2
 8007770:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	0a5b      	lsrs	r3, r3, #9
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	2b00      	cmp	r3, #0
 800777c:	d03e      	beq.n	80077fc <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	4413      	add	r3, r2
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	8952      	ldrh	r2, [r2, #10]
 8007788:	4293      	cmp	r3, r2
 800778a:	d905      	bls.n	8007798 <f_read+0x17e>
					cc = fs->csize - csect;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	895b      	ldrh	r3, [r3, #10]
 8007790:	461a      	mov	r2, r3
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	7858      	ldrb	r0, [r3, #1]
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077a2:	f7fd ffd1 	bl	8005748 <disk_read>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d009      	beq.n	80077c0 <f_read+0x1a6>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	755a      	strb	r2, [r3, #21]
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe f939 	bl	8005a2e <unlock_fs>
 80077bc:	2301      	movs	r3, #1
 80077be:	e096      	b.n	80078ee <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7d1b      	ldrb	r3, [r3, #20]
 80077c4:	b25b      	sxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da14      	bge.n	80077f4 <f_read+0x1da>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a1a      	ldr	r2, [r3, #32]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d90d      	bls.n	80077f4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a1a      	ldr	r2, [r3, #32]
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	025b      	lsls	r3, r3, #9
 80077e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e4:	18d0      	adds	r0, r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3330      	adds	r3, #48	; 0x30
 80077ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ee:	4619      	mov	r1, r3
 80077f0:	f7fe f88a 	bl	8005908 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	025b      	lsls	r3, r3, #9
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80077fa:	e05a      	b.n	80078b2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	429a      	cmp	r2, r3
 8007804:	d038      	beq.n	8007878 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	7d1b      	ldrb	r3, [r3, #20]
 800780a:	b25b      	sxtb	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	da1d      	bge.n	800784c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	7858      	ldrb	r0, [r3, #1]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a1a      	ldr	r2, [r3, #32]
 800781e:	2301      	movs	r3, #1
 8007820:	f7fd ffb2 	bl	8005788 <disk_write>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <f_read+0x224>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	755a      	strb	r2, [r3, #21]
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2101      	movs	r1, #1
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe f8fa 	bl	8005a2e <unlock_fs>
 800783a:	2301      	movs	r3, #1
 800783c:	e057      	b.n	80078ee <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	7d1b      	ldrb	r3, [r3, #20]
 8007842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007846:	b2da      	uxtb	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	7858      	ldrb	r0, [r3, #1]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007856:	2301      	movs	r3, #1
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	f7fd ff75 	bl	8005748 <disk_read>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <f_read+0x25e>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	755a      	strb	r2, [r3, #21]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2101      	movs	r1, #1
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe f8dd 	bl	8005a2e <unlock_fs>
 8007874:	2301      	movs	r3, #1
 8007876:	e03a      	b.n	80078ee <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007886:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800788c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d901      	bls.n	8007898 <f_read+0x27e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	4413      	add	r3, r2
 80078a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078aa:	4619      	mov	r1, r3
 80078ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ae:	f7fe f82b 	bl	8005908 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	4413      	add	r3, r2
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	441a      	add	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	619a      	str	r2, [r3, #24]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	441a      	add	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f47f aee3 	bne.w	80076a8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe f8a1 	bl	8005a2e <unlock_fs>
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3738      	adds	r7, #56	; 0x38
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b08c      	sub	sp, #48	; 0x30
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f107 0210 	add.w	r2, r7, #16
 8007914:	4611      	mov	r1, r2
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff fc0e 	bl	8007138 <validate>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007926:	2b00      	cmp	r3, #0
 8007928:	d107      	bne.n	800793a <f_write+0x44>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	7d5b      	ldrb	r3, [r3, #21]
 800792e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <f_write+0x58>
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe f873 	bl	8005a2e <unlock_fs>
 8007948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800794c:	e173      	b.n	8007c36 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	7d1b      	ldrb	r3, [r3, #20]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <f_write+0x72>
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2107      	movs	r1, #7
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe f865 	bl	8005a2e <unlock_fs>
 8007964:	2307      	movs	r3, #7
 8007966:	e166      	b.n	8007c36 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	699a      	ldr	r2, [r3, #24]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	441a      	add	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	f080 814b 	bcs.w	8007c10 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	43db      	mvns	r3, r3
 8007980:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007982:	e145      	b.n	8007c10 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 8101 	bne.w	8007b94 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	0a5b      	lsrs	r3, r3, #9
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	8952      	ldrh	r2, [r2, #10]
 800799c:	3a01      	subs	r2, #1
 800799e:	4013      	ands	r3, r2
 80079a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d14d      	bne.n	8007a44 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10c      	bne.n	80079ca <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d11a      	bne.n	80079f2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fcab 	bl	800631c <create_chain>
 80079c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80079c8:	e013      	b.n	80079f2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	4619      	mov	r1, r3
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7fe fd37 	bl	800644c <clmt_clust>
 80079de:	62b8      	str	r0, [r7, #40]	; 0x28
 80079e0:	e007      	b.n	80079f2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f7fe fc96 	bl	800631c <create_chain>
 80079f0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8110 	beq.w	8007c1a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d109      	bne.n	8007a14 <f_write+0x11e>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2202      	movs	r2, #2
 8007a04:	755a      	strb	r2, [r3, #21]
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2102      	movs	r1, #2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe f80f 	bl	8005a2e <unlock_fs>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e110      	b.n	8007c36 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d109      	bne.n	8007a30 <f_write+0x13a>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	755a      	strb	r2, [r3, #21]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2101      	movs	r1, #1
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe f801 	bl	8005a2e <unlock_fs>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e102      	b.n	8007c36 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a34:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <f_write+0x14e>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a42:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	7d1b      	ldrb	r3, [r3, #20]
 8007a48:	b25b      	sxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da1d      	bge.n	8007a8a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	7858      	ldrb	r0, [r3, #1]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a1a      	ldr	r2, [r3, #32]
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f7fd fe93 	bl	8005788 <disk_write>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d009      	beq.n	8007a7c <f_write+0x186>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	755a      	strb	r2, [r3, #21]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2101      	movs	r1, #1
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fd ffdb 	bl	8005a2e <unlock_fs>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0dc      	b.n	8007c36 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	7d1b      	ldrb	r3, [r3, #20]
 8007a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f7fe fa32 	bl	8005efc <clust2sect>
 8007a98:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <f_write+0x1be>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	755a      	strb	r2, [r3, #21]
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2102      	movs	r1, #2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fd ffbf 	bl	8005a2e <unlock_fs>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e0c0      	b.n	8007c36 <f_write+0x340>
			sect += csect;
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	4413      	add	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	0a5b      	lsrs	r3, r3, #9
 8007ac0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d041      	beq.n	8007b4c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	4413      	add	r3, r2
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	8952      	ldrh	r2, [r2, #10]
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d905      	bls.n	8007ae2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	895b      	ldrh	r3, [r3, #10]
 8007ada:	461a      	mov	r2, r3
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	7858      	ldrb	r0, [r3, #1]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	69f9      	ldr	r1, [r7, #28]
 8007aec:	f7fd fe4c 	bl	8005788 <disk_write>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d009      	beq.n	8007b0a <f_write+0x214>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	755a      	strb	r2, [r3, #21]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2101      	movs	r1, #1
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fd ff94 	bl	8005a2e <unlock_fs>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e095      	b.n	8007c36 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	6a3a      	ldr	r2, [r7, #32]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d915      	bls.n	8007b44 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1a      	ldr	r2, [r3, #32]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	025b      	lsls	r3, r3, #9
 8007b28:	69fa      	ldr	r2, [r7, #28]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b30:	4619      	mov	r1, r3
 8007b32:	f7fd fee9 	bl	8005908 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	7d1b      	ldrb	r3, [r3, #20]
 8007b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	025b      	lsls	r3, r3, #9
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007b4a:	e044      	b.n	8007bd6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d01b      	beq.n	8007b8e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d215      	bcs.n	8007b8e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	7858      	ldrb	r0, [r3, #1]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	f7fd fdea 	bl	8005748 <disk_read>
 8007b74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	755a      	strb	r2, [r3, #21]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2101      	movs	r1, #1
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fd ff52 	bl	8005a2e <unlock_fs>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e053      	b.n	8007c36 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d901      	bls.n	8007bae <f_write+0x2b8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbc:	4413      	add	r3, r2
 8007bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc0:	69f9      	ldr	r1, [r7, #28]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fd fea0 	bl	8005908 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	7d1b      	ldrb	r3, [r3, #20]
 8007bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	4413      	add	r3, r2
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	441a      	add	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	619a      	str	r2, [r3, #24]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	bf38      	it	cc
 8007bf6:	461a      	movcc	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	60da      	str	r2, [r3, #12]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	441a      	add	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f47f aeb6 	bne.w	8007984 <f_write+0x8e>
 8007c18:	e000      	b.n	8007c1c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	7d1b      	ldrb	r3, [r3, #20]
 8007c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fd fefd 	bl	8005a2e <unlock_fs>
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3730      	adds	r7, #48	; 0x30
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b086      	sub	sp, #24
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f107 0208 	add.w	r2, r7, #8
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff fa72 	bl	8007138 <validate>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d16d      	bne.n	8007d3a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7d1b      	ldrb	r3, [r3, #20]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d067      	beq.n	8007d3a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	7d1b      	ldrb	r3, [r3, #20]
 8007c6e:	b25b      	sxtb	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	da1a      	bge.n	8007caa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	7858      	ldrb	r0, [r3, #1]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1a      	ldr	r2, [r3, #32]
 8007c82:	2301      	movs	r3, #1
 8007c84:	f7fd fd80 	bl	8005788 <disk_write>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d006      	beq.n	8007c9c <f_sync+0x5e>
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2101      	movs	r1, #1
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fd fecb 	bl	8005a2e <unlock_fs>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e055      	b.n	8007d48 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	7d1b      	ldrb	r3, [r3, #20]
 8007ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007caa:	f7fd fca7 	bl	80055fc <get_fattime>
 8007cae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4610      	mov	r0, r2
 8007cba:	f7fe f883 	bl	8005dc4 <move_window>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d138      	bne.n	8007d3a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	330b      	adds	r3, #11
 8007cd2:	781a      	ldrb	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	330b      	adds	r3, #11
 8007cd8:	f042 0220 	orr.w	r2, r2, #32
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6818      	ldr	r0, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	68f9      	ldr	r1, [r7, #12]
 8007cec:	f7fe fd88 	bl	8006800 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f103 021c 	add.w	r2, r3, #28
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f7fd fdd7 	bl	80058b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3316      	adds	r3, #22
 8007d06:	6939      	ldr	r1, [r7, #16]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fd fdd1 	bl	80058b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3312      	adds	r3, #18
 8007d12:	2100      	movs	r1, #0
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fd fdb0 	bl	800587a <st_word>
					fs->wflag = 1;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe f87c 	bl	8005e20 <sync_fs>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7d1b      	ldrb	r3, [r3, #20]
 8007d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	7dfa      	ldrb	r2, [r7, #23]
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fd fe74 	bl	8005a2e <unlock_fs>
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ff70 	bl	8007c3e <f_sync>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11d      	bne.n	8007da4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f107 0208 	add.w	r2, r7, #8
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff f9e1 	bl	8007138 <validate>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d111      	bne.n	8007da4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fd ff79 	bl	8005c7c <dec_lock>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd fe45 	bl	8005a2e <unlock_fs>
#endif
		}
	}
	return res;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b088      	sub	sp, #32
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007dc2:	e017      	b.n	8007df4 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007dc4:	f107 0310 	add.w	r3, r7, #16
 8007dc8:	f107 0114 	add.w	r1, r7, #20
 8007dcc:	2201      	movs	r2, #1
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7ff fc23 	bl	800761a <f_read>
		if (rc != 1) break;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d112      	bne.n	8007e00 <f_gets+0x52>
		c = s[0];
 8007dda:	7d3b      	ldrb	r3, [r7, #20]
 8007ddc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	61ba      	str	r2, [r7, #24]
 8007de4:	7dfa      	ldrb	r2, [r7, #23]
 8007de6:	701a      	strb	r2, [r3, #0]
		n++;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3301      	adds	r3, #1
 8007dec:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	2b0a      	cmp	r3, #10
 8007df2:	d007      	beq.n	8007e04 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	dbe2      	blt.n	8007dc4 <f_gets+0x16>
 8007dfe:	e002      	b.n	8007e06 <f_gets+0x58>
		if (rc != 1) break;
 8007e00:	bf00      	nop
 8007e02:	e000      	b.n	8007e06 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8007e04:	bf00      	nop
	}
	*p = 0;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <f_gets+0x68>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	e000      	b.n	8007e18 <f_gets+0x6a>
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3720      	adds	r7, #32
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	db25      	blt.n	8007e84 <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	60fa      	str	r2, [r7, #12]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	4413      	add	r3, r2
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b3c      	cmp	r3, #60	; 0x3c
 8007e4a:	dd12      	ble.n	8007e72 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f103 010c 	add.w	r1, r3, #12
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	f107 0308 	add.w	r3, r7, #8
 8007e5c:	f7ff fd4b 	bl	80078f6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d101      	bne.n	8007e6c <putc_bfd+0x4c>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e001      	b.n	8007e70 <putc_bfd+0x50>
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
 8007e82:	e000      	b.n	8007e86 <putc_bfd+0x66>
	if (i < 0) return;
 8007e84:	bf00      	nop
}
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	db17      	blt.n	8007ecc <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f103 010c 	add.w	r1, r3, #12
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f107 030c 	add.w	r3, r7, #12
 8007eb0:	f7ff fd21 	bl	80078f6 <f_write>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d108      	bne.n	8007ecc <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d102      	bne.n	8007ecc <putc_flush+0x40>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	e001      	b.n	8007ed0 <putc_flush+0x44>
	return EOF;
 8007ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	605a      	str	r2, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	609a      	str	r2, [r3, #8]
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b096      	sub	sp, #88	; 0x58
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007f0c:	f107 030c 	add.w	r3, r7, #12
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff ffe0 	bl	8007ed8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007f18:	e009      	b.n	8007f2e <f_puts+0x2c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	f107 030c 	add.w	r3, r7, #12
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff ff79 	bl	8007e20 <putc_bfd>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f1      	bne.n	8007f1a <f_puts+0x18>
	return putc_flush(&pb);
 8007f36:	f107 030c 	add.w	r3, r7, #12
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff ffa6 	bl	8007e8c <putc_flush>
 8007f40:	4603      	mov	r3, r0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3758      	adds	r7, #88	; 0x58
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007f62:	4b1f      	ldr	r3, [pc, #124]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f64:	7a5b      	ldrb	r3, [r3, #9]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d131      	bne.n	8007fd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007f6c:	4b1c      	ldr	r3, [pc, #112]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f6e:	7a5b      	ldrb	r3, [r3, #9]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	461a      	mov	r2, r3
 8007f74:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f76:	2100      	movs	r1, #0
 8007f78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007f7a:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f7c:	7a5b      	ldrb	r3, [r3, #9]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f8c:	7a5b      	ldrb	r3, [r3, #9]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f94:	4413      	add	r3, r2
 8007f96:	79fa      	ldrb	r2, [r7, #7]
 8007f98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f9a:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f9c:	7a5b      	ldrb	r3, [r3, #9]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	b2d1      	uxtb	r1, r2
 8007fa4:	4a0e      	ldr	r2, [pc, #56]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007fa6:	7251      	strb	r1, [r2, #9]
 8007fa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007faa:	7dbb      	ldrb	r3, [r7, #22]
 8007fac:	3330      	adds	r3, #48	; 0x30
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	223a      	movs	r2, #58	; 0x3a
 8007fba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3302      	adds	r3, #2
 8007fc0:	222f      	movs	r2, #47	; 0x2f
 8007fc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3303      	adds	r3, #3
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	20000534 	.word	0x20000534

08007fe4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007fee:	2200      	movs	r2, #0
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff ffaa 	bl	8007f4c <FATFS_LinkDriverEx>
 8007ff8:	4603      	mov	r3, r0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b086      	sub	sp, #24
 8008006:	af00      	add	r7, sp, #0
 8008008:	4603      	mov	r3, r0
 800800a:	6039      	str	r1, [r7, #0]
 800800c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008016:	f107 030c 	add.w	r3, r7, #12
 800801a:	2101      	movs	r1, #1
 800801c:	4618      	mov	r0, r3
 800801e:	f000 f8b9 	bl	8008194 <osSemaphoreCreate>
 8008022:	4602      	mov	r2, r0
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	bf14      	ite	ne
 8008030:	2301      	movne	r3, #1
 8008032:	2300      	moveq	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	617b      	str	r3, [r7, #20]

    return ret;
 8008038:	697b      	ldr	r3, [r7, #20]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f95a 	bl	8008304 <osSemaphoreDelete>
#endif
    return 1;
 8008050:	2301      	movs	r3, #1
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008066:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f8c6 	bl	80081fc <osSemaphoreWait>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8008076:	2301      	movs	r3, #1
 8008078:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800807a:	68fb      	ldr	r3, [r7, #12]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f903 	bl	8008298 <osSemaphoreRelease>
#endif
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	4603      	mov	r3, r0
 80080a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80080a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080ac:	2b84      	cmp	r3, #132	; 0x84
 80080ae:	d005      	beq.n	80080bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80080b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4413      	add	r3, r2
 80080b8:	3303      	adds	r3, #3
 80080ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80080bc:	68fb      	ldr	r3, [r7, #12]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080d0:	f3ef 8305 	mrs	r3, IPSR
 80080d4:	607b      	str	r3, [r7, #4]
  return(result);
 80080d6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bf14      	ite	ne
 80080dc:	2301      	movne	r3, #1
 80080de:	2300      	moveq	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80080f2:	f001 f939 	bl	8009368 <vTaskStartScheduler>
  
  return osOK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	bd80      	pop	{r7, pc}

080080fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80080fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fe:	b089      	sub	sp, #36	; 0x24
 8008100:	af04      	add	r7, sp, #16
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d020      	beq.n	8008150 <osThreadCreate+0x54>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01c      	beq.n	8008150 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685c      	ldr	r4, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681d      	ldr	r5, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691e      	ldr	r6, [r3, #16]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ffb6 	bl	800809a <makeFreeRtosPriority>
 800812e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008138:	9202      	str	r2, [sp, #8]
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	9100      	str	r1, [sp, #0]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	4632      	mov	r2, r6
 8008142:	4629      	mov	r1, r5
 8008144:	4620      	mov	r0, r4
 8008146:	f000 ff7f 	bl	8009048 <xTaskCreateStatic>
 800814a:	4603      	mov	r3, r0
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e01c      	b.n	800818a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685c      	ldr	r4, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800815c:	b29e      	uxth	r6, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff ff98 	bl	800809a <makeFreeRtosPriority>
 800816a:	4602      	mov	r2, r0
 800816c:	f107 030c 	add.w	r3, r7, #12
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	9200      	str	r2, [sp, #0]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	4632      	mov	r2, r6
 8008178:	4629      	mov	r1, r5
 800817a:	4620      	mov	r0, r4
 800817c:	f000 ffbe 	bl	80090fc <xTaskCreate>
 8008180:	4603      	mov	r3, r0
 8008182:	2b01      	cmp	r3, #1
 8008184:	d001      	beq.n	800818a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	e000      	b.n	800818c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800818a:	68fb      	ldr	r3, [r7, #12]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008194 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af02      	add	r7, sp, #8
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d010      	beq.n	80081c8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d10b      	bne.n	80081c4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	2303      	movs	r3, #3
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	2001      	movs	r0, #1
 80081bc:	f000 f9fa 	bl	80085b4 <xQueueGenericCreateStatic>
 80081c0:	4603      	mov	r3, r0
 80081c2:	e016      	b.n	80081f2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e014      	b.n	80081f2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d110      	bne.n	80081f0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80081ce:	2203      	movs	r2, #3
 80081d0:	2100      	movs	r1, #0
 80081d2:	2001      	movs	r0, #1
 80081d4:	f000 fa61 	bl	800869a <xQueueGenericCreate>
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <osSemaphoreCreate+0x58>
 80081e0:	2300      	movs	r3, #0
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 fab0 	bl	800874c <xQueueGenericSend>
      return sema;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	e000      	b.n	80081f2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80081f0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008210:	2380      	movs	r3, #128	; 0x80
 8008212:	e03a      	b.n	800828a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821e:	d103      	bne.n	8008228 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008220:	f04f 33ff 	mov.w	r3, #4294967295
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	e009      	b.n	800823c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d006      	beq.n	800823c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <osSemaphoreWait+0x40>
      ticks = 1;
 8008238:	2301      	movs	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800823c:	f7ff ff45 	bl	80080ca <inHandlerMode>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d017      	beq.n	8008276 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008246:	f107 0308 	add.w	r3, r7, #8
 800824a:	461a      	mov	r2, r3
 800824c:	2100      	movs	r1, #0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fd08 	bl	8008c64 <xQueueReceiveFromISR>
 8008254:	4603      	mov	r3, r0
 8008256:	2b01      	cmp	r3, #1
 8008258:	d001      	beq.n	800825e <osSemaphoreWait+0x62>
      return osErrorOS;
 800825a:	23ff      	movs	r3, #255	; 0xff
 800825c:	e015      	b.n	800828a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d011      	beq.n	8008288 <osSemaphoreWait+0x8c>
 8008264:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <osSemaphoreWait+0x98>)
 8008266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	e008      	b.n	8008288 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008276:	68f9      	ldr	r1, [r7, #12]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fbeb 	bl	8008a54 <xQueueSemaphoreTake>
 800827e:	4603      	mov	r3, r0
 8008280:	2b01      	cmp	r3, #1
 8008282:	d001      	beq.n	8008288 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008284:	23ff      	movs	r3, #255	; 0xff
 8008286:	e000      	b.n	800828a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	e000ed04 	.word	0xe000ed04

08008298 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80082a8:	f7ff ff0f 	bl	80080ca <inHandlerMode>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d016      	beq.n	80082e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80082b2:	f107 0308 	add.w	r3, r7, #8
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fb41 	bl	8008940 <xQueueGiveFromISR>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d001      	beq.n	80082c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80082c4:	23ff      	movs	r3, #255	; 0xff
 80082c6:	e017      	b.n	80082f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d013      	beq.n	80082f6 <osSemaphoreRelease+0x5e>
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <osSemaphoreRelease+0x68>)
 80082d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	e00a      	b.n	80082f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80082e0:	2300      	movs	r3, #0
 80082e2:	2200      	movs	r2, #0
 80082e4:	2100      	movs	r1, #0
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa30 	bl	800874c <xQueueGenericSend>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d001      	beq.n	80082f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80082f2:	23ff      	movs	r3, #255	; 0xff
 80082f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80082f6:	68fb      	ldr	r3, [r7, #12]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800830c:	f7ff fedd 	bl	80080ca <inHandlerMode>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008316:	2382      	movs	r3, #130	; 0x82
 8008318:	e003      	b.n	8008322 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fd1f 	bl	8008d5e <vQueueDelete>

  return osOK; 
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800832a:	b590      	push	{r4, r7, lr}
 800832c:	b085      	sub	sp, #20
 800832e:	af02      	add	r7, sp, #8
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d012      	beq.n	8008362 <osMessageCreate+0x38>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00e      	beq.n	8008362 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6818      	ldr	r0, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6859      	ldr	r1, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68dc      	ldr	r4, [r3, #12]
 8008354:	2300      	movs	r3, #0
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	4623      	mov	r3, r4
 800835a:	f000 f92b 	bl	80085b4 <xQueueGenericCreateStatic>
 800835e:	4603      	mov	r3, r0
 8008360:	e008      	b.n	8008374 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	4619      	mov	r1, r3
 800836e:	f000 f994 	bl	800869a <xQueueGenericCreate>
 8008372:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	bd90      	pop	{r4, r7, pc}

0800837c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f103 0208 	add.w	r2, r3, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f04f 32ff 	mov.w	r2, #4294967295
 8008394:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f103 0208 	add.w	r2, r3, #8
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f103 0208 	add.w	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	601a      	str	r2, [r3, #0]
}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d103      	bne.n	800843e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	e00c      	b.n	8008458 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3308      	adds	r3, #8
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	e002      	b.n	800844c <vListInsert+0x2e>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	429a      	cmp	r2, r3
 8008456:	d2f6      	bcs.n	8008446 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	601a      	str	r2, [r3, #0]
}
 8008484:	bf00      	nop
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	6892      	ldr	r2, [r2, #8]
 80084a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6852      	ldr	r2, [r2, #4]
 80084b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d103      	bne.n	80084c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	1e5a      	subs	r2, r3, #1
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	60bb      	str	r3, [r7, #8]
 800850a:	e7fe      	b.n	800850a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800850c:	f001 fe66 	bl	800a1dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008518:	68f9      	ldr	r1, [r7, #12]
 800851a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800851c:	fb01 f303 	mul.w	r3, r1, r3
 8008520:	441a      	add	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853c:	3b01      	subs	r3, #1
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008542:	fb01 f303 	mul.w	r3, r1, r3
 8008546:	441a      	add	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	22ff      	movs	r2, #255	; 0xff
 8008550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	22ff      	movs	r2, #255	; 0xff
 8008558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d114      	bne.n	800858c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01a      	beq.n	80085a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3310      	adds	r3, #16
 800856e:	4618      	mov	r0, r3
 8008570:	f001 f938 	bl	80097e4 <xTaskRemoveFromEventList>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d012      	beq.n	80085a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800857a:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <xQueueGenericReset+0xcc>)
 800857c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	e009      	b.n	80085a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3310      	adds	r3, #16
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fef3 	bl	800837c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3324      	adds	r3, #36	; 0x24
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff feee 	bl	800837c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085a0:	f001 fe4a 	bl	800a238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085a4:	2301      	movs	r3, #1
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08e      	sub	sp, #56	; 0x38
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d109      	bne.n	80085dc <xQueueGenericCreateStatic+0x28>
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80085da:	e7fe      	b.n	80085da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <xQueueGenericCreateStatic+0x42>
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
 80085f4:	e7fe      	b.n	80085f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <xQueueGenericCreateStatic+0x4e>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <xQueueGenericCreateStatic+0x52>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <xQueueGenericCreateStatic+0x54>
 8008606:	2300      	movs	r3, #0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d109      	bne.n	8008620 <xQueueGenericCreateStatic+0x6c>
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	623b      	str	r3, [r7, #32]
 800861e:	e7fe      	b.n	800861e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <xQueueGenericCreateStatic+0x78>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <xQueueGenericCreateStatic+0x7c>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <xQueueGenericCreateStatic+0x7e>
 8008630:	2300      	movs	r3, #0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <xQueueGenericCreateStatic+0x96>
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e7fe      	b.n	8008648 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800864a:	2348      	movs	r3, #72	; 0x48
 800864c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b48      	cmp	r3, #72	; 0x48
 8008652:	d009      	beq.n	8008668 <xQueueGenericCreateStatic+0xb4>
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	61bb      	str	r3, [r7, #24]
 8008666:	e7fe      	b.n	8008666 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008668:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00d      	beq.n	8008690 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800867c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	4613      	mov	r3, r2
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 f83e 	bl	800870c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008692:	4618      	mov	r0, r3
 8008694:	3730      	adds	r7, #48	; 0x30
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800869a:	b580      	push	{r7, lr}
 800869c:	b08a      	sub	sp, #40	; 0x28
 800869e:	af02      	add	r7, sp, #8
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	4613      	mov	r3, r2
 80086a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <xQueueGenericCreate+0x28>
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	e7fe      	b.n	80086c0 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	fb02 f303 	mul.w	r3, r2, r3
 80086ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	3348      	adds	r3, #72	; 0x48
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 fe9d 	bl	800a410 <pvPortMalloc>
 80086d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	3348      	adds	r3, #72	; 0x48
 80086e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086f0:	79fa      	ldrb	r2, [r7, #7]
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4613      	mov	r3, r2
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f805 	bl	800870c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008702:	69bb      	ldr	r3, [r7, #24]
	}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e002      	b.n	800872e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800873a:	2101      	movs	r1, #1
 800873c:	69b8      	ldr	r0, [r7, #24]
 800873e:	f7ff fed1 	bl	80084e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008742:	bf00      	nop
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08e      	sub	sp, #56	; 0x38
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800875a:	2300      	movs	r3, #0
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <xQueueGenericSend+0x30>
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	62bb      	str	r3, [r7, #40]	; 0x28
 800877a:	e7fe      	b.n	800877a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d103      	bne.n	800878a <xQueueGenericSend+0x3e>
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <xQueueGenericSend+0x42>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <xQueueGenericSend+0x44>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d109      	bne.n	80087a8 <xQueueGenericSend+0x5c>
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
 80087a6:	e7fe      	b.n	80087a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d103      	bne.n	80087b6 <xQueueGenericSend+0x6a>
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <xQueueGenericSend+0x6e>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <xQueueGenericSend+0x70>
 80087ba:	2300      	movs	r3, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d109      	bne.n	80087d4 <xQueueGenericSend+0x88>
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	623b      	str	r3, [r7, #32]
 80087d2:	e7fe      	b.n	80087d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087d4:	f001 f9bc 	bl	8009b50 <xTaskGetSchedulerState>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <xQueueGenericSend+0x98>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <xQueueGenericSend+0x9c>
 80087e4:	2301      	movs	r3, #1
 80087e6:	e000      	b.n	80087ea <xQueueGenericSend+0x9e>
 80087e8:	2300      	movs	r3, #0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d109      	bne.n	8008802 <xQueueGenericSend+0xb6>
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e7fe      	b.n	8008800 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008802:	f001 fceb 	bl	800a1dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880e:	429a      	cmp	r2, r3
 8008810:	d302      	bcc.n	8008818 <xQueueGenericSend+0xcc>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d129      	bne.n	800886c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800881e:	f000 fad8 	bl	8008dd2 <prvCopyDataToQueue>
 8008822:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d010      	beq.n	800884e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	3324      	adds	r3, #36	; 0x24
 8008830:	4618      	mov	r0, r3
 8008832:	f000 ffd7 	bl	80097e4 <xTaskRemoveFromEventList>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d013      	beq.n	8008864 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800883c:	4b3f      	ldr	r3, [pc, #252]	; (800893c <xQueueGenericSend+0x1f0>)
 800883e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	e00a      	b.n	8008864 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d007      	beq.n	8008864 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008854:	4b39      	ldr	r3, [pc, #228]	; (800893c <xQueueGenericSend+0x1f0>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008864:	f001 fce8 	bl	800a238 <vPortExitCritical>
				return pdPASS;
 8008868:	2301      	movs	r3, #1
 800886a:	e063      	b.n	8008934 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d103      	bne.n	800887a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008872:	f001 fce1 	bl	800a238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008876:	2300      	movs	r3, #0
 8008878:	e05c      	b.n	8008934 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008880:	f107 0314 	add.w	r3, r7, #20
 8008884:	4618      	mov	r0, r3
 8008886:	f001 f80f 	bl	80098a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800888a:	2301      	movs	r3, #1
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800888e:	f001 fcd3 	bl	800a238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008892:	f000 fdc7 	bl	8009424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008896:	f001 fca1 	bl	800a1dc <vPortEnterCritical>
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088a0:	b25b      	sxtb	r3, r3
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d103      	bne.n	80088b0 <xQueueGenericSend+0x164>
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088b6:	b25b      	sxtb	r3, r3
 80088b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088bc:	d103      	bne.n	80088c6 <xQueueGenericSend+0x17a>
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088c6:	f001 fcb7 	bl	800a238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ca:	1d3a      	adds	r2, r7, #4
 80088cc:	f107 0314 	add.w	r3, r7, #20
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fffe 	bl	80098d4 <xTaskCheckForTimeOut>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d124      	bne.n	8008928 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088e0:	f000 fb6f 	bl	8008fc2 <prvIsQueueFull>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d018      	beq.n	800891c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	3310      	adds	r3, #16
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 ff52 	bl	800979c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088fa:	f000 fafa 	bl	8008ef2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088fe:	f000 fd9f 	bl	8009440 <xTaskResumeAll>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	f47f af7c 	bne.w	8008802 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800890a:	4b0c      	ldr	r3, [pc, #48]	; (800893c <xQueueGenericSend+0x1f0>)
 800890c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	e772      	b.n	8008802 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800891c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800891e:	f000 fae8 	bl	8008ef2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008922:	f000 fd8d 	bl	8009440 <xTaskResumeAll>
 8008926:	e76c      	b.n	8008802 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892a:	f000 fae2 	bl	8008ef2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800892e:	f000 fd87 	bl	8009440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008932:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008934:	4618      	mov	r0, r3
 8008936:	3738      	adds	r7, #56	; 0x38
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	e000ed04 	.word	0xe000ed04

08008940 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08e      	sub	sp, #56	; 0x38
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <xQueueGiveFromISR+0x28>
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	623b      	str	r3, [r7, #32]
 8008966:	e7fe      	b.n	8008966 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896c:	2b00      	cmp	r3, #0
 800896e:	d009      	beq.n	8008984 <xQueueGiveFromISR+0x44>
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	61fb      	str	r3, [r7, #28]
 8008982:	e7fe      	b.n	8008982 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <xQueueGiveFromISR+0x54>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <xQueueGiveFromISR+0x58>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <xQueueGiveFromISR+0x5a>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d109      	bne.n	80089b2 <xQueueGiveFromISR+0x72>
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	e7fe      	b.n	80089b0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089b2:	f001 fcef 	bl	800a394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089b6:	f3ef 8211 	mrs	r2, BASEPRI
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	617a      	str	r2, [r7, #20]
 80089cc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089de:	429a      	cmp	r2, r3
 80089e0:	d22b      	bcs.n	8008a3a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d112      	bne.n	8008a24 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d016      	beq.n	8008a34 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	3324      	adds	r3, #36	; 0x24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 feea 	bl	80097e4 <xTaskRemoveFromEventList>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00e      	beq.n	8008a34 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00b      	beq.n	8008a34 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	e007      	b.n	8008a34 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a28:	3301      	adds	r3, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	b25a      	sxtb	r2, r3
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a34:	2301      	movs	r3, #1
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
 8008a38:	e001      	b.n	8008a3e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3738      	adds	r7, #56	; 0x38
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	; 0x38
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	623b      	str	r3, [r7, #32]
 8008a82:	e7fe      	b.n	8008a82 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d009      	beq.n	8008aa0 <xQueueSemaphoreTake+0x4c>
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	e7fe      	b.n	8008a9e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aa0:	f001 f856 	bl	8009b50 <xTaskGetSchedulerState>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d102      	bne.n	8008ab0 <xQueueSemaphoreTake+0x5c>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <xQueueSemaphoreTake+0x60>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e000      	b.n	8008ab6 <xQueueSemaphoreTake+0x62>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d109      	bne.n	8008ace <xQueueSemaphoreTake+0x7a>
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	e7fe      	b.n	8008acc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ace:	f001 fb85 	bl	800a1dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d024      	beq.n	8008b28 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	1e5a      	subs	r2, r3, #1
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d104      	bne.n	8008af8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008aee:	f001 f9d3 	bl	8009e98 <pvTaskIncrementMutexHeldCount>
 8008af2:	4602      	mov	r2, r0
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00f      	beq.n	8008b20 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	3310      	adds	r3, #16
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fe6d 	bl	80097e4 <xTaskRemoveFromEventList>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d007      	beq.n	8008b20 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b10:	4b53      	ldr	r3, [pc, #332]	; (8008c60 <xQueueSemaphoreTake+0x20c>)
 8008b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b20:	f001 fb8a 	bl	800a238 <vPortExitCritical>
				return pdPASS;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e096      	b.n	8008c56 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d110      	bne.n	8008b50 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d009      	beq.n	8008b48 <xQueueSemaphoreTake+0xf4>
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	e7fe      	b.n	8008b46 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b48:	f001 fb76 	bl	800a238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e082      	b.n	8008c56 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b56:	f107 030c 	add.w	r3, r7, #12
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fea4 	bl	80098a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b64:	f001 fb68 	bl	800a238 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b68:	f000 fc5c 	bl	8009424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b6c:	f001 fb36 	bl	800a1dc <vPortEnterCritical>
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d103      	bne.n	8008b86 <xQueueSemaphoreTake+0x132>
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d103      	bne.n	8008b9c <xQueueSemaphoreTake+0x148>
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b9c:	f001 fb4c 	bl	800a238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ba0:	463a      	mov	r2, r7
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fe93 	bl	80098d4 <xTaskCheckForTimeOut>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d132      	bne.n	8008c1a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bb6:	f000 f9ee 	bl	8008f96 <prvIsQueueEmpty>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d026      	beq.n	8008c0e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d109      	bne.n	8008bdc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008bc8:	f001 fb08 	bl	800a1dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 ffdb 	bl	8009b8c <xTaskPriorityInherit>
 8008bd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008bd8:	f001 fb2e 	bl	800a238 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	3324      	adds	r3, #36	; 0x24
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fdd9 	bl	800979c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bec:	f000 f981 	bl	8008ef2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bf0:	f000 fc26 	bl	8009440 <xTaskResumeAll>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f47f af69 	bne.w	8008ace <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008bfc:	4b18      	ldr	r3, [pc, #96]	; (8008c60 <xQueueSemaphoreTake+0x20c>)
 8008bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	e75f      	b.n	8008ace <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c10:	f000 f96f 	bl	8008ef2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c14:	f000 fc14 	bl	8009440 <xTaskResumeAll>
 8008c18:	e759      	b.n	8008ace <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008c1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c1c:	f000 f969 	bl	8008ef2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c20:	f000 fc0e 	bl	8009440 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c26:	f000 f9b6 	bl	8008f96 <prvIsQueueEmpty>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f43f af4e 	beq.w	8008ace <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00d      	beq.n	8008c54 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008c38:	f001 fad0 	bl	800a1dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c3e:	f000 f8b0 	bl	8008da2 <prvGetDisinheritPriorityAfterTimeout>
 8008c42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f001 f898 	bl	8009d80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c50:	f001 faf2 	bl	800a238 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3738      	adds	r7, #56	; 0x38
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	e000ed04 	.word	0xe000ed04

08008c64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08e      	sub	sp, #56	; 0x38
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d109      	bne.n	8008c8e <xQueueReceiveFromISR+0x2a>
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	623b      	str	r3, [r7, #32]
 8008c8c:	e7fe      	b.n	8008c8c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d103      	bne.n	8008c9c <xQueueReceiveFromISR+0x38>
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <xQueueReceiveFromISR+0x3c>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <xQueueReceiveFromISR+0x3e>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d109      	bne.n	8008cba <xQueueReceiveFromISR+0x56>
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	61fb      	str	r3, [r7, #28]
 8008cb8:	e7fe      	b.n	8008cb8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cba:	f001 fb6b 	bl	800a394 <vPortValidateInterruptPriority>
	__asm volatile
 8008cbe:	f3ef 8211 	mrs	r2, BASEPRI
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	61ba      	str	r2, [r7, #24]
 8008cd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008cd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d02f      	beq.n	8008d46 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cf4:	f000 f8d7 	bl	8008ea6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	1e5a      	subs	r2, r3, #1
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d08:	d112      	bne.n	8008d30 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d016      	beq.n	8008d40 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	3310      	adds	r3, #16
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fd64 	bl	80097e4 <xTaskRemoveFromEventList>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00e      	beq.n	8008d40 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e007      	b.n	8008d40 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d34:	3301      	adds	r3, #1
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	b25a      	sxtb	r2, r3
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008d40:	2301      	movs	r3, #1
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
 8008d44:	e001      	b.n	8008d4a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3738      	adds	r7, #56	; 0x38
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d109      	bne.n	8008d84 <vQueueDelete+0x26>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	e7fe      	b.n	8008d82 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f935 	bl	8008ff4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d102      	bne.n	8008d9a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f001 fc03 	bl	800a5a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d006      	beq.n	8008dc0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f1c3 0307 	rsb	r3, r3, #7
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e001      	b.n	8008dc4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
	}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10d      	bne.n	8008e0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d14d      	bne.n	8008e94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 ff3b 	bl	8009c78 <xTaskPriorityDisinherit>
 8008e02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	609a      	str	r2, [r3, #8]
 8008e0a:	e043      	b.n	8008e94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d119      	bne.n	8008e46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6858      	ldr	r0, [r3, #4]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68b9      	ldr	r1, [r7, #8]
 8008e1e:	f001 fd09 	bl	800a834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	441a      	add	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d32b      	bcc.n	8008e94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	605a      	str	r2, [r3, #4]
 8008e44:	e026      	b.n	8008e94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68d8      	ldr	r0, [r3, #12]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	461a      	mov	r2, r3
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	f001 fcef 	bl	800a834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	425b      	negs	r3, r3
 8008e60:	441a      	add	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d207      	bcs.n	8008e82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7a:	425b      	negs	r3, r3
 8008e7c:	441a      	add	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d105      	bne.n	8008e94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e9c:	697b      	ldr	r3, [r7, #20]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d018      	beq.n	8008eea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec0:	441a      	add	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d303      	bcc.n	8008eda <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68d9      	ldr	r1, [r3, #12]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6838      	ldr	r0, [r7, #0]
 8008ee6:	f001 fca5 	bl	800a834 <memcpy>
	}
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008efa:	f001 f96f 	bl	800a1dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f06:	e011      	b.n	8008f2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d012      	beq.n	8008f36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3324      	adds	r3, #36	; 0x24
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fc65 	bl	80097e4 <xTaskRemoveFromEventList>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f20:	f000 fd38 	bl	8009994 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dce9      	bgt.n	8008f08 <prvUnlockQueue+0x16>
 8008f34:	e000      	b.n	8008f38 <prvUnlockQueue+0x46>
					break;
 8008f36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	22ff      	movs	r2, #255	; 0xff
 8008f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f40:	f001 f97a 	bl	800a238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f44:	f001 f94a 	bl	800a1dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f50:	e011      	b.n	8008f76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d012      	beq.n	8008f80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3310      	adds	r3, #16
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fc40 	bl	80097e4 <xTaskRemoveFromEventList>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f6a:	f000 fd13 	bl	8009994 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dce9      	bgt.n	8008f52 <prvUnlockQueue+0x60>
 8008f7e:	e000      	b.n	8008f82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f8a:	f001 f955 	bl	800a238 <vPortExitCritical>
}
 8008f8e:	bf00      	nop
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f9e:	f001 f91d 	bl	800a1dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d102      	bne.n	8008fb0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008faa:	2301      	movs	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	e001      	b.n	8008fb4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fb4:	f001 f940 	bl	800a238 <vPortExitCritical>

	return xReturn;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fca:	f001 f907 	bl	800a1dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d102      	bne.n	8008fe0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	e001      	b.n	8008fe4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fe4:	f001 f928 	bl	800a238 <vPortExitCritical>

	return xReturn;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e016      	b.n	8009030 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009002:	4a10      	ldr	r2, [pc, #64]	; (8009044 <vQueueUnregisterQueue+0x50>)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	4413      	add	r3, r2
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	429a      	cmp	r2, r3
 8009010:	d10b      	bne.n	800902a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009012:	4a0c      	ldr	r2, [pc, #48]	; (8009044 <vQueueUnregisterQueue+0x50>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2100      	movs	r1, #0
 8009018:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800901c:	4a09      	ldr	r2, [pc, #36]	; (8009044 <vQueueUnregisterQueue+0x50>)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	4413      	add	r3, r2
 8009024:	2200      	movs	r2, #0
 8009026:	605a      	str	r2, [r3, #4]
				break;
 8009028:	e005      	b.n	8009036 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3301      	adds	r3, #1
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b07      	cmp	r3, #7
 8009034:	d9e5      	bls.n	8009002 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20004e68 	.word	0x20004e68

08009048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08e      	sub	sp, #56	; 0x38
 800904c:	af04      	add	r7, sp, #16
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	2b00      	cmp	r3, #0
 800905a:	d109      	bne.n	8009070 <xTaskCreateStatic+0x28>
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	623b      	str	r3, [r7, #32]
 800906e:	e7fe      	b.n	800906e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	2b00      	cmp	r3, #0
 8009074:	d109      	bne.n	800908a <xTaskCreateStatic+0x42>
 8009076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	61fb      	str	r3, [r7, #28]
 8009088:	e7fe      	b.n	8009088 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800908a:	2354      	movs	r3, #84	; 0x54
 800908c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b54      	cmp	r3, #84	; 0x54
 8009092:	d009      	beq.n	80090a8 <xTaskCreateStatic+0x60>
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	61bb      	str	r3, [r7, #24]
 80090a6:	e7fe      	b.n	80090a6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01e      	beq.n	80090ee <xTaskCreateStatic+0xa6>
 80090b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d01b      	beq.n	80090ee <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090c8:	2300      	movs	r3, #0
 80090ca:	9303      	str	r3, [sp, #12]
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	f107 0314 	add.w	r3, r7, #20
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f850 	bl	8009186 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090e8:	f000 f8d4 	bl	8009294 <prvAddNewTaskToReadyList>
 80090ec:	e001      	b.n	80090f2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090f2:	697b      	ldr	r3, [r7, #20]
	}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3728      	adds	r7, #40	; 0x28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08c      	sub	sp, #48	; 0x30
 8009100:	af04      	add	r7, sp, #16
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	4613      	mov	r3, r2
 800910a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800910c:	88fb      	ldrh	r3, [r7, #6]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4618      	mov	r0, r3
 8009112:	f001 f97d 	bl	800a410 <pvPortMalloc>
 8009116:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00e      	beq.n	800913c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800911e:	2054      	movs	r0, #84	; 0x54
 8009120:	f001 f976 	bl	800a410 <pvPortMalloc>
 8009124:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	631a      	str	r2, [r3, #48]	; 0x30
 8009132:	e005      	b.n	8009140 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009134:	6978      	ldr	r0, [r7, #20]
 8009136:	f001 fa33 	bl	800a5a0 <vPortFree>
 800913a:	e001      	b.n	8009140 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800913c:	2300      	movs	r3, #0
 800913e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d017      	beq.n	8009176 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800914e:	88fa      	ldrh	r2, [r7, #6]
 8009150:	2300      	movs	r3, #0
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	9302      	str	r3, [sp, #8]
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f80e 	bl	8009186 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800916a:	69f8      	ldr	r0, [r7, #28]
 800916c:	f000 f892 	bl	8009294 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009170:	2301      	movs	r3, #1
 8009172:	61bb      	str	r3, [r7, #24]
 8009174:	e002      	b.n	800917c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009176:	f04f 33ff 	mov.w	r3, #4294967295
 800917a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800917c:	69bb      	ldr	r3, [r7, #24]
	}
 800917e:	4618      	mov	r0, r3
 8009180:	3720      	adds	r7, #32
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b088      	sub	sp, #32
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
 8009192:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800919e:	3b01      	subs	r3, #1
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f023 0307 	bic.w	r3, r3, #7
 80091ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	f003 0307 	and.w	r3, r3, #7
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d009      	beq.n	80091cc <prvInitialiseNewTask+0x46>
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	e7fe      	b.n	80091ca <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d01f      	beq.n	8009212 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]
 80091d6:	e012      	b.n	80091fe <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4413      	add	r3, r2
 80091de:	7819      	ldrb	r1, [r3, #0]
 80091e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	4413      	add	r3, r2
 80091e6:	3334      	adds	r3, #52	; 0x34
 80091e8:	460a      	mov	r2, r1
 80091ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d006      	beq.n	8009206 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	3301      	adds	r3, #1
 80091fc:	61fb      	str	r3, [r7, #28]
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	2b0f      	cmp	r3, #15
 8009202:	d9e9      	bls.n	80091d8 <prvInitialiseNewTask+0x52>
 8009204:	e000      	b.n	8009208 <prvInitialiseNewTask+0x82>
			{
				break;
 8009206:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009210:	e003      	b.n	800921a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	2b06      	cmp	r3, #6
 800921e:	d901      	bls.n	8009224 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009220:	2306      	movs	r3, #6
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009228:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800922e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009232:	2200      	movs	r2, #0
 8009234:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	3304      	adds	r3, #4
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff f8be 	bl	80083bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	3318      	adds	r3, #24
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff f8b9 	bl	80083bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	f1c3 0207 	rsb	r2, r3, #7
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800925e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009262:	2200      	movs	r2, #0
 8009264:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	68f9      	ldr	r1, [r7, #12]
 8009272:	69b8      	ldr	r0, [r7, #24]
 8009274:	f000 fe8a 	bl	8009f8c <pxPortInitialiseStack>
 8009278:	4602      	mov	r2, r0
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800928a:	bf00      	nop
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800929c:	f000 ff9e 	bl	800a1dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092a0:	4b2a      	ldr	r3, [pc, #168]	; (800934c <prvAddNewTaskToReadyList+0xb8>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	4a29      	ldr	r2, [pc, #164]	; (800934c <prvAddNewTaskToReadyList+0xb8>)
 80092a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092aa:	4b29      	ldr	r3, [pc, #164]	; (8009350 <prvAddNewTaskToReadyList+0xbc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092b2:	4a27      	ldr	r2, [pc, #156]	; (8009350 <prvAddNewTaskToReadyList+0xbc>)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092b8:	4b24      	ldr	r3, [pc, #144]	; (800934c <prvAddNewTaskToReadyList+0xb8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d110      	bne.n	80092e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092c0:	f000 fb8c 	bl	80099dc <prvInitialiseTaskLists>
 80092c4:	e00d      	b.n	80092e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092c6:	4b23      	ldr	r3, [pc, #140]	; (8009354 <prvAddNewTaskToReadyList+0xc0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d109      	bne.n	80092e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092ce:	4b20      	ldr	r3, [pc, #128]	; (8009350 <prvAddNewTaskToReadyList+0xbc>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	429a      	cmp	r2, r3
 80092da:	d802      	bhi.n	80092e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092dc:	4a1c      	ldr	r2, [pc, #112]	; (8009350 <prvAddNewTaskToReadyList+0xbc>)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092e2:	4b1d      	ldr	r3, [pc, #116]	; (8009358 <prvAddNewTaskToReadyList+0xc4>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3301      	adds	r3, #1
 80092e8:	4a1b      	ldr	r2, [pc, #108]	; (8009358 <prvAddNewTaskToReadyList+0xc4>)
 80092ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	2201      	movs	r2, #1
 80092f2:	409a      	lsls	r2, r3
 80092f4:	4b19      	ldr	r3, [pc, #100]	; (800935c <prvAddNewTaskToReadyList+0xc8>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	4a18      	ldr	r2, [pc, #96]	; (800935c <prvAddNewTaskToReadyList+0xc8>)
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4a15      	ldr	r2, [pc, #84]	; (8009360 <prvAddNewTaskToReadyList+0xcc>)
 800930c:	441a      	add	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3304      	adds	r3, #4
 8009312:	4619      	mov	r1, r3
 8009314:	4610      	mov	r0, r2
 8009316:	f7ff f85e 	bl	80083d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800931a:	f000 ff8d 	bl	800a238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800931e:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <prvAddNewTaskToReadyList+0xc0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00e      	beq.n	8009344 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009326:	4b0a      	ldr	r3, [pc, #40]	; (8009350 <prvAddNewTaskToReadyList+0xbc>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	429a      	cmp	r2, r3
 8009332:	d207      	bcs.n	8009344 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <prvAddNewTaskToReadyList+0xd0>)
 8009336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20000640 	.word	0x20000640
 8009350:	20000540 	.word	0x20000540
 8009354:	2000064c 	.word	0x2000064c
 8009358:	2000065c 	.word	0x2000065c
 800935c:	20000648 	.word	0x20000648
 8009360:	20000544 	.word	0x20000544
 8009364:	e000ed04 	.word	0xe000ed04

08009368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08a      	sub	sp, #40	; 0x28
 800936c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009372:	2300      	movs	r3, #0
 8009374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009376:	463a      	mov	r2, r7
 8009378:	1d39      	adds	r1, r7, #4
 800937a:	f107 0308 	add.w	r3, r7, #8
 800937e:	4618      	mov	r0, r3
 8009380:	f7f7 ff90 	bl	80012a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	9202      	str	r2, [sp, #8]
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	2300      	movs	r3, #0
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	2300      	movs	r3, #0
 8009394:	460a      	mov	r2, r1
 8009396:	491d      	ldr	r1, [pc, #116]	; (800940c <vTaskStartScheduler+0xa4>)
 8009398:	481d      	ldr	r0, [pc, #116]	; (8009410 <vTaskStartScheduler+0xa8>)
 800939a:	f7ff fe55 	bl	8009048 <xTaskCreateStatic>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <vTaskStartScheduler+0xac>)
 80093a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093a4:	4b1b      	ldr	r3, [pc, #108]	; (8009414 <vTaskStartScheduler+0xac>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093ac:	2301      	movs	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	e001      	b.n	80093b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d115      	bne.n	80093e8 <vTaskStartScheduler+0x80>
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093ce:	4b12      	ldr	r3, [pc, #72]	; (8009418 <vTaskStartScheduler+0xb0>)
 80093d0:	f04f 32ff 	mov.w	r2, #4294967295
 80093d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093d6:	4b11      	ldr	r3, [pc, #68]	; (800941c <vTaskStartScheduler+0xb4>)
 80093d8:	2201      	movs	r2, #1
 80093da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093dc:	4b10      	ldr	r3, [pc, #64]	; (8009420 <vTaskStartScheduler+0xb8>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093e2:	f000 fe5d 	bl	800a0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093e6:	e00d      	b.n	8009404 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ee:	d109      	bne.n	8009404 <vTaskStartScheduler+0x9c>
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	e7fe      	b.n	8009402 <vTaskStartScheduler+0x9a>
}
 8009404:	bf00      	nop
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	0800bfc4 	.word	0x0800bfc4
 8009410:	080099ad 	.word	0x080099ad
 8009414:	20000664 	.word	0x20000664
 8009418:	20000660 	.word	0x20000660
 800941c:	2000064c 	.word	0x2000064c
 8009420:	20000644 	.word	0x20000644

08009424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <vTaskSuspendAll+0x18>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3301      	adds	r3, #1
 800942e:	4a03      	ldr	r2, [pc, #12]	; (800943c <vTaskSuspendAll+0x18>)
 8009430:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009432:	bf00      	nop
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	20000668 	.word	0x20000668

08009440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800944e:	4b41      	ldr	r3, [pc, #260]	; (8009554 <xTaskResumeAll+0x114>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d109      	bne.n	800946a <xTaskResumeAll+0x2a>
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	e7fe      	b.n	8009468 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800946a:	f000 feb7 	bl	800a1dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800946e:	4b39      	ldr	r3, [pc, #228]	; (8009554 <xTaskResumeAll+0x114>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3b01      	subs	r3, #1
 8009474:	4a37      	ldr	r2, [pc, #220]	; (8009554 <xTaskResumeAll+0x114>)
 8009476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009478:	4b36      	ldr	r3, [pc, #216]	; (8009554 <xTaskResumeAll+0x114>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d161      	bne.n	8009544 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009480:	4b35      	ldr	r3, [pc, #212]	; (8009558 <xTaskResumeAll+0x118>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d05d      	beq.n	8009544 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009488:	e02e      	b.n	80094e8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800948a:	4b34      	ldr	r3, [pc, #208]	; (800955c <xTaskResumeAll+0x11c>)
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3318      	adds	r3, #24
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fffa 	bl	8008490 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3304      	adds	r3, #4
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fff5 	bl	8008490 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	2201      	movs	r2, #1
 80094ac:	409a      	lsls	r2, r3
 80094ae:	4b2c      	ldr	r3, [pc, #176]	; (8009560 <xTaskResumeAll+0x120>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	4a2a      	ldr	r2, [pc, #168]	; (8009560 <xTaskResumeAll+0x120>)
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094bc:	4613      	mov	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4a27      	ldr	r2, [pc, #156]	; (8009564 <xTaskResumeAll+0x124>)
 80094c6:	441a      	add	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3304      	adds	r3, #4
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f7fe ff81 	bl	80083d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d8:	4b23      	ldr	r3, [pc, #140]	; (8009568 <xTaskResumeAll+0x128>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	429a      	cmp	r2, r3
 80094e0:	d302      	bcc.n	80094e8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80094e2:	4b22      	ldr	r3, [pc, #136]	; (800956c <xTaskResumeAll+0x12c>)
 80094e4:	2201      	movs	r2, #1
 80094e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094e8:	4b1c      	ldr	r3, [pc, #112]	; (800955c <xTaskResumeAll+0x11c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1cc      	bne.n	800948a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094f6:	f000 fb0b 	bl	8009b10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094fa:	4b1d      	ldr	r3, [pc, #116]	; (8009570 <xTaskResumeAll+0x130>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d010      	beq.n	8009528 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009506:	f000 f837 	bl	8009578 <xTaskIncrementTick>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009510:	4b16      	ldr	r3, [pc, #88]	; (800956c <xTaskResumeAll+0x12c>)
 8009512:	2201      	movs	r2, #1
 8009514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3b01      	subs	r3, #1
 800951a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1f1      	bne.n	8009506 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8009522:	4b13      	ldr	r3, [pc, #76]	; (8009570 <xTaskResumeAll+0x130>)
 8009524:	2200      	movs	r2, #0
 8009526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009528:	4b10      	ldr	r3, [pc, #64]	; (800956c <xTaskResumeAll+0x12c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d009      	beq.n	8009544 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009530:	2301      	movs	r3, #1
 8009532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009534:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <xTaskResumeAll+0x134>)
 8009536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009544:	f000 fe78 	bl	800a238 <vPortExitCritical>

	return xAlreadyYielded;
 8009548:	68bb      	ldr	r3, [r7, #8]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20000668 	.word	0x20000668
 8009558:	20000640 	.word	0x20000640
 800955c:	20000600 	.word	0x20000600
 8009560:	20000648 	.word	0x20000648
 8009564:	20000544 	.word	0x20000544
 8009568:	20000540 	.word	0x20000540
 800956c:	20000654 	.word	0x20000654
 8009570:	20000650 	.word	0x20000650
 8009574:	e000ed04 	.word	0xe000ed04

08009578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800957e:	2300      	movs	r3, #0
 8009580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009582:	4b4e      	ldr	r3, [pc, #312]	; (80096bc <xTaskIncrementTick+0x144>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f040 808d 	bne.w	80096a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800958c:	4b4c      	ldr	r3, [pc, #304]	; (80096c0 <xTaskIncrementTick+0x148>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009594:	4a4a      	ldr	r2, [pc, #296]	; (80096c0 <xTaskIncrementTick+0x148>)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d11f      	bne.n	80095e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80095a0:	4b48      	ldr	r3, [pc, #288]	; (80096c4 <xTaskIncrementTick+0x14c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d009      	beq.n	80095be <xTaskIncrementTick+0x46>
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	e7fe      	b.n	80095bc <xTaskIncrementTick+0x44>
 80095be:	4b41      	ldr	r3, [pc, #260]	; (80096c4 <xTaskIncrementTick+0x14c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	4b40      	ldr	r3, [pc, #256]	; (80096c8 <xTaskIncrementTick+0x150>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a3e      	ldr	r2, [pc, #248]	; (80096c4 <xTaskIncrementTick+0x14c>)
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	4a3e      	ldr	r2, [pc, #248]	; (80096c8 <xTaskIncrementTick+0x150>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	4b3e      	ldr	r3, [pc, #248]	; (80096cc <xTaskIncrementTick+0x154>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3301      	adds	r3, #1
 80095d8:	4a3c      	ldr	r2, [pc, #240]	; (80096cc <xTaskIncrementTick+0x154>)
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	f000 fa98 	bl	8009b10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095e0:	4b3b      	ldr	r3, [pc, #236]	; (80096d0 <xTaskIncrementTick+0x158>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d348      	bcc.n	800967c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ea:	4b36      	ldr	r3, [pc, #216]	; (80096c4 <xTaskIncrementTick+0x14c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f4:	4b36      	ldr	r3, [pc, #216]	; (80096d0 <xTaskIncrementTick+0x158>)
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295
 80095fa:	601a      	str	r2, [r3, #0]
					break;
 80095fc:	e03e      	b.n	800967c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fe:	4b31      	ldr	r3, [pc, #196]	; (80096c4 <xTaskIncrementTick+0x14c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d203      	bcs.n	800961e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009616:	4a2e      	ldr	r2, [pc, #184]	; (80096d0 <xTaskIncrementTick+0x158>)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800961c:	e02e      	b.n	800967c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	3304      	adds	r3, #4
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe ff34 	bl	8008490 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3318      	adds	r3, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe ff2b 	bl	8008490 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963e:	2201      	movs	r2, #1
 8009640:	409a      	lsls	r2, r3
 8009642:	4b24      	ldr	r3, [pc, #144]	; (80096d4 <xTaskIncrementTick+0x15c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4313      	orrs	r3, r2
 8009648:	4a22      	ldr	r2, [pc, #136]	; (80096d4 <xTaskIncrementTick+0x15c>)
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4a1f      	ldr	r2, [pc, #124]	; (80096d8 <xTaskIncrementTick+0x160>)
 800965a:	441a      	add	r2, r3
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	3304      	adds	r3, #4
 8009660:	4619      	mov	r1, r3
 8009662:	4610      	mov	r0, r2
 8009664:	f7fe feb7 	bl	80083d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966c:	4b1b      	ldr	r3, [pc, #108]	; (80096dc <xTaskIncrementTick+0x164>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	429a      	cmp	r2, r3
 8009674:	d3b9      	bcc.n	80095ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009676:	2301      	movs	r3, #1
 8009678:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967a:	e7b6      	b.n	80095ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800967c:	4b17      	ldr	r3, [pc, #92]	; (80096dc <xTaskIncrementTick+0x164>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	4915      	ldr	r1, [pc, #84]	; (80096d8 <xTaskIncrementTick+0x160>)
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	440b      	add	r3, r1
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d901      	bls.n	8009698 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8009694:	2301      	movs	r3, #1
 8009696:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009698:	4b11      	ldr	r3, [pc, #68]	; (80096e0 <xTaskIncrementTick+0x168>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d007      	beq.n	80096b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80096a0:	2301      	movs	r3, #1
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	e004      	b.n	80096b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096a6:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <xTaskIncrementTick+0x16c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3301      	adds	r3, #1
 80096ac:	4a0d      	ldr	r2, [pc, #52]	; (80096e4 <xTaskIncrementTick+0x16c>)
 80096ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096b0:	697b      	ldr	r3, [r7, #20]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000668 	.word	0x20000668
 80096c0:	20000644 	.word	0x20000644
 80096c4:	200005f8 	.word	0x200005f8
 80096c8:	200005fc 	.word	0x200005fc
 80096cc:	20000658 	.word	0x20000658
 80096d0:	20000660 	.word	0x20000660
 80096d4:	20000648 	.word	0x20000648
 80096d8:	20000544 	.word	0x20000544
 80096dc:	20000540 	.word	0x20000540
 80096e0:	20000654 	.word	0x20000654
 80096e4:	20000650 	.word	0x20000650

080096e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ee:	4b26      	ldr	r3, [pc, #152]	; (8009788 <vTaskSwitchContext+0xa0>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096f6:	4b25      	ldr	r3, [pc, #148]	; (800978c <vTaskSwitchContext+0xa4>)
 80096f8:	2201      	movs	r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096fc:	e03e      	b.n	800977c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80096fe:	4b23      	ldr	r3, [pc, #140]	; (800978c <vTaskSwitchContext+0xa4>)
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009704:	4b22      	ldr	r3, [pc, #136]	; (8009790 <vTaskSwitchContext+0xa8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	fab3 f383 	clz	r3, r3
 8009710:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009712:	7afb      	ldrb	r3, [r7, #11]
 8009714:	f1c3 031f 	rsb	r3, r3, #31
 8009718:	617b      	str	r3, [r7, #20]
 800971a:	491e      	ldr	r1, [pc, #120]	; (8009794 <vTaskSwitchContext+0xac>)
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d109      	bne.n	8009742 <vTaskSwitchContext+0x5a>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	607b      	str	r3, [r7, #4]
 8009740:	e7fe      	b.n	8009740 <vTaskSwitchContext+0x58>
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a11      	ldr	r2, [pc, #68]	; (8009794 <vTaskSwitchContext+0xac>)
 800974e:	4413      	add	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	605a      	str	r2, [r3, #4]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3308      	adds	r3, #8
 8009764:	429a      	cmp	r2, r3
 8009766:	d104      	bne.n	8009772 <vTaskSwitchContext+0x8a>
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	605a      	str	r2, [r3, #4]
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4a07      	ldr	r2, [pc, #28]	; (8009798 <vTaskSwitchContext+0xb0>)
 800977a:	6013      	str	r3, [r2, #0]
}
 800977c:	bf00      	nop
 800977e:	371c      	adds	r7, #28
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	20000668 	.word	0x20000668
 800978c:	20000654 	.word	0x20000654
 8009790:	20000648 	.word	0x20000648
 8009794:	20000544 	.word	0x20000544
 8009798:	20000540 	.word	0x20000540

0800979c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d109      	bne.n	80097c0 <vTaskPlaceOnEventList+0x24>
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	e7fe      	b.n	80097be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <vTaskPlaceOnEventList+0x44>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3318      	adds	r3, #24
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7fe fe28 	bl	800841e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097ce:	2101      	movs	r1, #1
 80097d0:	6838      	ldr	r0, [r7, #0]
 80097d2:	f000 fb75 	bl	8009ec0 <prvAddCurrentTaskToDelayedList>
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000540 	.word	0x20000540

080097e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d109      	bne.n	800980e <xTaskRemoveFromEventList+0x2a>
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	e7fe      	b.n	800980c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	3318      	adds	r3, #24
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fe3c 	bl	8008490 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009818:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <xTaskRemoveFromEventList+0xac>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d11c      	bne.n	800985a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	3304      	adds	r3, #4
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe fe33 	bl	8008490 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	2201      	movs	r2, #1
 8009830:	409a      	lsls	r2, r3
 8009832:	4b18      	ldr	r3, [pc, #96]	; (8009894 <xTaskRemoveFromEventList+0xb0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4313      	orrs	r3, r2
 8009838:	4a16      	ldr	r2, [pc, #88]	; (8009894 <xTaskRemoveFromEventList+0xb0>)
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4a13      	ldr	r2, [pc, #76]	; (8009898 <xTaskRemoveFromEventList+0xb4>)
 800984a:	441a      	add	r2, r3
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	3304      	adds	r3, #4
 8009850:	4619      	mov	r1, r3
 8009852:	4610      	mov	r0, r2
 8009854:	f7fe fdbf 	bl	80083d6 <vListInsertEnd>
 8009858:	e005      	b.n	8009866 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3318      	adds	r3, #24
 800985e:	4619      	mov	r1, r3
 8009860:	480e      	ldr	r0, [pc, #56]	; (800989c <xTaskRemoveFromEventList+0xb8>)
 8009862:	f7fe fdb8 	bl	80083d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986a:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <xTaskRemoveFromEventList+0xbc>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	429a      	cmp	r2, r3
 8009872:	d905      	bls.n	8009880 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <xTaskRemoveFromEventList+0xc0>)
 800987a:	2201      	movs	r2, #1
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e001      	b.n	8009884 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009884:	697b      	ldr	r3, [r7, #20]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000668 	.word	0x20000668
 8009894:	20000648 	.word	0x20000648
 8009898:	20000544 	.word	0x20000544
 800989c:	20000600 	.word	0x20000600
 80098a0:	20000540 	.word	0x20000540
 80098a4:	20000654 	.word	0x20000654

080098a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098b0:	4b06      	ldr	r3, [pc, #24]	; (80098cc <vTaskInternalSetTimeOutState+0x24>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <vTaskInternalSetTimeOutState+0x28>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	605a      	str	r2, [r3, #4]
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	20000658 	.word	0x20000658
 80098d0:	20000644 	.word	0x20000644

080098d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d109      	bne.n	80098f8 <xTaskCheckForTimeOut+0x24>
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	613b      	str	r3, [r7, #16]
 80098f6:	e7fe      	b.n	80098f6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <xTaskCheckForTimeOut+0x3e>
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	e7fe      	b.n	8009910 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009912:	f000 fc63 	bl	800a1dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009916:	4b1d      	ldr	r3, [pc, #116]	; (800998c <xTaskCheckForTimeOut+0xb8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d102      	bne.n	8009936 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009930:	2300      	movs	r3, #0
 8009932:	61fb      	str	r3, [r7, #28]
 8009934:	e023      	b.n	800997e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	4b15      	ldr	r3, [pc, #84]	; (8009990 <xTaskCheckForTimeOut+0xbc>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	429a      	cmp	r2, r3
 8009940:	d007      	beq.n	8009952 <xTaskCheckForTimeOut+0x7e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	429a      	cmp	r2, r3
 800994a:	d302      	bcc.n	8009952 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800994c:	2301      	movs	r3, #1
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	e015      	b.n	800997e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	429a      	cmp	r2, r3
 800995a:	d20b      	bcs.n	8009974 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	1ad2      	subs	r2, r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff ff9d 	bl	80098a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800996e:	2300      	movs	r3, #0
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	e004      	b.n	800997e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800997a:	2301      	movs	r3, #1
 800997c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800997e:	f000 fc5b 	bl	800a238 <vPortExitCritical>

	return xReturn;
 8009982:	69fb      	ldr	r3, [r7, #28]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000644 	.word	0x20000644
 8009990:	20000658 	.word	0x20000658

08009994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009994:	b480      	push	{r7}
 8009996:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009998:	4b03      	ldr	r3, [pc, #12]	; (80099a8 <vTaskMissedYield+0x14>)
 800999a:	2201      	movs	r2, #1
 800999c:	601a      	str	r2, [r3, #0]
}
 800999e:	bf00      	nop
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	20000654 	.word	0x20000654

080099ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099b4:	f000 f852 	bl	8009a5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099b8:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <prvIdleTask+0x28>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d9f9      	bls.n	80099b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099c0:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <prvIdleTask+0x2c>)
 80099c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099d0:	e7f0      	b.n	80099b4 <prvIdleTask+0x8>
 80099d2:	bf00      	nop
 80099d4:	20000544 	.word	0x20000544
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e2:	2300      	movs	r3, #0
 80099e4:	607b      	str	r3, [r7, #4]
 80099e6:	e00c      	b.n	8009a02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4a12      	ldr	r2, [pc, #72]	; (8009a3c <prvInitialiseTaskLists+0x60>)
 80099f4:	4413      	add	r3, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fcc0 	bl	800837c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3301      	adds	r3, #1
 8009a00:	607b      	str	r3, [r7, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b06      	cmp	r3, #6
 8009a06:	d9ef      	bls.n	80099e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a08:	480d      	ldr	r0, [pc, #52]	; (8009a40 <prvInitialiseTaskLists+0x64>)
 8009a0a:	f7fe fcb7 	bl	800837c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a0e:	480d      	ldr	r0, [pc, #52]	; (8009a44 <prvInitialiseTaskLists+0x68>)
 8009a10:	f7fe fcb4 	bl	800837c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a14:	480c      	ldr	r0, [pc, #48]	; (8009a48 <prvInitialiseTaskLists+0x6c>)
 8009a16:	f7fe fcb1 	bl	800837c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a1a:	480c      	ldr	r0, [pc, #48]	; (8009a4c <prvInitialiseTaskLists+0x70>)
 8009a1c:	f7fe fcae 	bl	800837c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a20:	480b      	ldr	r0, [pc, #44]	; (8009a50 <prvInitialiseTaskLists+0x74>)
 8009a22:	f7fe fcab 	bl	800837c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a26:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <prvInitialiseTaskLists+0x78>)
 8009a28:	4a05      	ldr	r2, [pc, #20]	; (8009a40 <prvInitialiseTaskLists+0x64>)
 8009a2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <prvInitialiseTaskLists+0x7c>)
 8009a2e:	4a05      	ldr	r2, [pc, #20]	; (8009a44 <prvInitialiseTaskLists+0x68>)
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000544 	.word	0x20000544
 8009a40:	200005d0 	.word	0x200005d0
 8009a44:	200005e4 	.word	0x200005e4
 8009a48:	20000600 	.word	0x20000600
 8009a4c:	20000614 	.word	0x20000614
 8009a50:	2000062c 	.word	0x2000062c
 8009a54:	200005f8 	.word	0x200005f8
 8009a58:	200005fc 	.word	0x200005fc

08009a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a62:	e019      	b.n	8009a98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a64:	f000 fbba 	bl	800a1dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a68:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <prvCheckTasksWaitingTermination+0x4c>)
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe fd0b 	bl	8008490 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a7a:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <prvCheckTasksWaitingTermination+0x50>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <prvCheckTasksWaitingTermination+0x50>)
 8009a82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a84:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <prvCheckTasksWaitingTermination+0x54>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <prvCheckTasksWaitingTermination+0x54>)
 8009a8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a8e:	f000 fbd3 	bl	800a238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f80e 	bl	8009ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a98:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <prvCheckTasksWaitingTermination+0x54>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e1      	bne.n	8009a64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20000614 	.word	0x20000614
 8009aac:	20000640 	.word	0x20000640
 8009ab0:	20000628 	.word	0x20000628

08009ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d108      	bne.n	8009ad8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fd68 	bl	800a5a0 <vPortFree>
				vPortFree( pxTCB );
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fd65 	bl	800a5a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ad6:	e017      	b.n	8009b08 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d103      	bne.n	8009aea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fd5c 	bl	800a5a0 <vPortFree>
	}
 8009ae8:	e00e      	b.n	8009b08 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d009      	beq.n	8009b08 <prvDeleteTCB+0x54>
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	e7fe      	b.n	8009b06 <prvDeleteTCB+0x52>
	}
 8009b08:	bf00      	nop
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b16:	4b0c      	ldr	r3, [pc, #48]	; (8009b48 <prvResetNextTaskUnblockTime+0x38>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d104      	bne.n	8009b2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b20:	4b0a      	ldr	r3, [pc, #40]	; (8009b4c <prvResetNextTaskUnblockTime+0x3c>)
 8009b22:	f04f 32ff 	mov.w	r2, #4294967295
 8009b26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b28:	e008      	b.n	8009b3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b2a:	4b07      	ldr	r3, [pc, #28]	; (8009b48 <prvResetNextTaskUnblockTime+0x38>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4a04      	ldr	r2, [pc, #16]	; (8009b4c <prvResetNextTaskUnblockTime+0x3c>)
 8009b3a:	6013      	str	r3, [r2, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	200005f8 	.word	0x200005f8
 8009b4c:	20000660 	.word	0x20000660

08009b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b56:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <xTaskGetSchedulerState+0x34>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d102      	bne.n	8009b64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	607b      	str	r3, [r7, #4]
 8009b62:	e008      	b.n	8009b76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b64:	4b08      	ldr	r3, [pc, #32]	; (8009b88 <xTaskGetSchedulerState+0x38>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	607b      	str	r3, [r7, #4]
 8009b70:	e001      	b.n	8009b76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b72:	2300      	movs	r3, #0
 8009b74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b76:	687b      	ldr	r3, [r7, #4]
	}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	2000064c 	.word	0x2000064c
 8009b88:	20000668 	.word	0x20000668

08009b8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d05e      	beq.n	8009c60 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba6:	4b31      	ldr	r3, [pc, #196]	; (8009c6c <xTaskPriorityInherit+0xe0>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d24e      	bcs.n	8009c4e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	db06      	blt.n	8009bc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb8:	4b2c      	ldr	r3, [pc, #176]	; (8009c6c <xTaskPriorityInherit+0xe0>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbe:	f1c3 0207 	rsb	r2, r3, #7
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6959      	ldr	r1, [r3, #20]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bce:	4613      	mov	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4a26      	ldr	r2, [pc, #152]	; (8009c70 <xTaskPriorityInherit+0xe4>)
 8009bd8:	4413      	add	r3, r2
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	d12f      	bne.n	8009c3e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	3304      	adds	r3, #4
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fc54 	bl	8008490 <uxListRemove>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10a      	bne.n	8009c04 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf8:	43da      	mvns	r2, r3
 8009bfa:	4b1e      	ldr	r3, [pc, #120]	; (8009c74 <xTaskPriorityInherit+0xe8>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	4a1c      	ldr	r2, [pc, #112]	; (8009c74 <xTaskPriorityInherit+0xe8>)
 8009c02:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c04:	4b19      	ldr	r3, [pc, #100]	; (8009c6c <xTaskPriorityInherit+0xe0>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c12:	2201      	movs	r2, #1
 8009c14:	409a      	lsls	r2, r3
 8009c16:	4b17      	ldr	r3, [pc, #92]	; (8009c74 <xTaskPriorityInherit+0xe8>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	4a15      	ldr	r2, [pc, #84]	; (8009c74 <xTaskPriorityInherit+0xe8>)
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4a10      	ldr	r2, [pc, #64]	; (8009c70 <xTaskPriorityInherit+0xe4>)
 8009c2e:	441a      	add	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f7fe fbcd 	bl	80083d6 <vListInsertEnd>
 8009c3c:	e004      	b.n	8009c48 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <xTaskPriorityInherit+0xe0>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e008      	b.n	8009c60 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <xTaskPriorityInherit+0xe0>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d201      	bcs.n	8009c60 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c60:	68fb      	ldr	r3, [r7, #12]
	}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20000540 	.word	0x20000540
 8009c70:	20000544 	.word	0x20000544
 8009c74:	20000648 	.word	0x20000648

08009c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d06c      	beq.n	8009d68 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c8e:	4b39      	ldr	r3, [pc, #228]	; (8009d74 <xTaskPriorityDisinherit+0xfc>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d009      	beq.n	8009cac <xTaskPriorityDisinherit+0x34>
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	e7fe      	b.n	8009caa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <xTaskPriorityDisinherit+0x50>
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	60bb      	str	r3, [r7, #8]
 8009cc6:	e7fe      	b.n	8009cc6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ccc:	1e5a      	subs	r2, r3, #1
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d044      	beq.n	8009d68 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d140      	bne.n	8009d68 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fbd0 	bl	8008490 <uxListRemove>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d115      	bne.n	8009d22 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfa:	491f      	ldr	r1, [pc, #124]	; (8009d78 <xTaskPriorityDisinherit+0x100>)
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	440b      	add	r3, r1
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <xTaskPriorityDisinherit+0xaa>
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	2201      	movs	r2, #1
 8009d12:	fa02 f303 	lsl.w	r3, r2, r3
 8009d16:	43da      	mvns	r2, r3
 8009d18:	4b18      	ldr	r3, [pc, #96]	; (8009d7c <xTaskPriorityDisinherit+0x104>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	4a17      	ldr	r2, [pc, #92]	; (8009d7c <xTaskPriorityDisinherit+0x104>)
 8009d20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	f1c3 0207 	rsb	r2, r3, #7
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	409a      	lsls	r2, r3
 8009d3e:	4b0f      	ldr	r3, [pc, #60]	; (8009d7c <xTaskPriorityDisinherit+0x104>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	4a0d      	ldr	r2, [pc, #52]	; (8009d7c <xTaskPriorityDisinherit+0x104>)
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <xTaskPriorityDisinherit+0x100>)
 8009d56:	441a      	add	r2, r3
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fe fb39 	bl	80083d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d68:	697b      	ldr	r3, [r7, #20]
	}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20000540 	.word	0x20000540
 8009d78:	20000544 	.word	0x20000544
 8009d7c:	20000648 	.word	0x20000648

08009d80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d075      	beq.n	8009e84 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d109      	bne.n	8009db4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	e7fe      	b.n	8009db2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d902      	bls.n	8009dc4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	61fb      	str	r3, [r7, #28]
 8009dc2:	e002      	b.n	8009dca <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d057      	beq.n	8009e84 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d152      	bne.n	8009e84 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009dde:	4b2b      	ldr	r3, [pc, #172]	; (8009e8c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d109      	bne.n	8009dfc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	60bb      	str	r3, [r7, #8]
 8009dfa:	e7fe      	b.n	8009dfa <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	69fa      	ldr	r2, [r7, #28]
 8009e06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	db04      	blt.n	8009e1a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	f1c3 0207 	rsb	r2, r3, #7
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	6959      	ldr	r1, [r3, #20]
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4a19      	ldr	r2, [pc, #100]	; (8009e90 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009e2a:	4413      	add	r3, r2
 8009e2c:	4299      	cmp	r1, r3
 8009e2e:	d129      	bne.n	8009e84 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fe fb2b 	bl	8008490 <uxListRemove>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	2201      	movs	r2, #1
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	43da      	mvns	r2, r3
 8009e4c:	4b11      	ldr	r3, [pc, #68]	; (8009e94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4013      	ands	r3, r2
 8009e52:	4a10      	ldr	r2, [pc, #64]	; (8009e94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009e54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	409a      	lsls	r2, r3
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	4a0b      	ldr	r2, [pc, #44]	; (8009e94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4a06      	ldr	r2, [pc, #24]	; (8009e90 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009e76:	441a      	add	r2, r3
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe faa9 	bl	80083d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e84:	bf00      	nop
 8009e86:	3720      	adds	r7, #32
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000540 	.word	0x20000540
 8009e90:	20000544 	.word	0x20000544
 8009e94:	20000648 	.word	0x20000648

08009e98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009e9c:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d004      	beq.n	8009eae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009eaa:	3201      	adds	r2, #1
 8009eac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009eae:	4b03      	ldr	r3, [pc, #12]	; (8009ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
	}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20000540 	.word	0x20000540

08009ec0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009eca:	4b29      	ldr	r3, [pc, #164]	; (8009f70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ed0:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe fada 	bl	8008490 <uxListRemove>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009ee2:	4b24      	ldr	r3, [pc, #144]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	2201      	movs	r2, #1
 8009eea:	fa02 f303 	lsl.w	r3, r2, r3
 8009eee:	43da      	mvns	r2, r3
 8009ef0:	4b21      	ldr	r3, [pc, #132]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	4a20      	ldr	r2, [pc, #128]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ef8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f00:	d10a      	bne.n	8009f18 <prvAddCurrentTaskToDelayedList+0x58>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d007      	beq.n	8009f18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f08:	4b1a      	ldr	r3, [pc, #104]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	4619      	mov	r1, r3
 8009f10:	481a      	ldr	r0, [pc, #104]	; (8009f7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f12:	f7fe fa60 	bl	80083d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f16:	e026      	b.n	8009f66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f20:	4b14      	ldr	r3, [pc, #80]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d209      	bcs.n	8009f44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f30:	4b13      	ldr	r3, [pc, #76]	; (8009f80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	f7fe fa6e 	bl	800841e <vListInsert>
}
 8009f42:	e010      	b.n	8009f66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f44:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7fe fa64 	bl	800841e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d202      	bcs.n	8009f66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f60:	4a09      	ldr	r2, [pc, #36]	; (8009f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6013      	str	r3, [r2, #0]
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000644 	.word	0x20000644
 8009f74:	20000540 	.word	0x20000540
 8009f78:	20000648 	.word	0x20000648
 8009f7c:	2000062c 	.word	0x2000062c
 8009f80:	200005fc 	.word	0x200005fc
 8009f84:	200005f8 	.word	0x200005f8
 8009f88:	20000660 	.word	0x20000660

08009f8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3b04      	subs	r3, #4
 8009f9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3b04      	subs	r3, #4
 8009faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f023 0201 	bic.w	r2, r3, #1
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3b04      	subs	r3, #4
 8009fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fbc:	4a0c      	ldr	r2, [pc, #48]	; (8009ff0 <pxPortInitialiseStack+0x64>)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3b14      	subs	r3, #20
 8009fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3b04      	subs	r3, #4
 8009fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f06f 0202 	mvn.w	r2, #2
 8009fda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3b20      	subs	r3, #32
 8009fe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	08009ff5 	.word	0x08009ff5

08009ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ffe:	4b11      	ldr	r3, [pc, #68]	; (800a044 <prvTaskExitError+0x50>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d009      	beq.n	800a01c <prvTaskExitError+0x28>
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	e7fe      	b.n	800a01a <prvTaskExitError+0x26>
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a02e:	bf00      	nop
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0fc      	beq.n	800a030 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	2000006c 	.word	0x2000006c
	...

0800a050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a050:	4b07      	ldr	r3, [pc, #28]	; (800a070 <pxCurrentTCBConst2>)
 800a052:	6819      	ldr	r1, [r3, #0]
 800a054:	6808      	ldr	r0, [r1, #0]
 800a056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05a:	f380 8809 	msr	PSP, r0
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f04f 0000 	mov.w	r0, #0
 800a066:	f380 8811 	msr	BASEPRI, r0
 800a06a:	4770      	bx	lr
 800a06c:	f3af 8000 	nop.w

0800a070 <pxCurrentTCBConst2>:
 800a070:	20000540 	.word	0x20000540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop

0800a078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a078:	4808      	ldr	r0, [pc, #32]	; (800a09c <prvPortStartFirstTask+0x24>)
 800a07a:	6800      	ldr	r0, [r0, #0]
 800a07c:	6800      	ldr	r0, [r0, #0]
 800a07e:	f380 8808 	msr	MSP, r0
 800a082:	f04f 0000 	mov.w	r0, #0
 800a086:	f380 8814 	msr	CONTROL, r0
 800a08a:	b662      	cpsie	i
 800a08c:	b661      	cpsie	f
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	df00      	svc	0
 800a098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a09a:	bf00      	nop
 800a09c:	e000ed08 	.word	0xe000ed08

0800a0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0a6:	4b44      	ldr	r3, [pc, #272]	; (800a1b8 <xPortStartScheduler+0x118>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a44      	ldr	r2, [pc, #272]	; (800a1bc <xPortStartScheduler+0x11c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d109      	bne.n	800a0c4 <xPortStartScheduler+0x24>
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	613b      	str	r3, [r7, #16]
 800a0c2:	e7fe      	b.n	800a0c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0c4:	4b3c      	ldr	r3, [pc, #240]	; (800a1b8 <xPortStartScheduler+0x118>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a3d      	ldr	r2, [pc, #244]	; (800a1c0 <xPortStartScheduler+0x120>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d109      	bne.n	800a0e2 <xPortStartScheduler+0x42>
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	e7fe      	b.n	800a0e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0e2:	4b38      	ldr	r3, [pc, #224]	; (800a1c4 <xPortStartScheduler+0x124>)
 800a0e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	22ff      	movs	r2, #255	; 0xff
 800a0f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a104:	b2da      	uxtb	r2, r3
 800a106:	4b30      	ldr	r3, [pc, #192]	; (800a1c8 <xPortStartScheduler+0x128>)
 800a108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a10a:	4b30      	ldr	r3, [pc, #192]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a10c:	2207      	movs	r2, #7
 800a10e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a110:	e009      	b.n	800a126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a112:	4b2e      	ldr	r3, [pc, #184]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3b01      	subs	r3, #1
 800a118:	4a2c      	ldr	r2, [pc, #176]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a11a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	b2db      	uxtb	r3, r3
 800a124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12e:	2b80      	cmp	r3, #128	; 0x80
 800a130:	d0ef      	beq.n	800a112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a132:	4b26      	ldr	r3, [pc, #152]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f1c3 0307 	rsb	r3, r3, #7
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d009      	beq.n	800a152 <xPortStartScheduler+0xb2>
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	60bb      	str	r3, [r7, #8]
 800a150:	e7fe      	b.n	800a150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a152:	4b1e      	ldr	r3, [pc, #120]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	4a1c      	ldr	r2, [pc, #112]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a15a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a15c:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a164:	4a19      	ldr	r2, [pc, #100]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a170:	4b17      	ldr	r3, [pc, #92]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a16      	ldr	r2, [pc, #88]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a17a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a17c:	4b14      	ldr	r3, [pc, #80]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a13      	ldr	r2, [pc, #76]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a188:	f000 f8d6 	bl	800a338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a18c:	4b11      	ldr	r3, [pc, #68]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a18e:	2200      	movs	r2, #0
 800a190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a192:	f000 f8f5 	bl	800a380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a196:	4b10      	ldr	r3, [pc, #64]	; (800a1d8 <xPortStartScheduler+0x138>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a0f      	ldr	r2, [pc, #60]	; (800a1d8 <xPortStartScheduler+0x138>)
 800a19c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1a2:	f7ff ff69 	bl	800a078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1a6:	f7ff fa9f 	bl	80096e8 <vTaskSwitchContext>
	prvTaskExitError();
 800a1aa:	f7ff ff23 	bl	8009ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	e000ed00 	.word	0xe000ed00
 800a1bc:	410fc271 	.word	0x410fc271
 800a1c0:	410fc270 	.word	0x410fc270
 800a1c4:	e000e400 	.word	0xe000e400
 800a1c8:	2000066c 	.word	0x2000066c
 800a1cc:	20000670 	.word	0x20000670
 800a1d0:	e000ed20 	.word	0xe000ed20
 800a1d4:	2000006c 	.word	0x2000006c
 800a1d8:	e000ef34 	.word	0xe000ef34

0800a1dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1f4:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <vPortEnterCritical+0x54>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	4a0d      	ldr	r2, [pc, #52]	; (800a230 <vPortEnterCritical+0x54>)
 800a1fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1fe:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <vPortEnterCritical+0x54>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d10e      	bne.n	800a224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a206:	4b0b      	ldr	r3, [pc, #44]	; (800a234 <vPortEnterCritical+0x58>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <vPortEnterCritical+0x48>
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	e7fe      	b.n	800a222 <vPortEnterCritical+0x46>
	}
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	2000006c 	.word	0x2000006c
 800a234:	e000ed04 	.word	0xe000ed04

0800a238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a23e:	4b11      	ldr	r3, [pc, #68]	; (800a284 <vPortExitCritical+0x4c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <vPortExitCritical+0x22>
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	607b      	str	r3, [r7, #4]
 800a258:	e7fe      	b.n	800a258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a25a:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <vPortExitCritical+0x4c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3b01      	subs	r3, #1
 800a260:	4a08      	ldr	r2, [pc, #32]	; (800a284 <vPortExitCritical+0x4c>)
 800a262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a264:	4b07      	ldr	r3, [pc, #28]	; (800a284 <vPortExitCritical+0x4c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d104      	bne.n	800a276 <vPortExitCritical+0x3e>
 800a26c:	2300      	movs	r3, #0
 800a26e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	2000006c 	.word	0x2000006c
	...

0800a290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a290:	f3ef 8009 	mrs	r0, PSP
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <pxCurrentTCBConst>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	f01e 0f10 	tst.w	lr, #16
 800a2a0:	bf08      	it	eq
 800a2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2aa:	6010      	str	r0, [r2, #0]
 800a2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2b4:	f380 8811 	msr	BASEPRI, r0
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f7ff fa12 	bl	80096e8 <vTaskSwitchContext>
 800a2c4:	f04f 0000 	mov.w	r0, #0
 800a2c8:	f380 8811 	msr	BASEPRI, r0
 800a2cc:	bc09      	pop	{r0, r3}
 800a2ce:	6819      	ldr	r1, [r3, #0]
 800a2d0:	6808      	ldr	r0, [r1, #0]
 800a2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d6:	f01e 0f10 	tst.w	lr, #16
 800a2da:	bf08      	it	eq
 800a2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2e0:	f380 8809 	msr	PSP, r0
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	f3af 8000 	nop.w

0800a2f0 <pxCurrentTCBConst>:
 800a2f0:	20000540 	.word	0x20000540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop

0800a2f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a310:	f7ff f932 	bl	8009578 <xTaskIncrementTick>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a31a:	4b06      	ldr	r3, [pc, #24]	; (800a334 <SysTick_Handler+0x3c>)
 800a31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	2300      	movs	r3, #0
 800a324:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	e000ed04 	.word	0xe000ed04

0800a338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a33c:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <vPortSetupTimerInterrupt+0x34>)
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a342:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <vPortSetupTimerInterrupt+0x38>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <vPortSetupTimerInterrupt+0x3c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a0a      	ldr	r2, [pc, #40]	; (800a378 <vPortSetupTimerInterrupt+0x40>)
 800a34e:	fba2 2303 	umull	r2, r3, r2, r3
 800a352:	099b      	lsrs	r3, r3, #6
 800a354:	4a09      	ldr	r2, [pc, #36]	; (800a37c <vPortSetupTimerInterrupt+0x44>)
 800a356:	3b01      	subs	r3, #1
 800a358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a35a:	4b04      	ldr	r3, [pc, #16]	; (800a36c <vPortSetupTimerInterrupt+0x34>)
 800a35c:	2207      	movs	r2, #7
 800a35e:	601a      	str	r2, [r3, #0]
}
 800a360:	bf00      	nop
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	e000e010 	.word	0xe000e010
 800a370:	e000e018 	.word	0xe000e018
 800a374:	2000004c 	.word	0x2000004c
 800a378:	10624dd3 	.word	0x10624dd3
 800a37c:	e000e014 	.word	0xe000e014

0800a380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a390 <vPortEnableVFP+0x10>
 800a384:	6801      	ldr	r1, [r0, #0]
 800a386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a38a:	6001      	str	r1, [r0, #0]
 800a38c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a38e:	bf00      	nop
 800a390:	e000ed88 	.word	0xe000ed88

0800a394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a39a:	f3ef 8305 	mrs	r3, IPSR
 800a39e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b0f      	cmp	r3, #15
 800a3a4:	d913      	bls.n	800a3ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3a6:	4a16      	ldr	r2, [pc, #88]	; (800a400 <vPortValidateInterruptPriority+0x6c>)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3b0:	4b14      	ldr	r3, [pc, #80]	; (800a404 <vPortValidateInterruptPriority+0x70>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	7afa      	ldrb	r2, [r7, #11]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d209      	bcs.n	800a3ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	607b      	str	r3, [r7, #4]
 800a3cc:	e7fe      	b.n	800a3cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3ce:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <vPortValidateInterruptPriority+0x74>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3d6:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <vPortValidateInterruptPriority+0x78>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d909      	bls.n	800a3f2 <vPortValidateInterruptPriority+0x5e>
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	e7fe      	b.n	800a3f0 <vPortValidateInterruptPriority+0x5c>
	}
 800a3f2:	bf00      	nop
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	e000e3f0 	.word	0xe000e3f0
 800a404:	2000066c 	.word	0x2000066c
 800a408:	e000ed0c 	.word	0xe000ed0c
 800a40c:	20000670 	.word	0x20000670

0800a410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08a      	sub	sp, #40	; 0x28
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a418:	2300      	movs	r3, #0
 800a41a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a41c:	f7ff f802 	bl	8009424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a420:	4b59      	ldr	r3, [pc, #356]	; (800a588 <pvPortMalloc+0x178>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a428:	f000 f91a 	bl	800a660 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a42c:	4b57      	ldr	r3, [pc, #348]	; (800a58c <pvPortMalloc+0x17c>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4013      	ands	r3, r2
 800a434:	2b00      	cmp	r3, #0
 800a436:	f040 8091 	bne.w	800a55c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d01c      	beq.n	800a47a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a440:	2208      	movs	r2, #8
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4413      	add	r3, r2
 800a446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f003 0307 	and.w	r3, r3, #7
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d013      	beq.n	800a47a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f023 0307 	bic.w	r3, r3, #7
 800a458:	3308      	adds	r3, #8
 800a45a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b00      	cmp	r3, #0
 800a464:	d009      	beq.n	800a47a <pvPortMalloc+0x6a>
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	e7fe      	b.n	800a478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d06d      	beq.n	800a55c <pvPortMalloc+0x14c>
 800a480:	4b43      	ldr	r3, [pc, #268]	; (800a590 <pvPortMalloc+0x180>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	429a      	cmp	r2, r3
 800a488:	d868      	bhi.n	800a55c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a48a:	4b42      	ldr	r3, [pc, #264]	; (800a594 <pvPortMalloc+0x184>)
 800a48c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a48e:	4b41      	ldr	r3, [pc, #260]	; (800a594 <pvPortMalloc+0x184>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a494:	e004      	b.n	800a4a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d903      	bls.n	800a4b2 <pvPortMalloc+0xa2>
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f1      	bne.n	800a496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4b2:	4b35      	ldr	r3, [pc, #212]	; (800a588 <pvPortMalloc+0x178>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d04f      	beq.n	800a55c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2208      	movs	r2, #8
 800a4c2:	4413      	add	r3, r2
 800a4c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	1ad2      	subs	r2, r2, r3
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d91e      	bls.n	800a51c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	f003 0307 	and.w	r3, r3, #7
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d009      	beq.n	800a504 <pvPortMalloc+0xf4>
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	613b      	str	r3, [r7, #16]
 800a502:	e7fe      	b.n	800a502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	1ad2      	subs	r2, r2, r3
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a516:	69b8      	ldr	r0, [r7, #24]
 800a518:	f000 f904 	bl	800a724 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a51c:	4b1c      	ldr	r3, [pc, #112]	; (800a590 <pvPortMalloc+0x180>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	4a1a      	ldr	r2, [pc, #104]	; (800a590 <pvPortMalloc+0x180>)
 800a528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a52a:	4b19      	ldr	r3, [pc, #100]	; (800a590 <pvPortMalloc+0x180>)
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4b1a      	ldr	r3, [pc, #104]	; (800a598 <pvPortMalloc+0x188>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	429a      	cmp	r2, r3
 800a534:	d203      	bcs.n	800a53e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a536:	4b16      	ldr	r3, [pc, #88]	; (800a590 <pvPortMalloc+0x180>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a17      	ldr	r2, [pc, #92]	; (800a598 <pvPortMalloc+0x188>)
 800a53c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <pvPortMalloc+0x17c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	431a      	orrs	r2, r3
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	2200      	movs	r2, #0
 800a550:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a552:	4b12      	ldr	r3, [pc, #72]	; (800a59c <pvPortMalloc+0x18c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3301      	adds	r3, #1
 800a558:	4a10      	ldr	r2, [pc, #64]	; (800a59c <pvPortMalloc+0x18c>)
 800a55a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a55c:	f7fe ff70 	bl	8009440 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	2b00      	cmp	r3, #0
 800a568:	d009      	beq.n	800a57e <pvPortMalloc+0x16e>
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	e7fe      	b.n	800a57c <pvPortMalloc+0x16c>
	return pvReturn;
 800a57e:	69fb      	ldr	r3, [r7, #28]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3728      	adds	r7, #40	; 0x28
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	2000427c 	.word	0x2000427c
 800a58c:	20004290 	.word	0x20004290
 800a590:	20004280 	.word	0x20004280
 800a594:	20004274 	.word	0x20004274
 800a598:	20004284 	.word	0x20004284
 800a59c:	20004288 	.word	0x20004288

0800a5a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d04b      	beq.n	800a64a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5b2:	2308      	movs	r3, #8
 800a5b4:	425b      	negs	r3, r3
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	4b23      	ldr	r3, [pc, #140]	; (800a654 <vPortFree+0xb4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d109      	bne.n	800a5e2 <vPortFree+0x42>
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	e7fe      	b.n	800a5e0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d009      	beq.n	800a5fe <vPortFree+0x5e>
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	60bb      	str	r3, [r7, #8]
 800a5fc:	e7fe      	b.n	800a5fc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	4b14      	ldr	r3, [pc, #80]	; (800a654 <vPortFree+0xb4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4013      	ands	r3, r2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d01e      	beq.n	800a64a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d11a      	bne.n	800a64a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	4b0e      	ldr	r3, [pc, #56]	; (800a654 <vPortFree+0xb4>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	43db      	mvns	r3, r3
 800a61e:	401a      	ands	r2, r3
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a624:	f7fe fefe 	bl	8009424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	4b0a      	ldr	r3, [pc, #40]	; (800a658 <vPortFree+0xb8>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4413      	add	r3, r2
 800a632:	4a09      	ldr	r2, [pc, #36]	; (800a658 <vPortFree+0xb8>)
 800a634:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a636:	6938      	ldr	r0, [r7, #16]
 800a638:	f000 f874 	bl	800a724 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a63c:	4b07      	ldr	r3, [pc, #28]	; (800a65c <vPortFree+0xbc>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	4a06      	ldr	r2, [pc, #24]	; (800a65c <vPortFree+0xbc>)
 800a644:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a646:	f7fe fefb 	bl	8009440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a64a:	bf00      	nop
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20004290 	.word	0x20004290
 800a658:	20004280 	.word	0x20004280
 800a65c:	2000428c 	.word	0x2000428c

0800a660 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a666:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a66a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a66c:	4b27      	ldr	r3, [pc, #156]	; (800a70c <prvHeapInit+0xac>)
 800a66e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00c      	beq.n	800a694 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3307      	adds	r3, #7
 800a67e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0307 	bic.w	r3, r3, #7
 800a686:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	4a1f      	ldr	r2, [pc, #124]	; (800a70c <prvHeapInit+0xac>)
 800a690:	4413      	add	r3, r2
 800a692:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a698:	4a1d      	ldr	r2, [pc, #116]	; (800a710 <prvHeapInit+0xb0>)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a69e:	4b1c      	ldr	r3, [pc, #112]	; (800a710 <prvHeapInit+0xb0>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6ac:	2208      	movs	r2, #8
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	1a9b      	subs	r3, r3, r2
 800a6b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f023 0307 	bic.w	r3, r3, #7
 800a6ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4a15      	ldr	r2, [pc, #84]	; (800a714 <prvHeapInit+0xb4>)
 800a6c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6c2:	4b14      	ldr	r3, [pc, #80]	; (800a714 <prvHeapInit+0xb4>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6ca:	4b12      	ldr	r3, [pc, #72]	; (800a714 <prvHeapInit+0xb4>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	1ad2      	subs	r2, r2, r3
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6e0:	4b0c      	ldr	r3, [pc, #48]	; (800a714 <prvHeapInit+0xb4>)
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	4a0a      	ldr	r2, [pc, #40]	; (800a718 <prvHeapInit+0xb8>)
 800a6ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	4a09      	ldr	r2, [pc, #36]	; (800a71c <prvHeapInit+0xbc>)
 800a6f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6f8:	4b09      	ldr	r3, [pc, #36]	; (800a720 <prvHeapInit+0xc0>)
 800a6fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6fe:	601a      	str	r2, [r3, #0]
}
 800a700:	bf00      	nop
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	20000674 	.word	0x20000674
 800a710:	20004274 	.word	0x20004274
 800a714:	2000427c 	.word	0x2000427c
 800a718:	20004284 	.word	0x20004284
 800a71c:	20004280 	.word	0x20004280
 800a720:	20004290 	.word	0x20004290

0800a724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a72c:	4b28      	ldr	r3, [pc, #160]	; (800a7d0 <prvInsertBlockIntoFreeList+0xac>)
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	e002      	b.n	800a738 <prvInsertBlockIntoFreeList+0x14>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d8f7      	bhi.n	800a732 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	4413      	add	r3, r2
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	429a      	cmp	r2, r3
 800a752:	d108      	bne.n	800a766 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	441a      	add	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	441a      	add	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d118      	bne.n	800a7ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d00d      	beq.n	800a7a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	441a      	add	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	e008      	b.n	800a7b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7a2:	4b0c      	ldr	r3, [pc, #48]	; (800a7d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	601a      	str	r2, [r3, #0]
 800a7aa:	e003      	b.n	800a7b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d002      	beq.n	800a7c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	20004274 	.word	0x20004274
 800a7d4:	2000427c 	.word	0x2000427c

0800a7d8 <atoi>:
 800a7d8:	220a      	movs	r2, #10
 800a7da:	2100      	movs	r1, #0
 800a7dc:	f000 b97c 	b.w	800aad8 <strtol>

0800a7e0 <__errno>:
 800a7e0:	4b01      	ldr	r3, [pc, #4]	; (800a7e8 <__errno+0x8>)
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000070 	.word	0x20000070

0800a7ec <__libc_init_array>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	4e0d      	ldr	r6, [pc, #52]	; (800a824 <__libc_init_array+0x38>)
 800a7f0:	4c0d      	ldr	r4, [pc, #52]	; (800a828 <__libc_init_array+0x3c>)
 800a7f2:	1ba4      	subs	r4, r4, r6
 800a7f4:	10a4      	asrs	r4, r4, #2
 800a7f6:	2500      	movs	r5, #0
 800a7f8:	42a5      	cmp	r5, r4
 800a7fa:	d109      	bne.n	800a810 <__libc_init_array+0x24>
 800a7fc:	4e0b      	ldr	r6, [pc, #44]	; (800a82c <__libc_init_array+0x40>)
 800a7fe:	4c0c      	ldr	r4, [pc, #48]	; (800a830 <__libc_init_array+0x44>)
 800a800:	f001 fa08 	bl	800bc14 <_init>
 800a804:	1ba4      	subs	r4, r4, r6
 800a806:	10a4      	asrs	r4, r4, #2
 800a808:	2500      	movs	r5, #0
 800a80a:	42a5      	cmp	r5, r4
 800a80c:	d105      	bne.n	800a81a <__libc_init_array+0x2e>
 800a80e:	bd70      	pop	{r4, r5, r6, pc}
 800a810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a814:	4798      	blx	r3
 800a816:	3501      	adds	r5, #1
 800a818:	e7ee      	b.n	800a7f8 <__libc_init_array+0xc>
 800a81a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a81e:	4798      	blx	r3
 800a820:	3501      	adds	r5, #1
 800a822:	e7f2      	b.n	800a80a <__libc_init_array+0x1e>
 800a824:	0800c210 	.word	0x0800c210
 800a828:	0800c210 	.word	0x0800c210
 800a82c:	0800c210 	.word	0x0800c210
 800a830:	0800c214 	.word	0x0800c214

0800a834 <memcpy>:
 800a834:	b510      	push	{r4, lr}
 800a836:	1e43      	subs	r3, r0, #1
 800a838:	440a      	add	r2, r1
 800a83a:	4291      	cmp	r1, r2
 800a83c:	d100      	bne.n	800a840 <memcpy+0xc>
 800a83e:	bd10      	pop	{r4, pc}
 800a840:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a844:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a848:	e7f7      	b.n	800a83a <memcpy+0x6>

0800a84a <memset>:
 800a84a:	4402      	add	r2, r0
 800a84c:	4603      	mov	r3, r0
 800a84e:	4293      	cmp	r3, r2
 800a850:	d100      	bne.n	800a854 <memset+0xa>
 800a852:	4770      	bx	lr
 800a854:	f803 1b01 	strb.w	r1, [r3], #1
 800a858:	e7f9      	b.n	800a84e <memset+0x4>
	...

0800a85c <iprintf>:
 800a85c:	b40f      	push	{r0, r1, r2, r3}
 800a85e:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <iprintf+0x2c>)
 800a860:	b513      	push	{r0, r1, r4, lr}
 800a862:	681c      	ldr	r4, [r3, #0]
 800a864:	b124      	cbz	r4, 800a870 <iprintf+0x14>
 800a866:	69a3      	ldr	r3, [r4, #24]
 800a868:	b913      	cbnz	r3, 800a870 <iprintf+0x14>
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 fafa 	bl	800ae64 <__sinit>
 800a870:	ab05      	add	r3, sp, #20
 800a872:	9a04      	ldr	r2, [sp, #16]
 800a874:	68a1      	ldr	r1, [r4, #8]
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 fe1b 	bl	800b4b4 <_vfiprintf_r>
 800a87e:	b002      	add	sp, #8
 800a880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a884:	b004      	add	sp, #16
 800a886:	4770      	bx	lr
 800a888:	20000070 	.word	0x20000070

0800a88c <_puts_r>:
 800a88c:	b570      	push	{r4, r5, r6, lr}
 800a88e:	460e      	mov	r6, r1
 800a890:	4605      	mov	r5, r0
 800a892:	b118      	cbz	r0, 800a89c <_puts_r+0x10>
 800a894:	6983      	ldr	r3, [r0, #24]
 800a896:	b90b      	cbnz	r3, 800a89c <_puts_r+0x10>
 800a898:	f000 fae4 	bl	800ae64 <__sinit>
 800a89c:	69ab      	ldr	r3, [r5, #24]
 800a89e:	68ac      	ldr	r4, [r5, #8]
 800a8a0:	b913      	cbnz	r3, 800a8a8 <_puts_r+0x1c>
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f000 fade 	bl	800ae64 <__sinit>
 800a8a8:	4b23      	ldr	r3, [pc, #140]	; (800a938 <_puts_r+0xac>)
 800a8aa:	429c      	cmp	r4, r3
 800a8ac:	d117      	bne.n	800a8de <_puts_r+0x52>
 800a8ae:	686c      	ldr	r4, [r5, #4]
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	071b      	lsls	r3, r3, #28
 800a8b4:	d51d      	bpl.n	800a8f2 <_puts_r+0x66>
 800a8b6:	6923      	ldr	r3, [r4, #16]
 800a8b8:	b1db      	cbz	r3, 800a8f2 <_puts_r+0x66>
 800a8ba:	3e01      	subs	r6, #1
 800a8bc:	68a3      	ldr	r3, [r4, #8]
 800a8be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	60a3      	str	r3, [r4, #8]
 800a8c6:	b9e9      	cbnz	r1, 800a904 <_puts_r+0x78>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	da2e      	bge.n	800a92a <_puts_r+0x9e>
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	210a      	movs	r1, #10
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f000 f917 	bl	800ab04 <__swbuf_r>
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	d011      	beq.n	800a8fe <_puts_r+0x72>
 800a8da:	200a      	movs	r0, #10
 800a8dc:	e011      	b.n	800a902 <_puts_r+0x76>
 800a8de:	4b17      	ldr	r3, [pc, #92]	; (800a93c <_puts_r+0xb0>)
 800a8e0:	429c      	cmp	r4, r3
 800a8e2:	d101      	bne.n	800a8e8 <_puts_r+0x5c>
 800a8e4:	68ac      	ldr	r4, [r5, #8]
 800a8e6:	e7e3      	b.n	800a8b0 <_puts_r+0x24>
 800a8e8:	4b15      	ldr	r3, [pc, #84]	; (800a940 <_puts_r+0xb4>)
 800a8ea:	429c      	cmp	r4, r3
 800a8ec:	bf08      	it	eq
 800a8ee:	68ec      	ldreq	r4, [r5, #12]
 800a8f0:	e7de      	b.n	800a8b0 <_puts_r+0x24>
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f000 f957 	bl	800aba8 <__swsetup_r>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d0dd      	beq.n	800a8ba <_puts_r+0x2e>
 800a8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	2b00      	cmp	r3, #0
 800a906:	da04      	bge.n	800a912 <_puts_r+0x86>
 800a908:	69a2      	ldr	r2, [r4, #24]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	dc06      	bgt.n	800a91c <_puts_r+0x90>
 800a90e:	290a      	cmp	r1, #10
 800a910:	d004      	beq.n	800a91c <_puts_r+0x90>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	7019      	strb	r1, [r3, #0]
 800a91a:	e7cf      	b.n	800a8bc <_puts_r+0x30>
 800a91c:	4622      	mov	r2, r4
 800a91e:	4628      	mov	r0, r5
 800a920:	f000 f8f0 	bl	800ab04 <__swbuf_r>
 800a924:	3001      	adds	r0, #1
 800a926:	d1c9      	bne.n	800a8bc <_puts_r+0x30>
 800a928:	e7e9      	b.n	800a8fe <_puts_r+0x72>
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	200a      	movs	r0, #10
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	6022      	str	r2, [r4, #0]
 800a932:	7018      	strb	r0, [r3, #0]
 800a934:	e7e5      	b.n	800a902 <_puts_r+0x76>
 800a936:	bf00      	nop
 800a938:	0800c088 	.word	0x0800c088
 800a93c:	0800c0a8 	.word	0x0800c0a8
 800a940:	0800c068 	.word	0x0800c068

0800a944 <puts>:
 800a944:	4b02      	ldr	r3, [pc, #8]	; (800a950 <puts+0xc>)
 800a946:	4601      	mov	r1, r0
 800a948:	6818      	ldr	r0, [r3, #0]
 800a94a:	f7ff bf9f 	b.w	800a88c <_puts_r>
 800a94e:	bf00      	nop
 800a950:	20000070 	.word	0x20000070

0800a954 <siprintf>:
 800a954:	b40e      	push	{r1, r2, r3}
 800a956:	b500      	push	{lr}
 800a958:	b09c      	sub	sp, #112	; 0x70
 800a95a:	ab1d      	add	r3, sp, #116	; 0x74
 800a95c:	9002      	str	r0, [sp, #8]
 800a95e:	9006      	str	r0, [sp, #24]
 800a960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a964:	4809      	ldr	r0, [pc, #36]	; (800a98c <siprintf+0x38>)
 800a966:	9107      	str	r1, [sp, #28]
 800a968:	9104      	str	r1, [sp, #16]
 800a96a:	4909      	ldr	r1, [pc, #36]	; (800a990 <siprintf+0x3c>)
 800a96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a970:	9105      	str	r1, [sp, #20]
 800a972:	6800      	ldr	r0, [r0, #0]
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	a902      	add	r1, sp, #8
 800a978:	f000 fc7a 	bl	800b270 <_svfiprintf_r>
 800a97c:	9b02      	ldr	r3, [sp, #8]
 800a97e:	2200      	movs	r2, #0
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	b01c      	add	sp, #112	; 0x70
 800a984:	f85d eb04 	ldr.w	lr, [sp], #4
 800a988:	b003      	add	sp, #12
 800a98a:	4770      	bx	lr
 800a98c:	20000070 	.word	0x20000070
 800a990:	ffff0208 	.word	0xffff0208

0800a994 <strncmp>:
 800a994:	b510      	push	{r4, lr}
 800a996:	b16a      	cbz	r2, 800a9b4 <strncmp+0x20>
 800a998:	3901      	subs	r1, #1
 800a99a:	1884      	adds	r4, r0, r2
 800a99c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a9a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d103      	bne.n	800a9b0 <strncmp+0x1c>
 800a9a8:	42a0      	cmp	r0, r4
 800a9aa:	d001      	beq.n	800a9b0 <strncmp+0x1c>
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1f5      	bne.n	800a99c <strncmp+0x8>
 800a9b0:	1a98      	subs	r0, r3, r2
 800a9b2:	bd10      	pop	{r4, pc}
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	e7fc      	b.n	800a9b2 <strncmp+0x1e>

0800a9b8 <strncpy>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	3901      	subs	r1, #1
 800a9bc:	4604      	mov	r4, r0
 800a9be:	b902      	cbnz	r2, 800a9c2 <strncpy+0xa>
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a9c8:	f803 5b01 	strb.w	r5, [r3], #1
 800a9cc:	1e56      	subs	r6, r2, #1
 800a9ce:	b92d      	cbnz	r5, 800a9dc <strncpy+0x24>
 800a9d0:	4414      	add	r4, r2
 800a9d2:	42a3      	cmp	r3, r4
 800a9d4:	d0f4      	beq.n	800a9c0 <strncpy+0x8>
 800a9d6:	f803 5b01 	strb.w	r5, [r3], #1
 800a9da:	e7fa      	b.n	800a9d2 <strncpy+0x1a>
 800a9dc:	461c      	mov	r4, r3
 800a9de:	4632      	mov	r2, r6
 800a9e0:	e7ed      	b.n	800a9be <strncpy+0x6>

0800a9e2 <_strtol_l.isra.0>:
 800a9e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e6:	4680      	mov	r8, r0
 800a9e8:	4689      	mov	r9, r1
 800a9ea:	4692      	mov	sl, r2
 800a9ec:	461e      	mov	r6, r3
 800a9ee:	460f      	mov	r7, r1
 800a9f0:	463d      	mov	r5, r7
 800a9f2:	9808      	ldr	r0, [sp, #32]
 800a9f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9f8:	f000 fabe 	bl	800af78 <__locale_ctype_ptr_l>
 800a9fc:	4420      	add	r0, r4
 800a9fe:	7843      	ldrb	r3, [r0, #1]
 800aa00:	f013 0308 	ands.w	r3, r3, #8
 800aa04:	d132      	bne.n	800aa6c <_strtol_l.isra.0+0x8a>
 800aa06:	2c2d      	cmp	r4, #45	; 0x2d
 800aa08:	d132      	bne.n	800aa70 <_strtol_l.isra.0+0x8e>
 800aa0a:	787c      	ldrb	r4, [r7, #1]
 800aa0c:	1cbd      	adds	r5, r7, #2
 800aa0e:	2201      	movs	r2, #1
 800aa10:	2e00      	cmp	r6, #0
 800aa12:	d05d      	beq.n	800aad0 <_strtol_l.isra.0+0xee>
 800aa14:	2e10      	cmp	r6, #16
 800aa16:	d109      	bne.n	800aa2c <_strtol_l.isra.0+0x4a>
 800aa18:	2c30      	cmp	r4, #48	; 0x30
 800aa1a:	d107      	bne.n	800aa2c <_strtol_l.isra.0+0x4a>
 800aa1c:	782b      	ldrb	r3, [r5, #0]
 800aa1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa22:	2b58      	cmp	r3, #88	; 0x58
 800aa24:	d14f      	bne.n	800aac6 <_strtol_l.isra.0+0xe4>
 800aa26:	786c      	ldrb	r4, [r5, #1]
 800aa28:	2610      	movs	r6, #16
 800aa2a:	3502      	adds	r5, #2
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	bf14      	ite	ne
 800aa30:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aa34:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aa38:	2700      	movs	r7, #0
 800aa3a:	fbb1 fcf6 	udiv	ip, r1, r6
 800aa3e:	4638      	mov	r0, r7
 800aa40:	fb06 1e1c 	mls	lr, r6, ip, r1
 800aa44:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aa48:	2b09      	cmp	r3, #9
 800aa4a:	d817      	bhi.n	800aa7c <_strtol_l.isra.0+0x9a>
 800aa4c:	461c      	mov	r4, r3
 800aa4e:	42a6      	cmp	r6, r4
 800aa50:	dd23      	ble.n	800aa9a <_strtol_l.isra.0+0xb8>
 800aa52:	1c7b      	adds	r3, r7, #1
 800aa54:	d007      	beq.n	800aa66 <_strtol_l.isra.0+0x84>
 800aa56:	4584      	cmp	ip, r0
 800aa58:	d31c      	bcc.n	800aa94 <_strtol_l.isra.0+0xb2>
 800aa5a:	d101      	bne.n	800aa60 <_strtol_l.isra.0+0x7e>
 800aa5c:	45a6      	cmp	lr, r4
 800aa5e:	db19      	blt.n	800aa94 <_strtol_l.isra.0+0xb2>
 800aa60:	fb00 4006 	mla	r0, r0, r6, r4
 800aa64:	2701      	movs	r7, #1
 800aa66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa6a:	e7eb      	b.n	800aa44 <_strtol_l.isra.0+0x62>
 800aa6c:	462f      	mov	r7, r5
 800aa6e:	e7bf      	b.n	800a9f0 <_strtol_l.isra.0+0xe>
 800aa70:	2c2b      	cmp	r4, #43	; 0x2b
 800aa72:	bf04      	itt	eq
 800aa74:	1cbd      	addeq	r5, r7, #2
 800aa76:	787c      	ldrbeq	r4, [r7, #1]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	e7c9      	b.n	800aa10 <_strtol_l.isra.0+0x2e>
 800aa7c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aa80:	2b19      	cmp	r3, #25
 800aa82:	d801      	bhi.n	800aa88 <_strtol_l.isra.0+0xa6>
 800aa84:	3c37      	subs	r4, #55	; 0x37
 800aa86:	e7e2      	b.n	800aa4e <_strtol_l.isra.0+0x6c>
 800aa88:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aa8c:	2b19      	cmp	r3, #25
 800aa8e:	d804      	bhi.n	800aa9a <_strtol_l.isra.0+0xb8>
 800aa90:	3c57      	subs	r4, #87	; 0x57
 800aa92:	e7dc      	b.n	800aa4e <_strtol_l.isra.0+0x6c>
 800aa94:	f04f 37ff 	mov.w	r7, #4294967295
 800aa98:	e7e5      	b.n	800aa66 <_strtol_l.isra.0+0x84>
 800aa9a:	1c7b      	adds	r3, r7, #1
 800aa9c:	d108      	bne.n	800aab0 <_strtol_l.isra.0+0xce>
 800aa9e:	2322      	movs	r3, #34	; 0x22
 800aaa0:	f8c8 3000 	str.w	r3, [r8]
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	f1ba 0f00 	cmp.w	sl, #0
 800aaaa:	d107      	bne.n	800aabc <_strtol_l.isra.0+0xda>
 800aaac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab0:	b102      	cbz	r2, 800aab4 <_strtol_l.isra.0+0xd2>
 800aab2:	4240      	negs	r0, r0
 800aab4:	f1ba 0f00 	cmp.w	sl, #0
 800aab8:	d0f8      	beq.n	800aaac <_strtol_l.isra.0+0xca>
 800aaba:	b10f      	cbz	r7, 800aac0 <_strtol_l.isra.0+0xde>
 800aabc:	f105 39ff 	add.w	r9, r5, #4294967295
 800aac0:	f8ca 9000 	str.w	r9, [sl]
 800aac4:	e7f2      	b.n	800aaac <_strtol_l.isra.0+0xca>
 800aac6:	2430      	movs	r4, #48	; 0x30
 800aac8:	2e00      	cmp	r6, #0
 800aaca:	d1af      	bne.n	800aa2c <_strtol_l.isra.0+0x4a>
 800aacc:	2608      	movs	r6, #8
 800aace:	e7ad      	b.n	800aa2c <_strtol_l.isra.0+0x4a>
 800aad0:	2c30      	cmp	r4, #48	; 0x30
 800aad2:	d0a3      	beq.n	800aa1c <_strtol_l.isra.0+0x3a>
 800aad4:	260a      	movs	r6, #10
 800aad6:	e7a9      	b.n	800aa2c <_strtol_l.isra.0+0x4a>

0800aad8 <strtol>:
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <strtol+0x24>)
 800aada:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aadc:	681c      	ldr	r4, [r3, #0]
 800aade:	4d08      	ldr	r5, [pc, #32]	; (800ab00 <strtol+0x28>)
 800aae0:	6a23      	ldr	r3, [r4, #32]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	bf08      	it	eq
 800aae6:	462b      	moveq	r3, r5
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	4613      	mov	r3, r2
 800aaec:	460a      	mov	r2, r1
 800aaee:	4601      	mov	r1, r0
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f7ff ff76 	bl	800a9e2 <_strtol_l.isra.0>
 800aaf6:	b003      	add	sp, #12
 800aaf8:	bd30      	pop	{r4, r5, pc}
 800aafa:	bf00      	nop
 800aafc:	20000070 	.word	0x20000070
 800ab00:	200000d4 	.word	0x200000d4

0800ab04 <__swbuf_r>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	460e      	mov	r6, r1
 800ab08:	4614      	mov	r4, r2
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	b118      	cbz	r0, 800ab16 <__swbuf_r+0x12>
 800ab0e:	6983      	ldr	r3, [r0, #24]
 800ab10:	b90b      	cbnz	r3, 800ab16 <__swbuf_r+0x12>
 800ab12:	f000 f9a7 	bl	800ae64 <__sinit>
 800ab16:	4b21      	ldr	r3, [pc, #132]	; (800ab9c <__swbuf_r+0x98>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	d12a      	bne.n	800ab72 <__swbuf_r+0x6e>
 800ab1c:	686c      	ldr	r4, [r5, #4]
 800ab1e:	69a3      	ldr	r3, [r4, #24]
 800ab20:	60a3      	str	r3, [r4, #8]
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	071a      	lsls	r2, r3, #28
 800ab26:	d52e      	bpl.n	800ab86 <__swbuf_r+0x82>
 800ab28:	6923      	ldr	r3, [r4, #16]
 800ab2a:	b363      	cbz	r3, 800ab86 <__swbuf_r+0x82>
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	6820      	ldr	r0, [r4, #0]
 800ab30:	1ac0      	subs	r0, r0, r3
 800ab32:	6963      	ldr	r3, [r4, #20]
 800ab34:	b2f6      	uxtb	r6, r6
 800ab36:	4283      	cmp	r3, r0
 800ab38:	4637      	mov	r7, r6
 800ab3a:	dc04      	bgt.n	800ab46 <__swbuf_r+0x42>
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f000 f926 	bl	800ad90 <_fflush_r>
 800ab44:	bb28      	cbnz	r0, 800ab92 <__swbuf_r+0x8e>
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	6022      	str	r2, [r4, #0]
 800ab52:	701e      	strb	r6, [r3, #0]
 800ab54:	6963      	ldr	r3, [r4, #20]
 800ab56:	3001      	adds	r0, #1
 800ab58:	4283      	cmp	r3, r0
 800ab5a:	d004      	beq.n	800ab66 <__swbuf_r+0x62>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	07db      	lsls	r3, r3, #31
 800ab60:	d519      	bpl.n	800ab96 <__swbuf_r+0x92>
 800ab62:	2e0a      	cmp	r6, #10
 800ab64:	d117      	bne.n	800ab96 <__swbuf_r+0x92>
 800ab66:	4621      	mov	r1, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f000 f911 	bl	800ad90 <_fflush_r>
 800ab6e:	b190      	cbz	r0, 800ab96 <__swbuf_r+0x92>
 800ab70:	e00f      	b.n	800ab92 <__swbuf_r+0x8e>
 800ab72:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <__swbuf_r+0x9c>)
 800ab74:	429c      	cmp	r4, r3
 800ab76:	d101      	bne.n	800ab7c <__swbuf_r+0x78>
 800ab78:	68ac      	ldr	r4, [r5, #8]
 800ab7a:	e7d0      	b.n	800ab1e <__swbuf_r+0x1a>
 800ab7c:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <__swbuf_r+0xa0>)
 800ab7e:	429c      	cmp	r4, r3
 800ab80:	bf08      	it	eq
 800ab82:	68ec      	ldreq	r4, [r5, #12]
 800ab84:	e7cb      	b.n	800ab1e <__swbuf_r+0x1a>
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f000 f80d 	bl	800aba8 <__swsetup_r>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d0cc      	beq.n	800ab2c <__swbuf_r+0x28>
 800ab92:	f04f 37ff 	mov.w	r7, #4294967295
 800ab96:	4638      	mov	r0, r7
 800ab98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	0800c088 	.word	0x0800c088
 800aba0:	0800c0a8 	.word	0x0800c0a8
 800aba4:	0800c068 	.word	0x0800c068

0800aba8 <__swsetup_r>:
 800aba8:	4b32      	ldr	r3, [pc, #200]	; (800ac74 <__swsetup_r+0xcc>)
 800abaa:	b570      	push	{r4, r5, r6, lr}
 800abac:	681d      	ldr	r5, [r3, #0]
 800abae:	4606      	mov	r6, r0
 800abb0:	460c      	mov	r4, r1
 800abb2:	b125      	cbz	r5, 800abbe <__swsetup_r+0x16>
 800abb4:	69ab      	ldr	r3, [r5, #24]
 800abb6:	b913      	cbnz	r3, 800abbe <__swsetup_r+0x16>
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 f953 	bl	800ae64 <__sinit>
 800abbe:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <__swsetup_r+0xd0>)
 800abc0:	429c      	cmp	r4, r3
 800abc2:	d10f      	bne.n	800abe4 <__swsetup_r+0x3c>
 800abc4:	686c      	ldr	r4, [r5, #4]
 800abc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abca:	b29a      	uxth	r2, r3
 800abcc:	0715      	lsls	r5, r2, #28
 800abce:	d42c      	bmi.n	800ac2a <__swsetup_r+0x82>
 800abd0:	06d0      	lsls	r0, r2, #27
 800abd2:	d411      	bmi.n	800abf8 <__swsetup_r+0x50>
 800abd4:	2209      	movs	r2, #9
 800abd6:	6032      	str	r2, [r6, #0]
 800abd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	e03e      	b.n	800ac62 <__swsetup_r+0xba>
 800abe4:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <__swsetup_r+0xd4>)
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d101      	bne.n	800abee <__swsetup_r+0x46>
 800abea:	68ac      	ldr	r4, [r5, #8]
 800abec:	e7eb      	b.n	800abc6 <__swsetup_r+0x1e>
 800abee:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <__swsetup_r+0xd8>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	bf08      	it	eq
 800abf4:	68ec      	ldreq	r4, [r5, #12]
 800abf6:	e7e6      	b.n	800abc6 <__swsetup_r+0x1e>
 800abf8:	0751      	lsls	r1, r2, #29
 800abfa:	d512      	bpl.n	800ac22 <__swsetup_r+0x7a>
 800abfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfe:	b141      	cbz	r1, 800ac12 <__swsetup_r+0x6a>
 800ac00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac04:	4299      	cmp	r1, r3
 800ac06:	d002      	beq.n	800ac0e <__swsetup_r+0x66>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f000 fa2f 	bl	800b06c <_free_r>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6363      	str	r3, [r4, #52]	; 0x34
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6063      	str	r3, [r4, #4]
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	f043 0308 	orr.w	r3, r3, #8
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	b94b      	cbnz	r3, 800ac42 <__swsetup_r+0x9a>
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac38:	d003      	beq.n	800ac42 <__swsetup_r+0x9a>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 f9c3 	bl	800afc8 <__smakebuf_r>
 800ac42:	89a2      	ldrh	r2, [r4, #12]
 800ac44:	f012 0301 	ands.w	r3, r2, #1
 800ac48:	d00c      	beq.n	800ac64 <__swsetup_r+0xbc>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60a3      	str	r3, [r4, #8]
 800ac4e:	6963      	ldr	r3, [r4, #20]
 800ac50:	425b      	negs	r3, r3
 800ac52:	61a3      	str	r3, [r4, #24]
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	b953      	cbnz	r3, 800ac6e <__swsetup_r+0xc6>
 800ac58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ac60:	d1ba      	bne.n	800abd8 <__swsetup_r+0x30>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	0792      	lsls	r2, r2, #30
 800ac66:	bf58      	it	pl
 800ac68:	6963      	ldrpl	r3, [r4, #20]
 800ac6a:	60a3      	str	r3, [r4, #8]
 800ac6c:	e7f2      	b.n	800ac54 <__swsetup_r+0xac>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e7f7      	b.n	800ac62 <__swsetup_r+0xba>
 800ac72:	bf00      	nop
 800ac74:	20000070 	.word	0x20000070
 800ac78:	0800c088 	.word	0x0800c088
 800ac7c:	0800c0a8 	.word	0x0800c0a8
 800ac80:	0800c068 	.word	0x0800c068

0800ac84 <__sflush_r>:
 800ac84:	898a      	ldrh	r2, [r1, #12]
 800ac86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	0710      	lsls	r0, r2, #28
 800ac8e:	460c      	mov	r4, r1
 800ac90:	d458      	bmi.n	800ad44 <__sflush_r+0xc0>
 800ac92:	684b      	ldr	r3, [r1, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	dc05      	bgt.n	800aca4 <__sflush_r+0x20>
 800ac98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dc02      	bgt.n	800aca4 <__sflush_r+0x20>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aca6:	2e00      	cmp	r6, #0
 800aca8:	d0f9      	beq.n	800ac9e <__sflush_r+0x1a>
 800acaa:	2300      	movs	r3, #0
 800acac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb0:	682f      	ldr	r7, [r5, #0]
 800acb2:	6a21      	ldr	r1, [r4, #32]
 800acb4:	602b      	str	r3, [r5, #0]
 800acb6:	d032      	beq.n	800ad1e <__sflush_r+0x9a>
 800acb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	075a      	lsls	r2, r3, #29
 800acbe:	d505      	bpl.n	800accc <__sflush_r+0x48>
 800acc0:	6863      	ldr	r3, [r4, #4]
 800acc2:	1ac0      	subs	r0, r0, r3
 800acc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acc6:	b10b      	cbz	r3, 800accc <__sflush_r+0x48>
 800acc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acca:	1ac0      	subs	r0, r0, r3
 800accc:	2300      	movs	r3, #0
 800acce:	4602      	mov	r2, r0
 800acd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd2:	6a21      	ldr	r1, [r4, #32]
 800acd4:	4628      	mov	r0, r5
 800acd6:	47b0      	blx	r6
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	d106      	bne.n	800acec <__sflush_r+0x68>
 800acde:	6829      	ldr	r1, [r5, #0]
 800ace0:	291d      	cmp	r1, #29
 800ace2:	d848      	bhi.n	800ad76 <__sflush_r+0xf2>
 800ace4:	4a29      	ldr	r2, [pc, #164]	; (800ad8c <__sflush_r+0x108>)
 800ace6:	40ca      	lsrs	r2, r1
 800ace8:	07d6      	lsls	r6, r2, #31
 800acea:	d544      	bpl.n	800ad76 <__sflush_r+0xf2>
 800acec:	2200      	movs	r2, #0
 800acee:	6062      	str	r2, [r4, #4]
 800acf0:	04d9      	lsls	r1, r3, #19
 800acf2:	6922      	ldr	r2, [r4, #16]
 800acf4:	6022      	str	r2, [r4, #0]
 800acf6:	d504      	bpl.n	800ad02 <__sflush_r+0x7e>
 800acf8:	1c42      	adds	r2, r0, #1
 800acfa:	d101      	bne.n	800ad00 <__sflush_r+0x7c>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b903      	cbnz	r3, 800ad02 <__sflush_r+0x7e>
 800ad00:	6560      	str	r0, [r4, #84]	; 0x54
 800ad02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad04:	602f      	str	r7, [r5, #0]
 800ad06:	2900      	cmp	r1, #0
 800ad08:	d0c9      	beq.n	800ac9e <__sflush_r+0x1a>
 800ad0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad0e:	4299      	cmp	r1, r3
 800ad10:	d002      	beq.n	800ad18 <__sflush_r+0x94>
 800ad12:	4628      	mov	r0, r5
 800ad14:	f000 f9aa 	bl	800b06c <_free_r>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	6360      	str	r0, [r4, #52]	; 0x34
 800ad1c:	e7c0      	b.n	800aca0 <__sflush_r+0x1c>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b0      	blx	r6
 800ad24:	1c41      	adds	r1, r0, #1
 800ad26:	d1c8      	bne.n	800acba <__sflush_r+0x36>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0c5      	beq.n	800acba <__sflush_r+0x36>
 800ad2e:	2b1d      	cmp	r3, #29
 800ad30:	d001      	beq.n	800ad36 <__sflush_r+0xb2>
 800ad32:	2b16      	cmp	r3, #22
 800ad34:	d101      	bne.n	800ad3a <__sflush_r+0xb6>
 800ad36:	602f      	str	r7, [r5, #0]
 800ad38:	e7b1      	b.n	800ac9e <__sflush_r+0x1a>
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	e7ad      	b.n	800aca0 <__sflush_r+0x1c>
 800ad44:	690f      	ldr	r7, [r1, #16]
 800ad46:	2f00      	cmp	r7, #0
 800ad48:	d0a9      	beq.n	800ac9e <__sflush_r+0x1a>
 800ad4a:	0793      	lsls	r3, r2, #30
 800ad4c:	680e      	ldr	r6, [r1, #0]
 800ad4e:	bf08      	it	eq
 800ad50:	694b      	ldreq	r3, [r1, #20]
 800ad52:	600f      	str	r7, [r1, #0]
 800ad54:	bf18      	it	ne
 800ad56:	2300      	movne	r3, #0
 800ad58:	eba6 0807 	sub.w	r8, r6, r7
 800ad5c:	608b      	str	r3, [r1, #8]
 800ad5e:	f1b8 0f00 	cmp.w	r8, #0
 800ad62:	dd9c      	ble.n	800ac9e <__sflush_r+0x1a>
 800ad64:	4643      	mov	r3, r8
 800ad66:	463a      	mov	r2, r7
 800ad68:	6a21      	ldr	r1, [r4, #32]
 800ad6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	47b0      	blx	r6
 800ad70:	2800      	cmp	r0, #0
 800ad72:	dc06      	bgt.n	800ad82 <__sflush_r+0xfe>
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad80:	e78e      	b.n	800aca0 <__sflush_r+0x1c>
 800ad82:	4407      	add	r7, r0
 800ad84:	eba8 0800 	sub.w	r8, r8, r0
 800ad88:	e7e9      	b.n	800ad5e <__sflush_r+0xda>
 800ad8a:	bf00      	nop
 800ad8c:	20400001 	.word	0x20400001

0800ad90 <_fflush_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	690b      	ldr	r3, [r1, #16]
 800ad94:	4605      	mov	r5, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	b1db      	cbz	r3, 800add2 <_fflush_r+0x42>
 800ad9a:	b118      	cbz	r0, 800ada4 <_fflush_r+0x14>
 800ad9c:	6983      	ldr	r3, [r0, #24]
 800ad9e:	b90b      	cbnz	r3, 800ada4 <_fflush_r+0x14>
 800ada0:	f000 f860 	bl	800ae64 <__sinit>
 800ada4:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <_fflush_r+0x48>)
 800ada6:	429c      	cmp	r4, r3
 800ada8:	d109      	bne.n	800adbe <_fflush_r+0x2e>
 800adaa:	686c      	ldr	r4, [r5, #4]
 800adac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb0:	b17b      	cbz	r3, 800add2 <_fflush_r+0x42>
 800adb2:	4621      	mov	r1, r4
 800adb4:	4628      	mov	r0, r5
 800adb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adba:	f7ff bf63 	b.w	800ac84 <__sflush_r>
 800adbe:	4b07      	ldr	r3, [pc, #28]	; (800addc <_fflush_r+0x4c>)
 800adc0:	429c      	cmp	r4, r3
 800adc2:	d101      	bne.n	800adc8 <_fflush_r+0x38>
 800adc4:	68ac      	ldr	r4, [r5, #8]
 800adc6:	e7f1      	b.n	800adac <_fflush_r+0x1c>
 800adc8:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <_fflush_r+0x50>)
 800adca:	429c      	cmp	r4, r3
 800adcc:	bf08      	it	eq
 800adce:	68ec      	ldreq	r4, [r5, #12]
 800add0:	e7ec      	b.n	800adac <_fflush_r+0x1c>
 800add2:	2000      	movs	r0, #0
 800add4:	bd38      	pop	{r3, r4, r5, pc}
 800add6:	bf00      	nop
 800add8:	0800c088 	.word	0x0800c088
 800addc:	0800c0a8 	.word	0x0800c0a8
 800ade0:	0800c068 	.word	0x0800c068

0800ade4 <std>:
 800ade4:	2300      	movs	r3, #0
 800ade6:	b510      	push	{r4, lr}
 800ade8:	4604      	mov	r4, r0
 800adea:	e9c0 3300 	strd	r3, r3, [r0]
 800adee:	6083      	str	r3, [r0, #8]
 800adf0:	8181      	strh	r1, [r0, #12]
 800adf2:	6643      	str	r3, [r0, #100]	; 0x64
 800adf4:	81c2      	strh	r2, [r0, #14]
 800adf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adfa:	6183      	str	r3, [r0, #24]
 800adfc:	4619      	mov	r1, r3
 800adfe:	2208      	movs	r2, #8
 800ae00:	305c      	adds	r0, #92	; 0x5c
 800ae02:	f7ff fd22 	bl	800a84a <memset>
 800ae06:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <std+0x38>)
 800ae08:	6263      	str	r3, [r4, #36]	; 0x24
 800ae0a:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <std+0x3c>)
 800ae0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae0e:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <std+0x40>)
 800ae10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <std+0x44>)
 800ae14:	6224      	str	r4, [r4, #32]
 800ae16:	6323      	str	r3, [r4, #48]	; 0x30
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800ba11 	.word	0x0800ba11
 800ae20:	0800ba33 	.word	0x0800ba33
 800ae24:	0800ba6b 	.word	0x0800ba6b
 800ae28:	0800ba8f 	.word	0x0800ba8f

0800ae2c <_cleanup_r>:
 800ae2c:	4901      	ldr	r1, [pc, #4]	; (800ae34 <_cleanup_r+0x8>)
 800ae2e:	f000 b885 	b.w	800af3c <_fwalk_reent>
 800ae32:	bf00      	nop
 800ae34:	0800ad91 	.word	0x0800ad91

0800ae38 <__sfmoreglue>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	1e4a      	subs	r2, r1, #1
 800ae3c:	2568      	movs	r5, #104	; 0x68
 800ae3e:	4355      	muls	r5, r2
 800ae40:	460e      	mov	r6, r1
 800ae42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae46:	f000 f95f 	bl	800b108 <_malloc_r>
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	b140      	cbz	r0, 800ae60 <__sfmoreglue+0x28>
 800ae4e:	2100      	movs	r1, #0
 800ae50:	e9c0 1600 	strd	r1, r6, [r0]
 800ae54:	300c      	adds	r0, #12
 800ae56:	60a0      	str	r0, [r4, #8]
 800ae58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae5c:	f7ff fcf5 	bl	800a84a <memset>
 800ae60:	4620      	mov	r0, r4
 800ae62:	bd70      	pop	{r4, r5, r6, pc}

0800ae64 <__sinit>:
 800ae64:	6983      	ldr	r3, [r0, #24]
 800ae66:	b510      	push	{r4, lr}
 800ae68:	4604      	mov	r4, r0
 800ae6a:	bb33      	cbnz	r3, 800aeba <__sinit+0x56>
 800ae6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ae70:	6503      	str	r3, [r0, #80]	; 0x50
 800ae72:	4b12      	ldr	r3, [pc, #72]	; (800aebc <__sinit+0x58>)
 800ae74:	4a12      	ldr	r2, [pc, #72]	; (800aec0 <__sinit+0x5c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6282      	str	r2, [r0, #40]	; 0x28
 800ae7a:	4298      	cmp	r0, r3
 800ae7c:	bf04      	itt	eq
 800ae7e:	2301      	moveq	r3, #1
 800ae80:	6183      	streq	r3, [r0, #24]
 800ae82:	f000 f81f 	bl	800aec4 <__sfp>
 800ae86:	6060      	str	r0, [r4, #4]
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f000 f81b 	bl	800aec4 <__sfp>
 800ae8e:	60a0      	str	r0, [r4, #8]
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 f817 	bl	800aec4 <__sfp>
 800ae96:	2200      	movs	r2, #0
 800ae98:	60e0      	str	r0, [r4, #12]
 800ae9a:	2104      	movs	r1, #4
 800ae9c:	6860      	ldr	r0, [r4, #4]
 800ae9e:	f7ff ffa1 	bl	800ade4 <std>
 800aea2:	2201      	movs	r2, #1
 800aea4:	2109      	movs	r1, #9
 800aea6:	68a0      	ldr	r0, [r4, #8]
 800aea8:	f7ff ff9c 	bl	800ade4 <std>
 800aeac:	2202      	movs	r2, #2
 800aeae:	2112      	movs	r1, #18
 800aeb0:	68e0      	ldr	r0, [r4, #12]
 800aeb2:	f7ff ff97 	bl	800ade4 <std>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	61a3      	str	r3, [r4, #24]
 800aeba:	bd10      	pop	{r4, pc}
 800aebc:	0800c064 	.word	0x0800c064
 800aec0:	0800ae2d 	.word	0x0800ae2d

0800aec4 <__sfp>:
 800aec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec6:	4b1b      	ldr	r3, [pc, #108]	; (800af34 <__sfp+0x70>)
 800aec8:	681e      	ldr	r6, [r3, #0]
 800aeca:	69b3      	ldr	r3, [r6, #24]
 800aecc:	4607      	mov	r7, r0
 800aece:	b913      	cbnz	r3, 800aed6 <__sfp+0x12>
 800aed0:	4630      	mov	r0, r6
 800aed2:	f7ff ffc7 	bl	800ae64 <__sinit>
 800aed6:	3648      	adds	r6, #72	; 0x48
 800aed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aedc:	3b01      	subs	r3, #1
 800aede:	d503      	bpl.n	800aee8 <__sfp+0x24>
 800aee0:	6833      	ldr	r3, [r6, #0]
 800aee2:	b133      	cbz	r3, 800aef2 <__sfp+0x2e>
 800aee4:	6836      	ldr	r6, [r6, #0]
 800aee6:	e7f7      	b.n	800aed8 <__sfp+0x14>
 800aee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aeec:	b16d      	cbz	r5, 800af0a <__sfp+0x46>
 800aeee:	3468      	adds	r4, #104	; 0x68
 800aef0:	e7f4      	b.n	800aedc <__sfp+0x18>
 800aef2:	2104      	movs	r1, #4
 800aef4:	4638      	mov	r0, r7
 800aef6:	f7ff ff9f 	bl	800ae38 <__sfmoreglue>
 800aefa:	6030      	str	r0, [r6, #0]
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d1f1      	bne.n	800aee4 <__sfp+0x20>
 800af00:	230c      	movs	r3, #12
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	4604      	mov	r4, r0
 800af06:	4620      	mov	r0, r4
 800af08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0a:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <__sfp+0x74>)
 800af0c:	6665      	str	r5, [r4, #100]	; 0x64
 800af0e:	e9c4 5500 	strd	r5, r5, [r4]
 800af12:	60a5      	str	r5, [r4, #8]
 800af14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800af18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800af1c:	2208      	movs	r2, #8
 800af1e:	4629      	mov	r1, r5
 800af20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af24:	f7ff fc91 	bl	800a84a <memset>
 800af28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af30:	e7e9      	b.n	800af06 <__sfp+0x42>
 800af32:	bf00      	nop
 800af34:	0800c064 	.word	0x0800c064
 800af38:	ffff0001 	.word	0xffff0001

0800af3c <_fwalk_reent>:
 800af3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af40:	4680      	mov	r8, r0
 800af42:	4689      	mov	r9, r1
 800af44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af48:	2600      	movs	r6, #0
 800af4a:	b914      	cbnz	r4, 800af52 <_fwalk_reent+0x16>
 800af4c:	4630      	mov	r0, r6
 800af4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800af56:	3f01      	subs	r7, #1
 800af58:	d501      	bpl.n	800af5e <_fwalk_reent+0x22>
 800af5a:	6824      	ldr	r4, [r4, #0]
 800af5c:	e7f5      	b.n	800af4a <_fwalk_reent+0xe>
 800af5e:	89ab      	ldrh	r3, [r5, #12]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d907      	bls.n	800af74 <_fwalk_reent+0x38>
 800af64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af68:	3301      	adds	r3, #1
 800af6a:	d003      	beq.n	800af74 <_fwalk_reent+0x38>
 800af6c:	4629      	mov	r1, r5
 800af6e:	4640      	mov	r0, r8
 800af70:	47c8      	blx	r9
 800af72:	4306      	orrs	r6, r0
 800af74:	3568      	adds	r5, #104	; 0x68
 800af76:	e7ee      	b.n	800af56 <_fwalk_reent+0x1a>

0800af78 <__locale_ctype_ptr_l>:
 800af78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800af7c:	4770      	bx	lr

0800af7e <__swhatbuf_r>:
 800af7e:	b570      	push	{r4, r5, r6, lr}
 800af80:	460e      	mov	r6, r1
 800af82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af86:	2900      	cmp	r1, #0
 800af88:	b096      	sub	sp, #88	; 0x58
 800af8a:	4614      	mov	r4, r2
 800af8c:	461d      	mov	r5, r3
 800af8e:	da07      	bge.n	800afa0 <__swhatbuf_r+0x22>
 800af90:	2300      	movs	r3, #0
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	89b3      	ldrh	r3, [r6, #12]
 800af96:	061a      	lsls	r2, r3, #24
 800af98:	d410      	bmi.n	800afbc <__swhatbuf_r+0x3e>
 800af9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af9e:	e00e      	b.n	800afbe <__swhatbuf_r+0x40>
 800afa0:	466a      	mov	r2, sp
 800afa2:	f000 fda7 	bl	800baf4 <_fstat_r>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	dbf2      	blt.n	800af90 <__swhatbuf_r+0x12>
 800afaa:	9a01      	ldr	r2, [sp, #4]
 800afac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afb4:	425a      	negs	r2, r3
 800afb6:	415a      	adcs	r2, r3
 800afb8:	602a      	str	r2, [r5, #0]
 800afba:	e7ee      	b.n	800af9a <__swhatbuf_r+0x1c>
 800afbc:	2340      	movs	r3, #64	; 0x40
 800afbe:	2000      	movs	r0, #0
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	b016      	add	sp, #88	; 0x58
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afc8 <__smakebuf_r>:
 800afc8:	898b      	ldrh	r3, [r1, #12]
 800afca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afcc:	079d      	lsls	r5, r3, #30
 800afce:	4606      	mov	r6, r0
 800afd0:	460c      	mov	r4, r1
 800afd2:	d507      	bpl.n	800afe4 <__smakebuf_r+0x1c>
 800afd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	2301      	movs	r3, #1
 800afde:	6163      	str	r3, [r4, #20]
 800afe0:	b002      	add	sp, #8
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	ab01      	add	r3, sp, #4
 800afe6:	466a      	mov	r2, sp
 800afe8:	f7ff ffc9 	bl	800af7e <__swhatbuf_r>
 800afec:	9900      	ldr	r1, [sp, #0]
 800afee:	4605      	mov	r5, r0
 800aff0:	4630      	mov	r0, r6
 800aff2:	f000 f889 	bl	800b108 <_malloc_r>
 800aff6:	b948      	cbnz	r0, 800b00c <__smakebuf_r+0x44>
 800aff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affc:	059a      	lsls	r2, r3, #22
 800affe:	d4ef      	bmi.n	800afe0 <__smakebuf_r+0x18>
 800b000:	f023 0303 	bic.w	r3, r3, #3
 800b004:	f043 0302 	orr.w	r3, r3, #2
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	e7e3      	b.n	800afd4 <__smakebuf_r+0xc>
 800b00c:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <__smakebuf_r+0x7c>)
 800b00e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	6020      	str	r0, [r4, #0]
 800b014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	9b00      	ldr	r3, [sp, #0]
 800b01c:	6163      	str	r3, [r4, #20]
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	6120      	str	r0, [r4, #16]
 800b022:	b15b      	cbz	r3, 800b03c <__smakebuf_r+0x74>
 800b024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b028:	4630      	mov	r0, r6
 800b02a:	f000 fd75 	bl	800bb18 <_isatty_r>
 800b02e:	b128      	cbz	r0, 800b03c <__smakebuf_r+0x74>
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	f043 0301 	orr.w	r3, r3, #1
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	431d      	orrs	r5, r3
 800b040:	81a5      	strh	r5, [r4, #12]
 800b042:	e7cd      	b.n	800afe0 <__smakebuf_r+0x18>
 800b044:	0800ae2d 	.word	0x0800ae2d

0800b048 <__ascii_mbtowc>:
 800b048:	b082      	sub	sp, #8
 800b04a:	b901      	cbnz	r1, 800b04e <__ascii_mbtowc+0x6>
 800b04c:	a901      	add	r1, sp, #4
 800b04e:	b142      	cbz	r2, 800b062 <__ascii_mbtowc+0x1a>
 800b050:	b14b      	cbz	r3, 800b066 <__ascii_mbtowc+0x1e>
 800b052:	7813      	ldrb	r3, [r2, #0]
 800b054:	600b      	str	r3, [r1, #0]
 800b056:	7812      	ldrb	r2, [r2, #0]
 800b058:	1c10      	adds	r0, r2, #0
 800b05a:	bf18      	it	ne
 800b05c:	2001      	movne	r0, #1
 800b05e:	b002      	add	sp, #8
 800b060:	4770      	bx	lr
 800b062:	4610      	mov	r0, r2
 800b064:	e7fb      	b.n	800b05e <__ascii_mbtowc+0x16>
 800b066:	f06f 0001 	mvn.w	r0, #1
 800b06a:	e7f8      	b.n	800b05e <__ascii_mbtowc+0x16>

0800b06c <_free_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4605      	mov	r5, r0
 800b070:	2900      	cmp	r1, #0
 800b072:	d045      	beq.n	800b100 <_free_r+0x94>
 800b074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b078:	1f0c      	subs	r4, r1, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bfb8      	it	lt
 800b07e:	18e4      	addlt	r4, r4, r3
 800b080:	f000 fd85 	bl	800bb8e <__malloc_lock>
 800b084:	4a1f      	ldr	r2, [pc, #124]	; (800b104 <_free_r+0x98>)
 800b086:	6813      	ldr	r3, [r2, #0]
 800b088:	4610      	mov	r0, r2
 800b08a:	b933      	cbnz	r3, 800b09a <_free_r+0x2e>
 800b08c:	6063      	str	r3, [r4, #4]
 800b08e:	6014      	str	r4, [r2, #0]
 800b090:	4628      	mov	r0, r5
 800b092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b096:	f000 bd7b 	b.w	800bb90 <__malloc_unlock>
 800b09a:	42a3      	cmp	r3, r4
 800b09c:	d90c      	bls.n	800b0b8 <_free_r+0x4c>
 800b09e:	6821      	ldr	r1, [r4, #0]
 800b0a0:	1862      	adds	r2, r4, r1
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	bf04      	itt	eq
 800b0a6:	681a      	ldreq	r2, [r3, #0]
 800b0a8:	685b      	ldreq	r3, [r3, #4]
 800b0aa:	6063      	str	r3, [r4, #4]
 800b0ac:	bf04      	itt	eq
 800b0ae:	1852      	addeq	r2, r2, r1
 800b0b0:	6022      	streq	r2, [r4, #0]
 800b0b2:	6004      	str	r4, [r0, #0]
 800b0b4:	e7ec      	b.n	800b090 <_free_r+0x24>
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	b10a      	cbz	r2, 800b0c0 <_free_r+0x54>
 800b0bc:	42a2      	cmp	r2, r4
 800b0be:	d9fa      	bls.n	800b0b6 <_free_r+0x4a>
 800b0c0:	6819      	ldr	r1, [r3, #0]
 800b0c2:	1858      	adds	r0, r3, r1
 800b0c4:	42a0      	cmp	r0, r4
 800b0c6:	d10b      	bne.n	800b0e0 <_free_r+0x74>
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	4401      	add	r1, r0
 800b0cc:	1858      	adds	r0, r3, r1
 800b0ce:	4282      	cmp	r2, r0
 800b0d0:	6019      	str	r1, [r3, #0]
 800b0d2:	d1dd      	bne.n	800b090 <_free_r+0x24>
 800b0d4:	6810      	ldr	r0, [r2, #0]
 800b0d6:	6852      	ldr	r2, [r2, #4]
 800b0d8:	605a      	str	r2, [r3, #4]
 800b0da:	4401      	add	r1, r0
 800b0dc:	6019      	str	r1, [r3, #0]
 800b0de:	e7d7      	b.n	800b090 <_free_r+0x24>
 800b0e0:	d902      	bls.n	800b0e8 <_free_r+0x7c>
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	602b      	str	r3, [r5, #0]
 800b0e6:	e7d3      	b.n	800b090 <_free_r+0x24>
 800b0e8:	6820      	ldr	r0, [r4, #0]
 800b0ea:	1821      	adds	r1, r4, r0
 800b0ec:	428a      	cmp	r2, r1
 800b0ee:	bf04      	itt	eq
 800b0f0:	6811      	ldreq	r1, [r2, #0]
 800b0f2:	6852      	ldreq	r2, [r2, #4]
 800b0f4:	6062      	str	r2, [r4, #4]
 800b0f6:	bf04      	itt	eq
 800b0f8:	1809      	addeq	r1, r1, r0
 800b0fa:	6021      	streq	r1, [r4, #0]
 800b0fc:	605c      	str	r4, [r3, #4]
 800b0fe:	e7c7      	b.n	800b090 <_free_r+0x24>
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	20004294 	.word	0x20004294

0800b108 <_malloc_r>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	1ccd      	adds	r5, r1, #3
 800b10c:	f025 0503 	bic.w	r5, r5, #3
 800b110:	3508      	adds	r5, #8
 800b112:	2d0c      	cmp	r5, #12
 800b114:	bf38      	it	cc
 800b116:	250c      	movcc	r5, #12
 800b118:	2d00      	cmp	r5, #0
 800b11a:	4606      	mov	r6, r0
 800b11c:	db01      	blt.n	800b122 <_malloc_r+0x1a>
 800b11e:	42a9      	cmp	r1, r5
 800b120:	d903      	bls.n	800b12a <_malloc_r+0x22>
 800b122:	230c      	movs	r3, #12
 800b124:	6033      	str	r3, [r6, #0]
 800b126:	2000      	movs	r0, #0
 800b128:	bd70      	pop	{r4, r5, r6, pc}
 800b12a:	f000 fd30 	bl	800bb8e <__malloc_lock>
 800b12e:	4a21      	ldr	r2, [pc, #132]	; (800b1b4 <_malloc_r+0xac>)
 800b130:	6814      	ldr	r4, [r2, #0]
 800b132:	4621      	mov	r1, r4
 800b134:	b991      	cbnz	r1, 800b15c <_malloc_r+0x54>
 800b136:	4c20      	ldr	r4, [pc, #128]	; (800b1b8 <_malloc_r+0xb0>)
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	b91b      	cbnz	r3, 800b144 <_malloc_r+0x3c>
 800b13c:	4630      	mov	r0, r6
 800b13e:	f000 fc57 	bl	800b9f0 <_sbrk_r>
 800b142:	6020      	str	r0, [r4, #0]
 800b144:	4629      	mov	r1, r5
 800b146:	4630      	mov	r0, r6
 800b148:	f000 fc52 	bl	800b9f0 <_sbrk_r>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d124      	bne.n	800b19a <_malloc_r+0x92>
 800b150:	230c      	movs	r3, #12
 800b152:	6033      	str	r3, [r6, #0]
 800b154:	4630      	mov	r0, r6
 800b156:	f000 fd1b 	bl	800bb90 <__malloc_unlock>
 800b15a:	e7e4      	b.n	800b126 <_malloc_r+0x1e>
 800b15c:	680b      	ldr	r3, [r1, #0]
 800b15e:	1b5b      	subs	r3, r3, r5
 800b160:	d418      	bmi.n	800b194 <_malloc_r+0x8c>
 800b162:	2b0b      	cmp	r3, #11
 800b164:	d90f      	bls.n	800b186 <_malloc_r+0x7e>
 800b166:	600b      	str	r3, [r1, #0]
 800b168:	50cd      	str	r5, [r1, r3]
 800b16a:	18cc      	adds	r4, r1, r3
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 fd0f 	bl	800bb90 <__malloc_unlock>
 800b172:	f104 000b 	add.w	r0, r4, #11
 800b176:	1d23      	adds	r3, r4, #4
 800b178:	f020 0007 	bic.w	r0, r0, #7
 800b17c:	1ac3      	subs	r3, r0, r3
 800b17e:	d0d3      	beq.n	800b128 <_malloc_r+0x20>
 800b180:	425a      	negs	r2, r3
 800b182:	50e2      	str	r2, [r4, r3]
 800b184:	e7d0      	b.n	800b128 <_malloc_r+0x20>
 800b186:	428c      	cmp	r4, r1
 800b188:	684b      	ldr	r3, [r1, #4]
 800b18a:	bf16      	itet	ne
 800b18c:	6063      	strne	r3, [r4, #4]
 800b18e:	6013      	streq	r3, [r2, #0]
 800b190:	460c      	movne	r4, r1
 800b192:	e7eb      	b.n	800b16c <_malloc_r+0x64>
 800b194:	460c      	mov	r4, r1
 800b196:	6849      	ldr	r1, [r1, #4]
 800b198:	e7cc      	b.n	800b134 <_malloc_r+0x2c>
 800b19a:	1cc4      	adds	r4, r0, #3
 800b19c:	f024 0403 	bic.w	r4, r4, #3
 800b1a0:	42a0      	cmp	r0, r4
 800b1a2:	d005      	beq.n	800b1b0 <_malloc_r+0xa8>
 800b1a4:	1a21      	subs	r1, r4, r0
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 fc22 	bl	800b9f0 <_sbrk_r>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d0cf      	beq.n	800b150 <_malloc_r+0x48>
 800b1b0:	6025      	str	r5, [r4, #0]
 800b1b2:	e7db      	b.n	800b16c <_malloc_r+0x64>
 800b1b4:	20004294 	.word	0x20004294
 800b1b8:	20004298 	.word	0x20004298

0800b1bc <__ssputs_r>:
 800b1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c0:	688e      	ldr	r6, [r1, #8]
 800b1c2:	429e      	cmp	r6, r3
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	4690      	mov	r8, r2
 800b1ca:	4699      	mov	r9, r3
 800b1cc:	d837      	bhi.n	800b23e <__ssputs_r+0x82>
 800b1ce:	898a      	ldrh	r2, [r1, #12]
 800b1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1d4:	d031      	beq.n	800b23a <__ssputs_r+0x7e>
 800b1d6:	6825      	ldr	r5, [r4, #0]
 800b1d8:	6909      	ldr	r1, [r1, #16]
 800b1da:	1a6f      	subs	r7, r5, r1
 800b1dc:	6965      	ldr	r5, [r4, #20]
 800b1de:	2302      	movs	r3, #2
 800b1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1e4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b1e8:	f109 0301 	add.w	r3, r9, #1
 800b1ec:	443b      	add	r3, r7
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	bf38      	it	cc
 800b1f2:	461d      	movcc	r5, r3
 800b1f4:	0553      	lsls	r3, r2, #21
 800b1f6:	d530      	bpl.n	800b25a <__ssputs_r+0x9e>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	f7ff ff85 	bl	800b108 <_malloc_r>
 800b1fe:	4606      	mov	r6, r0
 800b200:	b950      	cbnz	r0, 800b218 <__ssputs_r+0x5c>
 800b202:	230c      	movs	r3, #12
 800b204:	f8ca 3000 	str.w	r3, [sl]
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	463a      	mov	r2, r7
 800b21a:	6921      	ldr	r1, [r4, #16]
 800b21c:	f7ff fb0a 	bl	800a834 <memcpy>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	6126      	str	r6, [r4, #16]
 800b22e:	6165      	str	r5, [r4, #20]
 800b230:	443e      	add	r6, r7
 800b232:	1bed      	subs	r5, r5, r7
 800b234:	6026      	str	r6, [r4, #0]
 800b236:	60a5      	str	r5, [r4, #8]
 800b238:	464e      	mov	r6, r9
 800b23a:	454e      	cmp	r6, r9
 800b23c:	d900      	bls.n	800b240 <__ssputs_r+0x84>
 800b23e:	464e      	mov	r6, r9
 800b240:	4632      	mov	r2, r6
 800b242:	4641      	mov	r1, r8
 800b244:	6820      	ldr	r0, [r4, #0]
 800b246:	f000 fc89 	bl	800bb5c <memmove>
 800b24a:	68a3      	ldr	r3, [r4, #8]
 800b24c:	1b9b      	subs	r3, r3, r6
 800b24e:	60a3      	str	r3, [r4, #8]
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	441e      	add	r6, r3
 800b254:	6026      	str	r6, [r4, #0]
 800b256:	2000      	movs	r0, #0
 800b258:	e7dc      	b.n	800b214 <__ssputs_r+0x58>
 800b25a:	462a      	mov	r2, r5
 800b25c:	f000 fc99 	bl	800bb92 <_realloc_r>
 800b260:	4606      	mov	r6, r0
 800b262:	2800      	cmp	r0, #0
 800b264:	d1e2      	bne.n	800b22c <__ssputs_r+0x70>
 800b266:	6921      	ldr	r1, [r4, #16]
 800b268:	4650      	mov	r0, sl
 800b26a:	f7ff feff 	bl	800b06c <_free_r>
 800b26e:	e7c8      	b.n	800b202 <__ssputs_r+0x46>

0800b270 <_svfiprintf_r>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	461d      	mov	r5, r3
 800b276:	898b      	ldrh	r3, [r1, #12]
 800b278:	061f      	lsls	r7, r3, #24
 800b27a:	b09d      	sub	sp, #116	; 0x74
 800b27c:	4680      	mov	r8, r0
 800b27e:	460c      	mov	r4, r1
 800b280:	4616      	mov	r6, r2
 800b282:	d50f      	bpl.n	800b2a4 <_svfiprintf_r+0x34>
 800b284:	690b      	ldr	r3, [r1, #16]
 800b286:	b96b      	cbnz	r3, 800b2a4 <_svfiprintf_r+0x34>
 800b288:	2140      	movs	r1, #64	; 0x40
 800b28a:	f7ff ff3d 	bl	800b108 <_malloc_r>
 800b28e:	6020      	str	r0, [r4, #0]
 800b290:	6120      	str	r0, [r4, #16]
 800b292:	b928      	cbnz	r0, 800b2a0 <_svfiprintf_r+0x30>
 800b294:	230c      	movs	r3, #12
 800b296:	f8c8 3000 	str.w	r3, [r8]
 800b29a:	f04f 30ff 	mov.w	r0, #4294967295
 800b29e:	e0c8      	b.n	800b432 <_svfiprintf_r+0x1c2>
 800b2a0:	2340      	movs	r3, #64	; 0x40
 800b2a2:	6163      	str	r3, [r4, #20]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a8:	2320      	movs	r3, #32
 800b2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ae:	2330      	movs	r3, #48	; 0x30
 800b2b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2b4:	9503      	str	r5, [sp, #12]
 800b2b6:	f04f 0b01 	mov.w	fp, #1
 800b2ba:	4637      	mov	r7, r6
 800b2bc:	463d      	mov	r5, r7
 800b2be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b2c2:	b10b      	cbz	r3, 800b2c8 <_svfiprintf_r+0x58>
 800b2c4:	2b25      	cmp	r3, #37	; 0x25
 800b2c6:	d13e      	bne.n	800b346 <_svfiprintf_r+0xd6>
 800b2c8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b2cc:	d00b      	beq.n	800b2e6 <_svfiprintf_r+0x76>
 800b2ce:	4653      	mov	r3, sl
 800b2d0:	4632      	mov	r2, r6
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	f7ff ff71 	bl	800b1bc <__ssputs_r>
 800b2da:	3001      	adds	r0, #1
 800b2dc:	f000 80a4 	beq.w	800b428 <_svfiprintf_r+0x1b8>
 800b2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e2:	4453      	add	r3, sl
 800b2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e6:	783b      	ldrb	r3, [r7, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 809d 	beq.w	800b428 <_svfiprintf_r+0x1b8>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	9307      	str	r3, [sp, #28]
 800b2fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b300:	931a      	str	r3, [sp, #104]	; 0x68
 800b302:	462f      	mov	r7, r5
 800b304:	2205      	movs	r2, #5
 800b306:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b30a:	4850      	ldr	r0, [pc, #320]	; (800b44c <_svfiprintf_r+0x1dc>)
 800b30c:	f7f4 ff78 	bl	8000200 <memchr>
 800b310:	9b04      	ldr	r3, [sp, #16]
 800b312:	b9d0      	cbnz	r0, 800b34a <_svfiprintf_r+0xda>
 800b314:	06d9      	lsls	r1, r3, #27
 800b316:	bf44      	itt	mi
 800b318:	2220      	movmi	r2, #32
 800b31a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b31e:	071a      	lsls	r2, r3, #28
 800b320:	bf44      	itt	mi
 800b322:	222b      	movmi	r2, #43	; 0x2b
 800b324:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b328:	782a      	ldrb	r2, [r5, #0]
 800b32a:	2a2a      	cmp	r2, #42	; 0x2a
 800b32c:	d015      	beq.n	800b35a <_svfiprintf_r+0xea>
 800b32e:	9a07      	ldr	r2, [sp, #28]
 800b330:	462f      	mov	r7, r5
 800b332:	2000      	movs	r0, #0
 800b334:	250a      	movs	r5, #10
 800b336:	4639      	mov	r1, r7
 800b338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b33c:	3b30      	subs	r3, #48	; 0x30
 800b33e:	2b09      	cmp	r3, #9
 800b340:	d94d      	bls.n	800b3de <_svfiprintf_r+0x16e>
 800b342:	b1b8      	cbz	r0, 800b374 <_svfiprintf_r+0x104>
 800b344:	e00f      	b.n	800b366 <_svfiprintf_r+0xf6>
 800b346:	462f      	mov	r7, r5
 800b348:	e7b8      	b.n	800b2bc <_svfiprintf_r+0x4c>
 800b34a:	4a40      	ldr	r2, [pc, #256]	; (800b44c <_svfiprintf_r+0x1dc>)
 800b34c:	1a80      	subs	r0, r0, r2
 800b34e:	fa0b f000 	lsl.w	r0, fp, r0
 800b352:	4318      	orrs	r0, r3
 800b354:	9004      	str	r0, [sp, #16]
 800b356:	463d      	mov	r5, r7
 800b358:	e7d3      	b.n	800b302 <_svfiprintf_r+0x92>
 800b35a:	9a03      	ldr	r2, [sp, #12]
 800b35c:	1d11      	adds	r1, r2, #4
 800b35e:	6812      	ldr	r2, [r2, #0]
 800b360:	9103      	str	r1, [sp, #12]
 800b362:	2a00      	cmp	r2, #0
 800b364:	db01      	blt.n	800b36a <_svfiprintf_r+0xfa>
 800b366:	9207      	str	r2, [sp, #28]
 800b368:	e004      	b.n	800b374 <_svfiprintf_r+0x104>
 800b36a:	4252      	negs	r2, r2
 800b36c:	f043 0302 	orr.w	r3, r3, #2
 800b370:	9207      	str	r2, [sp, #28]
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	783b      	ldrb	r3, [r7, #0]
 800b376:	2b2e      	cmp	r3, #46	; 0x2e
 800b378:	d10c      	bne.n	800b394 <_svfiprintf_r+0x124>
 800b37a:	787b      	ldrb	r3, [r7, #1]
 800b37c:	2b2a      	cmp	r3, #42	; 0x2a
 800b37e:	d133      	bne.n	800b3e8 <_svfiprintf_r+0x178>
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	1d1a      	adds	r2, r3, #4
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	9203      	str	r2, [sp, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	bfb8      	it	lt
 800b38c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b390:	3702      	adds	r7, #2
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	4d2e      	ldr	r5, [pc, #184]	; (800b450 <_svfiprintf_r+0x1e0>)
 800b396:	7839      	ldrb	r1, [r7, #0]
 800b398:	2203      	movs	r2, #3
 800b39a:	4628      	mov	r0, r5
 800b39c:	f7f4 ff30 	bl	8000200 <memchr>
 800b3a0:	b138      	cbz	r0, 800b3b2 <_svfiprintf_r+0x142>
 800b3a2:	2340      	movs	r3, #64	; 0x40
 800b3a4:	1b40      	subs	r0, r0, r5
 800b3a6:	fa03 f000 	lsl.w	r0, r3, r0
 800b3aa:	9b04      	ldr	r3, [sp, #16]
 800b3ac:	4303      	orrs	r3, r0
 800b3ae:	3701      	adds	r7, #1
 800b3b0:	9304      	str	r3, [sp, #16]
 800b3b2:	7839      	ldrb	r1, [r7, #0]
 800b3b4:	4827      	ldr	r0, [pc, #156]	; (800b454 <_svfiprintf_r+0x1e4>)
 800b3b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ba:	2206      	movs	r2, #6
 800b3bc:	1c7e      	adds	r6, r7, #1
 800b3be:	f7f4 ff1f 	bl	8000200 <memchr>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d038      	beq.n	800b438 <_svfiprintf_r+0x1c8>
 800b3c6:	4b24      	ldr	r3, [pc, #144]	; (800b458 <_svfiprintf_r+0x1e8>)
 800b3c8:	bb13      	cbnz	r3, 800b410 <_svfiprintf_r+0x1a0>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	3307      	adds	r3, #7
 800b3ce:	f023 0307 	bic.w	r3, r3, #7
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	9303      	str	r3, [sp, #12]
 800b3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d8:	444b      	add	r3, r9
 800b3da:	9309      	str	r3, [sp, #36]	; 0x24
 800b3dc:	e76d      	b.n	800b2ba <_svfiprintf_r+0x4a>
 800b3de:	fb05 3202 	mla	r2, r5, r2, r3
 800b3e2:	2001      	movs	r0, #1
 800b3e4:	460f      	mov	r7, r1
 800b3e6:	e7a6      	b.n	800b336 <_svfiprintf_r+0xc6>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	3701      	adds	r7, #1
 800b3ec:	9305      	str	r3, [sp, #20]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	250a      	movs	r5, #10
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3f8:	3a30      	subs	r2, #48	; 0x30
 800b3fa:	2a09      	cmp	r2, #9
 800b3fc:	d903      	bls.n	800b406 <_svfiprintf_r+0x196>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0c8      	beq.n	800b394 <_svfiprintf_r+0x124>
 800b402:	9105      	str	r1, [sp, #20]
 800b404:	e7c6      	b.n	800b394 <_svfiprintf_r+0x124>
 800b406:	fb05 2101 	mla	r1, r5, r1, r2
 800b40a:	2301      	movs	r3, #1
 800b40c:	4607      	mov	r7, r0
 800b40e:	e7f0      	b.n	800b3f2 <_svfiprintf_r+0x182>
 800b410:	ab03      	add	r3, sp, #12
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	4622      	mov	r2, r4
 800b416:	4b11      	ldr	r3, [pc, #68]	; (800b45c <_svfiprintf_r+0x1ec>)
 800b418:	a904      	add	r1, sp, #16
 800b41a:	4640      	mov	r0, r8
 800b41c:	f3af 8000 	nop.w
 800b420:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b424:	4681      	mov	r9, r0
 800b426:	d1d6      	bne.n	800b3d6 <_svfiprintf_r+0x166>
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	065b      	lsls	r3, r3, #25
 800b42c:	f53f af35 	bmi.w	800b29a <_svfiprintf_r+0x2a>
 800b430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b432:	b01d      	add	sp, #116	; 0x74
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	ab03      	add	r3, sp, #12
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	4622      	mov	r2, r4
 800b43e:	4b07      	ldr	r3, [pc, #28]	; (800b45c <_svfiprintf_r+0x1ec>)
 800b440:	a904      	add	r1, sp, #16
 800b442:	4640      	mov	r0, r8
 800b444:	f000 f9c2 	bl	800b7cc <_printf_i>
 800b448:	e7ea      	b.n	800b420 <_svfiprintf_r+0x1b0>
 800b44a:	bf00      	nop
 800b44c:	0800c0d2 	.word	0x0800c0d2
 800b450:	0800c0d8 	.word	0x0800c0d8
 800b454:	0800c0dc 	.word	0x0800c0dc
 800b458:	00000000 	.word	0x00000000
 800b45c:	0800b1bd 	.word	0x0800b1bd

0800b460 <__sfputc_r>:
 800b460:	6893      	ldr	r3, [r2, #8]
 800b462:	3b01      	subs	r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	b410      	push	{r4}
 800b468:	6093      	str	r3, [r2, #8]
 800b46a:	da08      	bge.n	800b47e <__sfputc_r+0x1e>
 800b46c:	6994      	ldr	r4, [r2, #24]
 800b46e:	42a3      	cmp	r3, r4
 800b470:	db01      	blt.n	800b476 <__sfputc_r+0x16>
 800b472:	290a      	cmp	r1, #10
 800b474:	d103      	bne.n	800b47e <__sfputc_r+0x1e>
 800b476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b47a:	f7ff bb43 	b.w	800ab04 <__swbuf_r>
 800b47e:	6813      	ldr	r3, [r2, #0]
 800b480:	1c58      	adds	r0, r3, #1
 800b482:	6010      	str	r0, [r2, #0]
 800b484:	7019      	strb	r1, [r3, #0]
 800b486:	4608      	mov	r0, r1
 800b488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <__sfputs_r>:
 800b48e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b490:	4606      	mov	r6, r0
 800b492:	460f      	mov	r7, r1
 800b494:	4614      	mov	r4, r2
 800b496:	18d5      	adds	r5, r2, r3
 800b498:	42ac      	cmp	r4, r5
 800b49a:	d101      	bne.n	800b4a0 <__sfputs_r+0x12>
 800b49c:	2000      	movs	r0, #0
 800b49e:	e007      	b.n	800b4b0 <__sfputs_r+0x22>
 800b4a0:	463a      	mov	r2, r7
 800b4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f7ff ffda 	bl	800b460 <__sfputc_r>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d1f3      	bne.n	800b498 <__sfputs_r+0xa>
 800b4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4b4 <_vfiprintf_r>:
 800b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	b09d      	sub	sp, #116	; 0x74
 800b4bc:	4617      	mov	r7, r2
 800b4be:	461d      	mov	r5, r3
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	b118      	cbz	r0, 800b4cc <_vfiprintf_r+0x18>
 800b4c4:	6983      	ldr	r3, [r0, #24]
 800b4c6:	b90b      	cbnz	r3, 800b4cc <_vfiprintf_r+0x18>
 800b4c8:	f7ff fccc 	bl	800ae64 <__sinit>
 800b4cc:	4b7c      	ldr	r3, [pc, #496]	; (800b6c0 <_vfiprintf_r+0x20c>)
 800b4ce:	429c      	cmp	r4, r3
 800b4d0:	d158      	bne.n	800b584 <_vfiprintf_r+0xd0>
 800b4d2:	6874      	ldr	r4, [r6, #4]
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	0718      	lsls	r0, r3, #28
 800b4d8:	d55e      	bpl.n	800b598 <_vfiprintf_r+0xe4>
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d05b      	beq.n	800b598 <_vfiprintf_r+0xe4>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e4:	2320      	movs	r3, #32
 800b4e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4ea:	2330      	movs	r3, #48	; 0x30
 800b4ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4f0:	9503      	str	r5, [sp, #12]
 800b4f2:	f04f 0b01 	mov.w	fp, #1
 800b4f6:	46b8      	mov	r8, r7
 800b4f8:	4645      	mov	r5, r8
 800b4fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b4fe:	b10b      	cbz	r3, 800b504 <_vfiprintf_r+0x50>
 800b500:	2b25      	cmp	r3, #37	; 0x25
 800b502:	d154      	bne.n	800b5ae <_vfiprintf_r+0xfa>
 800b504:	ebb8 0a07 	subs.w	sl, r8, r7
 800b508:	d00b      	beq.n	800b522 <_vfiprintf_r+0x6e>
 800b50a:	4653      	mov	r3, sl
 800b50c:	463a      	mov	r2, r7
 800b50e:	4621      	mov	r1, r4
 800b510:	4630      	mov	r0, r6
 800b512:	f7ff ffbc 	bl	800b48e <__sfputs_r>
 800b516:	3001      	adds	r0, #1
 800b518:	f000 80c2 	beq.w	800b6a0 <_vfiprintf_r+0x1ec>
 800b51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51e:	4453      	add	r3, sl
 800b520:	9309      	str	r3, [sp, #36]	; 0x24
 800b522:	f898 3000 	ldrb.w	r3, [r8]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 80ba 	beq.w	800b6a0 <_vfiprintf_r+0x1ec>
 800b52c:	2300      	movs	r3, #0
 800b52e:	f04f 32ff 	mov.w	r2, #4294967295
 800b532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b536:	9304      	str	r3, [sp, #16]
 800b538:	9307      	str	r3, [sp, #28]
 800b53a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b53e:	931a      	str	r3, [sp, #104]	; 0x68
 800b540:	46a8      	mov	r8, r5
 800b542:	2205      	movs	r2, #5
 800b544:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b548:	485e      	ldr	r0, [pc, #376]	; (800b6c4 <_vfiprintf_r+0x210>)
 800b54a:	f7f4 fe59 	bl	8000200 <memchr>
 800b54e:	9b04      	ldr	r3, [sp, #16]
 800b550:	bb78      	cbnz	r0, 800b5b2 <_vfiprintf_r+0xfe>
 800b552:	06d9      	lsls	r1, r3, #27
 800b554:	bf44      	itt	mi
 800b556:	2220      	movmi	r2, #32
 800b558:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b55c:	071a      	lsls	r2, r3, #28
 800b55e:	bf44      	itt	mi
 800b560:	222b      	movmi	r2, #43	; 0x2b
 800b562:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b566:	782a      	ldrb	r2, [r5, #0]
 800b568:	2a2a      	cmp	r2, #42	; 0x2a
 800b56a:	d02a      	beq.n	800b5c2 <_vfiprintf_r+0x10e>
 800b56c:	9a07      	ldr	r2, [sp, #28]
 800b56e:	46a8      	mov	r8, r5
 800b570:	2000      	movs	r0, #0
 800b572:	250a      	movs	r5, #10
 800b574:	4641      	mov	r1, r8
 800b576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b57a:	3b30      	subs	r3, #48	; 0x30
 800b57c:	2b09      	cmp	r3, #9
 800b57e:	d969      	bls.n	800b654 <_vfiprintf_r+0x1a0>
 800b580:	b360      	cbz	r0, 800b5dc <_vfiprintf_r+0x128>
 800b582:	e024      	b.n	800b5ce <_vfiprintf_r+0x11a>
 800b584:	4b50      	ldr	r3, [pc, #320]	; (800b6c8 <_vfiprintf_r+0x214>)
 800b586:	429c      	cmp	r4, r3
 800b588:	d101      	bne.n	800b58e <_vfiprintf_r+0xda>
 800b58a:	68b4      	ldr	r4, [r6, #8]
 800b58c:	e7a2      	b.n	800b4d4 <_vfiprintf_r+0x20>
 800b58e:	4b4f      	ldr	r3, [pc, #316]	; (800b6cc <_vfiprintf_r+0x218>)
 800b590:	429c      	cmp	r4, r3
 800b592:	bf08      	it	eq
 800b594:	68f4      	ldreq	r4, [r6, #12]
 800b596:	e79d      	b.n	800b4d4 <_vfiprintf_r+0x20>
 800b598:	4621      	mov	r1, r4
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff fb04 	bl	800aba8 <__swsetup_r>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d09d      	beq.n	800b4e0 <_vfiprintf_r+0x2c>
 800b5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a8:	b01d      	add	sp, #116	; 0x74
 800b5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ae:	46a8      	mov	r8, r5
 800b5b0:	e7a2      	b.n	800b4f8 <_vfiprintf_r+0x44>
 800b5b2:	4a44      	ldr	r2, [pc, #272]	; (800b6c4 <_vfiprintf_r+0x210>)
 800b5b4:	1a80      	subs	r0, r0, r2
 800b5b6:	fa0b f000 	lsl.w	r0, fp, r0
 800b5ba:	4318      	orrs	r0, r3
 800b5bc:	9004      	str	r0, [sp, #16]
 800b5be:	4645      	mov	r5, r8
 800b5c0:	e7be      	b.n	800b540 <_vfiprintf_r+0x8c>
 800b5c2:	9a03      	ldr	r2, [sp, #12]
 800b5c4:	1d11      	adds	r1, r2, #4
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	9103      	str	r1, [sp, #12]
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	db01      	blt.n	800b5d2 <_vfiprintf_r+0x11e>
 800b5ce:	9207      	str	r2, [sp, #28]
 800b5d0:	e004      	b.n	800b5dc <_vfiprintf_r+0x128>
 800b5d2:	4252      	negs	r2, r2
 800b5d4:	f043 0302 	orr.w	r3, r3, #2
 800b5d8:	9207      	str	r2, [sp, #28]
 800b5da:	9304      	str	r3, [sp, #16]
 800b5dc:	f898 3000 	ldrb.w	r3, [r8]
 800b5e0:	2b2e      	cmp	r3, #46	; 0x2e
 800b5e2:	d10e      	bne.n	800b602 <_vfiprintf_r+0x14e>
 800b5e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ea:	d138      	bne.n	800b65e <_vfiprintf_r+0x1aa>
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	1d1a      	adds	r2, r3, #4
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	9203      	str	r2, [sp, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bfb8      	it	lt
 800b5f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5fc:	f108 0802 	add.w	r8, r8, #2
 800b600:	9305      	str	r3, [sp, #20]
 800b602:	4d33      	ldr	r5, [pc, #204]	; (800b6d0 <_vfiprintf_r+0x21c>)
 800b604:	f898 1000 	ldrb.w	r1, [r8]
 800b608:	2203      	movs	r2, #3
 800b60a:	4628      	mov	r0, r5
 800b60c:	f7f4 fdf8 	bl	8000200 <memchr>
 800b610:	b140      	cbz	r0, 800b624 <_vfiprintf_r+0x170>
 800b612:	2340      	movs	r3, #64	; 0x40
 800b614:	1b40      	subs	r0, r0, r5
 800b616:	fa03 f000 	lsl.w	r0, r3, r0
 800b61a:	9b04      	ldr	r3, [sp, #16]
 800b61c:	4303      	orrs	r3, r0
 800b61e:	f108 0801 	add.w	r8, r8, #1
 800b622:	9304      	str	r3, [sp, #16]
 800b624:	f898 1000 	ldrb.w	r1, [r8]
 800b628:	482a      	ldr	r0, [pc, #168]	; (800b6d4 <_vfiprintf_r+0x220>)
 800b62a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b62e:	2206      	movs	r2, #6
 800b630:	f108 0701 	add.w	r7, r8, #1
 800b634:	f7f4 fde4 	bl	8000200 <memchr>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d037      	beq.n	800b6ac <_vfiprintf_r+0x1f8>
 800b63c:	4b26      	ldr	r3, [pc, #152]	; (800b6d8 <_vfiprintf_r+0x224>)
 800b63e:	bb1b      	cbnz	r3, 800b688 <_vfiprintf_r+0x1d4>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	3307      	adds	r3, #7
 800b644:	f023 0307 	bic.w	r3, r3, #7
 800b648:	3308      	adds	r3, #8
 800b64a:	9303      	str	r3, [sp, #12]
 800b64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64e:	444b      	add	r3, r9
 800b650:	9309      	str	r3, [sp, #36]	; 0x24
 800b652:	e750      	b.n	800b4f6 <_vfiprintf_r+0x42>
 800b654:	fb05 3202 	mla	r2, r5, r2, r3
 800b658:	2001      	movs	r0, #1
 800b65a:	4688      	mov	r8, r1
 800b65c:	e78a      	b.n	800b574 <_vfiprintf_r+0xc0>
 800b65e:	2300      	movs	r3, #0
 800b660:	f108 0801 	add.w	r8, r8, #1
 800b664:	9305      	str	r3, [sp, #20]
 800b666:	4619      	mov	r1, r3
 800b668:	250a      	movs	r5, #10
 800b66a:	4640      	mov	r0, r8
 800b66c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b670:	3a30      	subs	r2, #48	; 0x30
 800b672:	2a09      	cmp	r2, #9
 800b674:	d903      	bls.n	800b67e <_vfiprintf_r+0x1ca>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0c3      	beq.n	800b602 <_vfiprintf_r+0x14e>
 800b67a:	9105      	str	r1, [sp, #20]
 800b67c:	e7c1      	b.n	800b602 <_vfiprintf_r+0x14e>
 800b67e:	fb05 2101 	mla	r1, r5, r1, r2
 800b682:	2301      	movs	r3, #1
 800b684:	4680      	mov	r8, r0
 800b686:	e7f0      	b.n	800b66a <_vfiprintf_r+0x1b6>
 800b688:	ab03      	add	r3, sp, #12
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	4622      	mov	r2, r4
 800b68e:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <_vfiprintf_r+0x228>)
 800b690:	a904      	add	r1, sp, #16
 800b692:	4630      	mov	r0, r6
 800b694:	f3af 8000 	nop.w
 800b698:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b69c:	4681      	mov	r9, r0
 800b69e:	d1d5      	bne.n	800b64c <_vfiprintf_r+0x198>
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	065b      	lsls	r3, r3, #25
 800b6a4:	f53f af7e 	bmi.w	800b5a4 <_vfiprintf_r+0xf0>
 800b6a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6aa:	e77d      	b.n	800b5a8 <_vfiprintf_r+0xf4>
 800b6ac:	ab03      	add	r3, sp, #12
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <_vfiprintf_r+0x228>)
 800b6b4:	a904      	add	r1, sp, #16
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f000 f888 	bl	800b7cc <_printf_i>
 800b6bc:	e7ec      	b.n	800b698 <_vfiprintf_r+0x1e4>
 800b6be:	bf00      	nop
 800b6c0:	0800c088 	.word	0x0800c088
 800b6c4:	0800c0d2 	.word	0x0800c0d2
 800b6c8:	0800c0a8 	.word	0x0800c0a8
 800b6cc:	0800c068 	.word	0x0800c068
 800b6d0:	0800c0d8 	.word	0x0800c0d8
 800b6d4:	0800c0dc 	.word	0x0800c0dc
 800b6d8:	00000000 	.word	0x00000000
 800b6dc:	0800b48f 	.word	0x0800b48f

0800b6e0 <_printf_common>:
 800b6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e4:	4691      	mov	r9, r2
 800b6e6:	461f      	mov	r7, r3
 800b6e8:	688a      	ldr	r2, [r1, #8]
 800b6ea:	690b      	ldr	r3, [r1, #16]
 800b6ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	bfb8      	it	lt
 800b6f4:	4613      	movlt	r3, r2
 800b6f6:	f8c9 3000 	str.w	r3, [r9]
 800b6fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6fe:	4606      	mov	r6, r0
 800b700:	460c      	mov	r4, r1
 800b702:	b112      	cbz	r2, 800b70a <_printf_common+0x2a>
 800b704:	3301      	adds	r3, #1
 800b706:	f8c9 3000 	str.w	r3, [r9]
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	0699      	lsls	r1, r3, #26
 800b70e:	bf42      	ittt	mi
 800b710:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b714:	3302      	addmi	r3, #2
 800b716:	f8c9 3000 	strmi.w	r3, [r9]
 800b71a:	6825      	ldr	r5, [r4, #0]
 800b71c:	f015 0506 	ands.w	r5, r5, #6
 800b720:	d107      	bne.n	800b732 <_printf_common+0x52>
 800b722:	f104 0a19 	add.w	sl, r4, #25
 800b726:	68e3      	ldr	r3, [r4, #12]
 800b728:	f8d9 2000 	ldr.w	r2, [r9]
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	42ab      	cmp	r3, r5
 800b730:	dc28      	bgt.n	800b784 <_printf_common+0xa4>
 800b732:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b736:	6822      	ldr	r2, [r4, #0]
 800b738:	3300      	adds	r3, #0
 800b73a:	bf18      	it	ne
 800b73c:	2301      	movne	r3, #1
 800b73e:	0692      	lsls	r2, r2, #26
 800b740:	d42d      	bmi.n	800b79e <_printf_common+0xbe>
 800b742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b746:	4639      	mov	r1, r7
 800b748:	4630      	mov	r0, r6
 800b74a:	47c0      	blx	r8
 800b74c:	3001      	adds	r0, #1
 800b74e:	d020      	beq.n	800b792 <_printf_common+0xb2>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	68e5      	ldr	r5, [r4, #12]
 800b754:	f8d9 2000 	ldr.w	r2, [r9]
 800b758:	f003 0306 	and.w	r3, r3, #6
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	bf08      	it	eq
 800b760:	1aad      	subeq	r5, r5, r2
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	6922      	ldr	r2, [r4, #16]
 800b766:	bf0c      	ite	eq
 800b768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b76c:	2500      	movne	r5, #0
 800b76e:	4293      	cmp	r3, r2
 800b770:	bfc4      	itt	gt
 800b772:	1a9b      	subgt	r3, r3, r2
 800b774:	18ed      	addgt	r5, r5, r3
 800b776:	f04f 0900 	mov.w	r9, #0
 800b77a:	341a      	adds	r4, #26
 800b77c:	454d      	cmp	r5, r9
 800b77e:	d11a      	bne.n	800b7b6 <_printf_common+0xd6>
 800b780:	2000      	movs	r0, #0
 800b782:	e008      	b.n	800b796 <_printf_common+0xb6>
 800b784:	2301      	movs	r3, #1
 800b786:	4652      	mov	r2, sl
 800b788:	4639      	mov	r1, r7
 800b78a:	4630      	mov	r0, r6
 800b78c:	47c0      	blx	r8
 800b78e:	3001      	adds	r0, #1
 800b790:	d103      	bne.n	800b79a <_printf_common+0xba>
 800b792:	f04f 30ff 	mov.w	r0, #4294967295
 800b796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b79a:	3501      	adds	r5, #1
 800b79c:	e7c3      	b.n	800b726 <_printf_common+0x46>
 800b79e:	18e1      	adds	r1, r4, r3
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	2030      	movs	r0, #48	; 0x30
 800b7a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7a8:	4422      	add	r2, r4
 800b7aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7b2:	3302      	adds	r3, #2
 800b7b4:	e7c5      	b.n	800b742 <_printf_common+0x62>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4622      	mov	r2, r4
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4630      	mov	r0, r6
 800b7be:	47c0      	blx	r8
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	d0e6      	beq.n	800b792 <_printf_common+0xb2>
 800b7c4:	f109 0901 	add.w	r9, r9, #1
 800b7c8:	e7d8      	b.n	800b77c <_printf_common+0x9c>
	...

0800b7cc <_printf_i>:
 800b7cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	7e09      	ldrb	r1, [r1, #24]
 800b7d8:	b085      	sub	sp, #20
 800b7da:	296e      	cmp	r1, #110	; 0x6e
 800b7dc:	4617      	mov	r7, r2
 800b7de:	4606      	mov	r6, r0
 800b7e0:	4698      	mov	r8, r3
 800b7e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7e4:	f000 80b3 	beq.w	800b94e <_printf_i+0x182>
 800b7e8:	d822      	bhi.n	800b830 <_printf_i+0x64>
 800b7ea:	2963      	cmp	r1, #99	; 0x63
 800b7ec:	d036      	beq.n	800b85c <_printf_i+0x90>
 800b7ee:	d80a      	bhi.n	800b806 <_printf_i+0x3a>
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	f000 80b9 	beq.w	800b968 <_printf_i+0x19c>
 800b7f6:	2958      	cmp	r1, #88	; 0x58
 800b7f8:	f000 8083 	beq.w	800b902 <_printf_i+0x136>
 800b7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b800:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b804:	e032      	b.n	800b86c <_printf_i+0xa0>
 800b806:	2964      	cmp	r1, #100	; 0x64
 800b808:	d001      	beq.n	800b80e <_printf_i+0x42>
 800b80a:	2969      	cmp	r1, #105	; 0x69
 800b80c:	d1f6      	bne.n	800b7fc <_printf_i+0x30>
 800b80e:	6820      	ldr	r0, [r4, #0]
 800b810:	6813      	ldr	r3, [r2, #0]
 800b812:	0605      	lsls	r5, r0, #24
 800b814:	f103 0104 	add.w	r1, r3, #4
 800b818:	d52a      	bpl.n	800b870 <_printf_i+0xa4>
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6011      	str	r1, [r2, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da03      	bge.n	800b82a <_printf_i+0x5e>
 800b822:	222d      	movs	r2, #45	; 0x2d
 800b824:	425b      	negs	r3, r3
 800b826:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b82a:	486f      	ldr	r0, [pc, #444]	; (800b9e8 <_printf_i+0x21c>)
 800b82c:	220a      	movs	r2, #10
 800b82e:	e039      	b.n	800b8a4 <_printf_i+0xd8>
 800b830:	2973      	cmp	r1, #115	; 0x73
 800b832:	f000 809d 	beq.w	800b970 <_printf_i+0x1a4>
 800b836:	d808      	bhi.n	800b84a <_printf_i+0x7e>
 800b838:	296f      	cmp	r1, #111	; 0x6f
 800b83a:	d020      	beq.n	800b87e <_printf_i+0xb2>
 800b83c:	2970      	cmp	r1, #112	; 0x70
 800b83e:	d1dd      	bne.n	800b7fc <_printf_i+0x30>
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	f043 0320 	orr.w	r3, r3, #32
 800b846:	6023      	str	r3, [r4, #0]
 800b848:	e003      	b.n	800b852 <_printf_i+0x86>
 800b84a:	2975      	cmp	r1, #117	; 0x75
 800b84c:	d017      	beq.n	800b87e <_printf_i+0xb2>
 800b84e:	2978      	cmp	r1, #120	; 0x78
 800b850:	d1d4      	bne.n	800b7fc <_printf_i+0x30>
 800b852:	2378      	movs	r3, #120	; 0x78
 800b854:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b858:	4864      	ldr	r0, [pc, #400]	; (800b9ec <_printf_i+0x220>)
 800b85a:	e055      	b.n	800b908 <_printf_i+0x13c>
 800b85c:	6813      	ldr	r3, [r2, #0]
 800b85e:	1d19      	adds	r1, r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6011      	str	r1, [r2, #0]
 800b864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b86c:	2301      	movs	r3, #1
 800b86e:	e08c      	b.n	800b98a <_printf_i+0x1be>
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	6011      	str	r1, [r2, #0]
 800b874:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b878:	bf18      	it	ne
 800b87a:	b21b      	sxthne	r3, r3
 800b87c:	e7cf      	b.n	800b81e <_printf_i+0x52>
 800b87e:	6813      	ldr	r3, [r2, #0]
 800b880:	6825      	ldr	r5, [r4, #0]
 800b882:	1d18      	adds	r0, r3, #4
 800b884:	6010      	str	r0, [r2, #0]
 800b886:	0628      	lsls	r0, r5, #24
 800b888:	d501      	bpl.n	800b88e <_printf_i+0xc2>
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	e002      	b.n	800b894 <_printf_i+0xc8>
 800b88e:	0668      	lsls	r0, r5, #25
 800b890:	d5fb      	bpl.n	800b88a <_printf_i+0xbe>
 800b892:	881b      	ldrh	r3, [r3, #0]
 800b894:	4854      	ldr	r0, [pc, #336]	; (800b9e8 <_printf_i+0x21c>)
 800b896:	296f      	cmp	r1, #111	; 0x6f
 800b898:	bf14      	ite	ne
 800b89a:	220a      	movne	r2, #10
 800b89c:	2208      	moveq	r2, #8
 800b89e:	2100      	movs	r1, #0
 800b8a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8a4:	6865      	ldr	r5, [r4, #4]
 800b8a6:	60a5      	str	r5, [r4, #8]
 800b8a8:	2d00      	cmp	r5, #0
 800b8aa:	f2c0 8095 	blt.w	800b9d8 <_printf_i+0x20c>
 800b8ae:	6821      	ldr	r1, [r4, #0]
 800b8b0:	f021 0104 	bic.w	r1, r1, #4
 800b8b4:	6021      	str	r1, [r4, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d13d      	bne.n	800b936 <_printf_i+0x16a>
 800b8ba:	2d00      	cmp	r5, #0
 800b8bc:	f040 808e 	bne.w	800b9dc <_printf_i+0x210>
 800b8c0:	4665      	mov	r5, ip
 800b8c2:	2a08      	cmp	r2, #8
 800b8c4:	d10b      	bne.n	800b8de <_printf_i+0x112>
 800b8c6:	6823      	ldr	r3, [r4, #0]
 800b8c8:	07db      	lsls	r3, r3, #31
 800b8ca:	d508      	bpl.n	800b8de <_printf_i+0x112>
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	6862      	ldr	r2, [r4, #4]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	bfde      	ittt	le
 800b8d4:	2330      	movle	r3, #48	; 0x30
 800b8d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8da:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8de:	ebac 0305 	sub.w	r3, ip, r5
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	f8cd 8000 	str.w	r8, [sp]
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	aa03      	add	r2, sp, #12
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7ff fef6 	bl	800b6e0 <_printf_common>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d14d      	bne.n	800b994 <_printf_i+0x1c8>
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	b005      	add	sp, #20
 800b8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b902:	4839      	ldr	r0, [pc, #228]	; (800b9e8 <_printf_i+0x21c>)
 800b904:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b908:	6813      	ldr	r3, [r2, #0]
 800b90a:	6821      	ldr	r1, [r4, #0]
 800b90c:	1d1d      	adds	r5, r3, #4
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6015      	str	r5, [r2, #0]
 800b912:	060a      	lsls	r2, r1, #24
 800b914:	d50b      	bpl.n	800b92e <_printf_i+0x162>
 800b916:	07ca      	lsls	r2, r1, #31
 800b918:	bf44      	itt	mi
 800b91a:	f041 0120 	orrmi.w	r1, r1, #32
 800b91e:	6021      	strmi	r1, [r4, #0]
 800b920:	b91b      	cbnz	r3, 800b92a <_printf_i+0x15e>
 800b922:	6822      	ldr	r2, [r4, #0]
 800b924:	f022 0220 	bic.w	r2, r2, #32
 800b928:	6022      	str	r2, [r4, #0]
 800b92a:	2210      	movs	r2, #16
 800b92c:	e7b7      	b.n	800b89e <_printf_i+0xd2>
 800b92e:	064d      	lsls	r5, r1, #25
 800b930:	bf48      	it	mi
 800b932:	b29b      	uxthmi	r3, r3
 800b934:	e7ef      	b.n	800b916 <_printf_i+0x14a>
 800b936:	4665      	mov	r5, ip
 800b938:	fbb3 f1f2 	udiv	r1, r3, r2
 800b93c:	fb02 3311 	mls	r3, r2, r1, r3
 800b940:	5cc3      	ldrb	r3, [r0, r3]
 800b942:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b946:	460b      	mov	r3, r1
 800b948:	2900      	cmp	r1, #0
 800b94a:	d1f5      	bne.n	800b938 <_printf_i+0x16c>
 800b94c:	e7b9      	b.n	800b8c2 <_printf_i+0xf6>
 800b94e:	6813      	ldr	r3, [r2, #0]
 800b950:	6825      	ldr	r5, [r4, #0]
 800b952:	6961      	ldr	r1, [r4, #20]
 800b954:	1d18      	adds	r0, r3, #4
 800b956:	6010      	str	r0, [r2, #0]
 800b958:	0628      	lsls	r0, r5, #24
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	d501      	bpl.n	800b962 <_printf_i+0x196>
 800b95e:	6019      	str	r1, [r3, #0]
 800b960:	e002      	b.n	800b968 <_printf_i+0x19c>
 800b962:	066a      	lsls	r2, r5, #25
 800b964:	d5fb      	bpl.n	800b95e <_printf_i+0x192>
 800b966:	8019      	strh	r1, [r3, #0]
 800b968:	2300      	movs	r3, #0
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	4665      	mov	r5, ip
 800b96e:	e7b9      	b.n	800b8e4 <_printf_i+0x118>
 800b970:	6813      	ldr	r3, [r2, #0]
 800b972:	1d19      	adds	r1, r3, #4
 800b974:	6011      	str	r1, [r2, #0]
 800b976:	681d      	ldr	r5, [r3, #0]
 800b978:	6862      	ldr	r2, [r4, #4]
 800b97a:	2100      	movs	r1, #0
 800b97c:	4628      	mov	r0, r5
 800b97e:	f7f4 fc3f 	bl	8000200 <memchr>
 800b982:	b108      	cbz	r0, 800b988 <_printf_i+0x1bc>
 800b984:	1b40      	subs	r0, r0, r5
 800b986:	6060      	str	r0, [r4, #4]
 800b988:	6863      	ldr	r3, [r4, #4]
 800b98a:	6123      	str	r3, [r4, #16]
 800b98c:	2300      	movs	r3, #0
 800b98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b992:	e7a7      	b.n	800b8e4 <_printf_i+0x118>
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	462a      	mov	r2, r5
 800b998:	4639      	mov	r1, r7
 800b99a:	4630      	mov	r0, r6
 800b99c:	47c0      	blx	r8
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d0aa      	beq.n	800b8f8 <_printf_i+0x12c>
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	079b      	lsls	r3, r3, #30
 800b9a6:	d413      	bmi.n	800b9d0 <_printf_i+0x204>
 800b9a8:	68e0      	ldr	r0, [r4, #12]
 800b9aa:	9b03      	ldr	r3, [sp, #12]
 800b9ac:	4298      	cmp	r0, r3
 800b9ae:	bfb8      	it	lt
 800b9b0:	4618      	movlt	r0, r3
 800b9b2:	e7a3      	b.n	800b8fc <_printf_i+0x130>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	464a      	mov	r2, r9
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	47c0      	blx	r8
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d09a      	beq.n	800b8f8 <_printf_i+0x12c>
 800b9c2:	3501      	adds	r5, #1
 800b9c4:	68e3      	ldr	r3, [r4, #12]
 800b9c6:	9a03      	ldr	r2, [sp, #12]
 800b9c8:	1a9b      	subs	r3, r3, r2
 800b9ca:	42ab      	cmp	r3, r5
 800b9cc:	dcf2      	bgt.n	800b9b4 <_printf_i+0x1e8>
 800b9ce:	e7eb      	b.n	800b9a8 <_printf_i+0x1dc>
 800b9d0:	2500      	movs	r5, #0
 800b9d2:	f104 0919 	add.w	r9, r4, #25
 800b9d6:	e7f5      	b.n	800b9c4 <_printf_i+0x1f8>
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1ac      	bne.n	800b936 <_printf_i+0x16a>
 800b9dc:	7803      	ldrb	r3, [r0, #0]
 800b9de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9e6:	e76c      	b.n	800b8c2 <_printf_i+0xf6>
 800b9e8:	0800c0e3 	.word	0x0800c0e3
 800b9ec:	0800c0f4 	.word	0x0800c0f4

0800b9f0 <_sbrk_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4c06      	ldr	r4, [pc, #24]	; (800ba0c <_sbrk_r+0x1c>)
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	f7f7 f890 	bl	8002b20 <_sbrk>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d102      	bne.n	800ba0a <_sbrk_r+0x1a>
 800ba04:	6823      	ldr	r3, [r4, #0]
 800ba06:	b103      	cbz	r3, 800ba0a <_sbrk_r+0x1a>
 800ba08:	602b      	str	r3, [r5, #0]
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	20004ea8 	.word	0x20004ea8

0800ba10 <__sread>:
 800ba10:	b510      	push	{r4, lr}
 800ba12:	460c      	mov	r4, r1
 800ba14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba18:	f000 f8e2 	bl	800bbe0 <_read_r>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	bfab      	itete	ge
 800ba20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba22:	89a3      	ldrhlt	r3, [r4, #12]
 800ba24:	181b      	addge	r3, r3, r0
 800ba26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba2a:	bfac      	ite	ge
 800ba2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba2e:	81a3      	strhlt	r3, [r4, #12]
 800ba30:	bd10      	pop	{r4, pc}

0800ba32 <__swrite>:
 800ba32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba36:	461f      	mov	r7, r3
 800ba38:	898b      	ldrh	r3, [r1, #12]
 800ba3a:	05db      	lsls	r3, r3, #23
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	460c      	mov	r4, r1
 800ba40:	4616      	mov	r6, r2
 800ba42:	d505      	bpl.n	800ba50 <__swrite+0x1e>
 800ba44:	2302      	movs	r3, #2
 800ba46:	2200      	movs	r2, #0
 800ba48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4c:	f000 f874 	bl	800bb38 <_lseek_r>
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba5a:	81a3      	strh	r3, [r4, #12]
 800ba5c:	4632      	mov	r2, r6
 800ba5e:	463b      	mov	r3, r7
 800ba60:	4628      	mov	r0, r5
 800ba62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba66:	f000 b823 	b.w	800bab0 <_write_r>

0800ba6a <__sseek>:
 800ba6a:	b510      	push	{r4, lr}
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba72:	f000 f861 	bl	800bb38 <_lseek_r>
 800ba76:	1c43      	adds	r3, r0, #1
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	bf15      	itete	ne
 800ba7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba86:	81a3      	strheq	r3, [r4, #12]
 800ba88:	bf18      	it	ne
 800ba8a:	81a3      	strhne	r3, [r4, #12]
 800ba8c:	bd10      	pop	{r4, pc}

0800ba8e <__sclose>:
 800ba8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba92:	f000 b81f 	b.w	800bad4 <_close_r>

0800ba96 <__ascii_wctomb>:
 800ba96:	b149      	cbz	r1, 800baac <__ascii_wctomb+0x16>
 800ba98:	2aff      	cmp	r2, #255	; 0xff
 800ba9a:	bf85      	ittet	hi
 800ba9c:	238a      	movhi	r3, #138	; 0x8a
 800ba9e:	6003      	strhi	r3, [r0, #0]
 800baa0:	700a      	strbls	r2, [r1, #0]
 800baa2:	f04f 30ff 	movhi.w	r0, #4294967295
 800baa6:	bf98      	it	ls
 800baa8:	2001      	movls	r0, #1
 800baaa:	4770      	bx	lr
 800baac:	4608      	mov	r0, r1
 800baae:	4770      	bx	lr

0800bab0 <_write_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4c07      	ldr	r4, [pc, #28]	; (800bad0 <_write_r+0x20>)
 800bab4:	4605      	mov	r5, r0
 800bab6:	4608      	mov	r0, r1
 800bab8:	4611      	mov	r1, r2
 800baba:	2200      	movs	r2, #0
 800babc:	6022      	str	r2, [r4, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	f7f6 ffdd 	bl	8002a7e <_write>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	d102      	bne.n	800bace <_write_r+0x1e>
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	b103      	cbz	r3, 800bace <_write_r+0x1e>
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	bd38      	pop	{r3, r4, r5, pc}
 800bad0:	20004ea8 	.word	0x20004ea8

0800bad4 <_close_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4c06      	ldr	r4, [pc, #24]	; (800baf0 <_close_r+0x1c>)
 800bad8:	2300      	movs	r3, #0
 800bada:	4605      	mov	r5, r0
 800badc:	4608      	mov	r0, r1
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	f7f6 ffe9 	bl	8002ab6 <_close>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_close_r+0x1a>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	b103      	cbz	r3, 800baee <_close_r+0x1a>
 800baec:	602b      	str	r3, [r5, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20004ea8 	.word	0x20004ea8

0800baf4 <_fstat_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4c07      	ldr	r4, [pc, #28]	; (800bb14 <_fstat_r+0x20>)
 800baf8:	2300      	movs	r3, #0
 800bafa:	4605      	mov	r5, r0
 800bafc:	4608      	mov	r0, r1
 800bafe:	4611      	mov	r1, r2
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	f7f6 ffe4 	bl	8002ace <_fstat>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	d102      	bne.n	800bb10 <_fstat_r+0x1c>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	b103      	cbz	r3, 800bb10 <_fstat_r+0x1c>
 800bb0e:	602b      	str	r3, [r5, #0]
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
 800bb12:	bf00      	nop
 800bb14:	20004ea8 	.word	0x20004ea8

0800bb18 <_isatty_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4c06      	ldr	r4, [pc, #24]	; (800bb34 <_isatty_r+0x1c>)
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4605      	mov	r5, r0
 800bb20:	4608      	mov	r0, r1
 800bb22:	6023      	str	r3, [r4, #0]
 800bb24:	f7f6 ffe3 	bl	8002aee <_isatty>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_isatty_r+0x1a>
 800bb2c:	6823      	ldr	r3, [r4, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_isatty_r+0x1a>
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	20004ea8 	.word	0x20004ea8

0800bb38 <_lseek_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4c07      	ldr	r4, [pc, #28]	; (800bb58 <_lseek_r+0x20>)
 800bb3c:	4605      	mov	r5, r0
 800bb3e:	4608      	mov	r0, r1
 800bb40:	4611      	mov	r1, r2
 800bb42:	2200      	movs	r2, #0
 800bb44:	6022      	str	r2, [r4, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	f7f6 ffdc 	bl	8002b04 <_lseek>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_lseek_r+0x1e>
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_lseek_r+0x1e>
 800bb54:	602b      	str	r3, [r5, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	20004ea8 	.word	0x20004ea8

0800bb5c <memmove>:
 800bb5c:	4288      	cmp	r0, r1
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	eb01 0302 	add.w	r3, r1, r2
 800bb64:	d807      	bhi.n	800bb76 <memmove+0x1a>
 800bb66:	1e42      	subs	r2, r0, #1
 800bb68:	4299      	cmp	r1, r3
 800bb6a:	d00a      	beq.n	800bb82 <memmove+0x26>
 800bb6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb70:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bb74:	e7f8      	b.n	800bb68 <memmove+0xc>
 800bb76:	4283      	cmp	r3, r0
 800bb78:	d9f5      	bls.n	800bb66 <memmove+0xa>
 800bb7a:	1881      	adds	r1, r0, r2
 800bb7c:	1ad2      	subs	r2, r2, r3
 800bb7e:	42d3      	cmn	r3, r2
 800bb80:	d100      	bne.n	800bb84 <memmove+0x28>
 800bb82:	bd10      	pop	{r4, pc}
 800bb84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bb8c:	e7f7      	b.n	800bb7e <memmove+0x22>

0800bb8e <__malloc_lock>:
 800bb8e:	4770      	bx	lr

0800bb90 <__malloc_unlock>:
 800bb90:	4770      	bx	lr

0800bb92 <_realloc_r>:
 800bb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb94:	4607      	mov	r7, r0
 800bb96:	4614      	mov	r4, r2
 800bb98:	460e      	mov	r6, r1
 800bb9a:	b921      	cbnz	r1, 800bba6 <_realloc_r+0x14>
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bba2:	f7ff bab1 	b.w	800b108 <_malloc_r>
 800bba6:	b922      	cbnz	r2, 800bbb2 <_realloc_r+0x20>
 800bba8:	f7ff fa60 	bl	800b06c <_free_r>
 800bbac:	4625      	mov	r5, r4
 800bbae:	4628      	mov	r0, r5
 800bbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb2:	f000 f827 	bl	800bc04 <_malloc_usable_size_r>
 800bbb6:	42a0      	cmp	r0, r4
 800bbb8:	d20f      	bcs.n	800bbda <_realloc_r+0x48>
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	f7ff faa3 	bl	800b108 <_malloc_r>
 800bbc2:	4605      	mov	r5, r0
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d0f2      	beq.n	800bbae <_realloc_r+0x1c>
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4622      	mov	r2, r4
 800bbcc:	f7fe fe32 	bl	800a834 <memcpy>
 800bbd0:	4631      	mov	r1, r6
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	f7ff fa4a 	bl	800b06c <_free_r>
 800bbd8:	e7e9      	b.n	800bbae <_realloc_r+0x1c>
 800bbda:	4635      	mov	r5, r6
 800bbdc:	e7e7      	b.n	800bbae <_realloc_r+0x1c>
	...

0800bbe0 <_read_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4c07      	ldr	r4, [pc, #28]	; (800bc00 <_read_r+0x20>)
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	4608      	mov	r0, r1
 800bbe8:	4611      	mov	r1, r2
 800bbea:	2200      	movs	r2, #0
 800bbec:	6022      	str	r2, [r4, #0]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	f7f6 ff28 	bl	8002a44 <_read>
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	d102      	bne.n	800bbfe <_read_r+0x1e>
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	b103      	cbz	r3, 800bbfe <_read_r+0x1e>
 800bbfc:	602b      	str	r3, [r5, #0]
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}
 800bc00:	20004ea8 	.word	0x20004ea8

0800bc04 <_malloc_usable_size_r>:
 800bc04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc08:	1f18      	subs	r0, r3, #4
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bfbc      	itt	lt
 800bc0e:	580b      	ldrlt	r3, [r1, r0]
 800bc10:	18c0      	addlt	r0, r0, r3
 800bc12:	4770      	bx	lr

0800bc14 <_init>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	bf00      	nop
 800bc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1a:	bc08      	pop	{r3}
 800bc1c:	469e      	mov	lr, r3
 800bc1e:	4770      	bx	lr

0800bc20 <_fini>:
 800bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc22:	bf00      	nop
 800bc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc26:	bc08      	pop	{r3}
 800bc28:	469e      	mov	lr, r3
 800bc2a:	4770      	bx	lr


spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800aa98  0800aa98  0001aa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af80  0800af80  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800af80  0800af80  0001af80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af88  0800af88  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af8c  0800af8c  0001af8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800af90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  200000bc  0800b04c  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb0  0800b04c  00024cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022682  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004be2  00000000  00000000  0004276e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00047350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00048c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d0e  00000000  00000000  0004a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f08d  00000000  00000000  00071096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8da8  00000000  00000000  00090123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168ecb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007160  00000000  00000000  00168f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa80 	.word	0x0800aa80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	0800aa80 	.word	0x0800aa80

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
int
CmdLineProcess(char *pcCmdLine)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 80005a0:	2301      	movs	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 80005ac:	e020      	b.n	80005f0 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b20      	cmp	r3, #32
 80005b4:	d105      	bne.n	80005c2 <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e013      	b.n	80005ea <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d010      	beq.n	80005ea <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	d80a      	bhi.n	80005e4 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 80005ce:	491d      	ldr	r1, [pc, #116]	; (8000644 <CmdLineProcess+0xac>)
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	3301      	adds	r3, #1
 80005dc:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	e002      	b.n	80005ea <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 80005e4:	f06f 0301 	mvn.w	r3, #1
 80005e8:	e028      	b.n	800063c <CmdLineProcess+0xa4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1da      	bne.n	80005ae <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d01c      	beq.n	8000638 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <CmdLineProcess+0xb0>)
 8000600:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8000602:	e015      	b.n	8000630 <CmdLineProcess+0x98>
        {
            //
            // If this command entry command string matches argv[0], then call
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <CmdLineProcess+0xac>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	4610      	mov	r0, r2
 8000610:	f7ff fdde 	bl	80001d0 <strcmp>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d107      	bne.n	800062a <CmdLineProcess+0x92>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	4908      	ldr	r1, [pc, #32]	; (8000644 <CmdLineProcess+0xac>)
 8000622:	4610      	mov	r0, r2
 8000624:	4798      	blx	r3
 8000626:	4603      	mov	r3, r0
 8000628:	e008      	b.n	800063c <CmdLineProcess+0xa4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	330c      	adds	r3, #12
 800062e:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1e5      	bne.n	8000604 <CmdLineProcess+0x6c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000d8 	.word	0x200000d8
 8000648:	20000000 	.word	0x20000000

0800064c <UARTIntHandler>:
uint8_t commandBuffer[100];
uint32_t commandBufferIndex = 0;
uint32_t gotCommandFlag = 0;
uint8_t temp[100];

void UARTIntHandler(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	uint8_t receivedChar;
	char *EnterCMD = "\r\n>";
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <UARTIntHandler+0xa0>)
 8000654:	607b      	str	r3, [r7, #4]
	receivedChar = (uint8_t) ((huart2).Instance->DR & (uint8_t) 0x00FF);
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <UARTIntHandler+0xa4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart2, &receivedChar, 1, 100);
 8000660:	1cf9      	adds	r1, r7, #3
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	2201      	movs	r2, #1
 8000666:	4822      	ldr	r0, [pc, #136]	; (80006f0 <UARTIntHandler+0xa4>)
 8000668:	f003 fa07 	bl	8003a7a <HAL_UART_Transmit>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <UARTIntHandler+0xa4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <UARTIntHandler+0xa4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f042 0220 	orr.w	r2, r2, #32
 800067a:	60da      	str	r2, [r3, #12]
	if (receivedChar != 13) {
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	2b0d      	cmp	r3, #13
 8000680:	d01a      	beq.n	80006b8 <UARTIntHandler+0x6c>
		if ((receivedChar == 8) || (receivedChar == 127)) {
 8000682:	78fb      	ldrb	r3, [r7, #3]
 8000684:	2b08      	cmp	r3, #8
 8000686:	d002      	beq.n	800068e <UARTIntHandler+0x42>
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	2b7f      	cmp	r3, #127	; 0x7f
 800068c:	d109      	bne.n	80006a2 <UARTIntHandler+0x56>
			if (commandBufferIndex > 0)
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <UARTIntHandler+0xa8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d026      	beq.n	80006e4 <UARTIntHandler+0x98>
				commandBufferIndex--;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <UARTIntHandler+0xa8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <UARTIntHandler+0xa8>)
 800069e:	6013      	str	r3, [r2, #0]
			if (commandBufferIndex > 0)
 80006a0:	e020      	b.n	80006e4 <UARTIntHandler+0x98>
		} else {
			commandBuffer[commandBufferIndex] = receivedChar;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <UARTIntHandler+0xa8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	78f9      	ldrb	r1, [r7, #3]
 80006a8:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <UARTIntHandler+0xac>)
 80006aa:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex++;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <UARTIntHandler+0xa8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <UARTIntHandler+0xa8>)
 80006b4:	6013      	str	r3, [r2, #0]
			gotCommandFlag = 1;
		}
		HAL_UART_Transmit(&huart2, EnterCMD, 3, 100);
	}

}
 80006b6:	e015      	b.n	80006e4 <UARTIntHandler+0x98>
		if (commandBufferIndex != 0) {
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <UARTIntHandler+0xa8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00a      	beq.n	80006d6 <UARTIntHandler+0x8a>
			commandBuffer[commandBufferIndex] = 0;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <UARTIntHandler+0xa8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <UARTIntHandler+0xac>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex = 0;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <UARTIntHandler+0xa8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
			gotCommandFlag = 1;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <UARTIntHandler+0xb0>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, EnterCMD, 3, 100);
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	2203      	movs	r2, #3
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <UARTIntHandler+0xa4>)
 80006de:	f003 f9cc 	bl	8003a7a <HAL_UART_Transmit>
}
 80006e2:	e7ff      	b.n	80006e4 <UARTIntHandler+0x98>
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	0800ab44 	.word	0x0800ab44
 80006f0:	20004288 	.word	0x20004288
 80006f4:	20000104 	.word	0x20000104
 80006f8:	200040f8 	.word	0x200040f8
 80006fc:	20000108 	.word	0x20000108

08000700 <Cmd_create_file>:
int Cmd_create_file(int argc, char *argv[])
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	printf("\nCmd_create_file\r\n");
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <Cmd_create_file+0x2c>)
 800070c:	f009 f820 	bl	8009750 <puts>
	printf("------------------\r\n");
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <Cmd_create_file+0x30>)
 8000712:	f009 f81d 	bl	8009750 <puts>
	char *file = *(argv+1);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	60fb      	str	r3, [r7, #12]
	SD_CREATE_FILE(file);
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f000 ffd9 	bl	80016d4 <SD_CREATE_FILE>
}
 8000722:	bf00      	nop
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	0800ab48 	.word	0x0800ab48
 8000730:	0800ab5c 	.word	0x0800ab5c

08000734 <Cmd_write_sdcard>:
 * 5. Device Type
 * 6. Device Name
 * 7. Device Title
 * 8. value type */
int Cmd_write_sdcard(int argc, char *argv[])
{
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000736:	b0c1      	sub	sp, #260	; 0x104
 8000738:	af06      	add	r7, sp, #24
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	printf("\nCmd_write_sdcard\r\n");
 800073e:	4837      	ldr	r0, [pc, #220]	; (800081c <Cmd_write_sdcard+0xe8>)
 8000740:	f009 f806 	bl	8009750 <puts>
	printf("------------------\r\n");
 8000744:	4836      	ldr	r0, [pc, #216]	; (8000820 <Cmd_write_sdcard+0xec>)
 8000746:	f009 f803 	bl	8009750 <puts>
	SDcard_t sd;
	char sd_temp[200];
	sd.port= atoi(*(argv+1));
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	3304      	adds	r3, #4
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f008 ff33 	bl	80095bc <atoi>
 8000756:	4603      	mov	r3, r0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
	sd.deviceID = atoi(*(argv+2));
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	3308      	adds	r3, #8
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f008 ff29 	bl	80095bc <atoi>
 800076a:	4603      	mov	r3, r0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
	sd.func = atoi(*(argv+3));
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	330c      	adds	r3, #12
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f008 ff1f 	bl	80095bc <atoi>
 800077e:	4603      	mov	r3, r0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	sd.deviceChannel= atoi(*(argv+4));
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	3310      	adds	r3, #16
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f008 ff15 	bl	80095bc <atoi>
 8000792:	4603      	mov	r3, r0
 8000794:	b29b      	uxth	r3, r3
 8000796:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	sd.deviceType= *(argv+5);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	sd.deviceName = *(argv+6);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	sd.deviceTitle= *(argv+7);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	sd.valueType= *(argv+8);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	6a1b      	ldr	r3, [r3, #32]
 80007b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	SD_Json(sd_temp,sd.port,sd.deviceID,sd.func,sd.deviceChannel,sd.deviceType,sd.deviceTitle,sd.deviceName,sd.valueType);
 80007ba:	f897 60d1 	ldrb.w	r6, [r7, #209]	; 0xd1
 80007be:	f897 c0d2 	ldrb.w	ip, [r7, #210]	; 0xd2
 80007c2:	f897 e0d3 	ldrb.w	lr, [r7, #211]	; 0xd3
 80007c6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80007ca:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80007ce:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80007d2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80007d6:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80007da:	f107 0508 	add.w	r5, r7, #8
 80007de:	9404      	str	r4, [sp, #16]
 80007e0:	9003      	str	r0, [sp, #12]
 80007e2:	9102      	str	r1, [sp, #8]
 80007e4:	9201      	str	r2, [sp, #4]
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	4673      	mov	r3, lr
 80007ea:	4662      	mov	r2, ip
 80007ec:	4631      	mov	r1, r6
 80007ee:	4628      	mov	r0, r5
 80007f0:	f000 ffbc 	bl	800176c <SD_Json>
	printf("%s",sd_temp);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4619      	mov	r1, r3
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <Cmd_write_sdcard+0xf0>)
 80007fc:	f008 ff22 	bl	8009644 <iprintf>
	SD_WRITE_LINE("DEVICE.txt",sd_temp);
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	4619      	mov	r1, r3
 8000806:	4808      	ldr	r0, [pc, #32]	; (8000828 <Cmd_write_sdcard+0xf4>)
 8000808:	f000 ff8e 	bl	8001728 <SD_WRITE_LINE>
	printf("\r\n------------------\r\n");
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <Cmd_write_sdcard+0xf8>)
 800080e:	f008 ff9f 	bl	8009750 <puts>
}
 8000812:	bf00      	nop
 8000814:	4618      	mov	r0, r3
 8000816:	37ec      	adds	r7, #236	; 0xec
 8000818:	46bd      	mov	sp, r7
 800081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081c:	0800ab70 	.word	0x0800ab70
 8000820:	0800ab5c 	.word	0x0800ab5c
 8000824:	0800ab84 	.word	0x0800ab84
 8000828:	0800ab88 	.word	0x0800ab88
 800082c:	0800ab94 	.word	0x0800ab94

08000830 <Cmd_read_sdcard>:


int Cmd_read_sdcard(int argc, char *argv[])
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	printf("\nCmd_read_sdcard\r\n");
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <Cmd_read_sdcard+0x20>)
 800083c:	f008 ff88 	bl	8009750 <puts>
	printf("------------------\r\n");
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <Cmd_read_sdcard+0x24>)
 8000842:	f008 ff85 	bl	8009750 <puts>
}
 8000846:	bf00      	nop
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	0800abac 	.word	0x0800abac
 8000854:	0800ab5c 	.word	0x0800ab5c

08000858 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2101      	movs	r1, #1
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <SELECT+0x14>)
 8000862:	f001 fd3b 	bl	80022dc <HAL_GPIO_WritePin>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40020400 	.word	0x40020400

08000870 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <DESELECT+0x14>)
 800087a:	f001 fd2f 	bl	80022dc <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40020400 	.word	0x40020400

08000888 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000892:	bf00      	nop
 8000894:	4808      	ldr	r0, [pc, #32]	; (80008b8 <SPI_TxByte+0x30>)
 8000896:	f002 fd1c 	bl	80032d2 <HAL_SPI_GetState>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d1f9      	bne.n	8000894 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80008a0:	1df9      	adds	r1, r7, #7
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	2201      	movs	r2, #1
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <SPI_TxByte+0x30>)
 80008aa:	f002 fa34 	bl	8002d16 <HAL_SPI_Transmit>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200042e4 	.word	0x200042e4

080008bc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80008c2:	23ff      	movs	r3, #255	; 0xff
 80008c4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80008ca:	bf00      	nop
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <SPI_RxByte+0x38>)
 80008ce:	f002 fd00 	bl	80032d2 <HAL_SPI_GetState>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d1f9      	bne.n	80008cc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80008d8:	1dba      	adds	r2, r7, #6
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2301      	movs	r3, #1
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <SPI_RxByte+0x38>)
 80008e6:	f002 fb52 	bl	8002f8e <HAL_SPI_TransmitReceive>

  return data;
 80008ea:	79bb      	ldrb	r3, [r7, #6]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200042e4 	.word	0x200042e4

080008f8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000900:	f7ff ffdc 	bl	80008bc <SPI_RxByte>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	701a      	strb	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <SD_ReadyWait+0x34>)
 800091c:	2232      	movs	r2, #50	; 0x32
 800091e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000920:	f7ff ffcc 	bl	80008bc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000924:	f7ff ffca 	bl	80008bc <SPI_RxByte>
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2bff      	cmp	r3, #255	; 0xff
 8000930:	d004      	beq.n	800093c <SD_ReadyWait+0x28>
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SD_ReadyWait+0x34>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1f3      	bne.n	8000924 <SD_ReadyWait+0x10>

  return res;
 800093c:	79fb      	ldrb	r3, [r7, #7]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200047ec 	.word	0x200047ec

0800094c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000952:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000956:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000958:	f7ff ff8a 	bl	8000870 <DESELECT>

  for(int i = 0; i < 10; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	e005      	b.n	800096e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	f7ff ff90 	bl	8000888 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	3301      	adds	r3, #1
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	2b09      	cmp	r3, #9
 8000972:	ddf6      	ble.n	8000962 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000974:	f7ff ff70 	bl	8000858 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800098c:	2395      	movs	r3, #149	; 0x95
 800098e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e009      	b.n	80009aa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000996:	1d3a      	adds	r2, r7, #4
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff72 	bl	8000888 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2b05      	cmp	r3, #5
 80009ae:	ddf2      	ble.n	8000996 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80009b0:	e002      	b.n	80009b8 <SD_PowerOn+0x6c>
  {
    Count--;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80009b8:	f7ff ff80 	bl	80008bc <SPI_RxByte>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d002      	beq.n	80009c8 <SD_PowerOn+0x7c>
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f4      	bne.n	80009b2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80009c8:	f7ff ff52 	bl	8000870 <DESELECT>
  SPI_TxByte(0XFF);
 80009cc:	20ff      	movs	r0, #255	; 0xff
 80009ce:	f7ff ff5b 	bl	8000888 <SPI_TxByte>

  PowerFlag = 1;
 80009d2:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <SD_PowerOn+0x94>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000010d 	.word	0x2000010d

080009e4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <SD_PowerOff+0x14>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	2000010d 	.word	0x2000010d

080009fc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <SD_CheckPower+0x14>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	2000010d 	.word	0x2000010d

08000a14 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <SD_RxDataBlock+0x68>)
 8000a20:	220a      	movs	r2, #10
 8000a22:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000a24:	f7ff ff4a 	bl	80008bc <SPI_RxByte>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	d104      	bne.n	8000a3c <SD_RxDataBlock+0x28>
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <SD_RxDataBlock+0x68>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f3      	bne.n	8000a24 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2bfe      	cmp	r3, #254	; 0xfe
 8000a40:	d001      	beq.n	8000a46 <SD_RxDataBlock+0x32>
    return FALSE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e016      	b.n	8000a74 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff53 	bl	80008f8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff4d 	bl	80008f8 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	3b02      	subs	r3, #2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1ed      	bne.n	8000a46 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000a6a:	f7ff ff27 	bl	80008bc <SPI_RxByte>
  SPI_RxByte();
 8000a6e:	f7ff ff25 	bl	80008bc <SPI_RxByte>

  return TRUE;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200047ed 	.word	0x200047ed

08000a80 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000a90:	f7ff ff40 	bl	8000914 <SD_ReadyWait>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2bff      	cmp	r3, #255	; 0xff
 8000a98:	d001      	beq.n	8000a9e <SD_TxDataBlock+0x1e>
    return FALSE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e040      	b.n	8000b20 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fef1 	bl	8000888 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	2bfd      	cmp	r3, #253	; 0xfd
 8000aaa:	d031      	beq.n	8000b10 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fee5 	bl	8000888 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fede 	bl	8000888 <SPI_TxByte>
    } while (--wc);
 8000acc:	7bbb      	ldrb	r3, [r7, #14]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	73bb      	strb	r3, [r7, #14]
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1eb      	bne.n	8000ab0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000ad8:	f7ff fef0 	bl	80008bc <SPI_RxByte>
    SPI_RxByte();
 8000adc:	f7ff feee 	bl	80008bc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000ae0:	e00b      	b.n	8000afa <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000ae2:	f7ff feeb 	bl	80008bc <SPI_RxByte>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d006      	beq.n	8000b02 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	3301      	adds	r3, #1
 8000af8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000afa:	7b7b      	ldrb	r3, [r7, #13]
 8000afc:	2b40      	cmp	r3, #64	; 0x40
 8000afe:	d9f0      	bls.n	8000ae2 <SD_TxDataBlock+0x62>
 8000b00:	e000      	b.n	8000b04 <SD_TxDataBlock+0x84>
        break;
 8000b02:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000b04:	bf00      	nop
 8000b06:	f7ff fed9 	bl	80008bc <SPI_RxByte>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0fa      	beq.n	8000b06 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	f003 031f 	and.w	r3, r3, #31
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d101      	bne.n	8000b1e <SD_TxDataBlock+0x9e>
    return TRUE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000b34:	f7ff feee 	bl	8000914 <SD_ReadyWait>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d001      	beq.n	8000b42 <SD_SendCmd+0x1a>
    return 0xFF;
 8000b3e:	23ff      	movs	r3, #255	; 0xff
 8000b40:	e040      	b.n	8000bc4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe9f 	bl	8000888 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	0e1b      	lsrs	r3, r3, #24
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe99 	bl	8000888 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	0c1b      	lsrs	r3, r3, #16
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fe93 	bl	8000888 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe8d 	bl	8000888 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fe88 	bl	8000888 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b40      	cmp	r3, #64	; 0x40
 8000b80:	d101      	bne.n	8000b86 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000b82:	2395      	movs	r3, #149	; 0x95
 8000b84:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b48      	cmp	r3, #72	; 0x48
 8000b8a:	d101      	bne.n	8000b90 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000b8c:	2387      	movs	r3, #135	; 0x87
 8000b8e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe78 	bl	8000888 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b4c      	cmp	r3, #76	; 0x4c
 8000b9c:	d101      	bne.n	8000ba2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000b9e:	f7ff fe8d 	bl	80008bc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ba6:	f7ff fe89 	bl	80008bc <SPI_RxByte>
 8000baa:	4603      	mov	r3, r0
 8000bac:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000bae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	da05      	bge.n	8000bc2 <SD_SendCmd+0x9a>
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	73bb      	strb	r3, [r7, #14]
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f1      	bne.n	8000ba6 <SD_SendCmd+0x7e>

  return res;
 8000bc2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e0d5      	b.n	8000d8c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000be0:	4b6c      	ldr	r3, [pc, #432]	; (8000d94 <SD_disk_initialize+0x1c8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <SD_disk_initialize+0x2a>
    return Stat;
 8000bee:	4b69      	ldr	r3, [pc, #420]	; (8000d94 <SD_disk_initialize+0x1c8>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	e0ca      	b.n	8000d8c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000bf6:	f7ff fea9 	bl	800094c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000bfa:	f7ff fe2d 	bl	8000858 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000c02:	2100      	movs	r1, #0
 8000c04:	2040      	movs	r0, #64	; 0x40
 8000c06:	f7ff ff8f 	bl	8000b28 <SD_SendCmd>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	f040 80a5 	bne.w	8000d5c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000c12:	4b61      	ldr	r3, [pc, #388]	; (8000d98 <SD_disk_initialize+0x1cc>)
 8000c14:	2264      	movs	r2, #100	; 0x64
 8000c16:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c1c:	2048      	movs	r0, #72	; 0x48
 8000c1e:	f7ff ff83 	bl	8000b28 <SD_SendCmd>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d158      	bne.n	8000cda <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e00c      	b.n	8000c48 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000c2e:	7bfc      	ldrb	r4, [r7, #15]
 8000c30:	f7ff fe44 	bl	80008bc <SPI_RxByte>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4423      	add	r3, r4
 8000c3e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	3301      	adds	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d9ef      	bls.n	8000c2e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c4e:	7abb      	ldrb	r3, [r7, #10]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	f040 8083 	bne.w	8000d5c <SD_disk_initialize+0x190>
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	2baa      	cmp	r3, #170	; 0xaa
 8000c5a:	d17f      	bne.n	8000d5c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2077      	movs	r0, #119	; 0x77
 8000c60:	f7ff ff62 	bl	8000b28 <SD_SendCmd>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d807      	bhi.n	8000c7a <SD_disk_initialize+0xae>
 8000c6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c6e:	2069      	movs	r0, #105	; 0x69
 8000c70:	f7ff ff5a 	bl	8000b28 <SD_SendCmd>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d005      	beq.n	8000c86 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000c7a:	4b47      	ldr	r3, [pc, #284]	; (8000d98 <SD_disk_initialize+0x1cc>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1eb      	bne.n	8000c5c <SD_disk_initialize+0x90>
 8000c84:	e000      	b.n	8000c88 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000c86:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000c88:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <SD_disk_initialize+0x1cc>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d064      	beq.n	8000d5c <SD_disk_initialize+0x190>
 8000c92:	2100      	movs	r1, #0
 8000c94:	207a      	movs	r0, #122	; 0x7a
 8000c96:	f7ff ff47 	bl	8000b28 <SD_SendCmd>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d15d      	bne.n	8000d5c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e00c      	b.n	8000cc0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000ca6:	7bfc      	ldrb	r4, [r7, #15]
 8000ca8:	f7ff fe08 	bl	80008bc <SPI_RxByte>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4423      	add	r3, r4
 8000cb6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d9ef      	bls.n	8000ca6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000cc6:	7a3b      	ldrb	r3, [r7, #8]
 8000cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SD_disk_initialize+0x108>
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	e000      	b.n	8000cd6 <SD_disk_initialize+0x10a>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	73bb      	strb	r3, [r7, #14]
 8000cd8:	e040      	b.n	8000d5c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2077      	movs	r0, #119	; 0x77
 8000cde:	f7ff ff23 	bl	8000b28 <SD_SendCmd>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d808      	bhi.n	8000cfa <SD_disk_initialize+0x12e>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2069      	movs	r0, #105	; 0x69
 8000cec:	f7ff ff1c 	bl	8000b28 <SD_SendCmd>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d801      	bhi.n	8000cfa <SD_disk_initialize+0x12e>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e000      	b.n	8000cfc <SD_disk_initialize+0x130>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d10e      	bne.n	8000d22 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000d04:	2100      	movs	r1, #0
 8000d06:	2077      	movs	r0, #119	; 0x77
 8000d08:	f7ff ff0e 	bl	8000b28 <SD_SendCmd>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d80e      	bhi.n	8000d30 <SD_disk_initialize+0x164>
 8000d12:	2100      	movs	r1, #0
 8000d14:	2069      	movs	r0, #105	; 0x69
 8000d16:	f7ff ff07 	bl	8000b28 <SD_SendCmd>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d107      	bne.n	8000d30 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000d20:	e00d      	b.n	8000d3e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000d22:	2100      	movs	r1, #0
 8000d24:	2041      	movs	r0, #65	; 0x41
 8000d26:	f7ff feff 	bl	8000b28 <SD_SendCmd>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <SD_disk_initialize+0x1cc>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1e1      	bne.n	8000cfe <SD_disk_initialize+0x132>
 8000d3a:	e000      	b.n	8000d3e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000d3c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <SD_disk_initialize+0x1cc>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d007      	beq.n	8000d58 <SD_disk_initialize+0x18c>
 8000d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4c:	2050      	movs	r0, #80	; 0x50
 8000d4e:	f7ff feeb 	bl	8000b28 <SD_SendCmd>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <SD_disk_initialize+0x1d0>)
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000d62:	f7ff fd85 	bl	8000870 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000d66:	f7ff fda9 	bl	80008bc <SPI_RxByte>

  if (type)
 8000d6a:	7bbb      	ldrb	r3, [r7, #14]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d008      	beq.n	8000d82 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <SD_disk_initialize+0x1c8>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	f023 0301 	bic.w	r3, r3, #1
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SD_disk_initialize+0x1c8>)
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	e001      	b.n	8000d86 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000d82:	f7ff fe2f 	bl	80009e4 <SD_PowerOff>
  }

  return Stat;
 8000d86:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <SD_disk_initialize+0x1c8>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000030 	.word	0x20000030
 8000d98:	200047ed 	.word	0x200047ed
 8000d9c:	2000010c 	.word	0x2000010c

08000da0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e002      	b.n	8000dba <SD_disk_status+0x1a>

  return Stat;
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SD_disk_status+0x28>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000030 	.word	0x20000030

08000dcc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <SD_disk_read+0x1c>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <SD_disk_read+0x20>
    return RES_PARERR;
 8000de8:	2304      	movs	r3, #4
 8000dea:	e051      	b.n	8000e90 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <SD_disk_read+0xcc>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e048      	b.n	8000e90 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <SD_disk_read+0xd0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	025b      	lsls	r3, r3, #9
 8000e0e:	607b      	str	r3, [r7, #4]

  SELECT();
 8000e10:	f7ff fd22 	bl	8000858 <SELECT>

  if (count == 1)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d111      	bne.n	8000e3e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	2051      	movs	r0, #81	; 0x51
 8000e1e:	f7ff fe83 	bl	8000b28 <SD_SendCmd>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d129      	bne.n	8000e7c <SD_disk_read+0xb0>
 8000e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2c:	68b8      	ldr	r0, [r7, #8]
 8000e2e:	f7ff fdf1 	bl	8000a14 <SD_RxDataBlock>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d021      	beq.n	8000e7c <SD_disk_read+0xb0>
      count = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	e01e      	b.n	8000e7c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	2052      	movs	r0, #82	; 0x52
 8000e42:	f7ff fe71 	bl	8000b28 <SD_SendCmd>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d117      	bne.n	8000e7c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e50:	68b8      	ldr	r0, [r7, #8]
 8000e52:	f7ff fddf 	bl	8000a14 <SD_RxDataBlock>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00a      	beq.n	8000e72 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e62:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1ed      	bne.n	8000e4c <SD_disk_read+0x80>
 8000e70:	e000      	b.n	8000e74 <SD_disk_read+0xa8>
          break;
 8000e72:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000e74:	2100      	movs	r1, #0
 8000e76:	204c      	movs	r0, #76	; 0x4c
 8000e78:	f7ff fe56 	bl	8000b28 <SD_SendCmd>
    }
  }

  DESELECT();
 8000e7c:	f7ff fcf8 	bl	8000870 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000e80:	f7ff fd1c 	bl	80008bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000030 	.word	0x20000030
 8000e9c:	2000010c 	.word	0x2000010c

08000ea0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <SD_disk_write+0x1c>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <SD_disk_write+0x20>
    return RES_PARERR;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e06b      	b.n	8000f98 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000ec0:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <SD_disk_write+0x100>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e062      	b.n	8000f98 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <SD_disk_write+0x100>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	e059      	b.n	8000f98 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <SD_disk_write+0x104>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	025b      	lsls	r3, r3, #9
 8000ef4:	607b      	str	r3, [r7, #4]

  SELECT();
 8000ef6:	f7ff fcaf 	bl	8000858 <SELECT>

  if (count == 1)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d110      	bne.n	8000f22 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	2058      	movs	r0, #88	; 0x58
 8000f04:	f7ff fe10 	bl	8000b28 <SD_SendCmd>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d13a      	bne.n	8000f84 <SD_disk_write+0xe4>
 8000f0e:	21fe      	movs	r1, #254	; 0xfe
 8000f10:	68b8      	ldr	r0, [r7, #8]
 8000f12:	f7ff fdb5 	bl	8000a80 <SD_TxDataBlock>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d033      	beq.n	8000f84 <SD_disk_write+0xe4>
      count = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	e030      	b.n	8000f84 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <SD_disk_write+0x104>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d007      	beq.n	8000f3e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2077      	movs	r0, #119	; 0x77
 8000f32:	f7ff fdf9 	bl	8000b28 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000f36:	6839      	ldr	r1, [r7, #0]
 8000f38:	2057      	movs	r0, #87	; 0x57
 8000f3a:	f7ff fdf5 	bl	8000b28 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	2059      	movs	r0, #89	; 0x59
 8000f42:	f7ff fdf1 	bl	8000b28 <SD_SendCmd>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d11b      	bne.n	8000f84 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000f4c:	21fc      	movs	r1, #252	; 0xfc
 8000f4e:	68b8      	ldr	r0, [r7, #8]
 8000f50:	f7ff fd96 	bl	8000a80 <SD_TxDataBlock>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00a      	beq.n	8000f70 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f60:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1ee      	bne.n	8000f4c <SD_disk_write+0xac>
 8000f6e:	e000      	b.n	8000f72 <SD_disk_write+0xd2>
          break;
 8000f70:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000f72:	21fd      	movs	r1, #253	; 0xfd
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fd83 	bl	8000a80 <SD_TxDataBlock>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <SD_disk_write+0xe4>
      {
        count = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000f84:	f7ff fc74 	bl	8000870 <DESELECT>
  SPI_RxByte();
 8000f88:	f7ff fc98 	bl	80008bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf14      	ite	ne
 8000f92:	2301      	movne	r3, #1
 8000f94:	2300      	moveq	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000030 	.word	0x20000030
 8000fa4:	2000010c 	.word	0x2000010c

08000fa8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b08b      	sub	sp, #44	; 0x2c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	603a      	str	r2, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e11b      	b.n	80011fe <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d129      	bne.n	8001026 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d017      	beq.n	800100a <SD_disk_ioctl+0x62>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dc1f      	bgt.n	800101e <SD_disk_ioctl+0x76>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <SD_disk_ioctl+0x40>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d00b      	beq.n	8000ffe <SD_disk_ioctl+0x56>
 8000fe6:	e01a      	b.n	800101e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000fe8:	f7ff fd08 	bl	80009fc <SD_CheckPower>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000ff2:	f7ff fcf7 	bl	80009e4 <SD_PowerOff>
      res = RES_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ffc:	e0fd      	b.n	80011fa <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000ffe:	f7ff fca5 	bl	800094c <SD_PowerOn>
      res = RES_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001008:	e0f7      	b.n	80011fa <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	1c5c      	adds	r4, r3, #1
 800100e:	f7ff fcf5 	bl	80009fc <SD_CheckPower>
 8001012:	4603      	mov	r3, r0
 8001014:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800101c:	e0ed      	b.n	80011fa <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800101e:	2304      	movs	r3, #4
 8001020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001024:	e0e9      	b.n	80011fa <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001026:	4b78      	ldr	r3, [pc, #480]	; (8001208 <SD_disk_ioctl+0x260>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001034:	2303      	movs	r3, #3
 8001036:	e0e2      	b.n	80011fe <SD_disk_ioctl+0x256>

    SELECT();
 8001038:	f7ff fc0e 	bl	8000858 <SELECT>

    switch (ctrl)
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	2b0d      	cmp	r3, #13
 8001040:	f200 80cc 	bhi.w	80011dc <SD_disk_ioctl+0x234>
 8001044:	a201      	add	r2, pc, #4	; (adr r2, 800104c <SD_disk_ioctl+0xa4>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	08001147 	.word	0x08001147
 8001050:	08001085 	.word	0x08001085
 8001054:	08001137 	.word	0x08001137
 8001058:	080011dd 	.word	0x080011dd
 800105c:	080011dd 	.word	0x080011dd
 8001060:	080011dd 	.word	0x080011dd
 8001064:	080011dd 	.word	0x080011dd
 8001068:	080011dd 	.word	0x080011dd
 800106c:	080011dd 	.word	0x080011dd
 8001070:	080011dd 	.word	0x080011dd
 8001074:	080011dd 	.word	0x080011dd
 8001078:	08001159 	.word	0x08001159
 800107c:	0800117d 	.word	0x0800117d
 8001080:	080011a1 	.word	0x080011a1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001084:	2100      	movs	r1, #0
 8001086:	2049      	movs	r0, #73	; 0x49
 8001088:	f7ff fd4e 	bl	8000b28 <SD_SendCmd>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 80a8 	bne.w	80011e4 <SD_disk_ioctl+0x23c>
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2110      	movs	r1, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fcba 	bl	8000a14 <SD_RxDataBlock>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 809e 	beq.w	80011e4 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	099b      	lsrs	r3, r3, #6
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10e      	bne.n	80010d0 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4413      	add	r3, r2
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80010c6:	8bfb      	ldrh	r3, [r7, #30]
 80010c8:	029a      	lsls	r2, r3, #10
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e02e      	b.n	800112e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80010d0:	7c7b      	ldrb	r3, [r7, #17]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	09db      	lsrs	r3, r3, #7
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4413      	add	r3, r2
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 0306 	and.w	r3, r3, #6
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	3302      	adds	r3, #2
 80010f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80010f8:	7d3b      	ldrb	r3, [r7, #20]
 80010fa:	099b      	lsrs	r3, r3, #6
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	b29a      	uxth	r2, r3
 8001100:	7cfb      	ldrb	r3, [r7, #19]
 8001102:	b29b      	uxth	r3, r3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	b29b      	uxth	r3, r3
 8001108:	4413      	add	r3, r2
 800110a:	b29a      	uxth	r2, r3
 800110c:	7cbb      	ldrb	r3, [r7, #18]
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	b29b      	uxth	r3, r3
 8001112:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001116:	b29b      	uxth	r3, r3
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	3301      	adds	r3, #1
 800111e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001120:	8bfa      	ldrh	r2, [r7, #30]
 8001122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001126:	3b09      	subs	r3, #9
 8001128:	409a      	lsls	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001134:	e056      	b.n	80011e4 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001144:	e055      	b.n	80011f2 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001146:	f7ff fbe5 	bl	8000914 <SD_ReadyWait>
 800114a:	4603      	mov	r3, r0
 800114c:	2bff      	cmp	r3, #255	; 0xff
 800114e:	d14b      	bne.n	80011e8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001156:	e047      	b.n	80011e8 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001158:	2100      	movs	r1, #0
 800115a:	2049      	movs	r0, #73	; 0x49
 800115c:	f7ff fce4 	bl	8000b28 <SD_SendCmd>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d142      	bne.n	80011ec <SD_disk_ioctl+0x244>
 8001166:	2110      	movs	r1, #16
 8001168:	6a38      	ldr	r0, [r7, #32]
 800116a:	f7ff fc53 	bl	8000a14 <SD_RxDataBlock>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d03b      	beq.n	80011ec <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800117a:	e037      	b.n	80011ec <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800117c:	2100      	movs	r1, #0
 800117e:	204a      	movs	r0, #74	; 0x4a
 8001180:	f7ff fcd2 	bl	8000b28 <SD_SendCmd>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d132      	bne.n	80011f0 <SD_disk_ioctl+0x248>
 800118a:	2110      	movs	r1, #16
 800118c:	6a38      	ldr	r0, [r7, #32]
 800118e:	f7ff fc41 	bl	8000a14 <SD_RxDataBlock>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d02b      	beq.n	80011f0 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800119e:	e027      	b.n	80011f0 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80011a0:	2100      	movs	r1, #0
 80011a2:	207a      	movs	r0, #122	; 0x7a
 80011a4:	f7ff fcc0 	bl	8000b28 <SD_SendCmd>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d116      	bne.n	80011dc <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011b4:	e00b      	b.n	80011ce <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80011b6:	6a3c      	ldr	r4, [r7, #32]
 80011b8:	1c63      	adds	r3, r4, #1
 80011ba:	623b      	str	r3, [r7, #32]
 80011bc:	f7ff fb7e 	bl	80008bc <SPI_RxByte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80011c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011c8:	3301      	adds	r3, #1
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d9ef      	bls.n	80011b6 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80011dc:	2304      	movs	r3, #4
 80011de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011e2:	e006      	b.n	80011f2 <SD_disk_ioctl+0x24a>
      break;
 80011e4:	bf00      	nop
 80011e6:	e004      	b.n	80011f2 <SD_disk_ioctl+0x24a>
      break;
 80011e8:	bf00      	nop
 80011ea:	e002      	b.n	80011f2 <SD_disk_ioctl+0x24a>
      break;
 80011ec:	bf00      	nop
 80011ee:	e000      	b.n	80011f2 <SD_disk_ioctl+0x24a>
      break;
 80011f0:	bf00      	nop
    }

    DESELECT();
 80011f2:	f7ff fb3d 	bl	8000870 <DESELECT>
    SPI_RxByte();
 80011f6:	f7ff fb61 	bl	80008bc <SPI_RxByte>
  }

  return res;
 80011fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011fe:	4618      	mov	r0, r3
 8001200:	372c      	adds	r7, #44	; 0x2c
 8001202:	46bd      	mov	sp, r7
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	bf00      	nop
 8001208:	20000030 	.word	0x20000030

0800120c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <vApplicationGetIdleTaskMemory+0x2c>)
 800121c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <vApplicationGetIdleTaskMemory+0x30>)
 8001222:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000110 	.word	0x20000110
 800123c:	20000164 	.word	0x20000164

08001240 <MX_FREERTOS_Init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MX_FREERTOS_Init(void) {
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b098      	sub	sp, #96	; 0x60
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */

	osMessageQDef(xQueueControl, 1, xQueueControl_t);
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <MX_FREERTOS_Init+0xbc>)
 8001248:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800124c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueControlHandle = osMessageCreate(osMessageQ(xQueueControl), NULL);
 8001252:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f005 fee6 	bl	800702a <osMessageCreate>
 800125e:	4603      	mov	r3, r0
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <MX_FREERTOS_Init+0xc0>)
 8001262:	6013      	str	r3, [r2, #0]

	osMessageQDef(xQueueMessage, 1, uint8_t);
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_FREERTOS_Init+0xc4>)
 8001266:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800126a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueMessageHandle = osMessageCreate(osMessageQ(xQueueMessage), NULL);
 8001270:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f005 fed7 	bl	800702a <osMessageCreate>
 800127c:	4603      	mov	r3, r0
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <MX_FREERTOS_Init+0xc8>)
 8001280:	6013      	str	r3, [r2, #0]

	osMessageQDef(xQueueDownlink, 1, xQueueMbMqtt_t);
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_FREERTOS_Init+0xcc>)
 8001284:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueDownlinkHandle = osMessageCreate(osMessageQ(xQueueDownlink), NULL);
 800128e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f005 fec8 	bl	800702a <osMessageCreate>
 800129a:	4603      	mov	r3, r0
 800129c:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <MX_FREERTOS_Init+0xd0>)
 800129e:	6013      	str	r3, [r2, #0]

	osMessageQDef(xQueueUplink, 1, xQueueMbMqtt_t);
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_FREERTOS_Init+0xcc>)
 80012a2:	f107 0420 	add.w	r4, r7, #32
 80012a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueUplinkHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 feb9 	bl	800702a <osMessageCreate>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a16      	ldr	r2, [pc, #88]	; (8001314 <MX_FREERTOS_Init+0xd4>)
 80012bc:	6013      	str	r3, [r2, #0]

	osMessageQDef(xQueueReset, 1, sizeof(uint32_t));
	xQueueResetHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f005 feb0 	bl	800702a <osMessageCreate>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_FREERTOS_Init+0xd8>)
 80012ce:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_FREERTOS_Init+0xdc>)
 80012d2:	1d3c      	adds	r4, r7, #4
 80012d4:	461d      	mov	r5, r3
 80012d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 fd76 	bl	8006dd8 <osThreadCreate>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <MX_FREERTOS_Init+0xe0>)
 80012f0:	6013      	str	r3, [r2, #0]
}
 80012f2:	bf00      	nop
 80012f4:	3760      	adds	r7, #96	; 0x60
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	0800abcc 	.word	0x0800abcc
 8001300:	200042cc 	.word	0x200042cc
 8001304:	0800abdc 	.word	0x0800abdc
 8001308:	200042e0 	.word	0x200042e0
 800130c:	0800abec 	.word	0x0800abec
 8001310:	200042d8 	.word	0x200042d8
 8001314:	200042dc 	.word	0x200042dc
 8001318:	200042d4 	.word	0x200042d4
 800131c:	0800abfc 	.word	0x0800abfc
 8001320:	200042d0 	.word	0x200042d0

08001324 <StartDefaultTask>:
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
 void StartDefaultTask(void const * argument)
  {
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  	/*SIm serive*/

  	/*Controller*/
  	xQueueControl_t xQueueControl;
  	#define PORT_DEFAULT_DELAY	1000
  	uint8_t uiSysState = SYS_START;
 800132c:	2300      	movs	r3, #0
 800132e:	72fb      	strb	r3, [r7, #11]
  	uint8_t uiSysUpdate = FALSE;
 8001330:	2300      	movs	r3, #0
 8001332:	77fb      	strb	r3, [r7, #31]
  	BaseType_t sysError;
  	int ret;
  	char *Badcommand = "Bad Command\r\n>";
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <StartDefaultTask+0x8c>)
 8001336:	61bb      	str	r3, [r7, #24]
  	/* Infinite loop */
  	for (;;) {
  		switch (uiSysState) {
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <StartDefaultTask+0x20>
 800133e:	2b01      	cmp	r3, #1
 8001340:	d007      	beq.n	8001352 <StartDefaultTask+0x2e>
 8001342:	e023      	b.n	800138c <StartDefaultTask+0x68>
  		case SYS_START:
  			//printf("\r\n Task Controller: Implementing...  \r\n");
  			uiSysUpdate = TRUE;
 8001344:	2301      	movs	r3, #1
 8001346:	77fb      	strb	r3, [r7, #31]
  			uiSysState++;
 8001348:	7afb      	ldrb	r3, [r7, #11]
 800134a:	3301      	adds	r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	72fb      	strb	r3, [r7, #11]
  			break;
 8001350:	e01c      	b.n	800138c <StartDefaultTask+0x68>
		case SYS_DEFAULT:
			if (gotCommandFlag) {
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <StartDefaultTask+0x90>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d014      	beq.n	8001384 <StartDefaultTask+0x60>
				gotCommandFlag = 0;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <StartDefaultTask+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
				ret = CmdLineProcess(commandBuffer);
 8001360:	4815      	ldr	r0, [pc, #84]	; (80013b8 <StartDefaultTask+0x94>)
 8001362:	f7ff f919 	bl	8000598 <CmdLineProcess>
 8001366:	6178      	str	r0, [r7, #20]
				if (ret == CMDLINE_BAD_CMD)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136e:	d109      	bne.n	8001384 <StartDefaultTask+0x60>
					HAL_UART_Transmit(&huart2, Badcommand, strlen(Badcommand),100);
 8001370:	69b8      	ldr	r0, [r7, #24]
 8001372:	f7fe ff37 	bl	80001e4 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	2364      	movs	r3, #100	; 0x64
 800137c:	69b9      	ldr	r1, [r7, #24]
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <StartDefaultTask+0x98>)
 8001380:	f002 fb7b 	bl	8003a7a <HAL_UART_Transmit>
			}
			osDelay(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f005 fd73 	bl	8006e70 <osDelay>
			break;
 800138a:	bf00      	nop

		}
		if ((uiSysUpdate == TRUE) && (uiSysState != SYS_DEFAULT)) {
 800138c:	7ffb      	ldrb	r3, [r7, #31]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d1d2      	bne.n	8001338 <StartDefaultTask+0x14>
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d0cf      	beq.n	8001338 <StartDefaultTask+0x14>
			xQueueSend(xQueueMessageHandle, &uiSysState, 0);
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <StartDefaultTask+0x9c>)
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	f107 010b 	add.w	r1, r7, #11
 80013a0:	2300      	movs	r3, #0
 80013a2:	2200      	movs	r2, #0
 80013a4:	f006 f858 	bl	8007458 <xQueueGenericSend>
			uiSysUpdate = FALSE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	77fb      	strb	r3, [r7, #31]
  		switch (uiSysState) {
 80013ac:	e7c4      	b.n	8001338 <StartDefaultTask+0x14>
 80013ae:	bf00      	nop
 80013b0:	0800ac18 	.word	0x0800ac18
 80013b4:	20000108 	.word	0x20000108
 80013b8:	200040f8 	.word	0x200040f8
 80013bc:	20004288 	.word	0x20004288
 80013c0:	200042e0 	.word	0x200042e0

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f000 fc36 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f826 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //   fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f000 f8ee 	bl	80015b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013d4:	f000 f88c 	bl	80014f0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80013d8:	f003 f90a 	bl	80045f0 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80013dc:	f000 f8be 	bl	800155c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n ********* Access Controller Board **************** \r\n");
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <main+0x48>)
 80013e2:	f008 f9b5 	bl	8009750 <puts>
	printf("\r\n NTT BK \r\n");
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <main+0x4c>)
 80013e8:	f008 f9b2 	bl	8009750 <puts>
	printf("\r\n System  starting \r\n");
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <main+0x50>)
 80013ee:	f008 f9af 	bl	8009750 <puts>
 __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <main+0x54>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <main+0x54>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0220 	orr.w	r2, r2, #32
 8001400:	60da      	str	r2, [r3, #12]
 // SD_READ_LINE("DEVICE.txt");
  //SD_CREATE_FILE("SPI.txt");
  MX_FREERTOS_Init();
 8001402:	f7ff ff1d 	bl	8001240 <MX_FREERTOS_Init>
  /* USER CODE END 2 */
  /* Start scheduler */
  osKernelStart();
 8001406:	f005 fce0 	bl	8006dca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800140a:	e7fe      	b.n	800140a <main+0x46>
 800140c:	0800ac28 	.word	0x0800ac28
 8001410:	0800ac60 	.word	0x0800ac60
 8001414:	0800ac6c 	.word	0x0800ac6c
 8001418:	20004288 	.word	0x20004288

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	; 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	; 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f008 f902 	bl	8009634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <SystemClock_Config+0xcc>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <SystemClock_Config+0xcc>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <SystemClock_Config+0xcc>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <SystemClock_Config+0xd0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a21      	ldr	r2, [pc, #132]	; (80014ec <SystemClock_Config+0xd0>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <SystemClock_Config+0xd0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001480:	2310      	movs	r3, #16
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001484:	2302      	movs	r3, #2
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001488:	2300      	movs	r3, #0
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800148c:	2308      	movs	r3, #8
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001490:	23a8      	movs	r3, #168	; 0xa8
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 ff35 	bl	8002310 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014ac:	f000 f8fa 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2105      	movs	r1, #5
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 f996 	bl	8002800 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014da:	f000 f8e3 	bl	80016a4 <Error_Handler>
  }
}
 80014de:	bf00      	nop
 80014e0:	3750      	adds	r7, #80	; 0x50
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_SPI1_Init+0x64>)
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <MX_SPI1_Init+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_SPI1_Init+0x64>)
 80014fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_SPI1_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_SPI1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_SPI1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_SPI1_Init+0x64>)
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_SPI1_Init+0x64>)
 8001524:	2220      	movs	r2, #32
 8001526:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_SPI1_Init+0x64>)
 800153c:	220a      	movs	r2, #10
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_SPI1_Init+0x64>)
 8001542:	f001 fb5f 	bl	8002c04 <HAL_SPI_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800154c:	f000 f8aa 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200042e4 	.word	0x200042e4
 8001558:	40013000 	.word	0x40013000

0800155c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <MX_USART2_UART_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001568:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800156c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001594:	f002 fa24 	bl	80039e0 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800159e:	f000 f881 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20004288 	.word	0x20004288
 80015ac:	40004400 	.word	0x40004400

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <MX_GPIO_Init+0xc4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a29      	ldr	r2, [pc, #164]	; (8001674 <MX_GPIO_Init+0xc4>)
 80015d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_GPIO_Init+0xc4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_GPIO_Init+0xc4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <MX_GPIO_Init+0xc4>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_GPIO_Init+0xc4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <MX_GPIO_Init+0xc4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <MX_GPIO_Init+0xc4>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_GPIO_Init+0xc4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2110      	movs	r1, #16
 800161e:	4816      	ldr	r0, [pc, #88]	; (8001678 <MX_GPIO_Init+0xc8>)
 8001620:	f000 fe5c 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001624:	2310      	movs	r3, #16
 8001626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <MX_GPIO_Init+0xc8>)
 800163c:	f000 fcb2 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_GPIO_Init+0xcc>)
 8001648:	f000 fe48 	bl	80022dc <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_GPIO_Init+0xc8>)
 8001666:	f000 fc9d 	bl	8001fa4 <HAL_GPIO_Init>

}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020c00 	.word	0x40020c00

08001680 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001692:	f000 faf3 	bl	8001c7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010000 	.word	0x40010000

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <__io_putchar>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
PUTCHAR_PROTOTYPE
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
//  USART_SendData(EVAL_COM1, (uint8_t) ch);
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016b8:	1d39      	adds	r1, r7, #4
 80016ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016be:	2201      	movs	r2, #1
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <__io_putchar+0x20>)
 80016c2:	f002 f9da 	bl	8003a7a <HAL_UART_Transmit>

  /* Loop until the end of transmission */
//  while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
//  {}

  return ch;
 80016c6:	687b      	ldr	r3, [r7, #4]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20004288 	.word	0x20004288

080016d4 <SD_CREATE_FILE>:
FIL fil;
FRESULT fresult;
extern char SDbuffer[200];

uint8_t  SD_CREATE_FILE(char *filename)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, "/", 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <SD_CREATE_FILE+0x44>)
 80016e0:	480e      	ldr	r0, [pc, #56]	; (800171c <SD_CREATE_FILE+0x48>)
 80016e2:	f004 fd87 	bl	80061f4 <f_mount>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <SD_CREATE_FILE+0x4c>)
 80016ec:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil,filename, FA_CREATE_ALWAYS|FA_WRITE);
 80016ee:	220a      	movs	r2, #10
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <SD_CREATE_FILE+0x50>)
 80016f4:	f004 fde2 	bl	80062bc <f_open>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <SD_CREATE_FILE+0x4c>)
 80016fe:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <SD_CREATE_FILE+0x50>)
 8001702:	f005 f9cd 	bl	8006aa0 <f_close>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SD_CREATE_FILE+0x4c>)
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	0800ac84 	.word	0x0800ac84
 800171c:	2000433c 	.word	0x2000433c
 8001720:	20004570 	.word	0x20004570
 8001724:	20004574 	.word	0x20004574

08001728 <SD_WRITE_LINE>:
	fresult = f_open(&fil,filename, FA_READ|FA_WRITE);
	f_gets(SDbuffer,sizeof(SDbuffer), &fil);
	fresult = f_close(&fil);
}
uint8_t  SD_WRITE_LINE(char *filename, const TCHAR* data)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	f_mount(&fs,"/", 1);
 8001732:	2201      	movs	r2, #1
 8001734:	490a      	ldr	r1, [pc, #40]	; (8001760 <SD_WRITE_LINE+0x38>)
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <SD_WRITE_LINE+0x3c>)
 8001738:	f004 fd5c 	bl	80061f4 <f_mount>
	f_open(&fil,filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800173c:	2213      	movs	r2, #19
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <SD_WRITE_LINE+0x40>)
 8001742:	f004 fdbb 	bl	80062bc <f_open>
	f_puts(data, &fil);
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <SD_WRITE_LINE+0x40>)
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f005 fa48 	bl	8006bde <f_puts>
	f_close(&fil);
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <SD_WRITE_LINE+0x40>)
 8001750:	f005 f9a6 	bl	8006aa0 <f_close>
}
 8001754:	bf00      	nop
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800ac84 	.word	0x0800ac84
 8001764:	2000433c 	.word	0x2000433c
 8001768:	20004574 	.word	0x20004574

0800176c <SD_Json>:
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
	return free_space;
}
uint8_t SD_Json(char buffer[200],uint8_t port,uint8_t deviceID,uint8_t func,uint16_t deviceChannel,char *deviceType,char *deviceTitle,char *deviceName,char *valueType)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af06      	add	r7, sp, #24
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	460b      	mov	r3, r1
 8001780:	70bb      	strb	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
    memset(buffer,0,200);
 8001786:	22c8      	movs	r2, #200	; 0xc8
 8001788:	2100      	movs	r1, #0
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f007 ff52 	bl	8009634 <memset>
    sprintf(buffer,"{\"PORT\":%d,\"ID\":%d,\"FC\":%d,\"CHANNEL\":%d,\"DEVICETYPE\":\"%s\",\"DEVICENAME\":\"%s\",\"CHANNELTITLE\":\"%s\",\"VALUETYPE\":\"%s\"}\n",port,deviceID,func,deviceChannel,deviceType,deviceName,deviceTitle,valueType);
 8001790:	78f8      	ldrb	r0, [r7, #3]
 8001792:	78bc      	ldrb	r4, [r7, #2]
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	8b3a      	ldrh	r2, [r7, #24]
 8001798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800179a:	9105      	str	r1, [sp, #20]
 800179c:	6a39      	ldr	r1, [r7, #32]
 800179e:	9104      	str	r1, [sp, #16]
 80017a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017a2:	9103      	str	r1, [sp, #12]
 80017a4:	69f9      	ldr	r1, [r7, #28]
 80017a6:	9102      	str	r1, [sp, #8]
 80017a8:	9201      	str	r2, [sp, #4]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4623      	mov	r3, r4
 80017ae:	4602      	mov	r2, r0
 80017b0:	4904      	ldr	r1, [pc, #16]	; (80017c4 <SD_Json+0x58>)
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f007 ffd4 	bl	8009760 <siprintf>
}
 80017b8:	bf00      	nop
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800ac8c 	.word	0x0800ac8c

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_MspInit+0x54>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a11      	ldr	r2, [pc, #68]	; (800181c <HAL_MspInit+0x54>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_MspInit+0x54>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_MspInit+0x54>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_MspInit+0x54>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_MspInit+0x54>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	210f      	movs	r1, #15
 800180a:	f06f 0001 	mvn.w	r0, #1
 800180e:	f000 fb0d 	bl	8001e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_SPI_MspInit+0x84>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12b      	bne.n	800189a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 800184c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800187a:	23e0      	movs	r3, #224	; 0xe0
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188a:	2305      	movs	r3, #5
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_SPI_MspInit+0x8c>)
 8001896:	f000 fb85 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40013000 	.word	0x40013000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000

080018b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_UART_MspInit+0x94>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d133      	bne.n	800193a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_UART_MspInit+0x98>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <HAL_UART_MspInit+0x98>)
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_UART_MspInit+0x98>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_UART_MspInit+0x98>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_UART_MspInit+0x98>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_UART_MspInit+0x98>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800190a:	230c      	movs	r3, #12
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800191a:	2307      	movs	r3, #7
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <HAL_UART_MspInit+0x9c>)
 8001926:	f000 fb3d 	bl	8001fa4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2105      	movs	r1, #5
 800192e:	2026      	movs	r0, #38	; 0x26
 8001930:	f000 fa7c 	bl	8001e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001934:	2026      	movs	r0, #38	; 0x26
 8001936:	f000 fa95 	bl	8001e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40004400 	.word	0x40004400
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000

08001950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	2019      	movs	r0, #25
 8001966:	f000 fa61 	bl	8001e2c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800196a:	2019      	movs	r0, #25
 800196c:	f000 fa7a 	bl	8001e64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_InitTick+0xa4>)
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_InitTick+0xa4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6453      	str	r3, [r2, #68]	; 0x44
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <HAL_InitTick+0xa4>)
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800198c:	f107 0210 	add.w	r2, r7, #16
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f001 f902 	bl	8002ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800199c:	f001 f8ec 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 80019a0:	4603      	mov	r3, r0
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <HAL_InitTick+0xa8>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0c9b      	lsrs	r3, r3, #18
 80019b0:	3b01      	subs	r3, #1
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_InitTick+0xac>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <HAL_InitTick+0xb0>)
 80019b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_InitTick+0xac>)
 80019bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019c2:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_InitTick+0xac>)
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_InitTick+0xac>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_InitTick+0xac>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <HAL_InitTick+0xac>)
 80019d6:	f001 fd55 	bl	8003484 <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019e0:	4806      	ldr	r0, [pc, #24]	; (80019fc <HAL_InitTick+0xac>)
 80019e2:	f001 fda9 	bl	8003538 <HAL_TIM_Base_Start_IT>
 80019e6:	4603      	mov	r3, r0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3730      	adds	r7, #48	; 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	431bde83 	.word	0x431bde83
 80019fc:	200047a4 	.word	0x200047a4
 8001a00:	40010000 	.word	0x40010000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a36:	f001 fdef 	bl	8003618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200047a4 	.word	0x200047a4

08001a44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	UARTIntHandler();
 8001a4a:	f7fe fdff 	bl	800064c <UARTIntHandler>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <USART2_IRQHandler+0x30>)
 8001a50:	f002 f8a6 	bl	8003ba0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	__HAL_UART_CLEAR_PEFLAG(&huart2);
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <USART2_IRQHandler+0x30>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <USART2_IRQHandler+0x30>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END USART1_IRQn 1 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20004288 	.word	0x20004288

08001a78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e00a      	b.n	8001aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a8a:	f3af 8000 	nop.w
 8001a8e:	4601      	mov	r1, r0
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	b2ca      	uxtb	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dbf0      	blt.n	8001a8a <_read+0x12>
	}

return len;
 8001aa8:	687b      	ldr	r3, [r7, #4]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e009      	b.n	8001ad8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fdef 	bl	80016b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbf1      	blt.n	8001ac4 <_write+0x12>
	}
	return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_close>:

int _close(int file)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b12:	605a      	str	r2, [r3, #4]
	return 0;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_isatty>:

int _isatty(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	return 1;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f007 fd1e 	bl	80095c4 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20020000 	.word	0x20020000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	20000364 	.word	0x20000364
 8001bbc:	20004cb0 	.word	0x20004cb0

08001bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bea:	490e      	ldr	r1, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c00:	4c0b      	ldr	r4, [pc, #44]	; (8001c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c0e:	f7ff ffd7 	bl	8001bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c12:	f007 fcdd 	bl	80095d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c16:	f7ff fbd5 	bl	80013c4 <main>
  bx  lr    
 8001c1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001c28:	0800af90 	.word	0x0800af90
  ldr r2, =_sbss
 8001c2c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001c30:	20004cb0 	.word	0x20004cb0

08001c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_Init+0x40>)
 8001c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_Init+0x40>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_Init+0x40>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 f8d8 	bl	8001e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff fe72 	bl	8001950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c6c:	f7ff fdac 	bl	80017c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x20>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	2000003c 	.word	0x2000003c
 8001ca0:	200047f0 	.word	0x200047f0

08001ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_GetTick+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	200047f0 	.word	0x200047f0

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	; (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	; (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff4c 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3e:	f7ff ff61 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f7ff ffb1 	bl	8001db0 <NVIC_EncodePriority>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff80 	bl	8001d5c <__NVIC_SetPriority>
}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff54 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e8e:	f7ff ff09 	bl	8001ca4 <HAL_GetTick>
 8001e92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d008      	beq.n	8001eb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e052      	b.n	8001f58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0216 	bic.w	r2, r2, #22
 8001ec0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <HAL_DMA_Abort+0x62>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0208 	bic.w	r2, r2, #8
 8001ef0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f02:	e013      	b.n	8001f2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f04:	f7ff fece 	bl	8001ca4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d90c      	bls.n	8001f2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e015      	b.n	8001f58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1e4      	bne.n	8001f04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	223f      	movs	r2, #63	; 0x3f
 8001f40:	409a      	lsls	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d004      	beq.n	8001f7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00c      	b.n	8001f98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2205      	movs	r2, #5
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e16b      	b.n	8002298 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 815a 	bne.w	8002292 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d130      	bne.n	8002058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 0201 	and.w	r2, r3, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b03      	cmp	r3, #3
 8002062:	d017      	beq.n	8002094 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80b4 	beq.w	8002292 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b60      	ldr	r3, [pc, #384]	; (80022b0 <HAL_GPIO_Init+0x30c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a5f      	ldr	r2, [pc, #380]	; (80022b0 <HAL_GPIO_Init+0x30c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <HAL_GPIO_Init+0x30c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a5b      	ldr	r2, [pc, #364]	; (80022b4 <HAL_GPIO_Init+0x310>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_GPIO_Init+0x314>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02b      	beq.n	80021ca <HAL_GPIO_Init+0x226>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a51      	ldr	r2, [pc, #324]	; (80022bc <HAL_GPIO_Init+0x318>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x222>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <HAL_GPIO_Init+0x31c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x21e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_GPIO_Init+0x320>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x21a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4e      	ldr	r2, [pc, #312]	; (80022c8 <HAL_GPIO_Init+0x324>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x216>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <HAL_GPIO_Init+0x328>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x212>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4c      	ldr	r2, [pc, #304]	; (80022d0 <HAL_GPIO_Init+0x32c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x20e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4b      	ldr	r2, [pc, #300]	; (80022d4 <HAL_GPIO_Init+0x330>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x20a>
 80021aa:	2307      	movs	r3, #7
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ae:	2308      	movs	r3, #8
 80021b0:	e00c      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00a      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	; (80022b4 <HAL_GPIO_Init+0x310>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_GPIO_Init+0x334>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220e:	4a32      	ldr	r2, [pc, #200]	; (80022d8 <HAL_GPIO_Init+0x334>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_GPIO_Init+0x334>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_GPIO_Init+0x334>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_GPIO_Init+0x334>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_GPIO_Init+0x334>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_GPIO_Init+0x334>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <HAL_GPIO_Init+0x334>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f ae90 	bls.w	8001fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f8:	e003      	b.n	8002302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e264      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d075      	beq.n	800241a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232e:	4ba3      	ldr	r3, [pc, #652]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00c      	beq.n	8002354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4ba0      	ldr	r3, [pc, #640]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002342:	2b08      	cmp	r3, #8
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b9d      	ldr	r3, [pc, #628]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002352:	d10b      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b99      	ldr	r3, [pc, #612]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05b      	beq.n	8002418 <HAL_RCC_OscConfig+0x108>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d157      	bne.n	8002418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e23f      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x74>
 8002376:	4b91      	ldr	r3, [pc, #580]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a90      	ldr	r2, [pc, #576]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a8a      	ldr	r2, [pc, #552]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a87      	ldr	r2, [pc, #540]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 80023a8:	4b84      	ldr	r3, [pc, #528]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a83      	ldr	r2, [pc, #524]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a80      	ldr	r2, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fc6c 	bl	8001ca4 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fc68 	bl	8001ca4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e204      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xc0>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fc58 	bl	8001ca4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff fc54 	bl	8001ca4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1f0      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	4b6c      	ldr	r3, [pc, #432]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0xe8>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d063      	beq.n	80024ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	4b62      	ldr	r3, [pc, #392]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d11c      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1c4      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4952      	ldr	r1, [pc, #328]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	e03a      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002480:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_RCC_OscConfig+0x2b0>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff fc0d 	bl	8001ca4 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248e:	f7ff fc09 	bl	8001ca4 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e1a5      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4940      	ldr	r1, [pc, #256]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_OscConfig+0x2b0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff fbec 	bl	8001ca4 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d0:	f7ff fbe8 	bl	8001ca4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e184      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d030      	beq.n	800255c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_OscConfig+0x2b4>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7ff fbcc 	bl	8001ca4 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002510:	f7ff fbc8 	bl	8001ca4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e164      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x200>
 800252e:	e015      	b.n	800255c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x2b4>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff fbb5 	bl	8001ca4 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253e:	f7ff fbb1 	bl	8001ca4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e14d      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a0 	beq.w	80026aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10f      	bne.n	800259a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x2b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d121      	bne.n	80025ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_OscConfig+0x2b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_RCC_OscConfig+0x2b8>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b2:	f7ff fb77 	bl	8001ca4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	e011      	b.n	80025de <HAL_RCC_OscConfig+0x2ce>
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470000 	.word	0x42470000
 80025c4:	42470e80 	.word	0x42470e80
 80025c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025cc:	f7ff fb6a 	bl	8001ca4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e106      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b85      	ldr	r3, [pc, #532]	; (80027f4 <HAL_RCC_OscConfig+0x4e4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x2f0>
 80025f2:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a80      	ldr	r2, [pc, #512]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	e01c      	b.n	800263a <HAL_RCC_OscConfig+0x32a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002608:	4b7b      	ldr	r3, [pc, #492]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a7a      	ldr	r2, [pc, #488]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
 8002614:	4b78      	ldr	r3, [pc, #480]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a77      	ldr	r2, [pc, #476]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
 8002620:	e00b      	b.n	800263a <HAL_RCC_OscConfig+0x32a>
 8002622:	4b75      	ldr	r3, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a74      	ldr	r2, [pc, #464]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
 800262e:	4b72      	ldr	r3, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a71      	ldr	r2, [pc, #452]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d015      	beq.n	800266e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7ff fb2f 	bl	8001ca4 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7ff fb2b 	bl	8001ca4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0c5      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ee      	beq.n	800264a <HAL_RCC_OscConfig+0x33a>
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff fb19 	bl	8001ca4 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7ff fb15 	bl	8001ca4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0af      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	4b5a      	ldr	r3, [pc, #360]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ee      	bne.n	8002676 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269e:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a55      	ldr	r2, [pc, #340]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 809b 	beq.w	80027ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d05c      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d141      	bne.n	800274c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x4ec>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7ff fae9 	bl	8001ca4 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7ff fae5 	bl	8001ca4 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e081      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e8:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	019b      	lsls	r3, r3, #6
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	061b      	lsls	r3, r3, #24
 8002718:	4937      	ldr	r1, [pc, #220]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271e:	4b37      	ldr	r3, [pc, #220]	; (80027fc <HAL_RCC_OscConfig+0x4ec>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff fabe 	bl	8001ca4 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7ff faba 	bl	8001ca4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e056      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x41c>
 800274a:	e04e      	b.n	80027ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_OscConfig+0x4ec>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7ff faa7 	bl	8001ca4 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275a:	f7ff faa3 	bl	8001ca4 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e03f      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x44a>
 8002778:	e037      	b.n	80027ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e032      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d028      	beq.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d121      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d11a      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027be:	4293      	cmp	r3, r2
 80027c0:	d111      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	3b01      	subs	r3, #1
 80027d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40007000 	.word	0x40007000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	42470060 	.word	0x42470060

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cc      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d90c      	bls.n	800283c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d044      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d119      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e067      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4934      	ldr	r1, [pc, #208]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7ff f9d8 	bl	8001ca4 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7ff f9d4 	bl	8001ca4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe ffd2 	bl	8001950 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	0800ad4c 	.word	0x0800ad4c
 80029c4:	20000034 	.word	0x20000034
 80029c8:	20000038 	.word	0x20000038

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d2:	2100      	movs	r1, #0
 80029d4:	6079      	str	r1, [r7, #4]
 80029d6:	2100      	movs	r1, #0
 80029d8:	60f9      	str	r1, [r7, #12]
 80029da:	2100      	movs	r1, #0
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029de:	2100      	movs	r1, #0
 80029e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e2:	4952      	ldr	r1, [pc, #328]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 80029e4:	6889      	ldr	r1, [r1, #8]
 80029e6:	f001 010c 	and.w	r1, r1, #12
 80029ea:	2908      	cmp	r1, #8
 80029ec:	d00d      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x3e>
 80029ee:	2908      	cmp	r1, #8
 80029f0:	f200 8094 	bhi.w	8002b1c <HAL_RCC_GetSysClockFreq+0x150>
 80029f4:	2900      	cmp	r1, #0
 80029f6:	d002      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x32>
 80029f8:	2904      	cmp	r1, #4
 80029fa:	d003      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x38>
 80029fc:	e08e      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029fe:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a00:	60bb      	str	r3, [r7, #8]
       break;
 8002a02:	e08e      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a06:	60bb      	str	r3, [r7, #8]
      break;
 8002a08:	e08b      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0a:	4948      	ldr	r1, [pc, #288]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a0c:	6849      	ldr	r1, [r1, #4]
 8002a0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a12:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a14:	4945      	ldr	r1, [pc, #276]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a16:	6849      	ldr	r1, [r1, #4]
 8002a18:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	d024      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4942      	ldr	r1, [pc, #264]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a22:	6849      	ldr	r1, [r1, #4]
 8002a24:	0989      	lsrs	r1, r1, #6
 8002a26:	4608      	mov	r0, r1
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a30:	f04f 0500 	mov.w	r5, #0
 8002a34:	ea00 0204 	and.w	r2, r0, r4
 8002a38:	ea01 0305 	and.w	r3, r1, r5
 8002a3c:	493d      	ldr	r1, [pc, #244]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a3e:	fb01 f003 	mul.w	r0, r1, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	fb01 f102 	mul.w	r1, r1, r2
 8002a48:	1844      	adds	r4, r0, r1
 8002a4a:	493a      	ldr	r1, [pc, #232]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a4c:	fba2 0101 	umull	r0, r1, r2, r1
 8002a50:	1863      	adds	r3, r4, r1
 8002a52:	4619      	mov	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f7fd fc20 	bl	80002a0 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e04a      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	461a      	mov	r2, r3
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	ea02 0400 	and.w	r4, r2, r0
 8002a82:	ea03 0501 	and.w	r5, r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	014b      	lsls	r3, r1, #5
 8002a94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a98:	0142      	lsls	r2, r0, #5
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	1b00      	subs	r0, r0, r4
 8002aa0:	eb61 0105 	sbc.w	r1, r1, r5
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	018b      	lsls	r3, r1, #6
 8002aae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ab2:	0182      	lsls	r2, r0, #6
 8002ab4:	1a12      	subs	r2, r2, r0
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	f04f 0000 	mov.w	r0, #0
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	00d9      	lsls	r1, r3, #3
 8002ac4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac8:	00d0      	lsls	r0, r2, #3
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	1912      	adds	r2, r2, r4
 8002ad0:	eb45 0303 	adc.w	r3, r5, r3
 8002ad4:	f04f 0000 	mov.w	r0, #0
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	0299      	lsls	r1, r3, #10
 8002ade:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ae2:	0290      	lsls	r0, r2, #10
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f7fd fbd4 	bl	80002a0 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	60bb      	str	r3, [r7, #8]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b1e:	60bb      	str	r3, [r7, #8]
      break;
 8002b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b22:	68bb      	ldr	r3, [r7, #8]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	017d7840 	.word	0x017d7840

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000034 	.word	0x20000034

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b54:	f7ff fff0 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0a9b      	lsrs	r3, r3, #10
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	0800ad5c 	.word	0x0800ad5c

08002b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b7c:	f7ff ffdc 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0b5b      	lsrs	r3, r3, #13
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	0800ad5c 	.word	0x0800ad5c

08002ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	220f      	movs	r2, #15
 8002bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_GetClockConfig+0x5c>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_RCC_GetClockConfig+0x5c>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_RCC_GetClockConfig+0x5c>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_GetClockConfig+0x5c>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	08db      	lsrs	r3, r3, #3
 8002bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <HAL_RCC_GetClockConfig+0x60>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0207 	and.w	r2, r3, #7
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	601a      	str	r2, [r3, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40023c00 	.word	0x40023c00

08002c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07b      	b.n	8002d0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c26:	d009      	beq.n	8002c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fde2 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	ea42 0103 	orr.w	r1, r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0104 	and.w	r1, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f003 0210 	and.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_SPI_Transmit+0x22>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e126      	b.n	8002f86 <HAL_SPI_Transmit+0x270>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d40:	f7fe ffb0 	bl	8001ca4 <HAL_GetTick>
 8002d44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d002      	beq.n	8002d5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
 8002d58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d5a:	e10b      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_Transmit+0x52>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d6c:	e102      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2203      	movs	r2, #3
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db4:	d10f      	bne.n	8002dd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d007      	beq.n	8002df4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfc:	d14b      	bne.n	8002e96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_SPI_Transmit+0xf6>
 8002e06:	8afb      	ldrh	r3, [r7, #22]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d13e      	bne.n	8002e8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e30:	e02b      	b.n	8002e8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d112      	bne.n	8002e66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	1c9a      	adds	r2, r3, #2
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e64:	e011      	b.n	8002e8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e66:	f7fe ff1d 	bl	8001ca4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d803      	bhi.n	8002e7e <HAL_SPI_Transmit+0x168>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d102      	bne.n	8002e84 <HAL_SPI_Transmit+0x16e>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e88:	e074      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ce      	bne.n	8002e32 <HAL_SPI_Transmit+0x11c>
 8002e94:	e04c      	b.n	8002f30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_SPI_Transmit+0x18e>
 8002e9e:	8afb      	ldrh	r3, [r7, #22]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d140      	bne.n	8002f26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	7812      	ldrb	r2, [r2, #0]
 8002eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eca:	e02c      	b.n	8002f26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d113      	bne.n	8002f02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f00:	e011      	b.n	8002f26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f02:	f7fe fecf 	bl	8001ca4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d803      	bhi.n	8002f1a <HAL_SPI_Transmit+0x204>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_Transmit+0x20a>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f24:	e026      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1cd      	bne.n	8002ecc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	6839      	ldr	r1, [r7, #0]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fa63 	bl	8003400 <SPI_EndRxTxTransaction>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e000      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b08c      	sub	sp, #48	; 0x30
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x26>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e18a      	b.n	80032ca <HAL_SPI_TransmitReceive+0x33c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fbc:	f7fe fe72 	bl	8001ca4 <HAL_GetTick>
 8002fc0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d00f      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0x70>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe4:	d107      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x68>
 8002fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ffc:	e15b      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x82>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x82>
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003016:	e14e      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b04      	cmp	r3, #4
 8003022:	d003      	beq.n	800302c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2205      	movs	r2, #5
 8003028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	887a      	ldrh	r2, [r7, #2]
 8003042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d007      	beq.n	8003080 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003088:	d178      	bne.n	800317c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x10a>
 8003092:	8b7b      	ldrh	r3, [r7, #26]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d166      	bne.n	8003166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030bc:	e053      	b.n	8003166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d11b      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x176>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x176>
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d113      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	881a      	ldrh	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	1c9a      	adds	r2, r3, #2
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d119      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x1b8>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d014      	beq.n	8003146 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	b292      	uxth	r2, r2
 8003128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	1c9a      	adds	r2, r3, #2
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003142:	2301      	movs	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003146:	f7fe fdad 	bl	8001ca4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003152:	429a      	cmp	r2, r3
 8003154:	d807      	bhi.n	8003166 <HAL_SPI_TransmitReceive+0x1d8>
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d003      	beq.n	8003166 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003164:	e0a7      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1a6      	bne.n	80030be <HAL_SPI_TransmitReceive+0x130>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1a1      	bne.n	80030be <HAL_SPI_TransmitReceive+0x130>
 800317a:	e07c      	b.n	8003276 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_SPI_TransmitReceive+0x1fc>
 8003184:	8b7b      	ldrh	r3, [r7, #26]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d16b      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031b0:	e057      	b.n	8003262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d11c      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x26c>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d017      	beq.n	80031fa <HAL_SPI_TransmitReceive+0x26c>
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d114      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d119      	bne.n	800323c <HAL_SPI_TransmitReceive+0x2ae>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d014      	beq.n	800323c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003238:	2301      	movs	r3, #1
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800323c:	f7fe fd32 	bl	8001ca4 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003248:	429a      	cmp	r2, r3
 800324a:	d803      	bhi.n	8003254 <HAL_SPI_TransmitReceive+0x2c6>
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d102      	bne.n	800325a <HAL_SPI_TransmitReceive+0x2cc>
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003260:	e029      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1a2      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x224>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d19d      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f8c0 	bl	8003400 <SPI_EndRxTxTransaction>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003292:	e010      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	e000      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80032b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3730      	adds	r7, #48	; 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e0:	b2db      	uxtb	r3, r3
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003300:	f7fe fcd0 	bl	8001ca4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4413      	add	r3, r2
 800330e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003310:	f7fe fcc8 	bl	8001ca4 <HAL_GetTick>
 8003314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003316:	4b39      	ldr	r3, [pc, #228]	; (80033fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	015b      	lsls	r3, r3, #5
 800331c:	0d1b      	lsrs	r3, r3, #20
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	fb02 f303 	mul.w	r3, r2, r3
 8003324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003326:	e054      	b.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332e:	d050      	beq.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003330:	f7fe fcb8 	bl	8001ca4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	429a      	cmp	r2, r3
 800333e:	d902      	bls.n	8003346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d13d      	bne.n	80033c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335e:	d111      	bne.n	8003384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d004      	beq.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d107      	bne.n	8003384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338c:	d10f      	bne.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e017      	b.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d19b      	bne.n	8003328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000034 	.word	0x20000034

08003400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <SPI_EndRxTxTransaction+0x7c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <SPI_EndRxTxTransaction+0x80>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0d5b      	lsrs	r3, r3, #21
 8003418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342a:	d112      	bne.n	8003452 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2200      	movs	r2, #0
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff ff5a 	bl	80032f0 <SPI_WaitFlagStateUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e00f      	b.n	8003472 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3b01      	subs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b80      	cmp	r3, #128	; 0x80
 800346a:	d0f2      	beq.n	8003452 <SPI_EndRxTxTransaction+0x52>
 800346c:	e000      	b.n	8003470 <SPI_EndRxTxTransaction+0x70>
        break;
 800346e:	bf00      	nop
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000034 	.word	0x20000034
 8003480:	165e9f81 	.word	0x165e9f81

08003484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e041      	b.n	800351a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f839 	bl	8003522 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f000 f9d8 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d001      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e04e      	b.n	80035ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a23      	ldr	r2, [pc, #140]	; (80035fc <HAL_TIM_Base_Start_IT+0xc4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d022      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x80>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d01d      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x80>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_TIM_Base_Start_IT+0xc8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d018      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x80>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <HAL_TIM_Base_Start_IT+0xcc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x80>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_TIM_Base_Start_IT+0xd0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00e      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x80>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_TIM_Base_Start_IT+0xd4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x80>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_TIM_Base_Start_IT+0xd8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x80>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d111      	bne.n	80035dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d010      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035da:	e007      	b.n	80035ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40010000 	.word	0x40010000
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40010400 	.word	0x40010400
 8003610:	40014000 	.word	0x40014000
 8003614:	40001800 	.word	0x40001800

08003618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0202 	mvn.w	r2, #2
 8003644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8ee 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8e0 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f8f1 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0204 	mvn.w	r2, #4
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8c4 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8b6 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8c7 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0208 	mvn.w	r2, #8
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2204      	movs	r2, #4
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f89a 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f88c 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f89d 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b10      	cmp	r3, #16
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0210 	mvn.w	r2, #16
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2208      	movs	r2, #8
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f870 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f862 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f873 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10e      	bne.n	800379c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0201 	mvn.w	r2, #1
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd ff72 	bl	8001680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d107      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f902 	bl	80039cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d10e      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d107      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f838 	bl	8003864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d10e      	bne.n	8003820 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b20      	cmp	r3, #32
 800380e:	d107      	bne.n	8003820 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0220 	mvn.w	r2, #32
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8cc 	bl	80039b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <TIM_Base_SetConfig+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d00f      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <TIM_Base_SetConfig+0x118>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3c      	ldr	r2, [pc, #240]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2f      	ldr	r2, [pc, #188]	; (800398c <TIM_Base_SetConfig+0x114>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d027      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <TIM_Base_SetConfig+0x118>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d023      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2b      	ldr	r2, [pc, #172]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a29      	ldr	r2, [pc, #164]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d017      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <TIM_Base_SetConfig+0x128>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <TIM_Base_SetConfig+0x130>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <TIM_Base_SetConfig+0x134>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <TIM_Base_SetConfig+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <TIM_Base_SetConfig+0x13c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <TIM_Base_SetConfig+0x114>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0xf8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <TIM_Base_SetConfig+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d103      	bne.n	8003978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	615a      	str	r2, [r3, #20]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40010400 	.word	0x40010400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800
 80039ac:	40001800 	.word	0x40001800
 80039b0:	40001c00 	.word	0x40001c00
 80039b4:	40002000 	.word	0x40002000

080039b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e03f      	b.n	8003a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd ff52 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	; 0x24
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fc1b 	bl	8004260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08a      	sub	sp, #40	; 0x28
 8003a7e:	af02      	add	r7, sp, #8
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d17c      	bne.n	8003b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_UART_Transmit+0x2c>
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e075      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x3e>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e06e      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2221      	movs	r2, #33	; 0x21
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ace:	f7fe f8e9 	bl	8001ca4 <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae8:	d108      	bne.n	8003afc <HAL_UART_Transmit+0x82>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e003      	b.n	8003b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b0c:	e02a      	b.n	8003b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fa17 	bl	8003f4c <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e036      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	3302      	adds	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e007      	b.n	8003b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1cf      	bne.n	8003b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2140      	movs	r1, #64	; 0x40
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f9e7 	bl	8003f4c <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10d      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x52>
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 faa1 	bl	8004132 <UART_Receive_IT>
      return;
 8003bf0:	e17c      	b.n	8003eec <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80b1 	beq.w	8003d5c <HAL_UART_IRQHandler+0x1bc>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_UART_IRQHandler+0x70>
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80a6 	beq.w	8003d5c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_UART_IRQHandler+0x90>
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0201 	orr.w	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_UART_IRQHandler+0xb0>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f043 0202 	orr.w	r2, r3, #2
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_UART_IRQHandler+0xd0>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f043 0204 	orr.w	r2, r3, #4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00f      	beq.n	8003c9a <HAL_UART_IRQHandler+0xfa>
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <HAL_UART_IRQHandler+0xee>
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f043 0208 	orr.w	r2, r3, #8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 811f 	beq.w	8003ee2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_UART_IRQHandler+0x11e>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fa3a 	bl	8004132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x146>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d031      	beq.n	8003d4a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f97a 	bl	8003fe0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d123      	bne.n	8003d42 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	4a77      	ldr	r2, [pc, #476]	; (8003ef4 <HAL_UART_IRQHandler+0x354>)
 8003d18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe f91e 	bl	8001f60 <HAL_DMA_Abort_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d34:	4610      	mov	r0, r2
 8003d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	e00e      	b.n	8003d58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f8f0 	bl	8003f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	e00a      	b.n	8003d58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f8ec 	bl	8003f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	e006      	b.n	8003d58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8e8 	bl	8003f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d56:	e0c4      	b.n	8003ee2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	bf00      	nop
    return;
 8003d5a:	e0c2      	b.n	8003ee2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 80a2 	bne.w	8003eaa <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 809c 	beq.w	8003eaa <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8096 	beq.w	8003eaa <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d14f      	bne.n	8003e42 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003dac:	8a3b      	ldrh	r3, [r7, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8099 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003db8:	8a3a      	ldrh	r2, [r7, #16]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	f080 8093 	bcs.w	8003ee6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8a3a      	ldrh	r2, [r7, #16]
 8003dc4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd0:	d02b      	beq.n	8003e2a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e00:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0210 	bic.w	r2, r2, #16
 8003e1e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe f82b 	bl	8001e80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f87a 	bl	8003f34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e40:	e051      	b.n	8003ee6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d047      	beq.n	8003eea <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003e5a:	8a7b      	ldrh	r3, [r7, #18]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d044      	beq.n	8003eea <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e6e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0210 	bic.w	r2, r2, #16
 8003e9c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e9e:	8a7b      	ldrh	r3, [r7, #18]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f846 	bl	8003f34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ea8:	e01f      	b.n	8003eea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x326>
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8cf 	bl	8004062 <UART_Transmit_IT>
    return;
 8003ec4:	e012      	b.n	8003eec <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00d      	beq.n	8003eec <HAL_UART_IRQHandler+0x34c>
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f911 	bl	8004102 <UART_EndTransmit_IT>
    return;
 8003ee0:	e004      	b.n	8003eec <HAL_UART_IRQHandler+0x34c>
    return;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_UART_IRQHandler+0x34c>
      return;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_UART_IRQHandler+0x34c>
      return;
 8003eea:	bf00      	nop
  }
}
 8003eec:	3728      	adds	r7, #40	; 0x28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	0800403b 	.word	0x0800403b

08003ef8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5c:	e02c      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d028      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f6c:	f7fd fe9a 	bl	8001ca4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d21d      	bcs.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e00f      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d0c3      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ff6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	d107      	bne.n	8004020 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0210 	bic.w	r2, r2, #16
 800401e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff ff63 	bl	8003f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b21      	cmp	r3, #33	; 0x21
 8004074:	d13e      	bne.n	80040f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	d114      	bne.n	80040aa <UART_Transmit_IT+0x48>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d110      	bne.n	80040aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	621a      	str	r2, [r3, #32]
 80040a8:	e008      	b.n	80040bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6211      	str	r1, [r2, #32]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4619      	mov	r1, r3
 80040ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10f      	bne.n	80040f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fee8 	bl	8003ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b22      	cmp	r3, #34	; 0x22
 8004144:	f040 8087 	bne.w	8004256 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d117      	bne.n	8004182 <UART_Receive_IT+0x50>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d113      	bne.n	8004182 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	b29a      	uxth	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
 8004180:	e026      	b.n	80041d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d007      	beq.n	80041a6 <UART_Receive_IT+0x74>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <UART_Receive_IT+0x82>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e008      	b.n	80041c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29b      	uxth	r3, r3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4619      	mov	r1, r3
 80041de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d136      	bne.n	8004252 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0220 	bic.w	r2, r2, #32
 80041f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	2b01      	cmp	r3, #1
 8004222:	d10e      	bne.n	8004242 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0210 	bic.w	r2, r2, #16
 8004232:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fe7a 	bl	8003f34 <HAL_UARTEx_RxEventCallback>
 8004240:	e002      	b.n	8004248 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fe62 	bl	8003f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	e002      	b.n	8004258 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	b09f      	sub	sp, #124	; 0x7c
 8004266:	af00      	add	r7, sp, #0
 8004268:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004276:	68d9      	ldr	r1, [r3, #12]
 8004278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	ea40 0301 	orr.w	r3, r0, r1
 8004280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	431a      	orrs	r2, r3
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	431a      	orrs	r2, r3
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4313      	orrs	r3, r2
 8004298:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800429a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042a4:	f021 010c 	bic.w	r1, r1, #12
 80042a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ae:	430b      	orrs	r3, r1
 80042b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042be:	6999      	ldr	r1, [r3, #24]
 80042c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	ea40 0301 	orr.w	r3, r0, r1
 80042c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4bc5      	ldr	r3, [pc, #788]	; (80045e4 <UART_SetConfig+0x384>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d004      	beq.n	80042de <UART_SetConfig+0x7e>
 80042d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4bc3      	ldr	r3, [pc, #780]	; (80045e8 <UART_SetConfig+0x388>)
 80042da:	429a      	cmp	r2, r3
 80042dc:	d103      	bne.n	80042e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042de:	f7fe fc4b 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 80042e2:	6778      	str	r0, [r7, #116]	; 0x74
 80042e4:	e002      	b.n	80042ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042e6:	f7fe fc33 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 80042ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f4:	f040 80b6 	bne.w	8004464 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fa:	461c      	mov	r4, r3
 80042fc:	f04f 0500 	mov.w	r5, #0
 8004300:	4622      	mov	r2, r4
 8004302:	462b      	mov	r3, r5
 8004304:	1891      	adds	r1, r2, r2
 8004306:	6439      	str	r1, [r7, #64]	; 0x40
 8004308:	415b      	adcs	r3, r3
 800430a:	647b      	str	r3, [r7, #68]	; 0x44
 800430c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004310:	1912      	adds	r2, r2, r4
 8004312:	eb45 0303 	adc.w	r3, r5, r3
 8004316:	f04f 0000 	mov.w	r0, #0
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	00d9      	lsls	r1, r3, #3
 8004320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004324:	00d0      	lsls	r0, r2, #3
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	1911      	adds	r1, r2, r4
 800432c:	6639      	str	r1, [r7, #96]	; 0x60
 800432e:	416b      	adcs	r3, r5
 8004330:	667b      	str	r3, [r7, #100]	; 0x64
 8004332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	461a      	mov	r2, r3
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	1891      	adds	r1, r2, r2
 800433e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004340:	415b      	adcs	r3, r3
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004348:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800434c:	f7fb ffa8 	bl	80002a0 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4ba5      	ldr	r3, [pc, #660]	; (80045ec <UART_SetConfig+0x38c>)
 8004356:	fba3 2302 	umull	r2, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	011e      	lsls	r6, r3, #4
 800435e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004360:	461c      	mov	r4, r3
 8004362:	f04f 0500 	mov.w	r5, #0
 8004366:	4622      	mov	r2, r4
 8004368:	462b      	mov	r3, r5
 800436a:	1891      	adds	r1, r2, r2
 800436c:	6339      	str	r1, [r7, #48]	; 0x30
 800436e:	415b      	adcs	r3, r3
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
 8004372:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004376:	1912      	adds	r2, r2, r4
 8004378:	eb45 0303 	adc.w	r3, r5, r3
 800437c:	f04f 0000 	mov.w	r0, #0
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	00d9      	lsls	r1, r3, #3
 8004386:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800438a:	00d0      	lsls	r0, r2, #3
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	1911      	adds	r1, r2, r4
 8004392:	65b9      	str	r1, [r7, #88]	; 0x58
 8004394:	416b      	adcs	r3, r5
 8004396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	461a      	mov	r2, r3
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	1891      	adds	r1, r2, r2
 80043a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80043a6:	415b      	adcs	r3, r3
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043b2:	f7fb ff75 	bl	80002a0 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4b8c      	ldr	r3, [pc, #560]	; (80045ec <UART_SetConfig+0x38c>)
 80043bc:	fba3 1302 	umull	r1, r3, r3, r2
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	2164      	movs	r1, #100	; 0x64
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	3332      	adds	r3, #50	; 0x32
 80043ce:	4a87      	ldr	r2, [pc, #540]	; (80045ec <UART_SetConfig+0x38c>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043dc:	441e      	add	r6, r3
 80043de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e0:	4618      	mov	r0, r3
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	1894      	adds	r4, r2, r2
 80043ec:	623c      	str	r4, [r7, #32]
 80043ee:	415b      	adcs	r3, r3
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
 80043f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043f6:	1812      	adds	r2, r2, r0
 80043f8:	eb41 0303 	adc.w	r3, r1, r3
 80043fc:	f04f 0400 	mov.w	r4, #0
 8004400:	f04f 0500 	mov.w	r5, #0
 8004404:	00dd      	lsls	r5, r3, #3
 8004406:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800440a:	00d4      	lsls	r4, r2, #3
 800440c:	4622      	mov	r2, r4
 800440e:	462b      	mov	r3, r5
 8004410:	1814      	adds	r4, r2, r0
 8004412:	653c      	str	r4, [r7, #80]	; 0x50
 8004414:	414b      	adcs	r3, r1
 8004416:	657b      	str	r3, [r7, #84]	; 0x54
 8004418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	461a      	mov	r2, r3
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	1891      	adds	r1, r2, r2
 8004424:	61b9      	str	r1, [r7, #24]
 8004426:	415b      	adcs	r3, r3
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004432:	f7fb ff35 	bl	80002a0 <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4b6c      	ldr	r3, [pc, #432]	; (80045ec <UART_SetConfig+0x38c>)
 800443c:	fba3 1302 	umull	r1, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	2164      	movs	r1, #100	; 0x64
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	3332      	adds	r3, #50	; 0x32
 800444e:	4a67      	ldr	r2, [pc, #412]	; (80045ec <UART_SetConfig+0x38c>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	f003 0207 	and.w	r2, r3, #7
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4432      	add	r2, r6
 8004460:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004462:	e0b9      	b.n	80045d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004466:	461c      	mov	r4, r3
 8004468:	f04f 0500 	mov.w	r5, #0
 800446c:	4622      	mov	r2, r4
 800446e:	462b      	mov	r3, r5
 8004470:	1891      	adds	r1, r2, r2
 8004472:	6139      	str	r1, [r7, #16]
 8004474:	415b      	adcs	r3, r3
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800447c:	1912      	adds	r2, r2, r4
 800447e:	eb45 0303 	adc.w	r3, r5, r3
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f04f 0100 	mov.w	r1, #0
 800448a:	00d9      	lsls	r1, r3, #3
 800448c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004490:	00d0      	lsls	r0, r2, #3
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	eb12 0804 	adds.w	r8, r2, r4
 800449a:	eb43 0905 	adc.w	r9, r3, r5
 800449e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	008b      	lsls	r3, r1, #2
 80044b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044b6:	0082      	lsls	r2, r0, #2
 80044b8:	4640      	mov	r0, r8
 80044ba:	4649      	mov	r1, r9
 80044bc:	f7fb fef0 	bl	80002a0 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4b49      	ldr	r3, [pc, #292]	; (80045ec <UART_SetConfig+0x38c>)
 80044c6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	011e      	lsls	r6, r3, #4
 80044ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d0:	4618      	mov	r0, r3
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	1894      	adds	r4, r2, r2
 80044dc:	60bc      	str	r4, [r7, #8]
 80044de:	415b      	adcs	r3, r3
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e6:	1812      	adds	r2, r2, r0
 80044e8:	eb41 0303 	adc.w	r3, r1, r3
 80044ec:	f04f 0400 	mov.w	r4, #0
 80044f0:	f04f 0500 	mov.w	r5, #0
 80044f4:	00dd      	lsls	r5, r3, #3
 80044f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044fa:	00d4      	lsls	r4, r2, #3
 80044fc:	4622      	mov	r2, r4
 80044fe:	462b      	mov	r3, r5
 8004500:	1814      	adds	r4, r2, r0
 8004502:	64bc      	str	r4, [r7, #72]	; 0x48
 8004504:	414b      	adcs	r3, r1
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4618      	mov	r0, r3
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	008b      	lsls	r3, r1, #2
 800451c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004520:	0082      	lsls	r2, r0, #2
 8004522:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004526:	f7fb febb 	bl	80002a0 <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4b2f      	ldr	r3, [pc, #188]	; (80045ec <UART_SetConfig+0x38c>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	; 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	4a2a      	ldr	r2, [pc, #168]	; (80045ec <UART_SetConfig+0x38c>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454e:	441e      	add	r6, r3
 8004550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004552:	4618      	mov	r0, r3
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	1894      	adds	r4, r2, r2
 800455e:	603c      	str	r4, [r7, #0]
 8004560:	415b      	adcs	r3, r3
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004568:	1812      	adds	r2, r2, r0
 800456a:	eb41 0303 	adc.w	r3, r1, r3
 800456e:	f04f 0400 	mov.w	r4, #0
 8004572:	f04f 0500 	mov.w	r5, #0
 8004576:	00dd      	lsls	r5, r3, #3
 8004578:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800457c:	00d4      	lsls	r4, r2, #3
 800457e:	4622      	mov	r2, r4
 8004580:	462b      	mov	r3, r5
 8004582:	eb12 0a00 	adds.w	sl, r2, r0
 8004586:	eb43 0b01 	adc.w	fp, r3, r1
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4618      	mov	r0, r3
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	008b      	lsls	r3, r1, #2
 800459e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045a2:	0082      	lsls	r2, r0, #2
 80045a4:	4650      	mov	r0, sl
 80045a6:	4659      	mov	r1, fp
 80045a8:	f7fb fe7a 	bl	80002a0 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <UART_SetConfig+0x38c>)
 80045b2:	fba3 1302 	umull	r1, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2164      	movs	r1, #100	; 0x64
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	3332      	adds	r3, #50	; 0x32
 80045c4:	4a09      	ldr	r2, [pc, #36]	; (80045ec <UART_SetConfig+0x38c>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4432      	add	r2, r6
 80045d6:	609a      	str	r2, [r3, #8]
}
 80045d8:	bf00      	nop
 80045da:	377c      	adds	r7, #124	; 0x7c
 80045dc:	46bd      	mov	sp, r7
 80045de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e2:	bf00      	nop
 80045e4:	40011000 	.word	0x40011000
 80045e8:	40011400 	.word	0x40011400
 80045ec:	51eb851f 	.word	0x51eb851f

080045f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80045f4:	4904      	ldr	r1, [pc, #16]	; (8004608 <MX_FATFS_Init+0x18>)
 80045f6:	4805      	ldr	r0, [pc, #20]	; (800460c <MX_FATFS_Init+0x1c>)
 80045f8:	f002 fb62 	bl	8006cc0 <FATFS_LinkDriver>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <MX_FATFS_Init+0x20>)
 8004602:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004604:	bf00      	nop
 8004606:	bd80      	pop	{r7, pc}
 8004608:	200047f4 	.word	0x200047f4
 800460c:	20000040 	.word	0x20000040
 8004610:	200047f8 	.word	0x200047f8

08004614 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004618:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800461a:	4618      	mov	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc facb 	bl	8000bcc <SD_disk_initialize>
 8004636:	4603      	mov	r3, r0
 8004638:	461a      	mov	r2, r3
 800463a:	4b04      	ldr	r3, [pc, #16]	; (800464c <USER_initialize+0x28>)
 800463c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800463e:	4b03      	ldr	r3, [pc, #12]	; (800464c <USER_initialize+0x28>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	2000003d 	.word	0x2000003d

08004650 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fc fb9f 	bl	8000da0 <SD_disk_status>
 8004662:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800467c:	7bf8      	ldrb	r0, [r7, #15]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	f7fc fba2 	bl	8000dcc <SD_disk_read>
 8004688:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	4603      	mov	r3, r0
 80046a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80046a2:	7bf8      	ldrb	r0, [r7, #15]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	f7fc fbf9 	bl	8000ea0 <SD_disk_write>
 80046ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	603a      	str	r2, [r7, #0]
 80046c2:	71fb      	strb	r3, [r7, #7]
 80046c4:	460b      	mov	r3, r1
 80046c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80046c8:	79b9      	ldrb	r1, [r7, #6]
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fc6a 	bl	8000fa8 <SD_disk_ioctl>
 80046d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	4a08      	ldr	r2, [pc, #32]	; (8004710 <disk_status+0x30>)
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	79fa      	ldrb	r2, [r7, #7]
 80046f8:	4905      	ldr	r1, [pc, #20]	; (8004710 <disk_status+0x30>)
 80046fa:	440a      	add	r2, r1
 80046fc:	7a12      	ldrb	r2, [r2, #8]
 80046fe:	4610      	mov	r0, r2
 8004700:	4798      	blx	r3
 8004702:	4603      	mov	r3, r0
 8004704:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000390 	.word	0x20000390

08004714 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	4a0d      	ldr	r2, [pc, #52]	; (800475c <disk_initialize+0x48>)
 8004726:	5cd3      	ldrb	r3, [r2, r3]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d111      	bne.n	8004750 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <disk_initialize+0x48>)
 8004730:	2101      	movs	r1, #1
 8004732:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	4a09      	ldr	r2, [pc, #36]	; (800475c <disk_initialize+0x48>)
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	79fa      	ldrb	r2, [r7, #7]
 8004742:	4906      	ldr	r1, [pc, #24]	; (800475c <disk_initialize+0x48>)
 8004744:	440a      	add	r2, r1
 8004746:	7a12      	ldrb	r2, [r2, #8]
 8004748:	4610      	mov	r0, r2
 800474a:	4798      	blx	r3
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000390 	.word	0x20000390

08004760 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <disk_read+0x3c>)
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	689c      	ldr	r4, [r3, #8]
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <disk_read+0x3c>)
 8004780:	4413      	add	r3, r2
 8004782:	7a18      	ldrb	r0, [r3, #8]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	47a0      	blx	r4
 800478c:	4603      	mov	r3, r0
 800478e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004790:	7dfb      	ldrb	r3, [r7, #23]
}
 8004792:	4618      	mov	r0, r3
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	bf00      	nop
 800479c:	20000390 	.word	0x20000390

080047a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4603      	mov	r3, r0
 80047ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <disk_write+0x3c>)
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	68dc      	ldr	r4, [r3, #12]
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	4a07      	ldr	r2, [pc, #28]	; (80047dc <disk_write+0x3c>)
 80047c0:	4413      	add	r3, r2
 80047c2:	7a18      	ldrb	r0, [r3, #8]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	47a0      	blx	r4
 80047cc:	4603      	mov	r3, r0
 80047ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd90      	pop	{r4, r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000390 	.word	0x20000390

080047e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	603a      	str	r2, [r7, #0]
 80047ea:	71fb      	strb	r3, [r7, #7]
 80047ec:	460b      	mov	r3, r1
 80047ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <disk_ioctl+0x38>)
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	79fa      	ldrb	r2, [r7, #7]
 80047fe:	4906      	ldr	r1, [pc, #24]	; (8004818 <disk_ioctl+0x38>)
 8004800:	440a      	add	r2, r1
 8004802:	7a10      	ldrb	r0, [r2, #8]
 8004804:	79b9      	ldrb	r1, [r7, #6]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	4798      	blx	r3
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]
  return res;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20000390 	.word	0x20000390

0800481c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3301      	adds	r3, #1
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800482c:	89fb      	ldrh	r3, [r7, #14]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	b21a      	sxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b21b      	sxth	r3, r3
 8004838:	4313      	orrs	r3, r2
 800483a:	b21b      	sxth	r3, r3
 800483c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800483e:	89fb      	ldrh	r3, [r7, #14]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3303      	adds	r3, #3
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	3202      	adds	r2, #2
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	3201      	adds	r2, #1
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	7812      	ldrb	r2, [r2, #0]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
	return rv;
 8004884:	68fb      	ldr	r3, [r7, #12]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	887a      	ldrh	r2, [r7, #2]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00d      	beq.n	8004956 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	1c53      	adds	r3, r2, #1
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	6179      	str	r1, [r7, #20]
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3b01      	subs	r3, #1
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f1      	bne.n	800493a <mem_cpy+0x1a>
	}
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	617a      	str	r2, [r7, #20]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3b01      	subs	r3, #1
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f3      	bne.n	8004972 <mem_set+0x10>
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	61fa      	str	r2, [r7, #28]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	4619      	mov	r1, r3
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	61ba      	str	r2, [r7, #24]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	1acb      	subs	r3, r1, r3
 80049c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <mem_cmp+0x40>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0eb      	beq.n	80049b0 <mem_cmp+0x18>

	return r;
 80049d8:	697b      	ldr	r3, [r7, #20]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3724      	adds	r7, #36	; 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80049f0:	e002      	b.n	80049f8 <chk_chr+0x12>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3301      	adds	r3, #1
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <chk_chr+0x26>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d1f2      	bne.n	80049f2 <chk_chr+0xc>
	return *str;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <lock_fs+0x22>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f002 f981 	bl	8006d36 <ff_req_grant>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <lock_fs+0x22>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <lock_fs+0x24>
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <unlock_fs+0x2e>
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	d00a      	beq.n	8004a76 <unlock_fs+0x2e>
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	2b0b      	cmp	r3, #11
 8004a64:	d007      	beq.n	8004a76 <unlock_fs+0x2e>
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	2b0f      	cmp	r3, #15
 8004a6a:	d004      	beq.n	8004a76 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f002 f975 	bl	8006d60 <ff_rel_grant>
	}
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e029      	b.n	8004ae8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004a94:	4a27      	ldr	r2, [pc, #156]	; (8004b34 <chk_lock+0xb4>)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4413      	add	r3, r2
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01d      	beq.n	8004ade <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004aa2:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <chk_lock+0xb4>)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	4413      	add	r3, r2
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d116      	bne.n	8004ae2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004ab4:	4a1f      	ldr	r2, [pc, #124]	; (8004b34 <chk_lock+0xb4>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d10c      	bne.n	8004ae2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ac8:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <chk_lock+0xb4>)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	4413      	add	r3, r2
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d102      	bne.n	8004ae2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004adc:	e007      	b.n	8004aee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d9d2      	bls.n	8004a94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d109      	bne.n	8004b08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <chk_lock+0x80>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d101      	bne.n	8004b04 <chk_lock+0x84>
 8004b00:	2300      	movs	r3, #0
 8004b02:	e010      	b.n	8004b26 <chk_lock+0xa6>
 8004b04:	2312      	movs	r3, #18
 8004b06:	e00e      	b.n	8004b26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d108      	bne.n	8004b20 <chk_lock+0xa0>
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <chk_lock+0xb4>)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	4413      	add	r3, r2
 8004b16:	330c      	adds	r3, #12
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1e:	d101      	bne.n	8004b24 <chk_lock+0xa4>
 8004b20:	2310      	movs	r3, #16
 8004b22:	e000      	b.n	8004b26 <chk_lock+0xa6>
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000370 	.word	0x20000370

08004b38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	e002      	b.n	8004b4a <enq_lock+0x12>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3301      	adds	r3, #1
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d806      	bhi.n	8004b5e <enq_lock+0x26>
 8004b50:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <enq_lock+0x40>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	4413      	add	r3, r2
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f2      	bne.n	8004b44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000370 	.word	0x20000370

08004b7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	e01f      	b.n	8004bcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b8c:	4a41      	ldr	r2, [pc, #260]	; (8004c94 <inc_lock+0x118>)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	4413      	add	r3, r2
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d113      	bne.n	8004bc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004b9e:	4a3d      	ldr	r2, [pc, #244]	; (8004c94 <inc_lock+0x118>)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d109      	bne.n	8004bc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004bb2:	4a38      	ldr	r2, [pc, #224]	; (8004c94 <inc_lock+0x118>)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	4413      	add	r3, r2
 8004bba:	3308      	adds	r3, #8
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d006      	beq.n	8004bd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d9dc      	bls.n	8004b8c <inc_lock+0x10>
 8004bd2:	e000      	b.n	8004bd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004bd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d132      	bne.n	8004c42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e002      	b.n	8004be8 <inc_lock+0x6c>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d806      	bhi.n	8004bfc <inc_lock+0x80>
 8004bee:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <inc_lock+0x118>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	4413      	add	r3, r2
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f2      	bne.n	8004be2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d101      	bne.n	8004c06 <inc_lock+0x8a>
 8004c02:	2300      	movs	r3, #0
 8004c04:	e040      	b.n	8004c88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4922      	ldr	r1, [pc, #136]	; (8004c94 <inc_lock+0x118>)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	440b      	add	r3, r1
 8004c12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	491e      	ldr	r1, [pc, #120]	; (8004c94 <inc_lock+0x118>)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	440b      	add	r3, r1
 8004c20:	3304      	adds	r3, #4
 8004c22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695a      	ldr	r2, [r3, #20]
 8004c28:	491a      	ldr	r1, [pc, #104]	; (8004c94 <inc_lock+0x118>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	440b      	add	r3, r1
 8004c30:	3308      	adds	r3, #8
 8004c32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c34:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <inc_lock+0x118>)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	4413      	add	r3, r2
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	2200      	movs	r2, #0
 8004c40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <inc_lock+0xe0>
 8004c48:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <inc_lock+0x118>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	4413      	add	r3, r2
 8004c50:	330c      	adds	r3, #12
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <inc_lock+0xe0>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e015      	b.n	8004c88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <inc_lock+0xf8>
 8004c62:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <inc_lock+0x118>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	4413      	add	r3, r2
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	e001      	b.n	8004c78 <inc_lock+0xfc>
 8004c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c78:	4906      	ldr	r1, [pc, #24]	; (8004c94 <inc_lock+0x118>)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	440b      	add	r3, r1
 8004c80:	330c      	adds	r3, #12
 8004c82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20000370 	.word	0x20000370

08004c98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d825      	bhi.n	8004cf8 <dec_lock+0x60>
		n = Files[i].ctr;
 8004cac:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <dec_lock+0x74>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	4413      	add	r3, r2
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	d101      	bne.n	8004cc6 <dec_lock+0x2e>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004cc6:	89fb      	ldrh	r3, [r7, #14]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <dec_lock+0x3a>
 8004ccc:	89fb      	ldrh	r3, [r7, #14]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004cd2:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <dec_lock+0x74>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	4413      	add	r3, r2
 8004cda:	330c      	adds	r3, #12
 8004cdc:	89fa      	ldrh	r2, [r7, #14]
 8004cde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004ce0:	89fb      	ldrh	r3, [r7, #14]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <dec_lock+0x5a>
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <dec_lock+0x74>)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	4413      	add	r3, r2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	737b      	strb	r3, [r7, #13]
 8004cf6:	e001      	b.n	8004cfc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004cfc:	7b7b      	ldrb	r3, [r7, #13]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000370 	.word	0x20000370

08004d10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e010      	b.n	8004d40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d1e:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <clear_lock+0x44>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4413      	add	r3, r2
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d105      	bne.n	8004d3a <clear_lock+0x2a>
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <clear_lock+0x44>)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	4413      	add	r3, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d9eb      	bls.n	8004d1e <clear_lock+0xe>
	}
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	20000370 	.word	0x20000370

08004d58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	78db      	ldrb	r3, [r3, #3]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d034      	beq.n	8004dd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7858      	ldrb	r0, [r3, #1]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	f7ff fd0e 	bl	80047a0 <disk_write>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	e022      	b.n	8004dd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	1ad2      	subs	r2, r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d217      	bcs.n	8004dd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	789b      	ldrb	r3, [r3, #2]
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	e010      	b.n	8004dd0 <sync_window+0x78>
					wsect += fs->fsize;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4413      	add	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7858      	ldrb	r0, [r3, #1]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	f7ff fceb 	bl	80047a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d8eb      	bhi.n	8004dae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d01b      	beq.n	8004e30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff ffad 	bl	8004d58 <sync_window>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d113      	bne.n	8004e30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7858      	ldrb	r0, [r3, #1]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e12:	2301      	movs	r3, #1
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	f7ff fca3 	bl	8004760 <disk_read>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e20:	f04f 33ff 	mov.w	r3, #4294967295
 8004e24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff ff87 	bl	8004d58 <sync_window>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d158      	bne.n	8004f06 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d148      	bne.n	8004eee <sync_fs+0xb2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d144      	bne.n	8004eee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3334      	adds	r3, #52	; 0x34
 8004e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fd77 	bl	8004962 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3334      	adds	r3, #52	; 0x34
 8004e78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e7c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fd06 	bl	8004892 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3334      	adds	r3, #52	; 0x34
 8004e8a:	4921      	ldr	r1, [pc, #132]	; (8004f10 <sync_fs+0xd4>)
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fd1b 	bl	80048c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3334      	adds	r3, #52	; 0x34
 8004e96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e9a:	491e      	ldr	r1, [pc, #120]	; (8004f14 <sync_fs+0xd8>)
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fd13 	bl	80048c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3334      	adds	r3, #52	; 0x34
 8004ea6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	f7ff fd09 	bl	80048c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3334      	adds	r3, #52	; 0x34
 8004eba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7ff fcff 	bl	80048c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7858      	ldrb	r0, [r3, #1]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f7ff fc5c 	bl	80047a0 <disk_write>
			fs->fsi_flag = 0;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff fc72 	bl	80047e0 <disk_ioctl>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <sync_fs+0xca>
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	41615252 	.word	0x41615252
 8004f14:	61417272 	.word	0x61417272

08004f18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	3b02      	subs	r3, #2
 8004f26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	3b02      	subs	r3, #2
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d301      	bcc.n	8004f38 <clust2sect+0x20>
 8004f34:	2300      	movs	r3, #0
 8004f36:	e008      	b.n	8004f4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	895b      	ldrh	r3, [r3, #10]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	fb03 f202 	mul.w	r2, r3, r2
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	4413      	add	r3, r2
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d904      	bls.n	8004f76 <get_fat+0x20>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f76:	2301      	movs	r3, #1
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e08f      	b.n	800509c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d062      	beq.n	8005050 <get_fat+0xfa>
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	dc7c      	bgt.n	8005088 <get_fat+0x132>
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d002      	beq.n	8004f98 <get_fat+0x42>
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d042      	beq.n	800501c <get_fat+0xc6>
 8004f96:	e077      	b.n	8005088 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	0a5b      	lsrs	r3, r3, #9
 8004fae:	4413      	add	r3, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6938      	ldr	r0, [r7, #16]
 8004fb4:	f7ff ff14 	bl	8004de0 <move_window>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d167      	bne.n	800508e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	60fa      	str	r2, [r7, #12]
 8004fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	0a5b      	lsrs	r3, r3, #9
 8004fda:	4413      	add	r3, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6938      	ldr	r0, [r7, #16]
 8004fe0:	f7ff fefe 	bl	8004de0 <move_window>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d153      	bne.n	8005092 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <get_fat+0xbc>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	e002      	b.n	8005018 <get_fat+0xc2>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005018:	617b      	str	r3, [r7, #20]
			break;
 800501a:	e03f      	b.n	800509c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	4413      	add	r3, r2
 8005026:	4619      	mov	r1, r3
 8005028:	6938      	ldr	r0, [r7, #16]
 800502a:	f7ff fed9 	bl	8004de0 <move_window>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d130      	bne.n	8005096 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005042:	4413      	add	r3, r2
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fbe9 	bl	800481c <ld_word>
 800504a:	4603      	mov	r3, r0
 800504c:	617b      	str	r3, [r7, #20]
			break;
 800504e:	e025      	b.n	800509c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	09db      	lsrs	r3, r3, #7
 8005058:	4413      	add	r3, r2
 800505a:	4619      	mov	r1, r3
 800505c:	6938      	ldr	r0, [r7, #16]
 800505e:	f7ff febf 	bl	8004de0 <move_window>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d118      	bne.n	800509a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005076:	4413      	add	r3, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fbe7 	bl	800484c <ld_dword>
 800507e:	4603      	mov	r3, r0
 8005080:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005084:	617b      	str	r3, [r7, #20]
			break;
 8005086:	e009      	b.n	800509c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e006      	b.n	800509c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800508e:	bf00      	nop
 8005090:	e004      	b.n	800509c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800509a:	bf00      	nop
		}
	}

	return val;
 800509c:	697b      	ldr	r3, [r7, #20]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80050a6:	b590      	push	{r4, r7, lr}
 80050a8:	b089      	sub	sp, #36	; 0x24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80050b2:	2302      	movs	r3, #2
 80050b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	f240 80d2 	bls.w	8005262 <put_fat+0x1bc>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f080 80cc 	bcs.w	8005262 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	f000 8096 	beq.w	8005200 <put_fat+0x15a>
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	f300 80cd 	bgt.w	8005274 <put_fat+0x1ce>
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d002      	beq.n	80050e4 <put_fat+0x3e>
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d06e      	beq.n	80051c0 <put_fat+0x11a>
 80050e2:	e0c7      	b.n	8005274 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4413      	add	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	0a5b      	lsrs	r3, r3, #9
 80050fa:	4413      	add	r3, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fe6e 	bl	8004de0 <move_window>
 8005104:	4603      	mov	r3, r0
 8005106:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005108:	7ffb      	ldrb	r3, [r7, #31]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 80ab 	bne.w	8005266 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	61b9      	str	r1, [r7, #24]
 800511c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005120:	4413      	add	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <put_fat+0xa4>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	b25b      	sxtb	r3, r3
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	b25a      	sxtb	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	b25b      	sxtb	r3, r3
 8005142:	4313      	orrs	r3, r2
 8005144:	b25b      	sxtb	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	e001      	b.n	800514e <put_fat+0xa8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	0a5b      	lsrs	r3, r3, #9
 8005160:	4413      	add	r3, r2
 8005162:	4619      	mov	r1, r3
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff fe3b 	bl	8004de0 <move_window>
 800516a:	4603      	mov	r3, r0
 800516c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d17a      	bne.n	800526a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005180:	4413      	add	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <put_fat+0xf0>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	b2db      	uxtb	r3, r3
 8005194:	e00e      	b.n	80051b4 <put_fat+0x10e>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	b25b      	sxtb	r3, r3
 800519c:	f023 030f 	bic.w	r3, r3, #15
 80051a0:	b25a      	sxtb	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	b25b      	sxtb	r3, r3
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	4313      	orrs	r3, r2
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	70da      	strb	r2, [r3, #3]
			break;
 80051be:	e059      	b.n	8005274 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	4413      	add	r3, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff fe07 	bl	8004de0 <move_window>
 80051d2:	4603      	mov	r3, r0
 80051d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051d6:	7ffb      	ldrb	r3, [r7, #31]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d148      	bne.n	800526e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80051ea:	4413      	add	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	b292      	uxth	r2, r2
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fb4d 	bl	8004892 <st_word>
			fs->wflag = 1;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	70da      	strb	r2, [r3, #3]
			break;
 80051fe:	e039      	b.n	8005274 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	09db      	lsrs	r3, r3, #7
 8005208:	4413      	add	r3, r2
 800520a:	4619      	mov	r1, r3
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7ff fde7 	bl	8004de0 <move_window>
 8005212:	4603      	mov	r3, r0
 8005214:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d12a      	bne.n	8005272 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005230:	4413      	add	r3, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fb0a 	bl	800484c <ld_dword>
 8005238:	4603      	mov	r3, r0
 800523a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800523e:	4323      	orrs	r3, r4
 8005240:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005250:	4413      	add	r3, r2
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fb37 	bl	80048c8 <st_dword>
			fs->wflag = 1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	70da      	strb	r2, [r3, #3]
			break;
 8005260:	e008      	b.n	8005274 <put_fat+0x1ce>
		}
	}
 8005262:	bf00      	nop
 8005264:	e006      	b.n	8005274 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005266:	bf00      	nop
 8005268:	e004      	b.n	8005274 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800526a:	bf00      	nop
 800526c:	e002      	b.n	8005274 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005272:	bf00      	nop
	return res;
 8005274:	7ffb      	ldrb	r3, [r7, #31]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3724      	adds	r7, #36	; 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}

0800527e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d904      	bls.n	80052a4 <remove_chain+0x26>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d301      	bcc.n	80052a8 <remove_chain+0x2a>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e04b      	b.n	8005340 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80052ae:	f04f 32ff 	mov.w	r2, #4294967295
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	69b8      	ldr	r0, [r7, #24]
 80052b6:	f7ff fef6 	bl	80050a6 <put_fat>
 80052ba:	4603      	mov	r3, r0
 80052bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80052be:	7ffb      	ldrb	r3, [r7, #31]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <remove_chain+0x4a>
 80052c4:	7ffb      	ldrb	r3, [r7, #31]
 80052c6:	e03b      	b.n	8005340 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fe43 	bl	8004f56 <get_fat>
 80052d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d031      	beq.n	800533c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <remove_chain+0x64>
 80052de:	2302      	movs	r3, #2
 80052e0:	e02e      	b.n	8005340 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d101      	bne.n	80052ee <remove_chain+0x70>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e028      	b.n	8005340 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80052ee:	2200      	movs	r2, #0
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	69b8      	ldr	r0, [r7, #24]
 80052f4:	f7ff fed7 	bl	80050a6 <put_fat>
 80052f8:	4603      	mov	r3, r0
 80052fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80052fc:	7ffb      	ldrb	r3, [r7, #31]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <remove_chain+0x88>
 8005302:	7ffb      	ldrb	r3, [r7, #31]
 8005304:	e01c      	b.n	8005340 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	3b02      	subs	r3, #2
 8005310:	429a      	cmp	r2, r3
 8005312:	d20b      	bcs.n	800532c <remove_chain+0xae>
			fs->free_clst++;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	791b      	ldrb	r3, [r3, #4]
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	d3c6      	bcc.n	80052c8 <remove_chain+0x4a>
 800533a:	e000      	b.n	800533e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800533c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10d      	bne.n	800537a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <create_chain+0x2c>
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	429a      	cmp	r2, r3
 8005372:	d31b      	bcc.n	80053ac <create_chain+0x64>
 8005374:	2301      	movs	r3, #1
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e018      	b.n	80053ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff fdea 	bl	8004f56 <get_fat>
 8005382:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d801      	bhi.n	800538e <create_chain+0x46>
 800538a:	2301      	movs	r3, #1
 800538c:	e070      	b.n	8005470 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d101      	bne.n	800539a <create_chain+0x52>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	e06a      	b.n	8005470 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d201      	bcs.n	80053a8 <create_chain+0x60>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e063      	b.n	8005470 <create_chain+0x128>
		scl = clst;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	3301      	adds	r3, #1
 80053b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d307      	bcc.n	80053d0 <create_chain+0x88>
				ncl = 2;
 80053c0:	2302      	movs	r3, #2
 80053c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d901      	bls.n	80053d0 <create_chain+0x88>
 80053cc:	2300      	movs	r3, #0
 80053ce:	e04f      	b.n	8005470 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80053d0:	69f9      	ldr	r1, [r7, #28]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff fdbf 	bl	8004f56 <get_fat>
 80053d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00e      	beq.n	80053fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d003      	beq.n	80053ee <create_chain+0xa6>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d101      	bne.n	80053f2 <create_chain+0xaa>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	e03e      	b.n	8005470 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d1da      	bne.n	80053b0 <create_chain+0x68>
 80053fa:	2300      	movs	r3, #0
 80053fc:	e038      	b.n	8005470 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80053fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005400:	f04f 32ff 	mov.w	r2, #4294967295
 8005404:	69f9      	ldr	r1, [r7, #28]
 8005406:	6938      	ldr	r0, [r7, #16]
 8005408:	f7ff fe4d 	bl	80050a6 <put_fat>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <create_chain+0xe2>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d006      	beq.n	800542a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6938      	ldr	r0, [r7, #16]
 8005422:	f7ff fe40 	bl	80050a6 <put_fat>
 8005426:	4603      	mov	r3, r0
 8005428:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d116      	bne.n	800545e <create_chain+0x116>
		fs->last_clst = ncl;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	3b02      	subs	r3, #2
 8005440:	429a      	cmp	r2, r3
 8005442:	d804      	bhi.n	800544e <create_chain+0x106>
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	1e5a      	subs	r2, r3, #1
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	791b      	ldrb	r3, [r3, #4]
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	b2da      	uxtb	r2, r3
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	711a      	strb	r2, [r3, #4]
 800545c:	e007      	b.n	800546e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d102      	bne.n	800546a <create_chain+0x122>
 8005464:	f04f 33ff 	mov.w	r3, #4294967295
 8005468:	e000      	b.n	800546c <create_chain+0x124>
 800546a:	2301      	movs	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800546e:	69fb      	ldr	r3, [r7, #28]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	3304      	adds	r3, #4
 800548e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	0a5b      	lsrs	r3, r3, #9
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	8952      	ldrh	r2, [r2, #10]
 8005498:	fbb3 f3f2 	udiv	r3, r3, r2
 800549c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	613a      	str	r2, [r7, #16]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <clmt_clust+0x3a>
 80054ae:	2300      	movs	r3, #0
 80054b0:	e010      	b.n	80054d4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d307      	bcc.n	80054ca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	3304      	adds	r3, #4
 80054c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80054c8:	e7e9      	b.n	800549e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80054ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054f6:	d204      	bcs.n	8005502 <dir_sdi+0x22>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005502:	2302      	movs	r3, #2
 8005504:	e063      	b.n	80055ce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <dir_sdi+0x46>
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d902      	bls.n	8005526 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10c      	bne.n	8005546 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	8912      	ldrh	r2, [r2, #8]
 8005534:	4293      	cmp	r3, r2
 8005536:	d301      	bcc.n	800553c <dir_sdi+0x5c>
 8005538:	2302      	movs	r3, #2
 800553a:	e048      	b.n	80055ce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	61da      	str	r2, [r3, #28]
 8005544:	e029      	b.n	800559a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	895b      	ldrh	r3, [r3, #10]
 800554a:	025b      	lsls	r3, r3, #9
 800554c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800554e:	e019      	b.n	8005584 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6979      	ldr	r1, [r7, #20]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fcfe 	bl	8004f56 <get_fat>
 800555a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d101      	bne.n	8005568 <dir_sdi+0x88>
 8005564:	2301      	movs	r3, #1
 8005566:	e032      	b.n	80055ce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d904      	bls.n	8005578 <dir_sdi+0x98>
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	429a      	cmp	r2, r3
 8005576:	d301      	bcc.n	800557c <dir_sdi+0x9c>
 8005578:	2302      	movs	r3, #2
 800557a:	e028      	b.n	80055ce <dir_sdi+0xee>
			ofs -= csz;
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	429a      	cmp	r2, r3
 800558a:	d2e1      	bcs.n	8005550 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800558c:	6979      	ldr	r1, [r7, #20]
 800558e:	6938      	ldr	r0, [r7, #16]
 8005590:	f7ff fcc2 	bl	8004f18 <clust2sect>
 8005594:	4602      	mov	r2, r0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <dir_sdi+0xcc>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e010      	b.n	80055ce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	0a5b      	lsrs	r3, r3, #9
 80055b4:	441a      	add	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c6:	441a      	add	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	3320      	adds	r3, #32
 80055ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <dir_next+0x28>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055fc:	d301      	bcc.n	8005602 <dir_next+0x2c>
 80055fe:	2304      	movs	r3, #4
 8005600:	e0aa      	b.n	8005758 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005608:	2b00      	cmp	r3, #0
 800560a:	f040 8098 	bne.w	800573e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10b      	bne.n	8005638 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	8912      	ldrh	r2, [r2, #8]
 8005628:	4293      	cmp	r3, r2
 800562a:	f0c0 8088 	bcc.w	800573e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	61da      	str	r2, [r3, #28]
 8005634:	2304      	movs	r3, #4
 8005636:	e08f      	b.n	8005758 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	0a5b      	lsrs	r3, r3, #9
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	8952      	ldrh	r2, [r2, #10]
 8005640:	3a01      	subs	r2, #1
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d17a      	bne.n	800573e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f7ff fc80 	bl	8004f56 <get_fat>
 8005656:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d801      	bhi.n	8005662 <dir_next+0x8c>
 800565e:	2302      	movs	r3, #2
 8005660:	e07a      	b.n	8005758 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d101      	bne.n	800566e <dir_next+0x98>
 800566a:	2301      	movs	r3, #1
 800566c:	e074      	b.n	8005758 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	429a      	cmp	r2, r3
 8005676:	d358      	bcc.n	800572a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	61da      	str	r2, [r3, #28]
 8005684:	2304      	movs	r3, #4
 8005686:	e067      	b.n	8005758 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7ff fe59 	bl	8005348 <create_chain>
 8005696:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <dir_next+0xcc>
 800569e:	2307      	movs	r3, #7
 80056a0:	e05a      	b.n	8005758 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <dir_next+0xd6>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e055      	b.n	8005758 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d101      	bne.n	80056b8 <dir_next+0xe2>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e04f      	b.n	8005758 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff fb4d 	bl	8004d58 <sync_window>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <dir_next+0xf2>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e047      	b.n	8005758 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3334      	adds	r3, #52	; 0x34
 80056cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f945 	bl	8004962 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056d8:	2300      	movs	r3, #0
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	6979      	ldr	r1, [r7, #20]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fc1a 	bl	8004f18 <clust2sect>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
 80056ea:	e012      	b.n	8005712 <dir_next+0x13c>
						fs->wflag = 1;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff fb30 	bl	8004d58 <sync_window>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <dir_next+0x12c>
 80056fe:	2301      	movs	r3, #1
 8005700:	e02a      	b.n	8005758 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3301      	adds	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	895b      	ldrh	r3, [r3, #10]
 8005716:	461a      	mov	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4293      	cmp	r3, r2
 800571c:	d3e6      	bcc.n	80056ec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005730:	6979      	ldr	r1, [r7, #20]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff fbf0 	bl	8004f18 <clust2sect>
 8005738:	4602      	mov	r2, r0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005750:	441a      	add	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005770:	2100      	movs	r1, #0
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff feb4 	bl	80054e0 <dir_sdi>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d12b      	bne.n	80057da <dir_alloc+0x7a>
		n = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	4619      	mov	r1, r3
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fb27 	bl	8004de0 <move_window>
 8005792:	4603      	mov	r3, r0
 8005794:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d11d      	bne.n	80057d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2be5      	cmp	r3, #229	; 0xe5
 80057a4:	d004      	beq.n	80057b0 <dir_alloc+0x50>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3301      	adds	r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d102      	bne.n	80057c4 <dir_alloc+0x64>
 80057be:	e00c      	b.n	80057da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80057c4:	2101      	movs	r1, #1
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff ff05 	bl	80055d6 <dir_next>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0d7      	beq.n	8005786 <dir_alloc+0x26>
 80057d6:	e000      	b.n	80057da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80057d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d101      	bne.n	80057e4 <dir_alloc+0x84>
 80057e0:	2307      	movs	r3, #7
 80057e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	331a      	adds	r3, #26
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff f80d 	bl	800481c <ld_word>
 8005802:	4603      	mov	r3, r0
 8005804:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d109      	bne.n	8005822 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	3314      	adds	r3, #20
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff f802 	bl	800481c <ld_word>
 8005818:	4603      	mov	r3, r0
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	331a      	adds	r3, #26
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	b292      	uxth	r2, r2
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff f825 	bl	8004892 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d109      	bne.n	8005864 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f103 0214 	add.w	r2, r3, #20
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	b29b      	uxth	r3, r3
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f7ff f817 	bl	8004892 <st_word>
	}
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800587a:	2100      	movs	r1, #0
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fe2f 	bl	80054e0 <dir_sdi>
 8005882:	4603      	mov	r3, r0
 8005884:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <dir_find+0x24>
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	e03e      	b.n	800590e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	4619      	mov	r1, r3
 8005896:	6938      	ldr	r0, [r7, #16]
 8005898:	f7ff faa2 	bl	8004de0 <move_window>
 800589c:	4603      	mov	r3, r0
 800589e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d12f      	bne.n	8005906 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <dir_find+0x4e>
 80058b4:	2304      	movs	r3, #4
 80058b6:	75fb      	strb	r3, [r7, #23]
 80058b8:	e028      	b.n	800590c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	330b      	adds	r3, #11
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	330b      	adds	r3, #11
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <dir_find+0x86>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a18      	ldr	r0, [r3, #32]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	220b      	movs	r2, #11
 80058e6:	4619      	mov	r1, r3
 80058e8:	f7ff f856 	bl	8004998 <mem_cmp>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80058f2:	2100      	movs	r1, #0
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fe6e 	bl	80055d6 <dir_next>
 80058fa:	4603      	mov	r3, r0
 80058fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0c5      	beq.n	8005890 <dir_find+0x24>
 8005904:	e002      	b.n	800590c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800590a:	bf00      	nop

	return res;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005924:	2101      	movs	r1, #1
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff1a 	bl	8005760 <dir_alloc>
 800592c:	4603      	mov	r3, r0
 800592e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11c      	bne.n	8005970 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	4619      	mov	r1, r3
 800593c:	68b8      	ldr	r0, [r7, #8]
 800593e:	f7ff fa4f 	bl	8004de0 <move_window>
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d111      	bne.n	8005970 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	2220      	movs	r2, #32
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff f804 	bl	8004962 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a18      	ldr	r0, [r3, #32]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3324      	adds	r3, #36	; 0x24
 8005962:	220b      	movs	r2, #11
 8005964:	4619      	mov	r1, r3
 8005966:	f7fe ffdb 	bl	8004920 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2201      	movs	r2, #1
 800596e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3324      	adds	r3, #36	; 0x24
 8005990:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005992:	220b      	movs	r2, #11
 8005994:	2120      	movs	r1, #32
 8005996:	68b8      	ldr	r0, [r7, #8]
 8005998:	f7fe ffe3 	bl	8004962 <mem_set>
	si = i = 0; ni = 8;
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	2308      	movs	r3, #8
 80059a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	61fa      	str	r2, [r7, #28]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80059b6:	7efb      	ldrb	r3, [r7, #27]
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d94e      	bls.n	8005a5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80059bc:	7efb      	ldrb	r3, [r7, #27]
 80059be:	2b2f      	cmp	r3, #47	; 0x2f
 80059c0:	d006      	beq.n	80059d0 <create_name+0x54>
 80059c2:	7efb      	ldrb	r3, [r7, #27]
 80059c4:	2b5c      	cmp	r3, #92	; 0x5c
 80059c6:	d110      	bne.n	80059ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80059c8:	e002      	b.n	80059d0 <create_name+0x54>
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	3301      	adds	r3, #1
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b2f      	cmp	r3, #47	; 0x2f
 80059da:	d0f6      	beq.n	80059ca <create_name+0x4e>
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b5c      	cmp	r3, #92	; 0x5c
 80059e6:	d0f0      	beq.n	80059ca <create_name+0x4e>
			break;
 80059e8:	e038      	b.n	8005a5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80059ea:	7efb      	ldrb	r3, [r7, #27]
 80059ec:	2b2e      	cmp	r3, #46	; 0x2e
 80059ee:	d003      	beq.n	80059f8 <create_name+0x7c>
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d30c      	bcc.n	8005a12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b0b      	cmp	r3, #11
 80059fc:	d002      	beq.n	8005a04 <create_name+0x88>
 80059fe:	7efb      	ldrb	r3, [r7, #27]
 8005a00:	2b2e      	cmp	r3, #46	; 0x2e
 8005a02:	d001      	beq.n	8005a08 <create_name+0x8c>
 8005a04:	2306      	movs	r3, #6
 8005a06:	e044      	b.n	8005a92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005a08:	2308      	movs	r3, #8
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	230b      	movs	r3, #11
 8005a0e:	617b      	str	r3, [r7, #20]
			continue;
 8005a10:	e022      	b.n	8005a58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005a12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da04      	bge.n	8005a24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005a1a:	7efb      	ldrb	r3, [r7, #27]
 8005a1c:	3b80      	subs	r3, #128	; 0x80
 8005a1e:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <create_name+0x120>)
 8005a20:	5cd3      	ldrb	r3, [r2, r3]
 8005a22:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005a24:	7efb      	ldrb	r3, [r7, #27]
 8005a26:	4619      	mov	r1, r3
 8005a28:	481d      	ldr	r0, [pc, #116]	; (8005aa0 <create_name+0x124>)
 8005a2a:	f7fe ffdc 	bl	80049e6 <chk_chr>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <create_name+0xbc>
 8005a34:	2306      	movs	r3, #6
 8005a36:	e02c      	b.n	8005a92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005a38:	7efb      	ldrb	r3, [r7, #27]
 8005a3a:	2b60      	cmp	r3, #96	; 0x60
 8005a3c:	d905      	bls.n	8005a4a <create_name+0xce>
 8005a3e:	7efb      	ldrb	r3, [r7, #27]
 8005a40:	2b7a      	cmp	r3, #122	; 0x7a
 8005a42:	d802      	bhi.n	8005a4a <create_name+0xce>
 8005a44:	7efb      	ldrb	r3, [r7, #27]
 8005a46:	3b20      	subs	r3, #32
 8005a48:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	613a      	str	r2, [r7, #16]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	4413      	add	r3, r2
 8005a54:	7efa      	ldrb	r2, [r7, #27]
 8005a56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005a58:	e7a6      	b.n	80059a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005a5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	441a      	add	r2, r3
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <create_name+0xf4>
 8005a6c:	2306      	movs	r3, #6
 8005a6e:	e010      	b.n	8005a92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2be5      	cmp	r3, #229	; 0xe5
 8005a76:	d102      	bne.n	8005a7e <create_name+0x102>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2205      	movs	r2, #5
 8005a7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005a7e:	7efb      	ldrb	r3, [r7, #27]
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d801      	bhi.n	8005a88 <create_name+0x10c>
 8005a84:	2204      	movs	r2, #4
 8005a86:	e000      	b.n	8005a8a <create_name+0x10e>
 8005a88:	2200      	movs	r2, #0
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	330b      	adds	r3, #11
 8005a8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005a90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	0800ad64 	.word	0x0800ad64
 8005aa0:	0800ad00 	.word	0x0800ad00

08005aa4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005ab8:	e002      	b.n	8005ac0 <follow_path+0x1c>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ac6:	d0f8      	beq.n	8005aba <follow_path+0x16>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b5c      	cmp	r3, #92	; 0x5c
 8005ace:	d0f4      	beq.n	8005aba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b1f      	cmp	r3, #31
 8005adc:	d80a      	bhi.n	8005af4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fcf9 	bl	80054e0 <dir_sdi>
 8005aee:	4603      	mov	r3, r0
 8005af0:	75fb      	strb	r3, [r7, #23]
 8005af2:	e043      	b.n	8005b7c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005af4:	463b      	mov	r3, r7
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff ff3f 	bl	800597c <create_name>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d134      	bne.n	8005b72 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7ff feaf 	bl	800586c <dir_find>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d127      	bne.n	8005b76 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b26:	7afb      	ldrb	r3, [r7, #11]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d122      	bne.n	8005b76 <follow_path+0xd2>
 8005b30:	2305      	movs	r3, #5
 8005b32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005b34:	e01f      	b.n	8005b76 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b36:	7afb      	ldrb	r3, [r7, #11]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11c      	bne.n	8005b7a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	799b      	ldrb	r3, [r3, #6]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005b4c:	2305      	movs	r3, #5
 8005b4e:	75fb      	strb	r3, [r7, #23]
 8005b50:	e014      	b.n	8005b7c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b60:	4413      	add	r3, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff fe42 	bl	80057ee <ld_clust>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b70:	e7c0      	b.n	8005af4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <follow_path+0xd8>
				break;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b7a:	bf00      	nop
			}
		}
	}

	return res;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b087      	sub	sp, #28
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d031      	beq.n	8005c00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	e002      	b.n	8005baa <get_ldnumber+0x24>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d903      	bls.n	8005bba <get_ldnumber+0x34>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b3a      	cmp	r3, #58	; 0x3a
 8005bb8:	d1f4      	bne.n	8005ba4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b3a      	cmp	r3, #58	; 0x3a
 8005bc0:	d11c      	bne.n	8005bfc <get_ldnumber+0x76>
			tp = *path;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	60fa      	str	r2, [r7, #12]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	3b30      	subs	r3, #48	; 0x30
 8005bd2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b09      	cmp	r3, #9
 8005bd8:	d80e      	bhi.n	8005bf8 <get_ldnumber+0x72>
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d10a      	bne.n	8005bf8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d107      	bne.n	8005bf8 <get_ldnumber+0x72>
					vol = (int)i;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	e002      	b.n	8005c02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005c00:	693b      	ldr	r3, [r7, #16]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	70da      	strb	r2, [r3, #3]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff f8d8 	bl	8004de0 <move_window>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <check_fs+0x2a>
 8005c36:	2304      	movs	r3, #4
 8005c38:	e038      	b.n	8005cac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3334      	adds	r3, #52	; 0x34
 8005c3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fdea 	bl	800481c <ld_word>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <check_fs+0x48>
 8005c54:	2303      	movs	r3, #3
 8005c56:	e029      	b.n	8005cac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c5e:	2be9      	cmp	r3, #233	; 0xe9
 8005c60:	d009      	beq.n	8005c76 <check_fs+0x66>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c68:	2beb      	cmp	r3, #235	; 0xeb
 8005c6a:	d11e      	bne.n	8005caa <check_fs+0x9a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005c72:	2b90      	cmp	r3, #144	; 0x90
 8005c74:	d119      	bne.n	8005caa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3334      	adds	r3, #52	; 0x34
 8005c7a:	3336      	adds	r3, #54	; 0x36
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe fde5 	bl	800484c <ld_dword>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c88:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <check_fs+0xa4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d101      	bne.n	8005c92 <check_fs+0x82>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e00c      	b.n	8005cac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3334      	adds	r3, #52	; 0x34
 8005c96:	3352      	adds	r3, #82	; 0x52
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fdd7 	bl	800484c <ld_dword>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <check_fs+0xa8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d101      	bne.n	8005caa <check_fs+0x9a>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e000      	b.n	8005cac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005caa:	2302      	movs	r3, #2
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	00544146 	.word	0x00544146
 8005cb8:	33544146 	.word	0x33544146

08005cbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b096      	sub	sp, #88	; 0x58
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff ff58 	bl	8005b86 <get_ldnumber>
 8005cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da01      	bge.n	8005ce2 <find_volume+0x26>
 8005cde:	230b      	movs	r3, #11
 8005ce0:	e236      	b.n	8006150 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005ce2:	4aac      	ldr	r2, [pc, #688]	; (8005f94 <find_volume+0x2d8>)
 8005ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <find_volume+0x3a>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	e22c      	b.n	8006150 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8005cf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cf8:	f7fe fe90 	bl	8004a1c <lock_fs>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <find_volume+0x4a>
 8005d02:	230f      	movs	r3, #15
 8005d04:	e224      	b.n	8006150 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01a      	beq.n	8005d52 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fe fcdd 	bl	80046e0 <disk_status>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10c      	bne.n	8005d52 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <find_volume+0x92>
 8005d3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8005d4a:	230a      	movs	r3, #10
 8005d4c:	e200      	b.n	8006150 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e1fe      	b.n	8006150 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fe fcd5 	bl	8004714 <disk_initialize>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e1e7      	b.n	8006150 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <find_volume+0xda>
 8005d86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8005d92:	230a      	movs	r3, #10
 8005d94:	e1dc      	b.n	8006150 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005d9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d9e:	f7ff ff37 	bl	8005c10 <check_fs>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005da8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d14b      	bne.n	8005e48 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005db0:	2300      	movs	r3, #0
 8005db2:	643b      	str	r3, [r7, #64]	; 0x40
 8005db4:	e01f      	b.n	8005df6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005dc4:	4413      	add	r3, r2
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	3304      	adds	r3, #4
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d006      	beq.n	8005de0 <find_volume+0x124>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe fd38 	bl	800484c <ld_dword>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	e000      	b.n	8005de2 <find_volume+0x126>
 8005de0:	2200      	movs	r2, #0
 8005de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005dea:	440b      	add	r3, r1
 8005dec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df2:	3301      	adds	r3, #1
 8005df4:	643b      	str	r3, [r7, #64]	; 0x40
 8005df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d9dc      	bls.n	8005db6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <find_volume+0x150>
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005e14:	4413      	add	r3, r2
 8005e16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005e1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <find_volume+0x172>
 8005e22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e26:	f7ff fef3 	bl	8005c10 <check_fs>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	e000      	b.n	8005e30 <find_volume+0x174>
 8005e2e:	2303      	movs	r3, #3
 8005e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d905      	bls.n	8005e48 <find_volume+0x18c>
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	3301      	adds	r3, #1
 8005e40:	643b      	str	r3, [r7, #64]	; 0x40
 8005e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d9e1      	bls.n	8005e0c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d101      	bne.n	8005e54 <find_volume+0x198>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e17d      	b.n	8006150 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d901      	bls.n	8005e60 <find_volume+0x1a4>
 8005e5c:	230d      	movs	r3, #13
 8005e5e:	e177      	b.n	8006150 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	3334      	adds	r3, #52	; 0x34
 8005e64:	330b      	adds	r3, #11
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe fcd8 	bl	800481c <ld_word>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e72:	d001      	beq.n	8005e78 <find_volume+0x1bc>
 8005e74:	230d      	movs	r3, #13
 8005e76:	e16b      	b.n	8006150 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	3334      	adds	r3, #52	; 0x34
 8005e7c:	3316      	adds	r3, #22
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fccc 	bl	800481c <ld_word>
 8005e84:	4603      	mov	r3, r0
 8005e86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <find_volume+0x1e0>
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	3334      	adds	r3, #52	; 0x34
 8005e92:	3324      	adds	r3, #36	; 0x24
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fe fcd9 	bl	800484c <ld_dword>
 8005e9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ea0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	789b      	ldrb	r3, [r3, #2]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d005      	beq.n	8005ec0 <find_volume+0x204>
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	789b      	ldrb	r3, [r3, #2]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d001      	beq.n	8005ec0 <find_volume+0x204>
 8005ebc:	230d      	movs	r3, #13
 8005ebe:	e147      	b.n	8006150 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	789b      	ldrb	r3, [r3, #2]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	fb02 f303 	mul.w	r3, r2, r3
 8005ecc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	895b      	ldrh	r3, [r3, #10]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <find_volume+0x238>
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	895b      	ldrh	r3, [r3, #10]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	895b      	ldrh	r3, [r3, #10]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <find_volume+0x23c>
 8005ef4:	230d      	movs	r3, #13
 8005ef6:	e12b      	b.n	8006150 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	3334      	adds	r3, #52	; 0x34
 8005efc:	3311      	adds	r3, #17
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe fc8c 	bl	800481c <ld_word>
 8005f04:	4603      	mov	r3, r0
 8005f06:	461a      	mov	r2, r3
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	891b      	ldrh	r3, [r3, #8]
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <find_volume+0x262>
 8005f1a:	230d      	movs	r3, #13
 8005f1c:	e118      	b.n	8006150 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	3334      	adds	r3, #52	; 0x34
 8005f22:	3313      	adds	r3, #19
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fc79 	bl	800481c <ld_word>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <find_volume+0x286>
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	3334      	adds	r3, #52	; 0x34
 8005f38:	3320      	adds	r3, #32
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fc86 	bl	800484c <ld_dword>
 8005f40:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	3334      	adds	r3, #52	; 0x34
 8005f46:	330e      	adds	r3, #14
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fc67 	bl	800481c <ld_word>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <find_volume+0x2a0>
 8005f58:	230d      	movs	r3, #13
 8005f5a:	e0f9      	b.n	8006150 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005f5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f60:	4413      	add	r3, r2
 8005f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f64:	8912      	ldrh	r2, [r2, #8]
 8005f66:	0912      	lsrs	r2, r2, #4
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d201      	bcs.n	8005f7a <find_volume+0x2be>
 8005f76:	230d      	movs	r3, #13
 8005f78:	e0ea      	b.n	8006150 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f82:	8952      	ldrh	r2, [r2, #10]
 8005f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <find_volume+0x2dc>
 8005f90:	230d      	movs	r3, #13
 8005f92:	e0dd      	b.n	8006150 <find_volume+0x494>
 8005f94:	20000368 	.word	0x20000368
		fmt = FS_FAT32;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d802      	bhi.n	8005fae <find_volume+0x2f2>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d802      	bhi.n	8005fbe <find_volume+0x302>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	1c9a      	adds	r2, r3, #2
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fca:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005fcc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd0:	441a      	add	r2, r3
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005fd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	441a      	add	r2, r3
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d11e      	bne.n	8006026 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	3334      	adds	r3, #52	; 0x34
 8005fec:	332a      	adds	r3, #42	; 0x2a
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fc14 	bl	800481c <ld_word>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <find_volume+0x342>
 8005ffa:	230d      	movs	r3, #13
 8005ffc:	e0a8      	b.n	8006150 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	891b      	ldrh	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <find_volume+0x34e>
 8006006:	230d      	movs	r3, #13
 8006008:	e0a2      	b.n	8006150 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	3334      	adds	r3, #52	; 0x34
 800600e:	332c      	adds	r3, #44	; 0x2c
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe fc1b 	bl	800484c <ld_dword>
 8006016:	4602      	mov	r2, r0
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	647b      	str	r3, [r7, #68]	; 0x44
 8006024:	e01f      	b.n	8006066 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	891b      	ldrh	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <find_volume+0x376>
 800602e:	230d      	movs	r3, #13
 8006030:	e08e      	b.n	8006150 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006038:	441a      	add	r2, r3
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800603e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006042:	2b02      	cmp	r3, #2
 8006044:	d103      	bne.n	800604e <find_volume+0x392>
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	e00a      	b.n	8006064 <find_volume+0x3a8>
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	4613      	mov	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	4413      	add	r3, r2
 8006058:	085a      	lsrs	r2, r3, #1
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	69da      	ldr	r2, [r3, #28]
 800606a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006070:	0a5b      	lsrs	r3, r3, #9
 8006072:	429a      	cmp	r2, r3
 8006074:	d201      	bcs.n	800607a <find_volume+0x3be>
 8006076:	230d      	movs	r3, #13
 8006078:	e06a      	b.n	8006150 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	f04f 32ff 	mov.w	r2, #4294967295
 8006080:	615a      	str	r2, [r3, #20]
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2280      	movs	r2, #128	; 0x80
 800608e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006094:	2b03      	cmp	r3, #3
 8006096:	d149      	bne.n	800612c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	3334      	adds	r3, #52	; 0x34
 800609c:	3330      	adds	r3, #48	; 0x30
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fbbc 	bl	800481c <ld_word>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d140      	bne.n	800612c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80060aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ac:	3301      	adds	r3, #1
 80060ae:	4619      	mov	r1, r3
 80060b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060b2:	f7fe fe95 	bl	8004de0 <move_window>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d137      	bne.n	800612c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	2200      	movs	r2, #0
 80060c0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	3334      	adds	r3, #52	; 0x34
 80060c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fba6 	bl	800481c <ld_word>
 80060d0:	4603      	mov	r3, r0
 80060d2:	461a      	mov	r2, r3
 80060d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060d8:	429a      	cmp	r2, r3
 80060da:	d127      	bne.n	800612c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	3334      	adds	r3, #52	; 0x34
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fbb3 	bl	800484c <ld_dword>
 80060e6:	4603      	mov	r3, r0
 80060e8:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <find_volume+0x49c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d11e      	bne.n	800612c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	3334      	adds	r3, #52	; 0x34
 80060f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fba8 	bl	800484c <ld_dword>
 80060fc:	4603      	mov	r3, r0
 80060fe:	4a17      	ldr	r2, [pc, #92]	; (800615c <find_volume+0x4a0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d113      	bne.n	800612c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	3334      	adds	r3, #52	; 0x34
 8006108:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fb9d 	bl	800484c <ld_dword>
 8006112:	4602      	mov	r2, r0
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	3334      	adds	r3, #52	; 0x34
 800611c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fb93 	bl	800484c <ld_dword>
 8006126:	4602      	mov	r2, r0
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006132:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <find_volume+0x4a4>)
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	4b08      	ldr	r3, [pc, #32]	; (8006160 <find_volume+0x4a4>)
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <find_volume+0x4a4>)
 8006142:	881a      	ldrh	r2, [r3, #0]
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006148:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800614a:	f7fe fde1 	bl	8004d10 <clear_lock>
#endif
	return FR_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3758      	adds	r7, #88	; 0x58
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	41615252 	.word	0x41615252
 800615c:	61417272 	.word	0x61417272
 8006160:	2000036c 	.word	0x2000036c

08006164 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800616e:	2309      	movs	r3, #9
 8006170:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d02e      	beq.n	80061d6 <validate+0x72>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d02a      	beq.n	80061d6 <validate+0x72>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d025      	beq.n	80061d6 <validate+0x72>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	889a      	ldrh	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	88db      	ldrh	r3, [r3, #6]
 8006194:	429a      	cmp	r2, r3
 8006196:	d11e      	bne.n	80061d6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe fc3d 	bl	8004a1c <lock_fs>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d014      	beq.n	80061d2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fa96 	bl	80046e0 <disk_status>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <validate+0x60>
				res = FR_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
 80061c2:	e008      	b.n	80061d6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fc3c 	bl	8004a48 <unlock_fs>
 80061d0:	e001      	b.n	80061d6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80061d2:	230f      	movs	r3, #15
 80061d4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <validate+0x7e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	e000      	b.n	80061e4 <validate+0x80>
 80061e2:	2300      	movs	r3, #0
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	6013      	str	r3, [r2, #0]
	return res;
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006206:	f107 0310 	add.w	r3, r7, #16
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fcbb 	bl	8005b86 <get_ldnumber>
 8006210:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	da01      	bge.n	800621c <f_mount+0x28>
 8006218:	230b      	movs	r3, #11
 800621a:	e048      	b.n	80062ae <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800621c:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <f_mount+0xc4>)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006224:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00f      	beq.n	800624c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800622c:	69b8      	ldr	r0, [r7, #24]
 800622e:	f7fe fd6f 	bl	8004d10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fd71 	bl	8006d1e <ff_del_syncobj>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <f_mount+0x52>
 8006242:	2302      	movs	r3, #2
 8006244:	e033      	b.n	80062ae <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2200      	movs	r2, #0
 800624a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00f      	beq.n	8006272 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	330c      	adds	r3, #12
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f000 fd3b 	bl	8006cde <ff_cre_syncobj>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <f_mount+0x7e>
 800626e:	2302      	movs	r3, #2
 8006270:	e01d      	b.n	80062ae <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4910      	ldr	r1, [pc, #64]	; (80062b8 <f_mount+0xc4>)
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <f_mount+0x94>
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d001      	beq.n	800628c <f_mount+0x98>
 8006288:	2300      	movs	r3, #0
 800628a:	e010      	b.n	80062ae <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800628c:	f107 010c 	add.w	r1, r7, #12
 8006290:	f107 0308 	add.w	r3, r7, #8
 8006294:	2200      	movs	r2, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fd10 	bl	8005cbc <find_volume>
 800629c:	4603      	mov	r3, r0
 800629e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	7dfa      	ldrb	r2, [r7, #23]
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fbce 	bl	8004a48 <unlock_fs>
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000368 	.word	0x20000368

080062bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b098      	sub	sp, #96	; 0x60
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	4613      	mov	r3, r2
 80062c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <f_open+0x18>
 80062d0:	2309      	movs	r3, #9
 80062d2:	e1b4      	b.n	800663e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80062dc:	79fa      	ldrb	r2, [r7, #7]
 80062de:	f107 0110 	add.w	r1, r7, #16
 80062e2:	f107 0308 	add.w	r3, r7, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fce8 	bl	8005cbc <find_volume>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80062f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f040 8191 	bne.w	800661e <f_open+0x362>
		dj.obj.fs = fs;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	f107 0314 	add.w	r3, r7, #20
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fbcb 	bl	8005aa4 <follow_path>
 800630e:	4603      	mov	r3, r0
 8006310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006318:	2b00      	cmp	r3, #0
 800631a:	d11a      	bne.n	8006352 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800631c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006320:	b25b      	sxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	da03      	bge.n	800632e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006326:	2306      	movs	r3, #6
 8006328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800632c:	e011      	b.n	8006352 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	461a      	mov	r2, r3
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fb9a 	bl	8004a80 <chk_lock>
 800634c:	4603      	mov	r3, r0
 800634e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	f003 031c 	and.w	r3, r3, #28
 8006358:	2b00      	cmp	r3, #0
 800635a:	d07f      	beq.n	800645c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800635c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006360:	2b00      	cmp	r3, #0
 8006362:	d017      	beq.n	8006394 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006368:	2b04      	cmp	r3, #4
 800636a:	d10e      	bne.n	800638a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800636c:	f7fe fbe4 	bl	8004b38 <enq_lock>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d006      	beq.n	8006384 <f_open+0xc8>
 8006376:	f107 0314 	add.w	r3, r7, #20
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff facb 	bl	8005916 <dir_register>
 8006380:	4603      	mov	r3, r0
 8006382:	e000      	b.n	8006386 <f_open+0xca>
 8006384:	2312      	movs	r3, #18
 8006386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	f043 0308 	orr.w	r3, r3, #8
 8006390:	71fb      	strb	r3, [r7, #7]
 8006392:	e010      	b.n	80063b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006394:	7ebb      	ldrb	r3, [r7, #26]
 8006396:	f003 0311 	and.w	r3, r3, #17
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <f_open+0xea>
					res = FR_DENIED;
 800639e:	2307      	movs	r3, #7
 80063a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80063a4:	e007      	b.n	80063b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <f_open+0xfa>
 80063b0:	2308      	movs	r3, #8
 80063b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80063b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d168      	bne.n	8006490 <f_open+0x1d4>
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d063      	beq.n	8006490 <f_open+0x1d4>
				dw = GET_FATTIME();
 80063c8:	f7fe f924 	bl	8004614 <get_fattime>
 80063cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	330e      	adds	r3, #14
 80063d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fa77 	bl	80048c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	3316      	adds	r3, #22
 80063de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe fa71 	bl	80048c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80063e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e8:	330b      	adds	r3, #11
 80063ea:	2220      	movs	r2, #32
 80063ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff f9fa 	bl	80057ee <ld_clust>
 80063fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006400:	2200      	movs	r2, #0
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fa12 	bl	800582c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	331c      	adds	r3, #28
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fa5a 	bl	80048c8 <st_dword>
					fs->wflag = 1;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2201      	movs	r2, #1
 8006418:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800641a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d037      	beq.n	8006490 <f_open+0x1d4>
						dw = fs->winsect;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006426:	f107 0314 	add.w	r3, r7, #20
 800642a:	2200      	movs	r2, #0
 800642c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe ff25 	bl	800527e <remove_chain>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800643a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800643e:	2b00      	cmp	r3, #0
 8006440:	d126      	bne.n	8006490 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fcca 	bl	8004de0 <move_window>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006456:	3a01      	subs	r2, #1
 8006458:	611a      	str	r2, [r3, #16]
 800645a:	e019      	b.n	8006490 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800645c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006460:	2b00      	cmp	r3, #0
 8006462:	d115      	bne.n	8006490 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006464:	7ebb      	ldrb	r3, [r7, #26]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <f_open+0x1ba>
					res = FR_NO_FILE;
 800646e:	2304      	movs	r3, #4
 8006470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006474:	e00c      	b.n	8006490 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <f_open+0x1d4>
 8006480:	7ebb      	ldrb	r3, [r7, #26]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <f_open+0x1d4>
						res = FR_DENIED;
 800648a:	2307      	movs	r3, #7
 800648c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006494:	2b00      	cmp	r3, #0
 8006496:	d128      	bne.n	80064ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80064b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bf14      	ite	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	2300      	moveq	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	f107 0314 	add.w	r3, r7, #20
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe fb53 	bl	8004b7c <inc_lock>
 80064d6:	4602      	mov	r2, r0
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d102      	bne.n	80064ea <f_open+0x22e>
 80064e4:	2302      	movs	r3, #2
 80064e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80064ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 8095 	bne.w	800661e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f8:	4611      	mov	r1, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff f977 	bl	80057ee <ld_clust>
 8006500:	4602      	mov	r2, r0
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006508:	331c      	adds	r3, #28
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe f99e 	bl	800484c <ld_dword>
 8006510:	4602      	mov	r2, r0
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	88da      	ldrh	r2, [r3, #6]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	79fa      	ldrb	r2, [r7, #7]
 800652e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3330      	adds	r3, #48	; 0x30
 8006546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe fa08 	bl	8004962 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d060      	beq.n	800661e <f_open+0x362>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d05c      	beq.n	800661e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	895b      	ldrh	r3, [r3, #10]
 8006570:	025b      	lsls	r3, r3, #9
 8006572:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	657b      	str	r3, [r7, #84]	; 0x54
 8006580:	e016      	b.n	80065b0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fce5 	bl	8004f56 <get_fat>
 800658c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800658e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006590:	2b01      	cmp	r3, #1
 8006592:	d802      	bhi.n	800659a <f_open+0x2de>
 8006594:	2302      	movs	r3, #2
 8006596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800659a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d102      	bne.n	80065a8 <f_open+0x2ec>
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80065a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	657b      	str	r3, [r7, #84]	; 0x54
 80065b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d103      	bne.n	80065c0 <f_open+0x304>
 80065b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065bc:	429a      	cmp	r2, r3
 80065be:	d8e0      	bhi.n	8006582 <f_open+0x2c6>
				}
				fp->clust = clst;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80065c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d127      	bne.n	800661e <f_open+0x362>
 80065ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d022      	beq.n	800661e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe fc9b 	bl	8004f18 <clust2sect>
 80065e2:	6478      	str	r0, [r7, #68]	; 0x44
 80065e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <f_open+0x336>
						res = FR_INT_ERR;
 80065ea:	2302      	movs	r3, #2
 80065ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80065f0:	e015      	b.n	800661e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80065f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f4:	0a5a      	lsrs	r2, r3, #9
 80065f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f8:	441a      	add	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	7858      	ldrb	r0, [r3, #1]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	2301      	movs	r3, #1
 800660e:	f7fe f8a7 	bl	8004760 <disk_read>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <f_open+0x362>
 8006618:	2301      	movs	r3, #1
 800661a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800661e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <f_open+0x370>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fa07 	bl	8004a48 <unlock_fs>
 800663a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800663e:	4618      	mov	r0, r3
 8006640:	3760      	adds	r7, #96	; 0x60
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b08c      	sub	sp, #48	; 0x30
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f107 0210 	add.w	r2, r7, #16
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fd7c 	bl	8006164 <validate>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <f_write+0x44>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	7d5b      	ldrb	r3, [r3, #21]
 800667e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <f_write+0x58>
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe f9d8 	bl	8004a48 <unlock_fs>
 8006698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800669c:	e173      	b.n	8006986 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	7d1b      	ldrb	r3, [r3, #20]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <f_write+0x72>
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2107      	movs	r1, #7
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe f9ca 	bl	8004a48 <unlock_fs>
 80066b4:	2307      	movs	r3, #7
 80066b6:	e166      	b.n	8006986 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	441a      	add	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	f080 814b 	bcs.w	8006960 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	43db      	mvns	r3, r3
 80066d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80066d2:	e145      	b.n	8006960 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f040 8101 	bne.w	80068e4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	0a5b      	lsrs	r3, r3, #9
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	8952      	ldrh	r2, [r2, #10]
 80066ec:	3a01      	subs	r2, #1
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d14d      	bne.n	8006794 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11a      	bne.n	8006742 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2100      	movs	r1, #0
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe fe19 	bl	8005348 <create_chain>
 8006716:	62b8      	str	r0, [r7, #40]	; 0x28
 8006718:	e013      	b.n	8006742 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	4619      	mov	r1, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7fe fea5 	bl	8005478 <clmt_clust>
 800672e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006730:	e007      	b.n	8006742 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f7fe fe04 	bl	8005348 <create_chain>
 8006740:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8110 	beq.w	800696a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	2b01      	cmp	r3, #1
 800674e:	d109      	bne.n	8006764 <f_write+0x11e>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2202      	movs	r2, #2
 8006754:	755a      	strb	r2, [r3, #21]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2102      	movs	r1, #2
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe f974 	bl	8004a48 <unlock_fs>
 8006760:	2302      	movs	r3, #2
 8006762:	e110      	b.n	8006986 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d109      	bne.n	8006780 <f_write+0x13a>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	755a      	strb	r2, [r3, #21]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2101      	movs	r1, #1
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe f966 	bl	8004a48 <unlock_fs>
 800677c:	2301      	movs	r3, #1
 800677e:	e102      	b.n	8006986 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006784:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d102      	bne.n	8006794 <f_write+0x14e>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006792:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	7d1b      	ldrb	r3, [r3, #20]
 8006798:	b25b      	sxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	da1d      	bge.n	80067da <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	7858      	ldrb	r0, [r3, #1]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1a      	ldr	r2, [r3, #32]
 80067ac:	2301      	movs	r3, #1
 80067ae:	f7fd fff7 	bl	80047a0 <disk_write>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d009      	beq.n	80067cc <f_write+0x186>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	755a      	strb	r2, [r3, #21]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2101      	movs	r1, #1
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe f940 	bl	8004a48 <unlock_fs>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e0dc      	b.n	8006986 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7d1b      	ldrb	r3, [r3, #20]
 80067d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f7fe fb98 	bl	8004f18 <clust2sect>
 80067e8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <f_write+0x1be>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2202      	movs	r2, #2
 80067f4:	755a      	strb	r2, [r3, #21]
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2102      	movs	r1, #2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe f924 	bl	8004a48 <unlock_fs>
 8006800:	2302      	movs	r3, #2
 8006802:	e0c0      	b.n	8006986 <f_write+0x340>
			sect += csect;
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	4413      	add	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	0a5b      	lsrs	r3, r3, #9
 8006810:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d041      	beq.n	800689c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	4413      	add	r3, r2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	8952      	ldrh	r2, [r2, #10]
 8006822:	4293      	cmp	r3, r2
 8006824:	d905      	bls.n	8006832 <f_write+0x1ec>
					cc = fs->csize - csect;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	895b      	ldrh	r3, [r3, #10]
 800682a:	461a      	mov	r2, r3
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	7858      	ldrb	r0, [r3, #1]
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	69f9      	ldr	r1, [r7, #28]
 800683c:	f7fd ffb0 	bl	80047a0 <disk_write>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <f_write+0x214>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	755a      	strb	r2, [r3, #21]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2101      	movs	r1, #1
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f8f9 	bl	8004a48 <unlock_fs>
 8006856:	2301      	movs	r3, #1
 8006858:	e095      	b.n	8006986 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1a      	ldr	r2, [r3, #32]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	6a3a      	ldr	r2, [r7, #32]
 8006864:	429a      	cmp	r2, r3
 8006866:	d915      	bls.n	8006894 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	025b      	lsls	r3, r3, #9
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006880:	4619      	mov	r1, r3
 8006882:	f7fe f84d 	bl	8004920 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	7d1b      	ldrb	r3, [r3, #20]
 800688a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688e:	b2da      	uxtb	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	025b      	lsls	r3, r3, #9
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800689a:	e044      	b.n	8006926 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d01b      	beq.n	80068de <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d215      	bcs.n	80068de <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	7858      	ldrb	r0, [r3, #1]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068bc:	2301      	movs	r3, #1
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	f7fd ff4e 	bl	8004760 <disk_read>
 80068c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	755a      	strb	r2, [r3, #21]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2101      	movs	r1, #1
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe f8b7 	bl	8004a48 <unlock_fs>
 80068da:	2301      	movs	r3, #1
 80068dc:	e053      	b.n	8006986 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80068f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d901      	bls.n	80068fe <f_write+0x2b8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690c:	4413      	add	r3, r2
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	69f9      	ldr	r1, [r7, #28]
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe f804 	bl	8004920 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	7d1b      	ldrb	r3, [r3, #20]
 800691c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006920:	b2da      	uxtb	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	4413      	add	r3, r2
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	441a      	add	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	619a      	str	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	429a      	cmp	r2, r3
 8006944:	bf38      	it	cc
 8006946:	461a      	movcc	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	60da      	str	r2, [r3, #12]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	441a      	add	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f47f aeb6 	bne.w	80066d4 <f_write+0x8e>
 8006968:	e000      	b.n	800696c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800696a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	7d1b      	ldrb	r3, [r3, #20]
 8006970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006974:	b2da      	uxtb	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe f862 	bl	8004a48 <unlock_fs>
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3730      	adds	r7, #48	; 0x30
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f107 0208 	add.w	r2, r7, #8
 800699c:	4611      	mov	r1, r2
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fbe0 	bl	8006164 <validate>
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d16d      	bne.n	8006a8a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	7d1b      	ldrb	r3, [r3, #20]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d067      	beq.n	8006a8a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7d1b      	ldrb	r3, [r3, #20]
 80069be:	b25b      	sxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da1a      	bge.n	80069fa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	7858      	ldrb	r0, [r3, #1]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	2301      	movs	r3, #1
 80069d4:	f7fd fee4 	bl	80047a0 <disk_write>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d006      	beq.n	80069ec <f_sync+0x5e>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2101      	movs	r1, #1
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe f830 	bl	8004a48 <unlock_fs>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e055      	b.n	8006a98 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	7d1b      	ldrb	r3, [r3, #20]
 80069f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80069fa:	f7fd fe0b 	bl	8004614 <get_fattime>
 80069fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7fe f9e9 	bl	8004de0 <move_window>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d138      	bne.n	8006a8a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	330b      	adds	r3, #11
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	330b      	adds	r3, #11
 8006a28:	f042 0220 	orr.w	r2, r2, #32
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68f9      	ldr	r1, [r7, #12]
 8006a3c:	f7fe fef6 	bl	800582c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f103 021c 	add.w	r2, r3, #28
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f7fd ff3b 	bl	80048c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3316      	adds	r3, #22
 8006a56:	6939      	ldr	r1, [r7, #16]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fd ff35 	bl	80048c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3312      	adds	r3, #18
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fd ff14 	bl	8004892 <st_word>
					fs->wflag = 1;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe f9e2 	bl	8004e3c <sync_fs>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7d1b      	ldrb	r3, [r3, #20]
 8006a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	7dfa      	ldrb	r2, [r7, #23]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fd ffd9 	bl	8004a48 <unlock_fs>
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff ff70 	bl	800698e <f_sync>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d11d      	bne.n	8006af4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f107 0208 	add.w	r2, r7, #8
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fb4f 	bl	8006164 <validate>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d111      	bne.n	8006af4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fe f8df 	bl	8004c98 <dec_lock>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fd ffaa 	bl	8004a48 <unlock_fs>
#endif
		}
	}
	return res;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	db25      	blt.n	8006b62 <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	60fa      	str	r2, [r7, #12]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4413      	add	r3, r2
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b3c      	cmp	r3, #60	; 0x3c
 8006b28:	dd12      	ble.n	8006b50 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f103 010c 	add.w	r1, r3, #12
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	f107 0308 	add.w	r3, r7, #8
 8006b3a:	f7ff fd84 	bl	8006646 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d101      	bne.n	8006b4a <putc_bfd+0x4c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	e001      	b.n	8006b4e <putc_bfd+0x50>
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
 8006b60:	e000      	b.n	8006b64 <putc_bfd+0x66>
	if (i < 0) return;
 8006b62:	bf00      	nop
}
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	db16      	blt.n	8006ba8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f103 010c 	add.w	r1, r3, #12
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f107 030c 	add.w	r3, r7, #12
 8006b8e:	f7ff fd5a 	bl	8006646 <f_write>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d107      	bne.n	8006ba8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d102      	bne.n	8006ba8 <putc_flush+0x3e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	e001      	b.n	8006bac <putc_flush+0x42>
	return EOF;
 8006ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	609a      	str	r2, [r3, #8]
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b096      	sub	sp, #88	; 0x58
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006be8:	f107 030c 	add.w	r3, r7, #12
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff ffe0 	bl	8006bb4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006bf4:	e009      	b.n	8006c0a <f_puts+0x2c>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	f107 030c 	add.w	r3, r7, #12
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff ff7a 	bl	8006afe <putc_bfd>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f1      	bne.n	8006bf6 <f_puts+0x18>
	return putc_flush(&pb);
 8006c12:	f107 030c 	add.w	r3, r7, #12
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff ffa7 	bl	8006b6a <putc_flush>
 8006c1c:	4603      	mov	r3, r0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3758      	adds	r7, #88	; 0x58
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c40:	7a5b      	ldrb	r3, [r3, #9]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d131      	bne.n	8006cac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c4a:	7a5b      	ldrb	r3, [r3, #9]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c52:	2100      	movs	r1, #0
 8006c54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006c56:	4b19      	ldr	r3, [pc, #100]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c58:	7a5b      	ldrb	r3, [r3, #9]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	4a17      	ldr	r2, [pc, #92]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006c66:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c68:	7a5b      	ldrb	r3, [r3, #9]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c70:	4413      	add	r3, r2
 8006c72:	79fa      	ldrb	r2, [r7, #7]
 8006c74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006c76:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c78:	7a5b      	ldrb	r3, [r3, #9]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	b2d1      	uxtb	r1, r2
 8006c80:	4a0e      	ldr	r2, [pc, #56]	; (8006cbc <FATFS_LinkDriverEx+0x94>)
 8006c82:	7251      	strb	r1, [r2, #9]
 8006c84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006c86:	7dbb      	ldrb	r3, [r7, #22]
 8006c88:	3330      	adds	r3, #48	; 0x30
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3301      	adds	r3, #1
 8006c94:	223a      	movs	r2, #58	; 0x3a
 8006c96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	3302      	adds	r3, #2
 8006c9c:	222f      	movs	r2, #47	; 0x2f
 8006c9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	3303      	adds	r3, #3
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000390 	.word	0x20000390

08006cc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006cca:	2200      	movs	r2, #0
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff ffaa 	bl	8006c28 <FATFS_LinkDriverEx>
 8006cd4:	4603      	mov	r3, r0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	6039      	str	r1, [r7, #0]
 8006ce8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006cf2:	f107 030c 	add.w	r3, r7, #12
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 f8cd 	bl	8006e98 <osSemaphoreCreate>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	617b      	str	r3, [r7, #20]

    return ret;
 8006d14:	697b      	ldr	r3, [r7, #20]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f96c 	bl	8007004 <osSemaphoreDelete>
#endif
    return 1;
 8006d2c:	2301      	movs	r3, #1
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8006d42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f8d8 	bl	8006efc <osSemaphoreWait>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8006d52:	2301      	movs	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006d56:	68fb      	ldr	r3, [r7, #12]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f915 	bl	8006f98 <osSemaphoreRelease>
#endif
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d88:	2b84      	cmp	r3, #132	; 0x84
 8006d8a:	d005      	beq.n	8006d98 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006d8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	3303      	adds	r3, #3
 8006d96:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dac:	f3ef 8305 	mrs	r3, IPSR
 8006db0:	607b      	str	r3, [r7, #4]
  return(result);
 8006db2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bf14      	ite	ne
 8006db8:	2301      	movne	r3, #1
 8006dba:	2300      	moveq	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006dce:	f001 f999 	bl	8008104 <vTaskStartScheduler>
  
  return osOK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	b089      	sub	sp, #36	; 0x24
 8006ddc:	af04      	add	r7, sp, #16
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d020      	beq.n	8006e2c <osThreadCreate+0x54>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01c      	beq.n	8006e2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685c      	ldr	r4, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681d      	ldr	r5, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691e      	ldr	r6, [r3, #16]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff ffb6 	bl	8006d76 <makeFreeRtosPriority>
 8006e0a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e14:	9202      	str	r2, [sp, #8]
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	9100      	str	r1, [sp, #0]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 ffa7 	bl	8007d74 <xTaskCreateStatic>
 8006e26:	4603      	mov	r3, r0
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e01c      	b.n	8006e66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685c      	ldr	r4, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e38:	b29e      	uxth	r6, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff98 	bl	8006d76 <makeFreeRtosPriority>
 8006e46:	4602      	mov	r2, r0
 8006e48:	f107 030c 	add.w	r3, r7, #12
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	9200      	str	r2, [sp, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4632      	mov	r2, r6
 8006e54:	4629      	mov	r1, r5
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 ffe9 	bl	8007e2e <xTaskCreate>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d001      	beq.n	8006e66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e000      	b.n	8006e68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e66:	68fb      	ldr	r3, [r7, #12]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <osDelay+0x16>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	e000      	b.n	8006e88 <osDelay+0x18>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 f907 	bl	800809c <vTaskDelay>
  
  return osOK;
 8006e8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00f      	beq.n	8006eca <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d10a      	bne.n	8006ec6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	9200      	str	r2, [sp, #0]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2100      	movs	r1, #0
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	f000 f9f9 	bl	80072b4 <xQueueGenericCreateStatic>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	e016      	b.n	8006ef4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e014      	b.n	8006ef4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d110      	bne.n	8006ef2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	f000 fa65 	bl	80073a4 <xQueueGenericCreate>
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <osSemaphoreCreate+0x56>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fab5 	bl	8007458 <xQueueGenericSend>
      return sema;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	e000      	b.n	8006ef4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006ef2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006f10:	2380      	movs	r3, #128	; 0x80
 8006f12:	e03a      	b.n	8006f8a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d103      	bne.n	8006f28 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	e009      	b.n	8006f3c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d006      	beq.n	8006f3c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <osSemaphoreWait+0x40>
      ticks = 1;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006f3c:	f7ff ff33 	bl	8006da6 <inHandlerMode>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d017      	beq.n	8006f76 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fd1a 	bl	8007988 <xQueueReceiveFromISR>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d001      	beq.n	8006f5e <osSemaphoreWait+0x62>
      return osErrorOS;
 8006f5a:	23ff      	movs	r3, #255	; 0xff
 8006f5c:	e015      	b.n	8006f8a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d011      	beq.n	8006f88 <osSemaphoreWait+0x8c>
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <osSemaphoreWait+0x98>)
 8006f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	e008      	b.n	8006f88 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fbf9 	bl	8007770 <xQueueSemaphoreTake>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d001      	beq.n	8006f88 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006f84:	23ff      	movs	r3, #255	; 0xff
 8006f86:	e000      	b.n	8006f8a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	e000ed04 	.word	0xe000ed04

08006f98 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006fa8:	f7ff fefd 	bl	8006da6 <inHandlerMode>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006fb2:	f107 0308 	add.w	r3, r7, #8
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fb4b 	bl	8007654 <xQueueGiveFromISR>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d001      	beq.n	8006fc8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006fc4:	23ff      	movs	r3, #255	; 0xff
 8006fc6:	e017      	b.n	8006ff8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d013      	beq.n	8006ff6 <osSemaphoreRelease+0x5e>
 8006fce:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <osSemaphoreRelease+0x68>)
 8006fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	e00a      	b.n	8006ff6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa36 	bl	8007458 <xQueueGenericSend>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d001      	beq.n	8006ff6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006ff2:	23ff      	movs	r3, #255	; 0xff
 8006ff4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800700c:	f7ff fecb 	bl	8006da6 <inHandlerMode>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007016:	2382      	movs	r3, #130	; 0x82
 8007018:	e003      	b.n	8007022 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fd34 	bl	8007a88 <vQueueDelete>

  return osOK; 
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800702a:	b590      	push	{r4, r7, lr}
 800702c:	b085      	sub	sp, #20
 800702e:	af02      	add	r7, sp, #8
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d011      	beq.n	8007060 <osMessageCreate+0x36>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6859      	ldr	r1, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2400      	movs	r4, #0
 8007056:	9400      	str	r4, [sp, #0]
 8007058:	f000 f92c 	bl	80072b4 <xQueueGenericCreateStatic>
 800705c:	4603      	mov	r3, r0
 800705e:	e008      	b.n	8007072 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	4619      	mov	r1, r3
 800706c:	f000 f99a 	bl	80073a4 <xQueueGenericCreate>
 8007070:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	bd90      	pop	{r4, r7, pc}

0800707a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f103 0208 	add.w	r2, r3, #8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f04f 32ff 	mov.w	r2, #4294967295
 8007092:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f103 0208 	add.w	r2, r3, #8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f103 0208 	add.w	r2, r3, #8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	601a      	str	r2, [r3, #0]
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d103      	bne.n	800713c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e00c      	b.n	8007156 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3308      	adds	r3, #8
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e002      	b.n	800714a <vListInsert+0x2e>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	429a      	cmp	r2, r3
 8007154:	d2f6      	bcs.n	8007144 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	601a      	str	r2, [r3, #0]
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6892      	ldr	r2, [r2, #8]
 80071a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6852      	ldr	r2, [r2, #4]
 80071ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d103      	bne.n	80071c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	1e5a      	subs	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800720e:	f001 fec9 	bl	8008fa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	441a      	add	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	3b01      	subs	r3, #1
 8007240:	68f9      	ldr	r1, [r7, #12]
 8007242:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	441a      	add	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	22ff      	movs	r2, #255	; 0xff
 8007252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	22ff      	movs	r2, #255	; 0xff
 800725a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d114      	bne.n	800728e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01a      	beq.n	80072a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3310      	adds	r3, #16
 8007270:	4618      	mov	r0, r3
 8007272:	f001 f989 	bl	8008588 <xTaskRemoveFromEventList>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d012      	beq.n	80072a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800727c:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <xQueueGenericReset+0xcc>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	e009      	b.n	80072a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3310      	adds	r3, #16
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff fef1 	bl	800707a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3324      	adds	r3, #36	; 0x24
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff feec 	bl	800707a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072a2:	f001 feaf 	bl	8009004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072a6:	2301      	movs	r3, #1
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	e000ed04 	.word	0xe000ed04

080072b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08e      	sub	sp, #56	; 0x38
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072da:	bf00      	nop
 80072dc:	e7fe      	b.n	80072dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <xQueueGenericCreateStatic+0x52>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <xQueueGenericCreateStatic+0x56>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <xQueueGenericCreateStatic+0x58>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	623b      	str	r3, [r7, #32]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <xQueueGenericCreateStatic+0x7e>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <xQueueGenericCreateStatic+0x82>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <xQueueGenericCreateStatic+0x84>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	61fb      	str	r3, [r7, #28]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007352:	2348      	movs	r3, #72	; 0x48
 8007354:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b48      	cmp	r3, #72	; 0x48
 800735a:	d00a      	beq.n	8007372 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	61bb      	str	r3, [r7, #24]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007372:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00d      	beq.n	800739a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007386:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f83f 	bl	8007418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800739c:	4618      	mov	r0, r3
 800739e:	3730      	adds	r7, #48	; 0x30
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08a      	sub	sp, #40	; 0x28
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	613b      	str	r3, [r7, #16]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	fb02 f303 	mul.w	r3, r2, r3
 80073d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	3348      	adds	r3, #72	; 0x48
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 ff03 	bl	80091e8 <pvPortMalloc>
 80073e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d011      	beq.n	800740e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	3348      	adds	r3, #72	; 0x48
 80073f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073fc:	79fa      	ldrb	r2, [r7, #7]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	4613      	mov	r3, r2
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f805 	bl	8007418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800740e:	69bb      	ldr	r3, [r7, #24]
	}
 8007410:	4618      	mov	r0, r3
 8007412:	3720      	adds	r7, #32
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e002      	b.n	800743a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007446:	2101      	movs	r1, #1
 8007448:	69b8      	ldr	r0, [r7, #24]
 800744a:	f7ff fecb 	bl	80071e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08e      	sub	sp, #56	; 0x38
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007466:	2300      	movs	r3, #0
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xQueueGenericSend+0x32>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <xQueueGenericSend+0x40>
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <xQueueGenericSend+0x44>
 8007498:	2301      	movs	r3, #1
 800749a:	e000      	b.n	800749e <xQueueGenericSend+0x46>
 800749c:	2300      	movs	r3, #0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <xQueueGenericSend+0x60>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d103      	bne.n	80074c6 <xQueueGenericSend+0x6e>
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <xQueueGenericSend+0x72>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueGenericSend+0x74>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	623b      	str	r3, [r7, #32]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074e6:	f001 fa0b 	bl	8008900 <xTaskGetSchedulerState>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <xQueueGenericSend+0x9e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <xQueueGenericSend+0xa2>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <xQueueGenericSend+0xa4>
 80074fa:	2300      	movs	r3, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <xQueueGenericSend+0xbe>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	61fb      	str	r3, [r7, #28]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007516:	f001 fd45 	bl	8008fa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007522:	429a      	cmp	r2, r3
 8007524:	d302      	bcc.n	800752c <xQueueGenericSend+0xd4>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d129      	bne.n	8007580 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007532:	f000 fae4 	bl	8007afe <prvCopyDataToQueue>
 8007536:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b00      	cmp	r3, #0
 800753e:	d010      	beq.n	8007562 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	3324      	adds	r3, #36	; 0x24
 8007544:	4618      	mov	r0, r3
 8007546:	f001 f81f 	bl	8008588 <xTaskRemoveFromEventList>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d013      	beq.n	8007578 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007550:	4b3f      	ldr	r3, [pc, #252]	; (8007650 <xQueueGenericSend+0x1f8>)
 8007552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	e00a      	b.n	8007578 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007568:	4b39      	ldr	r3, [pc, #228]	; (8007650 <xQueueGenericSend+0x1f8>)
 800756a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007578:	f001 fd44 	bl	8009004 <vPortExitCritical>
				return pdPASS;
 800757c:	2301      	movs	r3, #1
 800757e:	e063      	b.n	8007648 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007586:	f001 fd3d 	bl	8009004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800758a:	2300      	movs	r3, #0
 800758c:	e05c      	b.n	8007648 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007594:	f107 0314 	add.w	r3, r7, #20
 8007598:	4618      	mov	r0, r3
 800759a:	f001 f857 	bl	800864c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800759e:	2301      	movs	r3, #1
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075a2:	f001 fd2f 	bl	8009004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075a6:	f000 fe0d 	bl	80081c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075aa:	f001 fcfb 	bl	8008fa4 <vPortEnterCritical>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075b4:	b25b      	sxtb	r3, r3
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ba:	d103      	bne.n	80075c4 <xQueueGenericSend+0x16c>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ca:	b25b      	sxtb	r3, r3
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d103      	bne.n	80075da <xQueueGenericSend+0x182>
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075da:	f001 fd13 	bl	8009004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075de:	1d3a      	adds	r2, r7, #4
 80075e0:	f107 0314 	add.w	r3, r7, #20
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f846 	bl	8008678 <xTaskCheckForTimeOut>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d124      	bne.n	800763c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f4:	f000 fb7b 	bl	8007cee <prvIsQueueFull>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d018      	beq.n	8007630 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	3310      	adds	r3, #16
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	4611      	mov	r1, r2
 8007606:	4618      	mov	r0, r3
 8007608:	f000 ff9a 	bl	8008540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800760c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800760e:	f000 fb06 	bl	8007c1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007612:	f000 fde5 	bl	80081e0 <xTaskResumeAll>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	f47f af7c 	bne.w	8007516 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <xQueueGenericSend+0x1f8>)
 8007620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	e772      	b.n	8007516 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007632:	f000 faf4 	bl	8007c1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007636:	f000 fdd3 	bl	80081e0 <xTaskResumeAll>
 800763a:	e76c      	b.n	8007516 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800763c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800763e:	f000 faee 	bl	8007c1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007642:	f000 fdcd 	bl	80081e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007646:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007648:	4618      	mov	r0, r3
 800764a:	3738      	adds	r7, #56	; 0x38
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	e000ed04 	.word	0xe000ed04

08007654 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08e      	sub	sp, #56	; 0x38
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	623b      	str	r3, [r7, #32]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <xQueueGiveFromISR+0x48>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	61fb      	str	r3, [r7, #28]
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d103      	bne.n	80076ac <xQueueGiveFromISR+0x58>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <xQueueGiveFromISR+0x5c>
 80076ac:	2301      	movs	r3, #1
 80076ae:	e000      	b.n	80076b2 <xQueueGiveFromISR+0x5e>
 80076b0:	2300      	movs	r3, #0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <xQueueGiveFromISR+0x78>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	61bb      	str	r3, [r7, #24]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076cc:	f001 fd4c 	bl	8009168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076d0:	f3ef 8211 	mrs	r2, BASEPRI
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	617a      	str	r2, [r7, #20]
 80076e6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076e8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d22b      	bcs.n	8007754 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800770e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	d112      	bne.n	800773e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	2b00      	cmp	r3, #0
 800771e:	d016      	beq.n	800774e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	3324      	adds	r3, #36	; 0x24
 8007724:	4618      	mov	r0, r3
 8007726:	f000 ff2f 	bl	8008588 <xTaskRemoveFromEventList>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00e      	beq.n	800774e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2201      	movs	r2, #1
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e007      	b.n	800774e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800773e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007742:	3301      	adds	r3, #1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	b25a      	sxtb	r2, r3
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800774e:	2301      	movs	r3, #1
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
 8007752:	e001      	b.n	8007758 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007754:	2300      	movs	r3, #0
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007762:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007766:	4618      	mov	r0, r3
 8007768:	3738      	adds	r7, #56	; 0x38
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08e      	sub	sp, #56	; 0x38
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800777a:	2300      	movs	r3, #0
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	623b      	str	r3, [r7, #32]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	61fb      	str	r3, [r7, #28]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077c0:	f001 f89e 	bl	8008900 <xTaskGetSchedulerState>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <xQueueSemaphoreTake+0x60>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <xQueueSemaphoreTake+0x64>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <xQueueSemaphoreTake+0x66>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61bb      	str	r3, [r7, #24]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077f0:	f001 fbd8 	bl	8008fa4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d024      	beq.n	800784a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	1e5a      	subs	r2, r3, #1
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007810:	f001 fa1e 	bl	8008c50 <pvTaskIncrementMutexHeldCount>
 8007814:	4602      	mov	r2, r0
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800781a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00f      	beq.n	8007842 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	3310      	adds	r3, #16
 8007826:	4618      	mov	r0, r3
 8007828:	f000 feae 	bl	8008588 <xTaskRemoveFromEventList>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007832:	4b54      	ldr	r3, [pc, #336]	; (8007984 <xQueueSemaphoreTake+0x214>)
 8007834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007842:	f001 fbdf 	bl	8009004 <vPortExitCritical>
				return pdPASS;
 8007846:	2301      	movs	r3, #1
 8007848:	e097      	b.n	800797a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d111      	bne.n	8007874 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	617b      	str	r3, [r7, #20]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800786c:	f001 fbca 	bl	8009004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007870:	2300      	movs	r3, #0
 8007872:	e082      	b.n	800797a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800787a:	f107 030c 	add.w	r3, r7, #12
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fee4 	bl	800864c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007884:	2301      	movs	r3, #1
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007888:	f001 fbbc 	bl	8009004 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800788c:	f000 fc9a 	bl	80081c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007890:	f001 fb88 	bl	8008fa4 <vPortEnterCritical>
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800789a:	b25b      	sxtb	r3, r3
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d103      	bne.n	80078aa <xQueueSemaphoreTake+0x13a>
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078b0:	b25b      	sxtb	r3, r3
 80078b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b6:	d103      	bne.n	80078c0 <xQueueSemaphoreTake+0x150>
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078c0:	f001 fba0 	bl	8009004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078c4:	463a      	mov	r2, r7
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fed3 	bl	8008678 <xTaskCheckForTimeOut>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d132      	bne.n	800793e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078da:	f000 f9f2 	bl	8007cc2 <prvIsQueueEmpty>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d026      	beq.n	8007932 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d109      	bne.n	8007900 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80078ec:	f001 fb5a 	bl	8008fa4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f821 	bl	800893c <xTaskPriorityInherit>
 80078fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078fc:	f001 fb82 	bl	8009004 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fe19 	bl	8008540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800790e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007910:	f000 f985 	bl	8007c1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007914:	f000 fc64 	bl	80081e0 <xTaskResumeAll>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	f47f af68 	bne.w	80077f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007920:	4b18      	ldr	r3, [pc, #96]	; (8007984 <xQueueSemaphoreTake+0x214>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	e75e      	b.n	80077f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007934:	f000 f973 	bl	8007c1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007938:	f000 fc52 	bl	80081e0 <xTaskResumeAll>
 800793c:	e758      	b.n	80077f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800793e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007940:	f000 f96d 	bl	8007c1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007944:	f000 fc4c 	bl	80081e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800794a:	f000 f9ba 	bl	8007cc2 <prvIsQueueEmpty>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f43f af4d 	beq.w	80077f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00d      	beq.n	8007978 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800795c:	f001 fb22 	bl	8008fa4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007962:	f000 f8b4 	bl	8007ace <prvGetDisinheritPriorityAfterTimeout>
 8007966:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800796e:	4618      	mov	r0, r3
 8007970:	f001 f8e0 	bl	8008b34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007974:	f001 fb46 	bl	8009004 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007978:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800797a:	4618      	mov	r0, r3
 800797c:	3738      	adds	r7, #56	; 0x38
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08e      	sub	sp, #56	; 0x38
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	623b      	str	r3, [r7, #32]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d103      	bne.n	80079c2 <xQueueReceiveFromISR+0x3a>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <xQueueReceiveFromISR+0x3e>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <xQueueReceiveFromISR+0x40>
 80079c6:	2300      	movs	r3, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	61fb      	str	r3, [r7, #28]
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079e2:	f001 fbc1 	bl	8009168 <vPortValidateInterruptPriority>
	__asm volatile
 80079e6:	f3ef 8211 	mrs	r2, BASEPRI
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	61ba      	str	r2, [r7, #24]
 80079fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d02f      	beq.n	8007a6e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a1c:	f000 f8d9 	bl	8007bd2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	1e5a      	subs	r2, r3, #1
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d112      	bne.n	8007a58 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d016      	beq.n	8007a68 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	3310      	adds	r3, #16
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fda2 	bl	8008588 <xTaskRemoveFromEventList>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	e007      	b.n	8007a68 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	b25a      	sxtb	r2, r3
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6c:	e001      	b.n	8007a72 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f383 8811 	msr	BASEPRI, r3
}
 8007a7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3738      	adds	r7, #56	; 0x38
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10a      	bne.n	8007ab0 <vQueueDelete+0x28>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	60bb      	str	r3, [r7, #8]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f935 	bl	8007d20 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f001 fc5d 	bl	8009380 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d006      	beq.n	8007aec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f1c3 0307 	rsb	r3, r3, #7
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	e001      	b.n	8007af0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007af0:	68fb      	ldr	r3, [r7, #12]
	}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10d      	bne.n	8007b38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d14d      	bne.n	8007bc0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 ff7d 	bl	8008a28 <xTaskPriorityDisinherit>
 8007b2e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	609a      	str	r2, [r3, #8]
 8007b36:	e043      	b.n	8007bc0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d119      	bne.n	8007b72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6858      	ldr	r0, [r3, #4]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	461a      	mov	r2, r3
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	f001 fd65 	bl	8009618 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	441a      	add	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d32b      	bcc.n	8007bc0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	605a      	str	r2, [r3, #4]
 8007b70:	e026      	b.n	8007bc0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	68d8      	ldr	r0, [r3, #12]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	f001 fd4b 	bl	8009618 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	425b      	negs	r3, r3
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d207      	bcs.n	8007bae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	425b      	negs	r3, r3
 8007ba8:	441a      	add	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d105      	bne.n	8007bc0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bc8:	697b      	ldr	r3, [r7, #20]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d018      	beq.n	8007c16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	441a      	add	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d303      	bcc.n	8007c06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68d9      	ldr	r1, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	461a      	mov	r2, r3
 8007c10:	6838      	ldr	r0, [r7, #0]
 8007c12:	f001 fd01 	bl	8009618 <memcpy>
	}
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c26:	f001 f9bd 	bl	8008fa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c32:	e011      	b.n	8007c58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d012      	beq.n	8007c62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3324      	adds	r3, #36	; 0x24
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fca1 	bl	8008588 <xTaskRemoveFromEventList>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c4c:	f000 fd76 	bl	800873c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	dce9      	bgt.n	8007c34 <prvUnlockQueue+0x16>
 8007c60:	e000      	b.n	8007c64 <prvUnlockQueue+0x46>
					break;
 8007c62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	22ff      	movs	r2, #255	; 0xff
 8007c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c6c:	f001 f9ca 	bl	8009004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c70:	f001 f998 	bl	8008fa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c7c:	e011      	b.n	8007ca2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d012      	beq.n	8007cac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3310      	adds	r3, #16
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fc7c 	bl	8008588 <xTaskRemoveFromEventList>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c96:	f000 fd51 	bl	800873c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dce9      	bgt.n	8007c7e <prvUnlockQueue+0x60>
 8007caa:	e000      	b.n	8007cae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	22ff      	movs	r2, #255	; 0xff
 8007cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007cb6:	f001 f9a5 	bl	8009004 <vPortExitCritical>
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cca:	f001 f96b 	bl	8008fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e001      	b.n	8007ce0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ce0:	f001 f990 	bl	8009004 <vPortExitCritical>

	return xReturn;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cf6:	f001 f955 	bl	8008fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d102      	bne.n	8007d0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e001      	b.n	8007d10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d10:	f001 f978 	bl	8009004 <vPortExitCritical>

	return xReturn;
 8007d14:	68fb      	ldr	r3, [r7, #12]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e016      	b.n	8007d5c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d2e:	4a10      	ldr	r2, [pc, #64]	; (8007d70 <vQueueUnregisterQueue+0x50>)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4413      	add	r3, r2
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d10b      	bne.n	8007d56 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d3e:	4a0c      	ldr	r2, [pc, #48]	; (8007d70 <vQueueUnregisterQueue+0x50>)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2100      	movs	r1, #0
 8007d44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <vQueueUnregisterQueue+0x50>)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	4413      	add	r3, r2
 8007d50:	2200      	movs	r2, #0
 8007d52:	605a      	str	r2, [r3, #4]
				break;
 8007d54:	e006      	b.n	8007d64 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b07      	cmp	r3, #7
 8007d60:	d9e5      	bls.n	8007d2e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	20004c60 	.word	0x20004c60

08007d74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08e      	sub	sp, #56	; 0x38
 8007d78:	af04      	add	r7, sp, #16
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	623b      	str	r3, [r7, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xTaskCreateStatic+0x46>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	61fb      	str	r3, [r7, #28]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dba:	2354      	movs	r3, #84	; 0x54
 8007dbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b54      	cmp	r3, #84	; 0x54
 8007dc2:	d00a      	beq.n	8007dda <xTaskCreateStatic+0x66>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	61bb      	str	r3, [r7, #24]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007dda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01e      	beq.n	8007e20 <xTaskCreateStatic+0xac>
 8007de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01b      	beq.n	8007e20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007df0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	2202      	movs	r2, #2
 8007df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9303      	str	r3, [sp, #12]
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	9302      	str	r3, [sp, #8]
 8007e02:	f107 0314 	add.w	r3, r7, #20
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f850 	bl	8007eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e1a:	f000 f8d5 	bl	8007fc8 <prvAddNewTaskToReadyList>
 8007e1e:	e001      	b.n	8007e24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e24:	697b      	ldr	r3, [r7, #20]
	}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3728      	adds	r7, #40	; 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b08c      	sub	sp, #48	; 0x30
 8007e32:	af04      	add	r7, sp, #16
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	603b      	str	r3, [r7, #0]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e3e:	88fb      	ldrh	r3, [r7, #6]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 f9d0 	bl	80091e8 <pvPortMalloc>
 8007e48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e50:	2054      	movs	r0, #84	; 0x54
 8007e52:	f001 f9c9 	bl	80091e8 <pvPortMalloc>
 8007e56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30
 8007e64:	e005      	b.n	8007e72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e66:	6978      	ldr	r0, [r7, #20]
 8007e68:	f001 fa8a 	bl	8009380 <vPortFree>
 8007e6c:	e001      	b.n	8007e72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d017      	beq.n	8007ea8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	2300      	movs	r3, #0
 8007e84:	9303      	str	r3, [sp, #12]
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	9302      	str	r3, [sp, #8]
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 f80e 	bl	8007eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e9c:	69f8      	ldr	r0, [r7, #28]
 8007e9e:	f000 f893 	bl	8007fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	61bb      	str	r3, [r7, #24]
 8007ea6:	e002      	b.n	8007eae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007eae:	69bb      	ldr	r3, [r7, #24]
	}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3720      	adds	r7, #32
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f023 0307 	bic.w	r3, r3, #7
 8007ede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	617b      	str	r3, [r7, #20]
}
 8007efc:	bf00      	nop
 8007efe:	e7fe      	b.n	8007efe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01f      	beq.n	8007f46 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	e012      	b.n	8007f32 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	7819      	ldrb	r1, [r3, #0]
 8007f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	3334      	adds	r3, #52	; 0x34
 8007f1c:	460a      	mov	r2, r1
 8007f1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d006      	beq.n	8007f3a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	2b0f      	cmp	r3, #15
 8007f36:	d9e9      	bls.n	8007f0c <prvInitialiseNewTask+0x54>
 8007f38:	e000      	b.n	8007f3c <prvInitialiseNewTask+0x84>
			{
				break;
 8007f3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f44:	e003      	b.n	8007f4e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	2b06      	cmp	r3, #6
 8007f52:	d901      	bls.n	8007f58 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f54:	2306      	movs	r3, #6
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	2200      	movs	r2, #0
 8007f68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff f8a3 	bl	80070ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	3318      	adds	r3, #24
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff f89e 	bl	80070ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	f1c3 0207 	rsb	r2, r3, #7
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	2200      	movs	r2, #0
 8007f98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	69b8      	ldr	r0, [r7, #24]
 8007fa8:	f000 fecc 	bl	8008d44 <pxPortInitialiseStack>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fbe:	bf00      	nop
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fd0:	f000 ffe8 	bl	8008fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fd4:	4b2a      	ldr	r3, [pc, #168]	; (8008080 <prvAddNewTaskToReadyList+0xb8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	4a29      	ldr	r2, [pc, #164]	; (8008080 <prvAddNewTaskToReadyList+0xb8>)
 8007fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fde:	4b29      	ldr	r3, [pc, #164]	; (8008084 <prvAddNewTaskToReadyList+0xbc>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fe6:	4a27      	ldr	r2, [pc, #156]	; (8008084 <prvAddNewTaskToReadyList+0xbc>)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fec:	4b24      	ldr	r3, [pc, #144]	; (8008080 <prvAddNewTaskToReadyList+0xb8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d110      	bne.n	8008016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ff4:	f000 fbc6 	bl	8008784 <prvInitialiseTaskLists>
 8007ff8:	e00d      	b.n	8008016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ffa:	4b23      	ldr	r3, [pc, #140]	; (8008088 <prvAddNewTaskToReadyList+0xc0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008002:	4b20      	ldr	r3, [pc, #128]	; (8008084 <prvAddNewTaskToReadyList+0xbc>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d802      	bhi.n	8008016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008010:	4a1c      	ldr	r2, [pc, #112]	; (8008084 <prvAddNewTaskToReadyList+0xbc>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008016:	4b1d      	ldr	r3, [pc, #116]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	4a1b      	ldr	r2, [pc, #108]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 800801e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	2201      	movs	r2, #1
 8008026:	409a      	lsls	r2, r3
 8008028:	4b19      	ldr	r3, [pc, #100]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4313      	orrs	r3, r2
 800802e:	4a18      	ldr	r2, [pc, #96]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4613      	mov	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4a15      	ldr	r2, [pc, #84]	; (8008094 <prvAddNewTaskToReadyList+0xcc>)
 8008040:	441a      	add	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3304      	adds	r3, #4
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f7ff f843 	bl	80070d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800804e:	f000 ffd9 	bl	8009004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008052:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <prvAddNewTaskToReadyList+0xc0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00e      	beq.n	8008078 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800805a:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <prvAddNewTaskToReadyList+0xbc>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	429a      	cmp	r2, r3
 8008066:	d207      	bcs.n	8008078 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008068:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 800806a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	2000049c 	.word	0x2000049c
 8008084:	2000039c 	.word	0x2000039c
 8008088:	200004a8 	.word	0x200004a8
 800808c:	200004b8 	.word	0x200004b8
 8008090:	200004a4 	.word	0x200004a4
 8008094:	200003a0 	.word	0x200003a0
 8008098:	e000ed04 	.word	0xe000ed04

0800809c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d017      	beq.n	80080de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080ae:	4b13      	ldr	r3, [pc, #76]	; (80080fc <vTaskDelay+0x60>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <vTaskDelay+0x30>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080cc:	f000 f87a 	bl	80081c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fdd0 	bl	8008c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080d8:	f000 f882 	bl	80081e0 <xTaskResumeAll>
 80080dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d107      	bne.n	80080f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <vTaskDelay+0x64>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200004c4 	.word	0x200004c4
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08a      	sub	sp, #40	; 0x28
 8008108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008112:	463a      	mov	r2, r7
 8008114:	1d39      	adds	r1, r7, #4
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4618      	mov	r0, r3
 800811c:	f7f9 f876 	bl	800120c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	9202      	str	r2, [sp, #8]
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	2300      	movs	r3, #0
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	2300      	movs	r3, #0
 8008130:	460a      	mov	r2, r1
 8008132:	491e      	ldr	r1, [pc, #120]	; (80081ac <vTaskStartScheduler+0xa8>)
 8008134:	481e      	ldr	r0, [pc, #120]	; (80081b0 <vTaskStartScheduler+0xac>)
 8008136:	f7ff fe1d 	bl	8007d74 <xTaskCreateStatic>
 800813a:	4603      	mov	r3, r0
 800813c:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <vTaskStartScheduler+0xb0>)
 800813e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008140:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <vTaskStartScheduler+0xb0>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008148:	2301      	movs	r3, #1
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e001      	b.n	8008152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d116      	bne.n	8008186 <vTaskStartScheduler+0x82>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	613b      	str	r3, [r7, #16]
}
 800816a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800816c:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <vTaskStartScheduler+0xb4>)
 800816e:	f04f 32ff 	mov.w	r2, #4294967295
 8008172:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008174:	4b11      	ldr	r3, [pc, #68]	; (80081bc <vTaskStartScheduler+0xb8>)
 8008176:	2201      	movs	r2, #1
 8008178:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800817a:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <vTaskStartScheduler+0xbc>)
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008180:	f000 fe6e 	bl	8008e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008184:	e00e      	b.n	80081a4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818c:	d10a      	bne.n	80081a4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60fb      	str	r3, [r7, #12]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <vTaskStartScheduler+0x9e>
}
 80081a4:	bf00      	nop
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	0800ad44 	.word	0x0800ad44
 80081b0:	08008755 	.word	0x08008755
 80081b4:	200004c0 	.word	0x200004c0
 80081b8:	200004bc 	.word	0x200004bc
 80081bc:	200004a8 	.word	0x200004a8
 80081c0:	200004a0 	.word	0x200004a0

080081c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <vTaskSuspendAll+0x18>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3301      	adds	r3, #1
 80081ce:	4a03      	ldr	r2, [pc, #12]	; (80081dc <vTaskSuspendAll+0x18>)
 80081d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081d2:	bf00      	nop
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	200004c4 	.word	0x200004c4

080081e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081ee:	4b41      	ldr	r3, [pc, #260]	; (80082f4 <xTaskResumeAll+0x114>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <xTaskResumeAll+0x2c>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	603b      	str	r3, [r7, #0]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800820c:	f000 feca 	bl	8008fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008210:	4b38      	ldr	r3, [pc, #224]	; (80082f4 <xTaskResumeAll+0x114>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3b01      	subs	r3, #1
 8008216:	4a37      	ldr	r2, [pc, #220]	; (80082f4 <xTaskResumeAll+0x114>)
 8008218:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800821a:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <xTaskResumeAll+0x114>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d161      	bne.n	80082e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008222:	4b35      	ldr	r3, [pc, #212]	; (80082f8 <xTaskResumeAll+0x118>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d05d      	beq.n	80082e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800822a:	e02e      	b.n	800828a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800822c:	4b33      	ldr	r3, [pc, #204]	; (80082fc <xTaskResumeAll+0x11c>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3318      	adds	r3, #24
 8008238:	4618      	mov	r0, r3
 800823a:	f7fe ffa8 	bl	800718e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3304      	adds	r3, #4
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe ffa3 	bl	800718e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	2201      	movs	r2, #1
 800824e:	409a      	lsls	r2, r3
 8008250:	4b2b      	ldr	r3, [pc, #172]	; (8008300 <xTaskResumeAll+0x120>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4313      	orrs	r3, r2
 8008256:	4a2a      	ldr	r2, [pc, #168]	; (8008300 <xTaskResumeAll+0x120>)
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825e:	4613      	mov	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4a27      	ldr	r2, [pc, #156]	; (8008304 <xTaskResumeAll+0x124>)
 8008268:	441a      	add	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fe ff2f 	bl	80070d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827a:	4b23      	ldr	r3, [pc, #140]	; (8008308 <xTaskResumeAll+0x128>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	429a      	cmp	r2, r3
 8008282:	d302      	bcc.n	800828a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008284:	4b21      	ldr	r3, [pc, #132]	; (800830c <xTaskResumeAll+0x12c>)
 8008286:	2201      	movs	r2, #1
 8008288:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800828a:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <xTaskResumeAll+0x11c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1cc      	bne.n	800822c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008298:	f000 fb12 	bl	80088c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800829c:	4b1c      	ldr	r3, [pc, #112]	; (8008310 <xTaskResumeAll+0x130>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d010      	beq.n	80082ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082a8:	f000 f836 	bl	8008318 <xTaskIncrementTick>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80082b2:	4b16      	ldr	r3, [pc, #88]	; (800830c <xTaskResumeAll+0x12c>)
 80082b4:	2201      	movs	r2, #1
 80082b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1f1      	bne.n	80082a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80082c4:	4b12      	ldr	r3, [pc, #72]	; (8008310 <xTaskResumeAll+0x130>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082ca:	4b10      	ldr	r3, [pc, #64]	; (800830c <xTaskResumeAll+0x12c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082d2:	2301      	movs	r3, #1
 80082d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <xTaskResumeAll+0x134>)
 80082d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082e6:	f000 fe8d 	bl	8009004 <vPortExitCritical>

	return xAlreadyYielded;
 80082ea:	68bb      	ldr	r3, [r7, #8]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200004c4 	.word	0x200004c4
 80082f8:	2000049c 	.word	0x2000049c
 80082fc:	2000045c 	.word	0x2000045c
 8008300:	200004a4 	.word	0x200004a4
 8008304:	200003a0 	.word	0x200003a0
 8008308:	2000039c 	.word	0x2000039c
 800830c:	200004b0 	.word	0x200004b0
 8008310:	200004ac 	.word	0x200004ac
 8008314:	e000ed04 	.word	0xe000ed04

08008318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008322:	4b4e      	ldr	r3, [pc, #312]	; (800845c <xTaskIncrementTick+0x144>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f040 808e 	bne.w	8008448 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800832c:	4b4c      	ldr	r3, [pc, #304]	; (8008460 <xTaskIncrementTick+0x148>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3301      	adds	r3, #1
 8008332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008334:	4a4a      	ldr	r2, [pc, #296]	; (8008460 <xTaskIncrementTick+0x148>)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d120      	bne.n	8008382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008340:	4b48      	ldr	r3, [pc, #288]	; (8008464 <xTaskIncrementTick+0x14c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <xTaskIncrementTick+0x48>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	603b      	str	r3, [r7, #0]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <xTaskIncrementTick+0x46>
 8008360:	4b40      	ldr	r3, [pc, #256]	; (8008464 <xTaskIncrementTick+0x14c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	4b40      	ldr	r3, [pc, #256]	; (8008468 <xTaskIncrementTick+0x150>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a3e      	ldr	r2, [pc, #248]	; (8008464 <xTaskIncrementTick+0x14c>)
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	4a3e      	ldr	r2, [pc, #248]	; (8008468 <xTaskIncrementTick+0x150>)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	4b3d      	ldr	r3, [pc, #244]	; (800846c <xTaskIncrementTick+0x154>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a3c      	ldr	r2, [pc, #240]	; (800846c <xTaskIncrementTick+0x154>)
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	f000 fa9f 	bl	80088c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008382:	4b3b      	ldr	r3, [pc, #236]	; (8008470 <xTaskIncrementTick+0x158>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	429a      	cmp	r2, r3
 800838a:	d348      	bcc.n	800841e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800838c:	4b35      	ldr	r3, [pc, #212]	; (8008464 <xTaskIncrementTick+0x14c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d104      	bne.n	80083a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008396:	4b36      	ldr	r3, [pc, #216]	; (8008470 <xTaskIncrementTick+0x158>)
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	601a      	str	r2, [r3, #0]
					break;
 800839e:	e03e      	b.n	800841e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a0:	4b30      	ldr	r3, [pc, #192]	; (8008464 <xTaskIncrementTick+0x14c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d203      	bcs.n	80083c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083b8:	4a2d      	ldr	r2, [pc, #180]	; (8008470 <xTaskIncrementTick+0x158>)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083be:	e02e      	b.n	800841e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe fee2 	bl	800718e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	3318      	adds	r3, #24
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fed9 	bl	800718e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	2201      	movs	r2, #1
 80083e2:	409a      	lsls	r2, r3
 80083e4:	4b23      	ldr	r3, [pc, #140]	; (8008474 <xTaskIncrementTick+0x15c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	4a22      	ldr	r2, [pc, #136]	; (8008474 <xTaskIncrementTick+0x15c>)
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4a1f      	ldr	r2, [pc, #124]	; (8008478 <xTaskIncrementTick+0x160>)
 80083fc:	441a      	add	r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	3304      	adds	r3, #4
 8008402:	4619      	mov	r1, r3
 8008404:	4610      	mov	r0, r2
 8008406:	f7fe fe65 	bl	80070d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840e:	4b1b      	ldr	r3, [pc, #108]	; (800847c <xTaskIncrementTick+0x164>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	429a      	cmp	r2, r3
 8008416:	d3b9      	bcc.n	800838c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008418:	2301      	movs	r3, #1
 800841a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800841c:	e7b6      	b.n	800838c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800841e:	4b17      	ldr	r3, [pc, #92]	; (800847c <xTaskIncrementTick+0x164>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008424:	4914      	ldr	r1, [pc, #80]	; (8008478 <xTaskIncrementTick+0x160>)
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d901      	bls.n	800843a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008436:	2301      	movs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800843a:	4b11      	ldr	r3, [pc, #68]	; (8008480 <xTaskIncrementTick+0x168>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d007      	beq.n	8008452 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008442:	2301      	movs	r3, #1
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	e004      	b.n	8008452 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008448:	4b0e      	ldr	r3, [pc, #56]	; (8008484 <xTaskIncrementTick+0x16c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3301      	adds	r3, #1
 800844e:	4a0d      	ldr	r2, [pc, #52]	; (8008484 <xTaskIncrementTick+0x16c>)
 8008450:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008452:	697b      	ldr	r3, [r7, #20]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	200004c4 	.word	0x200004c4
 8008460:	200004a0 	.word	0x200004a0
 8008464:	20000454 	.word	0x20000454
 8008468:	20000458 	.word	0x20000458
 800846c:	200004b4 	.word	0x200004b4
 8008470:	200004bc 	.word	0x200004bc
 8008474:	200004a4 	.word	0x200004a4
 8008478:	200003a0 	.word	0x200003a0
 800847c:	2000039c 	.word	0x2000039c
 8008480:	200004b0 	.word	0x200004b0
 8008484:	200004ac 	.word	0x200004ac

08008488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800848e:	4b27      	ldr	r3, [pc, #156]	; (800852c <vTaskSwitchContext+0xa4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008496:	4b26      	ldr	r3, [pc, #152]	; (8008530 <vTaskSwitchContext+0xa8>)
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800849c:	e03f      	b.n	800851e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800849e:	4b24      	ldr	r3, [pc, #144]	; (8008530 <vTaskSwitchContext+0xa8>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a4:	4b23      	ldr	r3, [pc, #140]	; (8008534 <vTaskSwitchContext+0xac>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	fab3 f383 	clz	r3, r3
 80084b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	f1c3 031f 	rsb	r3, r3, #31
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	491f      	ldr	r1, [pc, #124]	; (8008538 <vTaskSwitchContext+0xb0>)
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10a      	bne.n	80084e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	607b      	str	r3, [r7, #4]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <vTaskSwitchContext+0x5a>
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4a12      	ldr	r2, [pc, #72]	; (8008538 <vTaskSwitchContext+0xb0>)
 80084f0:	4413      	add	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	3308      	adds	r3, #8
 8008506:	429a      	cmp	r2, r3
 8008508:	d104      	bne.n	8008514 <vTaskSwitchContext+0x8c>
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	605a      	str	r2, [r3, #4]
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	4a08      	ldr	r2, [pc, #32]	; (800853c <vTaskSwitchContext+0xb4>)
 800851c:	6013      	str	r3, [r2, #0]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	200004c4 	.word	0x200004c4
 8008530:	200004b0 	.word	0x200004b0
 8008534:	200004a4 	.word	0x200004a4
 8008538:	200003a0 	.word	0x200003a0
 800853c:	2000039c 	.word	0x2000039c

08008540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60fb      	str	r3, [r7, #12]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008566:	4b07      	ldr	r3, [pc, #28]	; (8008584 <vTaskPlaceOnEventList+0x44>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3318      	adds	r3, #24
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fe fdd4 	bl	800711c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008574:	2101      	movs	r1, #1
 8008576:	6838      	ldr	r0, [r7, #0]
 8008578:	f000 fb7e 	bl	8008c78 <prvAddCurrentTaskToDelayedList>
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	2000039c 	.word	0x2000039c

08008588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	3318      	adds	r3, #24
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe fde8 	bl	800718e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085be:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <xTaskRemoveFromEventList+0xac>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d11c      	bne.n	8008600 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fddf 	bl	800718e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	2201      	movs	r2, #1
 80085d6:	409a      	lsls	r2, r3
 80085d8:	4b17      	ldr	r3, [pc, #92]	; (8008638 <xTaskRemoveFromEventList+0xb0>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4313      	orrs	r3, r2
 80085de:	4a16      	ldr	r2, [pc, #88]	; (8008638 <xTaskRemoveFromEventList+0xb0>)
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e6:	4613      	mov	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4a13      	ldr	r2, [pc, #76]	; (800863c <xTaskRemoveFromEventList+0xb4>)
 80085f0:	441a      	add	r2, r3
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	3304      	adds	r3, #4
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f7fe fd6b 	bl	80070d4 <vListInsertEnd>
 80085fe:	e005      	b.n	800860c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	3318      	adds	r3, #24
 8008604:	4619      	mov	r1, r3
 8008606:	480e      	ldr	r0, [pc, #56]	; (8008640 <xTaskRemoveFromEventList+0xb8>)
 8008608:	f7fe fd64 	bl	80070d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <xTaskRemoveFromEventList+0xbc>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	429a      	cmp	r2, r3
 8008618:	d905      	bls.n	8008626 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800861a:	2301      	movs	r3, #1
 800861c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800861e:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <xTaskRemoveFromEventList+0xc0>)
 8008620:	2201      	movs	r2, #1
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	e001      	b.n	800862a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800862a:	697b      	ldr	r3, [r7, #20]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	200004c4 	.word	0x200004c4
 8008638:	200004a4 	.word	0x200004a4
 800863c:	200003a0 	.word	0x200003a0
 8008640:	2000045c 	.word	0x2000045c
 8008644:	2000039c 	.word	0x2000039c
 8008648:	200004b0 	.word	0x200004b0

0800864c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008654:	4b06      	ldr	r3, [pc, #24]	; (8008670 <vTaskInternalSetTimeOutState+0x24>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800865c:	4b05      	ldr	r3, [pc, #20]	; (8008674 <vTaskInternalSetTimeOutState+0x28>)
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	605a      	str	r2, [r3, #4]
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	200004b4 	.word	0x200004b4
 8008674:	200004a0 	.word	0x200004a0

08008678 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	613b      	str	r3, [r7, #16]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	60fb      	str	r3, [r7, #12]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80086ba:	f000 fc73 	bl	8008fa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086be:	4b1d      	ldr	r3, [pc, #116]	; (8008734 <xTaskCheckForTimeOut+0xbc>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d6:	d102      	bne.n	80086de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086d8:	2300      	movs	r3, #0
 80086da:	61fb      	str	r3, [r7, #28]
 80086dc:	e023      	b.n	8008726 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	4b15      	ldr	r3, [pc, #84]	; (8008738 <xTaskCheckForTimeOut+0xc0>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d007      	beq.n	80086fa <xTaskCheckForTimeOut+0x82>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d302      	bcc.n	80086fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086f4:	2301      	movs	r3, #1
 80086f6:	61fb      	str	r3, [r7, #28]
 80086f8:	e015      	b.n	8008726 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	429a      	cmp	r2, r3
 8008702:	d20b      	bcs.n	800871c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	1ad2      	subs	r2, r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff ff9b 	bl	800864c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	e004      	b.n	8008726 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008722:	2301      	movs	r3, #1
 8008724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008726:	f000 fc6d 	bl	8009004 <vPortExitCritical>

	return xReturn;
 800872a:	69fb      	ldr	r3, [r7, #28]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	200004a0 	.word	0x200004a0
 8008738:	200004b4 	.word	0x200004b4

0800873c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008740:	4b03      	ldr	r3, [pc, #12]	; (8008750 <vTaskMissedYield+0x14>)
 8008742:	2201      	movs	r2, #1
 8008744:	601a      	str	r2, [r3, #0]
}
 8008746:	bf00      	nop
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	200004b0 	.word	0x200004b0

08008754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800875c:	f000 f852 	bl	8008804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008760:	4b06      	ldr	r3, [pc, #24]	; (800877c <prvIdleTask+0x28>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d9f9      	bls.n	800875c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <prvIdleTask+0x2c>)
 800876a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008778:	e7f0      	b.n	800875c <prvIdleTask+0x8>
 800877a:	bf00      	nop
 800877c:	200003a0 	.word	0x200003a0
 8008780:	e000ed04 	.word	0xe000ed04

08008784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800878a:	2300      	movs	r3, #0
 800878c:	607b      	str	r3, [r7, #4]
 800878e:	e00c      	b.n	80087aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4a12      	ldr	r2, [pc, #72]	; (80087e4 <prvInitialiseTaskLists+0x60>)
 800879c:	4413      	add	r3, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fc6b 	bl	800707a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3301      	adds	r3, #1
 80087a8:	607b      	str	r3, [r7, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b06      	cmp	r3, #6
 80087ae:	d9ef      	bls.n	8008790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087b0:	480d      	ldr	r0, [pc, #52]	; (80087e8 <prvInitialiseTaskLists+0x64>)
 80087b2:	f7fe fc62 	bl	800707a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087b6:	480d      	ldr	r0, [pc, #52]	; (80087ec <prvInitialiseTaskLists+0x68>)
 80087b8:	f7fe fc5f 	bl	800707a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087bc:	480c      	ldr	r0, [pc, #48]	; (80087f0 <prvInitialiseTaskLists+0x6c>)
 80087be:	f7fe fc5c 	bl	800707a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087c2:	480c      	ldr	r0, [pc, #48]	; (80087f4 <prvInitialiseTaskLists+0x70>)
 80087c4:	f7fe fc59 	bl	800707a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087c8:	480b      	ldr	r0, [pc, #44]	; (80087f8 <prvInitialiseTaskLists+0x74>)
 80087ca:	f7fe fc56 	bl	800707a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087ce:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <prvInitialiseTaskLists+0x78>)
 80087d0:	4a05      	ldr	r2, [pc, #20]	; (80087e8 <prvInitialiseTaskLists+0x64>)
 80087d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <prvInitialiseTaskLists+0x7c>)
 80087d6:	4a05      	ldr	r2, [pc, #20]	; (80087ec <prvInitialiseTaskLists+0x68>)
 80087d8:	601a      	str	r2, [r3, #0]
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	200003a0 	.word	0x200003a0
 80087e8:	2000042c 	.word	0x2000042c
 80087ec:	20000440 	.word	0x20000440
 80087f0:	2000045c 	.word	0x2000045c
 80087f4:	20000470 	.word	0x20000470
 80087f8:	20000488 	.word	0x20000488
 80087fc:	20000454 	.word	0x20000454
 8008800:	20000458 	.word	0x20000458

08008804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800880a:	e019      	b.n	8008840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800880c:	f000 fbca 	bl	8008fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008810:	4b10      	ldr	r3, [pc, #64]	; (8008854 <prvCheckTasksWaitingTermination+0x50>)
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3304      	adds	r3, #4
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fcb6 	bl	800718e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008822:	4b0d      	ldr	r3, [pc, #52]	; (8008858 <prvCheckTasksWaitingTermination+0x54>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3b01      	subs	r3, #1
 8008828:	4a0b      	ldr	r2, [pc, #44]	; (8008858 <prvCheckTasksWaitingTermination+0x54>)
 800882a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800882c:	4b0b      	ldr	r3, [pc, #44]	; (800885c <prvCheckTasksWaitingTermination+0x58>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3b01      	subs	r3, #1
 8008832:	4a0a      	ldr	r2, [pc, #40]	; (800885c <prvCheckTasksWaitingTermination+0x58>)
 8008834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008836:	f000 fbe5 	bl	8009004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f810 	bl	8008860 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <prvCheckTasksWaitingTermination+0x58>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e1      	bne.n	800880c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000470 	.word	0x20000470
 8008858:	2000049c 	.word	0x2000049c
 800885c:	20000484 	.word	0x20000484

08008860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800886e:	2b00      	cmp	r3, #0
 8008870:	d108      	bne.n	8008884 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fd82 	bl	8009380 <vPortFree>
				vPortFree( pxTCB );
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fd7f 	bl	8009380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008882:	e018      	b.n	80088b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800888a:	2b01      	cmp	r3, #1
 800888c:	d103      	bne.n	8008896 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fd76 	bl	8009380 <vPortFree>
	}
 8008894:	e00f      	b.n	80088b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800889c:	2b02      	cmp	r3, #2
 800889e:	d00a      	beq.n	80088b6 <prvDeleteTCB+0x56>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	60fb      	str	r3, [r7, #12]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <prvDeleteTCB+0x54>
	}
 80088b6:	bf00      	nop
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c6:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <prvResetNextTaskUnblockTime+0x38>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <prvResetNextTaskUnblockTime+0x3c>)
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088d8:	e008      	b.n	80088ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088da:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <prvResetNextTaskUnblockTime+0x38>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	4a04      	ldr	r2, [pc, #16]	; (80088fc <prvResetNextTaskUnblockTime+0x3c>)
 80088ea:	6013      	str	r3, [r2, #0]
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	20000454 	.word	0x20000454
 80088fc:	200004bc 	.word	0x200004bc

08008900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008906:	4b0b      	ldr	r3, [pc, #44]	; (8008934 <xTaskGetSchedulerState+0x34>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d102      	bne.n	8008914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800890e:	2301      	movs	r3, #1
 8008910:	607b      	str	r3, [r7, #4]
 8008912:	e008      	b.n	8008926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008914:	4b08      	ldr	r3, [pc, #32]	; (8008938 <xTaskGetSchedulerState+0x38>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d102      	bne.n	8008922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800891c:	2302      	movs	r3, #2
 800891e:	607b      	str	r3, [r7, #4]
 8008920:	e001      	b.n	8008926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008922:	2300      	movs	r3, #0
 8008924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008926:	687b      	ldr	r3, [r7, #4]
	}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	200004a8 	.word	0x200004a8
 8008938:	200004c4 	.word	0x200004c4

0800893c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d05e      	beq.n	8008a10 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	4b31      	ldr	r3, [pc, #196]	; (8008a1c <xTaskPriorityInherit+0xe0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	429a      	cmp	r2, r3
 800895e:	d24e      	bcs.n	80089fe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	2b00      	cmp	r3, #0
 8008966:	db06      	blt.n	8008976 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008968:	4b2c      	ldr	r3, [pc, #176]	; (8008a1c <xTaskPriorityInherit+0xe0>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	f1c3 0207 	rsb	r2, r3, #7
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6959      	ldr	r1, [r3, #20]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4a26      	ldr	r2, [pc, #152]	; (8008a20 <xTaskPriorityInherit+0xe4>)
 8008988:	4413      	add	r3, r2
 800898a:	4299      	cmp	r1, r3
 800898c:	d12f      	bne.n	80089ee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	3304      	adds	r3, #4
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fbfb 	bl	800718e <uxListRemove>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	2201      	movs	r2, #1
 80089a4:	fa02 f303 	lsl.w	r3, r2, r3
 80089a8:	43da      	mvns	r2, r3
 80089aa:	4b1e      	ldr	r3, [pc, #120]	; (8008a24 <xTaskPriorityInherit+0xe8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4013      	ands	r3, r2
 80089b0:	4a1c      	ldr	r2, [pc, #112]	; (8008a24 <xTaskPriorityInherit+0xe8>)
 80089b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089b4:	4b19      	ldr	r3, [pc, #100]	; (8008a1c <xTaskPriorityInherit+0xe0>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	2201      	movs	r2, #1
 80089c4:	409a      	lsls	r2, r3
 80089c6:	4b17      	ldr	r3, [pc, #92]	; (8008a24 <xTaskPriorityInherit+0xe8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <xTaskPriorityInherit+0xe8>)
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4a10      	ldr	r2, [pc, #64]	; (8008a20 <xTaskPriorityInherit+0xe4>)
 80089de:	441a      	add	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	3304      	adds	r3, #4
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f7fe fb74 	bl	80070d4 <vListInsertEnd>
 80089ec:	e004      	b.n	80089f8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089ee:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <xTaskPriorityInherit+0xe0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80089f8:	2301      	movs	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	e008      	b.n	8008a10 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <xTaskPriorityInherit+0xe0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d201      	bcs.n	8008a10 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a10:	68fb      	ldr	r3, [r7, #12]
	}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	2000039c 	.word	0x2000039c
 8008a20:	200003a0 	.word	0x200003a0
 8008a24:	200004a4 	.word	0x200004a4

08008a28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d06e      	beq.n	8008b1c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a3e:	4b3a      	ldr	r3, [pc, #232]	; (8008b28 <xTaskPriorityDisinherit+0x100>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d00a      	beq.n	8008a5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	60fb      	str	r3, [r7, #12]
}
 8008a5a:	bf00      	nop
 8008a5c:	e7fe      	b.n	8008a5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10a      	bne.n	8008a7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	60bb      	str	r3, [r7, #8]
}
 8008a78:	bf00      	nop
 8008a7a:	e7fe      	b.n	8008a7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a80:	1e5a      	subs	r2, r3, #1
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d044      	beq.n	8008b1c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d140      	bne.n	8008b1c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fb75 	bl	800718e <uxListRemove>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d115      	bne.n	8008ad6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aae:	491f      	ldr	r1, [pc, #124]	; (8008b2c <xTaskPriorityDisinherit+0x104>)
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <xTaskPriorityDisinherit+0xae>
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aca:	43da      	mvns	r2, r3
 8008acc:	4b18      	ldr	r3, [pc, #96]	; (8008b30 <xTaskPriorityDisinherit+0x108>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	4a17      	ldr	r2, [pc, #92]	; (8008b30 <xTaskPriorityDisinherit+0x108>)
 8008ad4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	f1c3 0207 	rsb	r2, r3, #7
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	2201      	movs	r2, #1
 8008af0:	409a      	lsls	r2, r3
 8008af2:	4b0f      	ldr	r3, [pc, #60]	; (8008b30 <xTaskPriorityDisinherit+0x108>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	4a0d      	ldr	r2, [pc, #52]	; (8008b30 <xTaskPriorityDisinherit+0x108>)
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4a08      	ldr	r2, [pc, #32]	; (8008b2c <xTaskPriorityDisinherit+0x104>)
 8008b0a:	441a      	add	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	3304      	adds	r3, #4
 8008b10:	4619      	mov	r1, r3
 8008b12:	4610      	mov	r0, r2
 8008b14:	f7fe fade 	bl	80070d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b1c:	697b      	ldr	r3, [r7, #20]
	}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	2000039c 	.word	0x2000039c
 8008b2c:	200003a0 	.word	0x200003a0
 8008b30:	200004a4 	.word	0x200004a4

08008b34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b42:	2301      	movs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d077      	beq.n	8008c3c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	60fb      	str	r3, [r7, #12]
}
 8008b66:	bf00      	nop
 8008b68:	e7fe      	b.n	8008b68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d902      	bls.n	8008b7a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	61fb      	str	r3, [r7, #28]
 8008b78:	e002      	b.n	8008b80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d058      	beq.n	8008c3c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d153      	bne.n	8008c3c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b94:	4b2b      	ldr	r3, [pc, #172]	; (8008c44 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d10a      	bne.n	8008bb4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	60bb      	str	r3, [r7, #8]
}
 8008bb0:	bf00      	nop
 8008bb2:	e7fe      	b.n	8008bb2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	db04      	blt.n	8008bd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f1c3 0207 	rsb	r2, r3, #7
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	6959      	ldr	r1, [r3, #20]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4a19      	ldr	r2, [pc, #100]	; (8008c48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008be2:	4413      	add	r3, r2
 8008be4:	4299      	cmp	r1, r3
 8008be6:	d129      	bne.n	8008c3c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe face 	bl	800718e <uxListRemove>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43da      	mvns	r2, r3
 8008c04:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4013      	ands	r3, r2
 8008c0a:	4a10      	ldr	r2, [pc, #64]	; (8008c4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c0c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c12:	2201      	movs	r2, #1
 8008c14:	409a      	lsls	r2, r3
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	4a0b      	ldr	r2, [pc, #44]	; (8008c4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4a06      	ldr	r2, [pc, #24]	; (8008c48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008c2e:	441a      	add	r2, r3
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7fe fa4c 	bl	80070d4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c3c:	bf00      	nop
 8008c3e:	3720      	adds	r7, #32
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	2000039c 	.word	0x2000039c
 8008c48:	200003a0 	.word	0x200003a0
 8008c4c:	200004a4 	.word	0x200004a4

08008c50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c54:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c62:	3201      	adds	r2, #1
 8008c64:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008c66:	4b03      	ldr	r3, [pc, #12]	; (8008c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c68:	681b      	ldr	r3, [r3, #0]
	}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	2000039c 	.word	0x2000039c

08008c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c82:	4b29      	ldr	r3, [pc, #164]	; (8008d28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c88:	4b28      	ldr	r3, [pc, #160]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe fa7d 	bl	800718e <uxListRemove>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10b      	bne.n	8008cb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c9a:	4b24      	ldr	r3, [pc, #144]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	43da      	mvns	r2, r3
 8008ca8:	4b21      	ldr	r3, [pc, #132]	; (8008d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4013      	ands	r3, r2
 8008cae:	4a20      	ldr	r2, [pc, #128]	; (8008d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb8:	d10a      	bne.n	8008cd0 <prvAddCurrentTaskToDelayedList+0x58>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d007      	beq.n	8008cd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc0:	4b1a      	ldr	r3, [pc, #104]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	481a      	ldr	r0, [pc, #104]	; (8008d34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cca:	f7fe fa03 	bl	80070d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cce:	e026      	b.n	8008d1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cd8:	4b14      	ldr	r3, [pc, #80]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d209      	bcs.n	8008cfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ce8:	4b13      	ldr	r3, [pc, #76]	; (8008d38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	4b0f      	ldr	r3, [pc, #60]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	f7fe fa11 	bl	800711c <vListInsert>
}
 8008cfa:	e010      	b.n	8008d1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cfc:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	4b0a      	ldr	r3, [pc, #40]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3304      	adds	r3, #4
 8008d06:	4619      	mov	r1, r3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	f7fe fa07 	bl	800711c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d0e:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d202      	bcs.n	8008d1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d18:	4a09      	ldr	r2, [pc, #36]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6013      	str	r3, [r2, #0]
}
 8008d1e:	bf00      	nop
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200004a0 	.word	0x200004a0
 8008d2c:	2000039c 	.word	0x2000039c
 8008d30:	200004a4 	.word	0x200004a4
 8008d34:	20000488 	.word	0x20000488
 8008d38:	20000458 	.word	0x20000458
 8008d3c:	20000454 	.word	0x20000454
 8008d40:	200004bc 	.word	0x200004bc

08008d44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3b04      	subs	r3, #4
 8008d54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3b04      	subs	r3, #4
 8008d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	f023 0201 	bic.w	r2, r3, #1
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3b04      	subs	r3, #4
 8008d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d74:	4a0c      	ldr	r2, [pc, #48]	; (8008da8 <pxPortInitialiseStack+0x64>)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3b14      	subs	r3, #20
 8008d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3b04      	subs	r3, #4
 8008d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f06f 0202 	mvn.w	r2, #2
 8008d92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3b20      	subs	r3, #32
 8008d98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	08008dad 	.word	0x08008dad

08008dac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008db6:	4b12      	ldr	r3, [pc, #72]	; (8008e00 <prvTaskExitError+0x54>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbe:	d00a      	beq.n	8008dd6 <prvTaskExitError+0x2a>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	60fb      	str	r3, [r7, #12]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <prvTaskExitError+0x28>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	60bb      	str	r3, [r7, #8]
}
 8008de8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dea:	bf00      	nop
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0fc      	beq.n	8008dec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008df2:	bf00      	nop
 8008df4:	bf00      	nop
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20000054 	.word	0x20000054
	...

08008e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e10:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <pxCurrentTCBConst2>)
 8008e12:	6819      	ldr	r1, [r3, #0]
 8008e14:	6808      	ldr	r0, [r1, #0]
 8008e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1a:	f380 8809 	msr	PSP, r0
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f04f 0000 	mov.w	r0, #0
 8008e26:	f380 8811 	msr	BASEPRI, r0
 8008e2a:	4770      	bx	lr
 8008e2c:	f3af 8000 	nop.w

08008e30 <pxCurrentTCBConst2>:
 8008e30:	2000039c 	.word	0x2000039c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop

08008e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e38:	4808      	ldr	r0, [pc, #32]	; (8008e5c <prvPortStartFirstTask+0x24>)
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	6800      	ldr	r0, [r0, #0]
 8008e3e:	f380 8808 	msr	MSP, r0
 8008e42:	f04f 0000 	mov.w	r0, #0
 8008e46:	f380 8814 	msr	CONTROL, r0
 8008e4a:	b662      	cpsie	i
 8008e4c:	b661      	cpsie	f
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	df00      	svc	0
 8008e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e5a:	bf00      	nop
 8008e5c:	e000ed08 	.word	0xe000ed08

08008e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e66:	4b46      	ldr	r3, [pc, #280]	; (8008f80 <xPortStartScheduler+0x120>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a46      	ldr	r2, [pc, #280]	; (8008f84 <xPortStartScheduler+0x124>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d10a      	bne.n	8008e86 <xPortStartScheduler+0x26>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	613b      	str	r3, [r7, #16]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e86:	4b3e      	ldr	r3, [pc, #248]	; (8008f80 <xPortStartScheduler+0x120>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a3f      	ldr	r2, [pc, #252]	; (8008f88 <xPortStartScheduler+0x128>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d10a      	bne.n	8008ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	60fb      	str	r3, [r7, #12]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ea6:	4b39      	ldr	r3, [pc, #228]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	22ff      	movs	r2, #255	; 0xff
 8008eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ec0:	78fb      	ldrb	r3, [r7, #3]
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	4b31      	ldr	r3, [pc, #196]	; (8008f90 <xPortStartScheduler+0x130>)
 8008ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ece:	4b31      	ldr	r3, [pc, #196]	; (8008f94 <xPortStartScheduler+0x134>)
 8008ed0:	2207      	movs	r2, #7
 8008ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ed4:	e009      	b.n	8008eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ed6:	4b2f      	ldr	r3, [pc, #188]	; (8008f94 <xPortStartScheduler+0x134>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	4a2d      	ldr	r2, [pc, #180]	; (8008f94 <xPortStartScheduler+0x134>)
 8008ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef2:	2b80      	cmp	r3, #128	; 0x80
 8008ef4:	d0ef      	beq.n	8008ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ef6:	4b27      	ldr	r3, [pc, #156]	; (8008f94 <xPortStartScheduler+0x134>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f1c3 0307 	rsb	r3, r3, #7
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d00a      	beq.n	8008f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	60bb      	str	r3, [r7, #8]
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f18:	4b1e      	ldr	r3, [pc, #120]	; (8008f94 <xPortStartScheduler+0x134>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	021b      	lsls	r3, r3, #8
 8008f1e:	4a1d      	ldr	r2, [pc, #116]	; (8008f94 <xPortStartScheduler+0x134>)
 8008f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f22:	4b1c      	ldr	r3, [pc, #112]	; (8008f94 <xPortStartScheduler+0x134>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f2a:	4a1a      	ldr	r2, [pc, #104]	; (8008f94 <xPortStartScheduler+0x134>)
 8008f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f36:	4b18      	ldr	r3, [pc, #96]	; (8008f98 <xPortStartScheduler+0x138>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a17      	ldr	r2, [pc, #92]	; (8008f98 <xPortStartScheduler+0x138>)
 8008f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f42:	4b15      	ldr	r3, [pc, #84]	; (8008f98 <xPortStartScheduler+0x138>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a14      	ldr	r2, [pc, #80]	; (8008f98 <xPortStartScheduler+0x138>)
 8008f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f4e:	f000 f8dd 	bl	800910c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f52:	4b12      	ldr	r3, [pc, #72]	; (8008f9c <xPortStartScheduler+0x13c>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f58:	f000 f8fc 	bl	8009154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f5c:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <xPortStartScheduler+0x140>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a0f      	ldr	r2, [pc, #60]	; (8008fa0 <xPortStartScheduler+0x140>)
 8008f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f68:	f7ff ff66 	bl	8008e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f6c:	f7ff fa8c 	bl	8008488 <vTaskSwitchContext>
	prvTaskExitError();
 8008f70:	f7ff ff1c 	bl	8008dac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	e000ed00 	.word	0xe000ed00
 8008f84:	410fc271 	.word	0x410fc271
 8008f88:	410fc270 	.word	0x410fc270
 8008f8c:	e000e400 	.word	0xe000e400
 8008f90:	200004c8 	.word	0x200004c8
 8008f94:	200004cc 	.word	0x200004cc
 8008f98:	e000ed20 	.word	0xe000ed20
 8008f9c:	20000054 	.word	0x20000054
 8008fa0:	e000ef34 	.word	0xe000ef34

08008fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	607b      	str	r3, [r7, #4]
}
 8008fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <vPortEnterCritical+0x58>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	4a0d      	ldr	r2, [pc, #52]	; (8008ffc <vPortEnterCritical+0x58>)
 8008fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <vPortEnterCritical+0x58>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d10f      	bne.n	8008ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <vPortEnterCritical+0x5c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	603b      	str	r3, [r7, #0]
}
 8008fec:	bf00      	nop
 8008fee:	e7fe      	b.n	8008fee <vPortEnterCritical+0x4a>
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20000054 	.word	0x20000054
 8009000:	e000ed04 	.word	0xe000ed04

08009004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800900a:	4b12      	ldr	r3, [pc, #72]	; (8009054 <vPortExitCritical+0x50>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10a      	bne.n	8009028 <vPortExitCritical+0x24>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	607b      	str	r3, [r7, #4]
}
 8009024:	bf00      	nop
 8009026:	e7fe      	b.n	8009026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009028:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <vPortExitCritical+0x50>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3b01      	subs	r3, #1
 800902e:	4a09      	ldr	r2, [pc, #36]	; (8009054 <vPortExitCritical+0x50>)
 8009030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009032:	4b08      	ldr	r3, [pc, #32]	; (8009054 <vPortExitCritical+0x50>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <vPortExitCritical+0x42>
 800903a:	2300      	movs	r3, #0
 800903c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	f383 8811 	msr	BASEPRI, r3
}
 8009044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	20000054 	.word	0x20000054
	...

08009060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009060:	f3ef 8009 	mrs	r0, PSP
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	4b15      	ldr	r3, [pc, #84]	; (80090c0 <pxCurrentTCBConst>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	f01e 0f10 	tst.w	lr, #16
 8009070:	bf08      	it	eq
 8009072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907a:	6010      	str	r0, [r2, #0]
 800907c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009084:	f380 8811 	msr	BASEPRI, r0
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f7ff f9fa 	bl	8008488 <vTaskSwitchContext>
 8009094:	f04f 0000 	mov.w	r0, #0
 8009098:	f380 8811 	msr	BASEPRI, r0
 800909c:	bc09      	pop	{r0, r3}
 800909e:	6819      	ldr	r1, [r3, #0]
 80090a0:	6808      	ldr	r0, [r1, #0]
 80090a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a6:	f01e 0f10 	tst.w	lr, #16
 80090aa:	bf08      	it	eq
 80090ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090b0:	f380 8809 	msr	PSP, r0
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w

080090c0 <pxCurrentTCBConst>:
 80090c0:	2000039c 	.word	0x2000039c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090c4:	bf00      	nop
 80090c6:	bf00      	nop

080090c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	607b      	str	r3, [r7, #4]
}
 80090e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090e2:	f7ff f919 	bl	8008318 <xTaskIncrementTick>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090ec:	4b06      	ldr	r3, [pc, #24]	; (8009108 <SysTick_Handler+0x40>)
 80090ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	2300      	movs	r3, #0
 80090f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	f383 8811 	msr	BASEPRI, r3
}
 80090fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009110:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <vPortSetupTimerInterrupt+0x34>)
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009116:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <vPortSetupTimerInterrupt+0x38>)
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800911c:	4b0a      	ldr	r3, [pc, #40]	; (8009148 <vPortSetupTimerInterrupt+0x3c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a0a      	ldr	r2, [pc, #40]	; (800914c <vPortSetupTimerInterrupt+0x40>)
 8009122:	fba2 2303 	umull	r2, r3, r2, r3
 8009126:	099b      	lsrs	r3, r3, #6
 8009128:	4a09      	ldr	r2, [pc, #36]	; (8009150 <vPortSetupTimerInterrupt+0x44>)
 800912a:	3b01      	subs	r3, #1
 800912c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800912e:	4b04      	ldr	r3, [pc, #16]	; (8009140 <vPortSetupTimerInterrupt+0x34>)
 8009130:	2207      	movs	r2, #7
 8009132:	601a      	str	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	e000e010 	.word	0xe000e010
 8009144:	e000e018 	.word	0xe000e018
 8009148:	20000034 	.word	0x20000034
 800914c:	10624dd3 	.word	0x10624dd3
 8009150:	e000e014 	.word	0xe000e014

08009154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009164 <vPortEnableVFP+0x10>
 8009158:	6801      	ldr	r1, [r0, #0]
 800915a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800915e:	6001      	str	r1, [r0, #0]
 8009160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009162:	bf00      	nop
 8009164:	e000ed88 	.word	0xe000ed88

08009168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800916e:	f3ef 8305 	mrs	r3, IPSR
 8009172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b0f      	cmp	r3, #15
 8009178:	d914      	bls.n	80091a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800917a:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <vPortValidateInterruptPriority+0x70>)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009184:	4b15      	ldr	r3, [pc, #84]	; (80091dc <vPortValidateInterruptPriority+0x74>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	7afa      	ldrb	r2, [r7, #11]
 800918a:	429a      	cmp	r2, r3
 800918c:	d20a      	bcs.n	80091a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	607b      	str	r3, [r7, #4]
}
 80091a0:	bf00      	nop
 80091a2:	e7fe      	b.n	80091a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091a4:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <vPortValidateInterruptPriority+0x78>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091ac:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <vPortValidateInterruptPriority+0x7c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d90a      	bls.n	80091ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	603b      	str	r3, [r7, #0]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <vPortValidateInterruptPriority+0x60>
	}
 80091ca:	bf00      	nop
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	e000e3f0 	.word	0xe000e3f0
 80091dc:	200004c8 	.word	0x200004c8
 80091e0:	e000ed0c 	.word	0xe000ed0c
 80091e4:	200004cc 	.word	0x200004cc

080091e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08a      	sub	sp, #40	; 0x28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091f4:	f7fe ffe6 	bl	80081c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091f8:	4b5b      	ldr	r3, [pc, #364]	; (8009368 <pvPortMalloc+0x180>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009200:	f000 f920 	bl	8009444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009204:	4b59      	ldr	r3, [pc, #356]	; (800936c <pvPortMalloc+0x184>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	f040 8093 	bne.w	8009338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01d      	beq.n	8009254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009218:	2208      	movs	r2, #8
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4413      	add	r3, r2
 800921e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b00      	cmp	r3, #0
 8009228:	d014      	beq.n	8009254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f023 0307 	bic.w	r3, r3, #7
 8009230:	3308      	adds	r3, #8
 8009232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <pvPortMalloc+0x6c>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	617b      	str	r3, [r7, #20]
}
 8009250:	bf00      	nop
 8009252:	e7fe      	b.n	8009252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d06e      	beq.n	8009338 <pvPortMalloc+0x150>
 800925a:	4b45      	ldr	r3, [pc, #276]	; (8009370 <pvPortMalloc+0x188>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	429a      	cmp	r2, r3
 8009262:	d869      	bhi.n	8009338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009264:	4b43      	ldr	r3, [pc, #268]	; (8009374 <pvPortMalloc+0x18c>)
 8009266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009268:	4b42      	ldr	r3, [pc, #264]	; (8009374 <pvPortMalloc+0x18c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800926e:	e004      	b.n	800927a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d903      	bls.n	800928c <pvPortMalloc+0xa4>
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1f1      	bne.n	8009270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800928c:	4b36      	ldr	r3, [pc, #216]	; (8009368 <pvPortMalloc+0x180>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009292:	429a      	cmp	r2, r3
 8009294:	d050      	beq.n	8009338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2208      	movs	r2, #8
 800929c:	4413      	add	r3, r2
 800929e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	1ad2      	subs	r2, r2, r3
 80092b0:	2308      	movs	r3, #8
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d91f      	bls.n	80092f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <pvPortMalloc+0xf8>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	613b      	str	r3, [r7, #16]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	1ad2      	subs	r2, r2, r3
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092f2:	69b8      	ldr	r0, [r7, #24]
 80092f4:	f000 f908 	bl	8009508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092f8:	4b1d      	ldr	r3, [pc, #116]	; (8009370 <pvPortMalloc+0x188>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	4a1b      	ldr	r2, [pc, #108]	; (8009370 <pvPortMalloc+0x188>)
 8009304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009306:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <pvPortMalloc+0x188>)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	4b1b      	ldr	r3, [pc, #108]	; (8009378 <pvPortMalloc+0x190>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	429a      	cmp	r2, r3
 8009310:	d203      	bcs.n	800931a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009312:	4b17      	ldr	r3, [pc, #92]	; (8009370 <pvPortMalloc+0x188>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a18      	ldr	r2, [pc, #96]	; (8009378 <pvPortMalloc+0x190>)
 8009318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	4b13      	ldr	r3, [pc, #76]	; (800936c <pvPortMalloc+0x184>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	431a      	orrs	r2, r3
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800932e:	4b13      	ldr	r3, [pc, #76]	; (800937c <pvPortMalloc+0x194>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	4a11      	ldr	r2, [pc, #68]	; (800937c <pvPortMalloc+0x194>)
 8009336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009338:	f7fe ff52 	bl	80081e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	f003 0307 	and.w	r3, r3, #7
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <pvPortMalloc+0x174>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	60fb      	str	r3, [r7, #12]
}
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <pvPortMalloc+0x172>
	return pvReturn;
 800935c:	69fb      	ldr	r3, [r7, #28]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3728      	adds	r7, #40	; 0x28
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	200040d8 	.word	0x200040d8
 800936c:	200040ec 	.word	0x200040ec
 8009370:	200040dc 	.word	0x200040dc
 8009374:	200040d0 	.word	0x200040d0
 8009378:	200040e0 	.word	0x200040e0
 800937c:	200040e4 	.word	0x200040e4

08009380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d04d      	beq.n	800942e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009392:	2308      	movs	r3, #8
 8009394:	425b      	negs	r3, r3
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	4413      	add	r3, r2
 800939a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	685a      	ldr	r2, [r3, #4]
 80093a4:	4b24      	ldr	r3, [pc, #144]	; (8009438 <vPortFree+0xb8>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4013      	ands	r3, r2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10a      	bne.n	80093c4 <vPortFree+0x44>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	60fb      	str	r3, [r7, #12]
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00a      	beq.n	80093e2 <vPortFree+0x62>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	60bb      	str	r3, [r7, #8]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	4b14      	ldr	r3, [pc, #80]	; (8009438 <vPortFree+0xb8>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4013      	ands	r3, r2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01e      	beq.n	800942e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d11a      	bne.n	800942e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <vPortFree+0xb8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	43db      	mvns	r3, r3
 8009402:	401a      	ands	r2, r3
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009408:	f7fe fedc 	bl	80081c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <vPortFree+0xbc>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4413      	add	r3, r2
 8009416:	4a09      	ldr	r2, [pc, #36]	; (800943c <vPortFree+0xbc>)
 8009418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800941a:	6938      	ldr	r0, [r7, #16]
 800941c:	f000 f874 	bl	8009508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <vPortFree+0xc0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3301      	adds	r3, #1
 8009426:	4a06      	ldr	r2, [pc, #24]	; (8009440 <vPortFree+0xc0>)
 8009428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800942a:	f7fe fed9 	bl	80081e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800942e:	bf00      	nop
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	200040ec 	.word	0x200040ec
 800943c:	200040dc 	.word	0x200040dc
 8009440:	200040e8 	.word	0x200040e8

08009444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800944a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800944e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009450:	4b27      	ldr	r3, [pc, #156]	; (80094f0 <prvHeapInit+0xac>)
 8009452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00c      	beq.n	8009478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3307      	adds	r3, #7
 8009462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0307 	bic.w	r3, r3, #7
 800946a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	4a1f      	ldr	r2, [pc, #124]	; (80094f0 <prvHeapInit+0xac>)
 8009474:	4413      	add	r3, r2
 8009476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800947c:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <prvHeapInit+0xb0>)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <prvHeapInit+0xb0>)
 8009484:	2200      	movs	r2, #0
 8009486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4413      	add	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009490:	2208      	movs	r2, #8
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	1a9b      	subs	r3, r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 0307 	bic.w	r3, r3, #7
 800949e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4a15      	ldr	r2, [pc, #84]	; (80094f8 <prvHeapInit+0xb4>)
 80094a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094a6:	4b14      	ldr	r3, [pc, #80]	; (80094f8 <prvHeapInit+0xb4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2200      	movs	r2, #0
 80094ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094ae:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <prvHeapInit+0xb4>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	1ad2      	subs	r2, r2, r3
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094c4:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <prvHeapInit+0xb4>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	4a0a      	ldr	r2, [pc, #40]	; (80094fc <prvHeapInit+0xb8>)
 80094d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	4a09      	ldr	r2, [pc, #36]	; (8009500 <prvHeapInit+0xbc>)
 80094da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094dc:	4b09      	ldr	r3, [pc, #36]	; (8009504 <prvHeapInit+0xc0>)
 80094de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094e2:	601a      	str	r2, [r3, #0]
}
 80094e4:	bf00      	nop
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	200004d0 	.word	0x200004d0
 80094f4:	200040d0 	.word	0x200040d0
 80094f8:	200040d8 	.word	0x200040d8
 80094fc:	200040e0 	.word	0x200040e0
 8009500:	200040dc 	.word	0x200040dc
 8009504:	200040ec 	.word	0x200040ec

08009508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009510:	4b28      	ldr	r3, [pc, #160]	; (80095b4 <prvInsertBlockIntoFreeList+0xac>)
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e002      	b.n	800951c <prvInsertBlockIntoFreeList+0x14>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	429a      	cmp	r2, r3
 8009524:	d8f7      	bhi.n	8009516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	4413      	add	r3, r2
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	d108      	bne.n	800954a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	441a      	add	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	441a      	add	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d118      	bne.n	8009590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	429a      	cmp	r2, r3
 8009568:	d00d      	beq.n	8009586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	441a      	add	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	e008      	b.n	8009598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009586:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	e003      	b.n	8009598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d002      	beq.n	80095a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	200040d0 	.word	0x200040d0
 80095b8:	200040d8 	.word	0x200040d8

080095bc <atoi>:
 80095bc:	220a      	movs	r2, #10
 80095be:	2100      	movs	r1, #0
 80095c0:	f000 b972 	b.w	80098a8 <strtol>

080095c4 <__errno>:
 80095c4:	4b01      	ldr	r3, [pc, #4]	; (80095cc <__errno+0x8>)
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	20000058 	.word	0x20000058

080095d0 <__libc_init_array>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4d0d      	ldr	r5, [pc, #52]	; (8009608 <__libc_init_array+0x38>)
 80095d4:	4c0d      	ldr	r4, [pc, #52]	; (800960c <__libc_init_array+0x3c>)
 80095d6:	1b64      	subs	r4, r4, r5
 80095d8:	10a4      	asrs	r4, r4, #2
 80095da:	2600      	movs	r6, #0
 80095dc:	42a6      	cmp	r6, r4
 80095de:	d109      	bne.n	80095f4 <__libc_init_array+0x24>
 80095e0:	4d0b      	ldr	r5, [pc, #44]	; (8009610 <__libc_init_array+0x40>)
 80095e2:	4c0c      	ldr	r4, [pc, #48]	; (8009614 <__libc_init_array+0x44>)
 80095e4:	f001 fa4c 	bl	800aa80 <_init>
 80095e8:	1b64      	subs	r4, r4, r5
 80095ea:	10a4      	asrs	r4, r4, #2
 80095ec:	2600      	movs	r6, #0
 80095ee:	42a6      	cmp	r6, r4
 80095f0:	d105      	bne.n	80095fe <__libc_init_array+0x2e>
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f8:	4798      	blx	r3
 80095fa:	3601      	adds	r6, #1
 80095fc:	e7ee      	b.n	80095dc <__libc_init_array+0xc>
 80095fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009602:	4798      	blx	r3
 8009604:	3601      	adds	r6, #1
 8009606:	e7f2      	b.n	80095ee <__libc_init_array+0x1e>
 8009608:	0800af88 	.word	0x0800af88
 800960c:	0800af88 	.word	0x0800af88
 8009610:	0800af88 	.word	0x0800af88
 8009614:	0800af8c 	.word	0x0800af8c

08009618 <memcpy>:
 8009618:	440a      	add	r2, r1
 800961a:	4291      	cmp	r1, r2
 800961c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009620:	d100      	bne.n	8009624 <memcpy+0xc>
 8009622:	4770      	bx	lr
 8009624:	b510      	push	{r4, lr}
 8009626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800962a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800962e:	4291      	cmp	r1, r2
 8009630:	d1f9      	bne.n	8009626 <memcpy+0xe>
 8009632:	bd10      	pop	{r4, pc}

08009634 <memset>:
 8009634:	4402      	add	r2, r0
 8009636:	4603      	mov	r3, r0
 8009638:	4293      	cmp	r3, r2
 800963a:	d100      	bne.n	800963e <memset+0xa>
 800963c:	4770      	bx	lr
 800963e:	f803 1b01 	strb.w	r1, [r3], #1
 8009642:	e7f9      	b.n	8009638 <memset+0x4>

08009644 <iprintf>:
 8009644:	b40f      	push	{r0, r1, r2, r3}
 8009646:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <iprintf+0x2c>)
 8009648:	b513      	push	{r0, r1, r4, lr}
 800964a:	681c      	ldr	r4, [r3, #0]
 800964c:	b124      	cbz	r4, 8009658 <iprintf+0x14>
 800964e:	69a3      	ldr	r3, [r4, #24]
 8009650:	b913      	cbnz	r3, 8009658 <iprintf+0x14>
 8009652:	4620      	mov	r0, r4
 8009654:	f000 fb0c 	bl	8009c70 <__sinit>
 8009658:	ab05      	add	r3, sp, #20
 800965a:	9a04      	ldr	r2, [sp, #16]
 800965c:	68a1      	ldr	r1, [r4, #8]
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fe39 	bl	800a2d8 <_vfiprintf_r>
 8009666:	b002      	add	sp, #8
 8009668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800966c:	b004      	add	sp, #16
 800966e:	4770      	bx	lr
 8009670:	20000058 	.word	0x20000058

08009674 <_puts_r>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	460e      	mov	r6, r1
 8009678:	4605      	mov	r5, r0
 800967a:	b118      	cbz	r0, 8009684 <_puts_r+0x10>
 800967c:	6983      	ldr	r3, [r0, #24]
 800967e:	b90b      	cbnz	r3, 8009684 <_puts_r+0x10>
 8009680:	f000 faf6 	bl	8009c70 <__sinit>
 8009684:	69ab      	ldr	r3, [r5, #24]
 8009686:	68ac      	ldr	r4, [r5, #8]
 8009688:	b913      	cbnz	r3, 8009690 <_puts_r+0x1c>
 800968a:	4628      	mov	r0, r5
 800968c:	f000 faf0 	bl	8009c70 <__sinit>
 8009690:	4b2c      	ldr	r3, [pc, #176]	; (8009744 <_puts_r+0xd0>)
 8009692:	429c      	cmp	r4, r3
 8009694:	d120      	bne.n	80096d8 <_puts_r+0x64>
 8009696:	686c      	ldr	r4, [r5, #4]
 8009698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800969a:	07db      	lsls	r3, r3, #31
 800969c:	d405      	bmi.n	80096aa <_puts_r+0x36>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	0598      	lsls	r0, r3, #22
 80096a2:	d402      	bmi.n	80096aa <_puts_r+0x36>
 80096a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a6:	f000 fb81 	bl	8009dac <__retarget_lock_acquire_recursive>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	0719      	lsls	r1, r3, #28
 80096ae:	d51d      	bpl.n	80096ec <_puts_r+0x78>
 80096b0:	6923      	ldr	r3, [r4, #16]
 80096b2:	b1db      	cbz	r3, 80096ec <_puts_r+0x78>
 80096b4:	3e01      	subs	r6, #1
 80096b6:	68a3      	ldr	r3, [r4, #8]
 80096b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096bc:	3b01      	subs	r3, #1
 80096be:	60a3      	str	r3, [r4, #8]
 80096c0:	bb39      	cbnz	r1, 8009712 <_puts_r+0x9e>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da38      	bge.n	8009738 <_puts_r+0xc4>
 80096c6:	4622      	mov	r2, r4
 80096c8:	210a      	movs	r1, #10
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f8f6 	bl	80098bc <__swbuf_r>
 80096d0:	3001      	adds	r0, #1
 80096d2:	d011      	beq.n	80096f8 <_puts_r+0x84>
 80096d4:	250a      	movs	r5, #10
 80096d6:	e011      	b.n	80096fc <_puts_r+0x88>
 80096d8:	4b1b      	ldr	r3, [pc, #108]	; (8009748 <_puts_r+0xd4>)
 80096da:	429c      	cmp	r4, r3
 80096dc:	d101      	bne.n	80096e2 <_puts_r+0x6e>
 80096de:	68ac      	ldr	r4, [r5, #8]
 80096e0:	e7da      	b.n	8009698 <_puts_r+0x24>
 80096e2:	4b1a      	ldr	r3, [pc, #104]	; (800974c <_puts_r+0xd8>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	bf08      	it	eq
 80096e8:	68ec      	ldreq	r4, [r5, #12]
 80096ea:	e7d5      	b.n	8009698 <_puts_r+0x24>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f000 f936 	bl	8009960 <__swsetup_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d0dd      	beq.n	80096b4 <_puts_r+0x40>
 80096f8:	f04f 35ff 	mov.w	r5, #4294967295
 80096fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096fe:	07da      	lsls	r2, r3, #31
 8009700:	d405      	bmi.n	800970e <_puts_r+0x9a>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	059b      	lsls	r3, r3, #22
 8009706:	d402      	bmi.n	800970e <_puts_r+0x9a>
 8009708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800970a:	f000 fb50 	bl	8009dae <__retarget_lock_release_recursive>
 800970e:	4628      	mov	r0, r5
 8009710:	bd70      	pop	{r4, r5, r6, pc}
 8009712:	2b00      	cmp	r3, #0
 8009714:	da04      	bge.n	8009720 <_puts_r+0xac>
 8009716:	69a2      	ldr	r2, [r4, #24]
 8009718:	429a      	cmp	r2, r3
 800971a:	dc06      	bgt.n	800972a <_puts_r+0xb6>
 800971c:	290a      	cmp	r1, #10
 800971e:	d004      	beq.n	800972a <_puts_r+0xb6>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	6022      	str	r2, [r4, #0]
 8009726:	7019      	strb	r1, [r3, #0]
 8009728:	e7c5      	b.n	80096b6 <_puts_r+0x42>
 800972a:	4622      	mov	r2, r4
 800972c:	4628      	mov	r0, r5
 800972e:	f000 f8c5 	bl	80098bc <__swbuf_r>
 8009732:	3001      	adds	r0, #1
 8009734:	d1bf      	bne.n	80096b6 <_puts_r+0x42>
 8009736:	e7df      	b.n	80096f8 <_puts_r+0x84>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	250a      	movs	r5, #10
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	6022      	str	r2, [r4, #0]
 8009740:	701d      	strb	r5, [r3, #0]
 8009742:	e7db      	b.n	80096fc <_puts_r+0x88>
 8009744:	0800af0c 	.word	0x0800af0c
 8009748:	0800af2c 	.word	0x0800af2c
 800974c:	0800aeec 	.word	0x0800aeec

08009750 <puts>:
 8009750:	4b02      	ldr	r3, [pc, #8]	; (800975c <puts+0xc>)
 8009752:	4601      	mov	r1, r0
 8009754:	6818      	ldr	r0, [r3, #0]
 8009756:	f7ff bf8d 	b.w	8009674 <_puts_r>
 800975a:	bf00      	nop
 800975c:	20000058 	.word	0x20000058

08009760 <siprintf>:
 8009760:	b40e      	push	{r1, r2, r3}
 8009762:	b500      	push	{lr}
 8009764:	b09c      	sub	sp, #112	; 0x70
 8009766:	ab1d      	add	r3, sp, #116	; 0x74
 8009768:	9002      	str	r0, [sp, #8]
 800976a:	9006      	str	r0, [sp, #24]
 800976c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009770:	4809      	ldr	r0, [pc, #36]	; (8009798 <siprintf+0x38>)
 8009772:	9107      	str	r1, [sp, #28]
 8009774:	9104      	str	r1, [sp, #16]
 8009776:	4909      	ldr	r1, [pc, #36]	; (800979c <siprintf+0x3c>)
 8009778:	f853 2b04 	ldr.w	r2, [r3], #4
 800977c:	9105      	str	r1, [sp, #20]
 800977e:	6800      	ldr	r0, [r0, #0]
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	a902      	add	r1, sp, #8
 8009784:	f000 fc7e 	bl	800a084 <_svfiprintf_r>
 8009788:	9b02      	ldr	r3, [sp, #8]
 800978a:	2200      	movs	r2, #0
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	b01c      	add	sp, #112	; 0x70
 8009790:	f85d eb04 	ldr.w	lr, [sp], #4
 8009794:	b003      	add	sp, #12
 8009796:	4770      	bx	lr
 8009798:	20000058 	.word	0x20000058
 800979c:	ffff0208 	.word	0xffff0208

080097a0 <_strtol_l.isra.0>:
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a6:	d001      	beq.n	80097ac <_strtol_l.isra.0+0xc>
 80097a8:	2b24      	cmp	r3, #36	; 0x24
 80097aa:	d906      	bls.n	80097ba <_strtol_l.isra.0+0x1a>
 80097ac:	f7ff ff0a 	bl	80095c4 <__errno>
 80097b0:	2316      	movs	r3, #22
 80097b2:	6003      	str	r3, [r0, #0]
 80097b4:	2000      	movs	r0, #0
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	4f3a      	ldr	r7, [pc, #232]	; (80098a4 <_strtol_l.isra.0+0x104>)
 80097bc:	468e      	mov	lr, r1
 80097be:	4676      	mov	r6, lr
 80097c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80097c4:	5de5      	ldrb	r5, [r4, r7]
 80097c6:	f015 0508 	ands.w	r5, r5, #8
 80097ca:	d1f8      	bne.n	80097be <_strtol_l.isra.0+0x1e>
 80097cc:	2c2d      	cmp	r4, #45	; 0x2d
 80097ce:	d134      	bne.n	800983a <_strtol_l.isra.0+0x9a>
 80097d0:	f89e 4000 	ldrb.w	r4, [lr]
 80097d4:	f04f 0801 	mov.w	r8, #1
 80097d8:	f106 0e02 	add.w	lr, r6, #2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d05c      	beq.n	800989a <_strtol_l.isra.0+0xfa>
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	d10c      	bne.n	80097fe <_strtol_l.isra.0+0x5e>
 80097e4:	2c30      	cmp	r4, #48	; 0x30
 80097e6:	d10a      	bne.n	80097fe <_strtol_l.isra.0+0x5e>
 80097e8:	f89e 4000 	ldrb.w	r4, [lr]
 80097ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80097f0:	2c58      	cmp	r4, #88	; 0x58
 80097f2:	d14d      	bne.n	8009890 <_strtol_l.isra.0+0xf0>
 80097f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80097f8:	2310      	movs	r3, #16
 80097fa:	f10e 0e02 	add.w	lr, lr, #2
 80097fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009802:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009806:	2600      	movs	r6, #0
 8009808:	fbbc f9f3 	udiv	r9, ip, r3
 800980c:	4635      	mov	r5, r6
 800980e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009812:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009816:	2f09      	cmp	r7, #9
 8009818:	d818      	bhi.n	800984c <_strtol_l.isra.0+0xac>
 800981a:	463c      	mov	r4, r7
 800981c:	42a3      	cmp	r3, r4
 800981e:	dd24      	ble.n	800986a <_strtol_l.isra.0+0xca>
 8009820:	2e00      	cmp	r6, #0
 8009822:	db1f      	blt.n	8009864 <_strtol_l.isra.0+0xc4>
 8009824:	45a9      	cmp	r9, r5
 8009826:	d31d      	bcc.n	8009864 <_strtol_l.isra.0+0xc4>
 8009828:	d101      	bne.n	800982e <_strtol_l.isra.0+0x8e>
 800982a:	45a2      	cmp	sl, r4
 800982c:	db1a      	blt.n	8009864 <_strtol_l.isra.0+0xc4>
 800982e:	fb05 4503 	mla	r5, r5, r3, r4
 8009832:	2601      	movs	r6, #1
 8009834:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009838:	e7eb      	b.n	8009812 <_strtol_l.isra.0+0x72>
 800983a:	2c2b      	cmp	r4, #43	; 0x2b
 800983c:	bf08      	it	eq
 800983e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009842:	46a8      	mov	r8, r5
 8009844:	bf08      	it	eq
 8009846:	f106 0e02 	addeq.w	lr, r6, #2
 800984a:	e7c7      	b.n	80097dc <_strtol_l.isra.0+0x3c>
 800984c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009850:	2f19      	cmp	r7, #25
 8009852:	d801      	bhi.n	8009858 <_strtol_l.isra.0+0xb8>
 8009854:	3c37      	subs	r4, #55	; 0x37
 8009856:	e7e1      	b.n	800981c <_strtol_l.isra.0+0x7c>
 8009858:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800985c:	2f19      	cmp	r7, #25
 800985e:	d804      	bhi.n	800986a <_strtol_l.isra.0+0xca>
 8009860:	3c57      	subs	r4, #87	; 0x57
 8009862:	e7db      	b.n	800981c <_strtol_l.isra.0+0x7c>
 8009864:	f04f 36ff 	mov.w	r6, #4294967295
 8009868:	e7e4      	b.n	8009834 <_strtol_l.isra.0+0x94>
 800986a:	2e00      	cmp	r6, #0
 800986c:	da05      	bge.n	800987a <_strtol_l.isra.0+0xda>
 800986e:	2322      	movs	r3, #34	; 0x22
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	4665      	mov	r5, ip
 8009874:	b942      	cbnz	r2, 8009888 <_strtol_l.isra.0+0xe8>
 8009876:	4628      	mov	r0, r5
 8009878:	e79d      	b.n	80097b6 <_strtol_l.isra.0+0x16>
 800987a:	f1b8 0f00 	cmp.w	r8, #0
 800987e:	d000      	beq.n	8009882 <_strtol_l.isra.0+0xe2>
 8009880:	426d      	negs	r5, r5
 8009882:	2a00      	cmp	r2, #0
 8009884:	d0f7      	beq.n	8009876 <_strtol_l.isra.0+0xd6>
 8009886:	b10e      	cbz	r6, 800988c <_strtol_l.isra.0+0xec>
 8009888:	f10e 31ff 	add.w	r1, lr, #4294967295
 800988c:	6011      	str	r1, [r2, #0]
 800988e:	e7f2      	b.n	8009876 <_strtol_l.isra.0+0xd6>
 8009890:	2430      	movs	r4, #48	; 0x30
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1b3      	bne.n	80097fe <_strtol_l.isra.0+0x5e>
 8009896:	2308      	movs	r3, #8
 8009898:	e7b1      	b.n	80097fe <_strtol_l.isra.0+0x5e>
 800989a:	2c30      	cmp	r4, #48	; 0x30
 800989c:	d0a4      	beq.n	80097e8 <_strtol_l.isra.0+0x48>
 800989e:	230a      	movs	r3, #10
 80098a0:	e7ad      	b.n	80097fe <_strtol_l.isra.0+0x5e>
 80098a2:	bf00      	nop
 80098a4:	0800ade9 	.word	0x0800ade9

080098a8 <strtol>:
 80098a8:	4613      	mov	r3, r2
 80098aa:	460a      	mov	r2, r1
 80098ac:	4601      	mov	r1, r0
 80098ae:	4802      	ldr	r0, [pc, #8]	; (80098b8 <strtol+0x10>)
 80098b0:	6800      	ldr	r0, [r0, #0]
 80098b2:	f7ff bf75 	b.w	80097a0 <_strtol_l.isra.0>
 80098b6:	bf00      	nop
 80098b8:	20000058 	.word	0x20000058

080098bc <__swbuf_r>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	460e      	mov	r6, r1
 80098c0:	4614      	mov	r4, r2
 80098c2:	4605      	mov	r5, r0
 80098c4:	b118      	cbz	r0, 80098ce <__swbuf_r+0x12>
 80098c6:	6983      	ldr	r3, [r0, #24]
 80098c8:	b90b      	cbnz	r3, 80098ce <__swbuf_r+0x12>
 80098ca:	f000 f9d1 	bl	8009c70 <__sinit>
 80098ce:	4b21      	ldr	r3, [pc, #132]	; (8009954 <__swbuf_r+0x98>)
 80098d0:	429c      	cmp	r4, r3
 80098d2:	d12b      	bne.n	800992c <__swbuf_r+0x70>
 80098d4:	686c      	ldr	r4, [r5, #4]
 80098d6:	69a3      	ldr	r3, [r4, #24]
 80098d8:	60a3      	str	r3, [r4, #8]
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	071a      	lsls	r2, r3, #28
 80098de:	d52f      	bpl.n	8009940 <__swbuf_r+0x84>
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	b36b      	cbz	r3, 8009940 <__swbuf_r+0x84>
 80098e4:	6923      	ldr	r3, [r4, #16]
 80098e6:	6820      	ldr	r0, [r4, #0]
 80098e8:	1ac0      	subs	r0, r0, r3
 80098ea:	6963      	ldr	r3, [r4, #20]
 80098ec:	b2f6      	uxtb	r6, r6
 80098ee:	4283      	cmp	r3, r0
 80098f0:	4637      	mov	r7, r6
 80098f2:	dc04      	bgt.n	80098fe <__swbuf_r+0x42>
 80098f4:	4621      	mov	r1, r4
 80098f6:	4628      	mov	r0, r5
 80098f8:	f000 f926 	bl	8009b48 <_fflush_r>
 80098fc:	bb30      	cbnz	r0, 800994c <__swbuf_r+0x90>
 80098fe:	68a3      	ldr	r3, [r4, #8]
 8009900:	3b01      	subs	r3, #1
 8009902:	60a3      	str	r3, [r4, #8]
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	6022      	str	r2, [r4, #0]
 800990a:	701e      	strb	r6, [r3, #0]
 800990c:	6963      	ldr	r3, [r4, #20]
 800990e:	3001      	adds	r0, #1
 8009910:	4283      	cmp	r3, r0
 8009912:	d004      	beq.n	800991e <__swbuf_r+0x62>
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	07db      	lsls	r3, r3, #31
 8009918:	d506      	bpl.n	8009928 <__swbuf_r+0x6c>
 800991a:	2e0a      	cmp	r6, #10
 800991c:	d104      	bne.n	8009928 <__swbuf_r+0x6c>
 800991e:	4621      	mov	r1, r4
 8009920:	4628      	mov	r0, r5
 8009922:	f000 f911 	bl	8009b48 <_fflush_r>
 8009926:	b988      	cbnz	r0, 800994c <__swbuf_r+0x90>
 8009928:	4638      	mov	r0, r7
 800992a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800992c:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <__swbuf_r+0x9c>)
 800992e:	429c      	cmp	r4, r3
 8009930:	d101      	bne.n	8009936 <__swbuf_r+0x7a>
 8009932:	68ac      	ldr	r4, [r5, #8]
 8009934:	e7cf      	b.n	80098d6 <__swbuf_r+0x1a>
 8009936:	4b09      	ldr	r3, [pc, #36]	; (800995c <__swbuf_r+0xa0>)
 8009938:	429c      	cmp	r4, r3
 800993a:	bf08      	it	eq
 800993c:	68ec      	ldreq	r4, [r5, #12]
 800993e:	e7ca      	b.n	80098d6 <__swbuf_r+0x1a>
 8009940:	4621      	mov	r1, r4
 8009942:	4628      	mov	r0, r5
 8009944:	f000 f80c 	bl	8009960 <__swsetup_r>
 8009948:	2800      	cmp	r0, #0
 800994a:	d0cb      	beq.n	80098e4 <__swbuf_r+0x28>
 800994c:	f04f 37ff 	mov.w	r7, #4294967295
 8009950:	e7ea      	b.n	8009928 <__swbuf_r+0x6c>
 8009952:	bf00      	nop
 8009954:	0800af0c 	.word	0x0800af0c
 8009958:	0800af2c 	.word	0x0800af2c
 800995c:	0800aeec 	.word	0x0800aeec

08009960 <__swsetup_r>:
 8009960:	4b32      	ldr	r3, [pc, #200]	; (8009a2c <__swsetup_r+0xcc>)
 8009962:	b570      	push	{r4, r5, r6, lr}
 8009964:	681d      	ldr	r5, [r3, #0]
 8009966:	4606      	mov	r6, r0
 8009968:	460c      	mov	r4, r1
 800996a:	b125      	cbz	r5, 8009976 <__swsetup_r+0x16>
 800996c:	69ab      	ldr	r3, [r5, #24]
 800996e:	b913      	cbnz	r3, 8009976 <__swsetup_r+0x16>
 8009970:	4628      	mov	r0, r5
 8009972:	f000 f97d 	bl	8009c70 <__sinit>
 8009976:	4b2e      	ldr	r3, [pc, #184]	; (8009a30 <__swsetup_r+0xd0>)
 8009978:	429c      	cmp	r4, r3
 800997a:	d10f      	bne.n	800999c <__swsetup_r+0x3c>
 800997c:	686c      	ldr	r4, [r5, #4]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009984:	0719      	lsls	r1, r3, #28
 8009986:	d42c      	bmi.n	80099e2 <__swsetup_r+0x82>
 8009988:	06dd      	lsls	r5, r3, #27
 800998a:	d411      	bmi.n	80099b0 <__swsetup_r+0x50>
 800998c:	2309      	movs	r3, #9
 800998e:	6033      	str	r3, [r6, #0]
 8009990:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009994:	81a3      	strh	r3, [r4, #12]
 8009996:	f04f 30ff 	mov.w	r0, #4294967295
 800999a:	e03e      	b.n	8009a1a <__swsetup_r+0xba>
 800999c:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <__swsetup_r+0xd4>)
 800999e:	429c      	cmp	r4, r3
 80099a0:	d101      	bne.n	80099a6 <__swsetup_r+0x46>
 80099a2:	68ac      	ldr	r4, [r5, #8]
 80099a4:	e7eb      	b.n	800997e <__swsetup_r+0x1e>
 80099a6:	4b24      	ldr	r3, [pc, #144]	; (8009a38 <__swsetup_r+0xd8>)
 80099a8:	429c      	cmp	r4, r3
 80099aa:	bf08      	it	eq
 80099ac:	68ec      	ldreq	r4, [r5, #12]
 80099ae:	e7e6      	b.n	800997e <__swsetup_r+0x1e>
 80099b0:	0758      	lsls	r0, r3, #29
 80099b2:	d512      	bpl.n	80099da <__swsetup_r+0x7a>
 80099b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099b6:	b141      	cbz	r1, 80099ca <__swsetup_r+0x6a>
 80099b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099bc:	4299      	cmp	r1, r3
 80099be:	d002      	beq.n	80099c6 <__swsetup_r+0x66>
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 fa59 	bl	8009e78 <_free_r>
 80099c6:	2300      	movs	r3, #0
 80099c8:	6363      	str	r3, [r4, #52]	; 0x34
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099d0:	81a3      	strh	r3, [r4, #12]
 80099d2:	2300      	movs	r3, #0
 80099d4:	6063      	str	r3, [r4, #4]
 80099d6:	6923      	ldr	r3, [r4, #16]
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	f043 0308 	orr.w	r3, r3, #8
 80099e0:	81a3      	strh	r3, [r4, #12]
 80099e2:	6923      	ldr	r3, [r4, #16]
 80099e4:	b94b      	cbnz	r3, 80099fa <__swsetup_r+0x9a>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099f0:	d003      	beq.n	80099fa <__swsetup_r+0x9a>
 80099f2:	4621      	mov	r1, r4
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 f9ff 	bl	8009df8 <__smakebuf_r>
 80099fa:	89a0      	ldrh	r0, [r4, #12]
 80099fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a00:	f010 0301 	ands.w	r3, r0, #1
 8009a04:	d00a      	beq.n	8009a1c <__swsetup_r+0xbc>
 8009a06:	2300      	movs	r3, #0
 8009a08:	60a3      	str	r3, [r4, #8]
 8009a0a:	6963      	ldr	r3, [r4, #20]
 8009a0c:	425b      	negs	r3, r3
 8009a0e:	61a3      	str	r3, [r4, #24]
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	b943      	cbnz	r3, 8009a26 <__swsetup_r+0xc6>
 8009a14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a18:	d1ba      	bne.n	8009990 <__swsetup_r+0x30>
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
 8009a1c:	0781      	lsls	r1, r0, #30
 8009a1e:	bf58      	it	pl
 8009a20:	6963      	ldrpl	r3, [r4, #20]
 8009a22:	60a3      	str	r3, [r4, #8]
 8009a24:	e7f4      	b.n	8009a10 <__swsetup_r+0xb0>
 8009a26:	2000      	movs	r0, #0
 8009a28:	e7f7      	b.n	8009a1a <__swsetup_r+0xba>
 8009a2a:	bf00      	nop
 8009a2c:	20000058 	.word	0x20000058
 8009a30:	0800af0c 	.word	0x0800af0c
 8009a34:	0800af2c 	.word	0x0800af2c
 8009a38:	0800aeec 	.word	0x0800aeec

08009a3c <__sflush_r>:
 8009a3c:	898a      	ldrh	r2, [r1, #12]
 8009a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a42:	4605      	mov	r5, r0
 8009a44:	0710      	lsls	r0, r2, #28
 8009a46:	460c      	mov	r4, r1
 8009a48:	d458      	bmi.n	8009afc <__sflush_r+0xc0>
 8009a4a:	684b      	ldr	r3, [r1, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc05      	bgt.n	8009a5c <__sflush_r+0x20>
 8009a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dc02      	bgt.n	8009a5c <__sflush_r+0x20>
 8009a56:	2000      	movs	r0, #0
 8009a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	d0f9      	beq.n	8009a56 <__sflush_r+0x1a>
 8009a62:	2300      	movs	r3, #0
 8009a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a68:	682f      	ldr	r7, [r5, #0]
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	d032      	beq.n	8009ad4 <__sflush_r+0x98>
 8009a6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	075a      	lsls	r2, r3, #29
 8009a74:	d505      	bpl.n	8009a82 <__sflush_r+0x46>
 8009a76:	6863      	ldr	r3, [r4, #4]
 8009a78:	1ac0      	subs	r0, r0, r3
 8009a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a7c:	b10b      	cbz	r3, 8009a82 <__sflush_r+0x46>
 8009a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a80:	1ac0      	subs	r0, r0, r3
 8009a82:	2300      	movs	r3, #0
 8009a84:	4602      	mov	r2, r0
 8009a86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a88:	6a21      	ldr	r1, [r4, #32]
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	47b0      	blx	r6
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	d106      	bne.n	8009aa2 <__sflush_r+0x66>
 8009a94:	6829      	ldr	r1, [r5, #0]
 8009a96:	291d      	cmp	r1, #29
 8009a98:	d82c      	bhi.n	8009af4 <__sflush_r+0xb8>
 8009a9a:	4a2a      	ldr	r2, [pc, #168]	; (8009b44 <__sflush_r+0x108>)
 8009a9c:	40ca      	lsrs	r2, r1
 8009a9e:	07d6      	lsls	r6, r2, #31
 8009aa0:	d528      	bpl.n	8009af4 <__sflush_r+0xb8>
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	6062      	str	r2, [r4, #4]
 8009aa6:	04d9      	lsls	r1, r3, #19
 8009aa8:	6922      	ldr	r2, [r4, #16]
 8009aaa:	6022      	str	r2, [r4, #0]
 8009aac:	d504      	bpl.n	8009ab8 <__sflush_r+0x7c>
 8009aae:	1c42      	adds	r2, r0, #1
 8009ab0:	d101      	bne.n	8009ab6 <__sflush_r+0x7a>
 8009ab2:	682b      	ldr	r3, [r5, #0]
 8009ab4:	b903      	cbnz	r3, 8009ab8 <__sflush_r+0x7c>
 8009ab6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aba:	602f      	str	r7, [r5, #0]
 8009abc:	2900      	cmp	r1, #0
 8009abe:	d0ca      	beq.n	8009a56 <__sflush_r+0x1a>
 8009ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ac4:	4299      	cmp	r1, r3
 8009ac6:	d002      	beq.n	8009ace <__sflush_r+0x92>
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 f9d5 	bl	8009e78 <_free_r>
 8009ace:	2000      	movs	r0, #0
 8009ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ad2:	e7c1      	b.n	8009a58 <__sflush_r+0x1c>
 8009ad4:	6a21      	ldr	r1, [r4, #32]
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b0      	blx	r6
 8009adc:	1c41      	adds	r1, r0, #1
 8009ade:	d1c7      	bne.n	8009a70 <__sflush_r+0x34>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0c4      	beq.n	8009a70 <__sflush_r+0x34>
 8009ae6:	2b1d      	cmp	r3, #29
 8009ae8:	d001      	beq.n	8009aee <__sflush_r+0xb2>
 8009aea:	2b16      	cmp	r3, #22
 8009aec:	d101      	bne.n	8009af2 <__sflush_r+0xb6>
 8009aee:	602f      	str	r7, [r5, #0]
 8009af0:	e7b1      	b.n	8009a56 <__sflush_r+0x1a>
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	e7ad      	b.n	8009a58 <__sflush_r+0x1c>
 8009afc:	690f      	ldr	r7, [r1, #16]
 8009afe:	2f00      	cmp	r7, #0
 8009b00:	d0a9      	beq.n	8009a56 <__sflush_r+0x1a>
 8009b02:	0793      	lsls	r3, r2, #30
 8009b04:	680e      	ldr	r6, [r1, #0]
 8009b06:	bf08      	it	eq
 8009b08:	694b      	ldreq	r3, [r1, #20]
 8009b0a:	600f      	str	r7, [r1, #0]
 8009b0c:	bf18      	it	ne
 8009b0e:	2300      	movne	r3, #0
 8009b10:	eba6 0807 	sub.w	r8, r6, r7
 8009b14:	608b      	str	r3, [r1, #8]
 8009b16:	f1b8 0f00 	cmp.w	r8, #0
 8009b1a:	dd9c      	ble.n	8009a56 <__sflush_r+0x1a>
 8009b1c:	6a21      	ldr	r1, [r4, #32]
 8009b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b20:	4643      	mov	r3, r8
 8009b22:	463a      	mov	r2, r7
 8009b24:	4628      	mov	r0, r5
 8009b26:	47b0      	blx	r6
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	dc06      	bgt.n	8009b3a <__sflush_r+0xfe>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	e78e      	b.n	8009a58 <__sflush_r+0x1c>
 8009b3a:	4407      	add	r7, r0
 8009b3c:	eba8 0800 	sub.w	r8, r8, r0
 8009b40:	e7e9      	b.n	8009b16 <__sflush_r+0xda>
 8009b42:	bf00      	nop
 8009b44:	20400001 	.word	0x20400001

08009b48 <_fflush_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	690b      	ldr	r3, [r1, #16]
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	b913      	cbnz	r3, 8009b58 <_fflush_r+0x10>
 8009b52:	2500      	movs	r5, #0
 8009b54:	4628      	mov	r0, r5
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	b118      	cbz	r0, 8009b62 <_fflush_r+0x1a>
 8009b5a:	6983      	ldr	r3, [r0, #24]
 8009b5c:	b90b      	cbnz	r3, 8009b62 <_fflush_r+0x1a>
 8009b5e:	f000 f887 	bl	8009c70 <__sinit>
 8009b62:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <_fflush_r+0x6c>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	d11b      	bne.n	8009ba0 <_fflush_r+0x58>
 8009b68:	686c      	ldr	r4, [r5, #4]
 8009b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0ef      	beq.n	8009b52 <_fflush_r+0xa>
 8009b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b74:	07d0      	lsls	r0, r2, #31
 8009b76:	d404      	bmi.n	8009b82 <_fflush_r+0x3a>
 8009b78:	0599      	lsls	r1, r3, #22
 8009b7a:	d402      	bmi.n	8009b82 <_fflush_r+0x3a>
 8009b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b7e:	f000 f915 	bl	8009dac <__retarget_lock_acquire_recursive>
 8009b82:	4628      	mov	r0, r5
 8009b84:	4621      	mov	r1, r4
 8009b86:	f7ff ff59 	bl	8009a3c <__sflush_r>
 8009b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b8c:	07da      	lsls	r2, r3, #31
 8009b8e:	4605      	mov	r5, r0
 8009b90:	d4e0      	bmi.n	8009b54 <_fflush_r+0xc>
 8009b92:	89a3      	ldrh	r3, [r4, #12]
 8009b94:	059b      	lsls	r3, r3, #22
 8009b96:	d4dd      	bmi.n	8009b54 <_fflush_r+0xc>
 8009b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b9a:	f000 f908 	bl	8009dae <__retarget_lock_release_recursive>
 8009b9e:	e7d9      	b.n	8009b54 <_fflush_r+0xc>
 8009ba0:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <_fflush_r+0x70>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d101      	bne.n	8009baa <_fflush_r+0x62>
 8009ba6:	68ac      	ldr	r4, [r5, #8]
 8009ba8:	e7df      	b.n	8009b6a <_fflush_r+0x22>
 8009baa:	4b04      	ldr	r3, [pc, #16]	; (8009bbc <_fflush_r+0x74>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	bf08      	it	eq
 8009bb0:	68ec      	ldreq	r4, [r5, #12]
 8009bb2:	e7da      	b.n	8009b6a <_fflush_r+0x22>
 8009bb4:	0800af0c 	.word	0x0800af0c
 8009bb8:	0800af2c 	.word	0x0800af2c
 8009bbc:	0800aeec 	.word	0x0800aeec

08009bc0 <std>:
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bce:	6083      	str	r3, [r0, #8]
 8009bd0:	8181      	strh	r1, [r0, #12]
 8009bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8009bd4:	81c2      	strh	r2, [r0, #14]
 8009bd6:	6183      	str	r3, [r0, #24]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	2208      	movs	r2, #8
 8009bdc:	305c      	adds	r0, #92	; 0x5c
 8009bde:	f7ff fd29 	bl	8009634 <memset>
 8009be2:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <std+0x38>)
 8009be4:	6263      	str	r3, [r4, #36]	; 0x24
 8009be6:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <std+0x3c>)
 8009be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bea:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <std+0x40>)
 8009bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bee:	4b05      	ldr	r3, [pc, #20]	; (8009c04 <std+0x44>)
 8009bf0:	6224      	str	r4, [r4, #32]
 8009bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8009bf4:	bd10      	pop	{r4, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0800a881 	.word	0x0800a881
 8009bfc:	0800a8a3 	.word	0x0800a8a3
 8009c00:	0800a8db 	.word	0x0800a8db
 8009c04:	0800a8ff 	.word	0x0800a8ff

08009c08 <_cleanup_r>:
 8009c08:	4901      	ldr	r1, [pc, #4]	; (8009c10 <_cleanup_r+0x8>)
 8009c0a:	f000 b8af 	b.w	8009d6c <_fwalk_reent>
 8009c0e:	bf00      	nop
 8009c10:	08009b49 	.word	0x08009b49

08009c14 <__sfmoreglue>:
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	1e4a      	subs	r2, r1, #1
 8009c18:	2568      	movs	r5, #104	; 0x68
 8009c1a:	4355      	muls	r5, r2
 8009c1c:	460e      	mov	r6, r1
 8009c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c22:	f000 f979 	bl	8009f18 <_malloc_r>
 8009c26:	4604      	mov	r4, r0
 8009c28:	b140      	cbz	r0, 8009c3c <__sfmoreglue+0x28>
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8009c30:	300c      	adds	r0, #12
 8009c32:	60a0      	str	r0, [r4, #8]
 8009c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c38:	f7ff fcfc 	bl	8009634 <memset>
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}

08009c40 <__sfp_lock_acquire>:
 8009c40:	4801      	ldr	r0, [pc, #4]	; (8009c48 <__sfp_lock_acquire+0x8>)
 8009c42:	f000 b8b3 	b.w	8009dac <__retarget_lock_acquire_recursive>
 8009c46:	bf00      	nop
 8009c48:	20004ca8 	.word	0x20004ca8

08009c4c <__sfp_lock_release>:
 8009c4c:	4801      	ldr	r0, [pc, #4]	; (8009c54 <__sfp_lock_release+0x8>)
 8009c4e:	f000 b8ae 	b.w	8009dae <__retarget_lock_release_recursive>
 8009c52:	bf00      	nop
 8009c54:	20004ca8 	.word	0x20004ca8

08009c58 <__sinit_lock_acquire>:
 8009c58:	4801      	ldr	r0, [pc, #4]	; (8009c60 <__sinit_lock_acquire+0x8>)
 8009c5a:	f000 b8a7 	b.w	8009dac <__retarget_lock_acquire_recursive>
 8009c5e:	bf00      	nop
 8009c60:	20004ca3 	.word	0x20004ca3

08009c64 <__sinit_lock_release>:
 8009c64:	4801      	ldr	r0, [pc, #4]	; (8009c6c <__sinit_lock_release+0x8>)
 8009c66:	f000 b8a2 	b.w	8009dae <__retarget_lock_release_recursive>
 8009c6a:	bf00      	nop
 8009c6c:	20004ca3 	.word	0x20004ca3

08009c70 <__sinit>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	4604      	mov	r4, r0
 8009c74:	f7ff fff0 	bl	8009c58 <__sinit_lock_acquire>
 8009c78:	69a3      	ldr	r3, [r4, #24]
 8009c7a:	b11b      	cbz	r3, 8009c84 <__sinit+0x14>
 8009c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c80:	f7ff bff0 	b.w	8009c64 <__sinit_lock_release>
 8009c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c88:	6523      	str	r3, [r4, #80]	; 0x50
 8009c8a:	4b13      	ldr	r3, [pc, #76]	; (8009cd8 <__sinit+0x68>)
 8009c8c:	4a13      	ldr	r2, [pc, #76]	; (8009cdc <__sinit+0x6c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c92:	42a3      	cmp	r3, r4
 8009c94:	bf04      	itt	eq
 8009c96:	2301      	moveq	r3, #1
 8009c98:	61a3      	streq	r3, [r4, #24]
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 f820 	bl	8009ce0 <__sfp>
 8009ca0:	6060      	str	r0, [r4, #4]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f000 f81c 	bl	8009ce0 <__sfp>
 8009ca8:	60a0      	str	r0, [r4, #8]
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 f818 	bl	8009ce0 <__sfp>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	60e0      	str	r0, [r4, #12]
 8009cb4:	2104      	movs	r1, #4
 8009cb6:	6860      	ldr	r0, [r4, #4]
 8009cb8:	f7ff ff82 	bl	8009bc0 <std>
 8009cbc:	68a0      	ldr	r0, [r4, #8]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	2109      	movs	r1, #9
 8009cc2:	f7ff ff7d 	bl	8009bc0 <std>
 8009cc6:	68e0      	ldr	r0, [r4, #12]
 8009cc8:	2202      	movs	r2, #2
 8009cca:	2112      	movs	r1, #18
 8009ccc:	f7ff ff78 	bl	8009bc0 <std>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	61a3      	str	r3, [r4, #24]
 8009cd4:	e7d2      	b.n	8009c7c <__sinit+0xc>
 8009cd6:	bf00      	nop
 8009cd8:	0800ade4 	.word	0x0800ade4
 8009cdc:	08009c09 	.word	0x08009c09

08009ce0 <__sfp>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	4607      	mov	r7, r0
 8009ce4:	f7ff ffac 	bl	8009c40 <__sfp_lock_acquire>
 8009ce8:	4b1e      	ldr	r3, [pc, #120]	; (8009d64 <__sfp+0x84>)
 8009cea:	681e      	ldr	r6, [r3, #0]
 8009cec:	69b3      	ldr	r3, [r6, #24]
 8009cee:	b913      	cbnz	r3, 8009cf6 <__sfp+0x16>
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7ff ffbd 	bl	8009c70 <__sinit>
 8009cf6:	3648      	adds	r6, #72	; 0x48
 8009cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	d503      	bpl.n	8009d08 <__sfp+0x28>
 8009d00:	6833      	ldr	r3, [r6, #0]
 8009d02:	b30b      	cbz	r3, 8009d48 <__sfp+0x68>
 8009d04:	6836      	ldr	r6, [r6, #0]
 8009d06:	e7f7      	b.n	8009cf8 <__sfp+0x18>
 8009d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d0c:	b9d5      	cbnz	r5, 8009d44 <__sfp+0x64>
 8009d0e:	4b16      	ldr	r3, [pc, #88]	; (8009d68 <__sfp+0x88>)
 8009d10:	60e3      	str	r3, [r4, #12]
 8009d12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d16:	6665      	str	r5, [r4, #100]	; 0x64
 8009d18:	f000 f847 	bl	8009daa <__retarget_lock_init_recursive>
 8009d1c:	f7ff ff96 	bl	8009c4c <__sfp_lock_release>
 8009d20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d28:	6025      	str	r5, [r4, #0]
 8009d2a:	61a5      	str	r5, [r4, #24]
 8009d2c:	2208      	movs	r2, #8
 8009d2e:	4629      	mov	r1, r5
 8009d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d34:	f7ff fc7e 	bl	8009634 <memset>
 8009d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d40:	4620      	mov	r0, r4
 8009d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d44:	3468      	adds	r4, #104	; 0x68
 8009d46:	e7d9      	b.n	8009cfc <__sfp+0x1c>
 8009d48:	2104      	movs	r1, #4
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f7ff ff62 	bl	8009c14 <__sfmoreglue>
 8009d50:	4604      	mov	r4, r0
 8009d52:	6030      	str	r0, [r6, #0]
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1d5      	bne.n	8009d04 <__sfp+0x24>
 8009d58:	f7ff ff78 	bl	8009c4c <__sfp_lock_release>
 8009d5c:	230c      	movs	r3, #12
 8009d5e:	603b      	str	r3, [r7, #0]
 8009d60:	e7ee      	b.n	8009d40 <__sfp+0x60>
 8009d62:	bf00      	nop
 8009d64:	0800ade4 	.word	0x0800ade4
 8009d68:	ffff0001 	.word	0xffff0001

08009d6c <_fwalk_reent>:
 8009d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d70:	4606      	mov	r6, r0
 8009d72:	4688      	mov	r8, r1
 8009d74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d78:	2700      	movs	r7, #0
 8009d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8009d82:	d505      	bpl.n	8009d90 <_fwalk_reent+0x24>
 8009d84:	6824      	ldr	r4, [r4, #0]
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	d1f7      	bne.n	8009d7a <_fwalk_reent+0xe>
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d90:	89ab      	ldrh	r3, [r5, #12]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d907      	bls.n	8009da6 <_fwalk_reent+0x3a>
 8009d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	d003      	beq.n	8009da6 <_fwalk_reent+0x3a>
 8009d9e:	4629      	mov	r1, r5
 8009da0:	4630      	mov	r0, r6
 8009da2:	47c0      	blx	r8
 8009da4:	4307      	orrs	r7, r0
 8009da6:	3568      	adds	r5, #104	; 0x68
 8009da8:	e7e9      	b.n	8009d7e <_fwalk_reent+0x12>

08009daa <__retarget_lock_init_recursive>:
 8009daa:	4770      	bx	lr

08009dac <__retarget_lock_acquire_recursive>:
 8009dac:	4770      	bx	lr

08009dae <__retarget_lock_release_recursive>:
 8009dae:	4770      	bx	lr

08009db0 <__swhatbuf_r>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	460e      	mov	r6, r1
 8009db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db8:	2900      	cmp	r1, #0
 8009dba:	b096      	sub	sp, #88	; 0x58
 8009dbc:	4614      	mov	r4, r2
 8009dbe:	461d      	mov	r5, r3
 8009dc0:	da07      	bge.n	8009dd2 <__swhatbuf_r+0x22>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	89b3      	ldrh	r3, [r6, #12]
 8009dc8:	061a      	lsls	r2, r3, #24
 8009dca:	d410      	bmi.n	8009dee <__swhatbuf_r+0x3e>
 8009dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dd0:	e00e      	b.n	8009df0 <__swhatbuf_r+0x40>
 8009dd2:	466a      	mov	r2, sp
 8009dd4:	f000 fdba 	bl	800a94c <_fstat_r>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	dbf2      	blt.n	8009dc2 <__swhatbuf_r+0x12>
 8009ddc:	9a01      	ldr	r2, [sp, #4]
 8009dde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009de2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009de6:	425a      	negs	r2, r3
 8009de8:	415a      	adcs	r2, r3
 8009dea:	602a      	str	r2, [r5, #0]
 8009dec:	e7ee      	b.n	8009dcc <__swhatbuf_r+0x1c>
 8009dee:	2340      	movs	r3, #64	; 0x40
 8009df0:	2000      	movs	r0, #0
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	b016      	add	sp, #88	; 0x58
 8009df6:	bd70      	pop	{r4, r5, r6, pc}

08009df8 <__smakebuf_r>:
 8009df8:	898b      	ldrh	r3, [r1, #12]
 8009dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dfc:	079d      	lsls	r5, r3, #30
 8009dfe:	4606      	mov	r6, r0
 8009e00:	460c      	mov	r4, r1
 8009e02:	d507      	bpl.n	8009e14 <__smakebuf_r+0x1c>
 8009e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	6123      	str	r3, [r4, #16]
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	6163      	str	r3, [r4, #20]
 8009e10:	b002      	add	sp, #8
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	ab01      	add	r3, sp, #4
 8009e16:	466a      	mov	r2, sp
 8009e18:	f7ff ffca 	bl	8009db0 <__swhatbuf_r>
 8009e1c:	9900      	ldr	r1, [sp, #0]
 8009e1e:	4605      	mov	r5, r0
 8009e20:	4630      	mov	r0, r6
 8009e22:	f000 f879 	bl	8009f18 <_malloc_r>
 8009e26:	b948      	cbnz	r0, 8009e3c <__smakebuf_r+0x44>
 8009e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e2c:	059a      	lsls	r2, r3, #22
 8009e2e:	d4ef      	bmi.n	8009e10 <__smakebuf_r+0x18>
 8009e30:	f023 0303 	bic.w	r3, r3, #3
 8009e34:	f043 0302 	orr.w	r3, r3, #2
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	e7e3      	b.n	8009e04 <__smakebuf_r+0xc>
 8009e3c:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <__smakebuf_r+0x7c>)
 8009e3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	6020      	str	r0, [r4, #0]
 8009e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	9b00      	ldr	r3, [sp, #0]
 8009e4c:	6163      	str	r3, [r4, #20]
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	6120      	str	r0, [r4, #16]
 8009e52:	b15b      	cbz	r3, 8009e6c <__smakebuf_r+0x74>
 8009e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f000 fd89 	bl	800a970 <_isatty_r>
 8009e5e:	b128      	cbz	r0, 8009e6c <__smakebuf_r+0x74>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f023 0303 	bic.w	r3, r3, #3
 8009e66:	f043 0301 	orr.w	r3, r3, #1
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	89a0      	ldrh	r0, [r4, #12]
 8009e6e:	4305      	orrs	r5, r0
 8009e70:	81a5      	strh	r5, [r4, #12]
 8009e72:	e7cd      	b.n	8009e10 <__smakebuf_r+0x18>
 8009e74:	08009c09 	.word	0x08009c09

08009e78 <_free_r>:
 8009e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	d048      	beq.n	8009f10 <_free_r+0x98>
 8009e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e82:	9001      	str	r0, [sp, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f1a1 0404 	sub.w	r4, r1, #4
 8009e8a:	bfb8      	it	lt
 8009e8c:	18e4      	addlt	r4, r4, r3
 8009e8e:	f000 fdab 	bl	800a9e8 <__malloc_lock>
 8009e92:	4a20      	ldr	r2, [pc, #128]	; (8009f14 <_free_r+0x9c>)
 8009e94:	9801      	ldr	r0, [sp, #4]
 8009e96:	6813      	ldr	r3, [r2, #0]
 8009e98:	4615      	mov	r5, r2
 8009e9a:	b933      	cbnz	r3, 8009eaa <_free_r+0x32>
 8009e9c:	6063      	str	r3, [r4, #4]
 8009e9e:	6014      	str	r4, [r2, #0]
 8009ea0:	b003      	add	sp, #12
 8009ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea6:	f000 bda5 	b.w	800a9f4 <__malloc_unlock>
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	d90b      	bls.n	8009ec6 <_free_r+0x4e>
 8009eae:	6821      	ldr	r1, [r4, #0]
 8009eb0:	1862      	adds	r2, r4, r1
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	bf04      	itt	eq
 8009eb6:	681a      	ldreq	r2, [r3, #0]
 8009eb8:	685b      	ldreq	r3, [r3, #4]
 8009eba:	6063      	str	r3, [r4, #4]
 8009ebc:	bf04      	itt	eq
 8009ebe:	1852      	addeq	r2, r2, r1
 8009ec0:	6022      	streq	r2, [r4, #0]
 8009ec2:	602c      	str	r4, [r5, #0]
 8009ec4:	e7ec      	b.n	8009ea0 <_free_r+0x28>
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	b10b      	cbz	r3, 8009ed0 <_free_r+0x58>
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	d9fa      	bls.n	8009ec6 <_free_r+0x4e>
 8009ed0:	6811      	ldr	r1, [r2, #0]
 8009ed2:	1855      	adds	r5, r2, r1
 8009ed4:	42a5      	cmp	r5, r4
 8009ed6:	d10b      	bne.n	8009ef0 <_free_r+0x78>
 8009ed8:	6824      	ldr	r4, [r4, #0]
 8009eda:	4421      	add	r1, r4
 8009edc:	1854      	adds	r4, r2, r1
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	6011      	str	r1, [r2, #0]
 8009ee2:	d1dd      	bne.n	8009ea0 <_free_r+0x28>
 8009ee4:	681c      	ldr	r4, [r3, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	6053      	str	r3, [r2, #4]
 8009eea:	4421      	add	r1, r4
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	e7d7      	b.n	8009ea0 <_free_r+0x28>
 8009ef0:	d902      	bls.n	8009ef8 <_free_r+0x80>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	e7d3      	b.n	8009ea0 <_free_r+0x28>
 8009ef8:	6825      	ldr	r5, [r4, #0]
 8009efa:	1961      	adds	r1, r4, r5
 8009efc:	428b      	cmp	r3, r1
 8009efe:	bf04      	itt	eq
 8009f00:	6819      	ldreq	r1, [r3, #0]
 8009f02:	685b      	ldreq	r3, [r3, #4]
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	bf04      	itt	eq
 8009f08:	1949      	addeq	r1, r1, r5
 8009f0a:	6021      	streq	r1, [r4, #0]
 8009f0c:	6054      	str	r4, [r2, #4]
 8009f0e:	e7c7      	b.n	8009ea0 <_free_r+0x28>
 8009f10:	b003      	add	sp, #12
 8009f12:	bd30      	pop	{r4, r5, pc}
 8009f14:	200040f0 	.word	0x200040f0

08009f18 <_malloc_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	1ccd      	adds	r5, r1, #3
 8009f1c:	f025 0503 	bic.w	r5, r5, #3
 8009f20:	3508      	adds	r5, #8
 8009f22:	2d0c      	cmp	r5, #12
 8009f24:	bf38      	it	cc
 8009f26:	250c      	movcc	r5, #12
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	db01      	blt.n	8009f32 <_malloc_r+0x1a>
 8009f2e:	42a9      	cmp	r1, r5
 8009f30:	d903      	bls.n	8009f3a <_malloc_r+0x22>
 8009f32:	230c      	movs	r3, #12
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	2000      	movs	r0, #0
 8009f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3a:	f000 fd55 	bl	800a9e8 <__malloc_lock>
 8009f3e:	4921      	ldr	r1, [pc, #132]	; (8009fc4 <_malloc_r+0xac>)
 8009f40:	680a      	ldr	r2, [r1, #0]
 8009f42:	4614      	mov	r4, r2
 8009f44:	b99c      	cbnz	r4, 8009f6e <_malloc_r+0x56>
 8009f46:	4f20      	ldr	r7, [pc, #128]	; (8009fc8 <_malloc_r+0xb0>)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	b923      	cbnz	r3, 8009f56 <_malloc_r+0x3e>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f000 fc86 	bl	800a860 <_sbrk_r>
 8009f54:	6038      	str	r0, [r7, #0]
 8009f56:	4629      	mov	r1, r5
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 fc81 	bl	800a860 <_sbrk_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d123      	bne.n	8009faa <_malloc_r+0x92>
 8009f62:	230c      	movs	r3, #12
 8009f64:	6033      	str	r3, [r6, #0]
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 fd44 	bl	800a9f4 <__malloc_unlock>
 8009f6c:	e7e3      	b.n	8009f36 <_malloc_r+0x1e>
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	1b5b      	subs	r3, r3, r5
 8009f72:	d417      	bmi.n	8009fa4 <_malloc_r+0x8c>
 8009f74:	2b0b      	cmp	r3, #11
 8009f76:	d903      	bls.n	8009f80 <_malloc_r+0x68>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	441c      	add	r4, r3
 8009f7c:	6025      	str	r5, [r4, #0]
 8009f7e:	e004      	b.n	8009f8a <_malloc_r+0x72>
 8009f80:	6863      	ldr	r3, [r4, #4]
 8009f82:	42a2      	cmp	r2, r4
 8009f84:	bf0c      	ite	eq
 8009f86:	600b      	streq	r3, [r1, #0]
 8009f88:	6053      	strne	r3, [r2, #4]
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 fd32 	bl	800a9f4 <__malloc_unlock>
 8009f90:	f104 000b 	add.w	r0, r4, #11
 8009f94:	1d23      	adds	r3, r4, #4
 8009f96:	f020 0007 	bic.w	r0, r0, #7
 8009f9a:	1ac2      	subs	r2, r0, r3
 8009f9c:	d0cc      	beq.n	8009f38 <_malloc_r+0x20>
 8009f9e:	1a1b      	subs	r3, r3, r0
 8009fa0:	50a3      	str	r3, [r4, r2]
 8009fa2:	e7c9      	b.n	8009f38 <_malloc_r+0x20>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	6864      	ldr	r4, [r4, #4]
 8009fa8:	e7cc      	b.n	8009f44 <_malloc_r+0x2c>
 8009faa:	1cc4      	adds	r4, r0, #3
 8009fac:	f024 0403 	bic.w	r4, r4, #3
 8009fb0:	42a0      	cmp	r0, r4
 8009fb2:	d0e3      	beq.n	8009f7c <_malloc_r+0x64>
 8009fb4:	1a21      	subs	r1, r4, r0
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f000 fc52 	bl	800a860 <_sbrk_r>
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d1dd      	bne.n	8009f7c <_malloc_r+0x64>
 8009fc0:	e7cf      	b.n	8009f62 <_malloc_r+0x4a>
 8009fc2:	bf00      	nop
 8009fc4:	200040f0 	.word	0x200040f0
 8009fc8:	200040f4 	.word	0x200040f4

08009fcc <__ssputs_r>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	688e      	ldr	r6, [r1, #8]
 8009fd2:	429e      	cmp	r6, r3
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4690      	mov	r8, r2
 8009fda:	461f      	mov	r7, r3
 8009fdc:	d838      	bhi.n	800a050 <__ssputs_r+0x84>
 8009fde:	898a      	ldrh	r2, [r1, #12]
 8009fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fe4:	d032      	beq.n	800a04c <__ssputs_r+0x80>
 8009fe6:	6825      	ldr	r5, [r4, #0]
 8009fe8:	6909      	ldr	r1, [r1, #16]
 8009fea:	eba5 0901 	sub.w	r9, r5, r1
 8009fee:	6965      	ldr	r5, [r4, #20]
 8009ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	444b      	add	r3, r9
 8009ffc:	106d      	asrs	r5, r5, #1
 8009ffe:	429d      	cmp	r5, r3
 800a000:	bf38      	it	cc
 800a002:	461d      	movcc	r5, r3
 800a004:	0553      	lsls	r3, r2, #21
 800a006:	d531      	bpl.n	800a06c <__ssputs_r+0xa0>
 800a008:	4629      	mov	r1, r5
 800a00a:	f7ff ff85 	bl	8009f18 <_malloc_r>
 800a00e:	4606      	mov	r6, r0
 800a010:	b950      	cbnz	r0, 800a028 <__ssputs_r+0x5c>
 800a012:	230c      	movs	r3, #12
 800a014:	f8ca 3000 	str.w	r3, [sl]
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a028:	6921      	ldr	r1, [r4, #16]
 800a02a:	464a      	mov	r2, r9
 800a02c:	f7ff faf4 	bl	8009618 <memcpy>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	6126      	str	r6, [r4, #16]
 800a03e:	6165      	str	r5, [r4, #20]
 800a040:	444e      	add	r6, r9
 800a042:	eba5 0509 	sub.w	r5, r5, r9
 800a046:	6026      	str	r6, [r4, #0]
 800a048:	60a5      	str	r5, [r4, #8]
 800a04a:	463e      	mov	r6, r7
 800a04c:	42be      	cmp	r6, r7
 800a04e:	d900      	bls.n	800a052 <__ssputs_r+0x86>
 800a050:	463e      	mov	r6, r7
 800a052:	4632      	mov	r2, r6
 800a054:	6820      	ldr	r0, [r4, #0]
 800a056:	4641      	mov	r1, r8
 800a058:	f000 fcac 	bl	800a9b4 <memmove>
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	1b9b      	subs	r3, r3, r6
 800a062:	4432      	add	r2, r6
 800a064:	60a3      	str	r3, [r4, #8]
 800a066:	6022      	str	r2, [r4, #0]
 800a068:	2000      	movs	r0, #0
 800a06a:	e7db      	b.n	800a024 <__ssputs_r+0x58>
 800a06c:	462a      	mov	r2, r5
 800a06e:	f000 fcc7 	bl	800aa00 <_realloc_r>
 800a072:	4606      	mov	r6, r0
 800a074:	2800      	cmp	r0, #0
 800a076:	d1e1      	bne.n	800a03c <__ssputs_r+0x70>
 800a078:	6921      	ldr	r1, [r4, #16]
 800a07a:	4650      	mov	r0, sl
 800a07c:	f7ff fefc 	bl	8009e78 <_free_r>
 800a080:	e7c7      	b.n	800a012 <__ssputs_r+0x46>
	...

0800a084 <_svfiprintf_r>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4698      	mov	r8, r3
 800a08a:	898b      	ldrh	r3, [r1, #12]
 800a08c:	061b      	lsls	r3, r3, #24
 800a08e:	b09d      	sub	sp, #116	; 0x74
 800a090:	4607      	mov	r7, r0
 800a092:	460d      	mov	r5, r1
 800a094:	4614      	mov	r4, r2
 800a096:	d50e      	bpl.n	800a0b6 <_svfiprintf_r+0x32>
 800a098:	690b      	ldr	r3, [r1, #16]
 800a09a:	b963      	cbnz	r3, 800a0b6 <_svfiprintf_r+0x32>
 800a09c:	2140      	movs	r1, #64	; 0x40
 800a09e:	f7ff ff3b 	bl	8009f18 <_malloc_r>
 800a0a2:	6028      	str	r0, [r5, #0]
 800a0a4:	6128      	str	r0, [r5, #16]
 800a0a6:	b920      	cbnz	r0, 800a0b2 <_svfiprintf_r+0x2e>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	603b      	str	r3, [r7, #0]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e0d1      	b.n	800a256 <_svfiprintf_r+0x1d2>
 800a0b2:	2340      	movs	r3, #64	; 0x40
 800a0b4:	616b      	str	r3, [r5, #20]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ba:	2320      	movs	r3, #32
 800a0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c4:	2330      	movs	r3, #48	; 0x30
 800a0c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a270 <_svfiprintf_r+0x1ec>
 800a0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ce:	f04f 0901 	mov.w	r9, #1
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	469a      	mov	sl, r3
 800a0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0da:	b10a      	cbz	r2, 800a0e0 <_svfiprintf_r+0x5c>
 800a0dc:	2a25      	cmp	r2, #37	; 0x25
 800a0de:	d1f9      	bne.n	800a0d4 <_svfiprintf_r+0x50>
 800a0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e4:	d00b      	beq.n	800a0fe <_svfiprintf_r+0x7a>
 800a0e6:	465b      	mov	r3, fp
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7ff ff6d 	bl	8009fcc <__ssputs_r>
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f000 80aa 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fa:	445a      	add	r2, fp
 800a0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80a2 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a108:	2300      	movs	r3, #0
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a112:	f10a 0a01 	add.w	sl, sl, #1
 800a116:	9304      	str	r3, [sp, #16]
 800a118:	9307      	str	r3, [sp, #28]
 800a11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11e:	931a      	str	r3, [sp, #104]	; 0x68
 800a120:	4654      	mov	r4, sl
 800a122:	2205      	movs	r2, #5
 800a124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a128:	4851      	ldr	r0, [pc, #324]	; (800a270 <_svfiprintf_r+0x1ec>)
 800a12a:	f7f6 f869 	bl	8000200 <memchr>
 800a12e:	9a04      	ldr	r2, [sp, #16]
 800a130:	b9d8      	cbnz	r0, 800a16a <_svfiprintf_r+0xe6>
 800a132:	06d0      	lsls	r0, r2, #27
 800a134:	bf44      	itt	mi
 800a136:	2320      	movmi	r3, #32
 800a138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13c:	0711      	lsls	r1, r2, #28
 800a13e:	bf44      	itt	mi
 800a140:	232b      	movmi	r3, #43	; 0x2b
 800a142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a146:	f89a 3000 	ldrb.w	r3, [sl]
 800a14a:	2b2a      	cmp	r3, #42	; 0x2a
 800a14c:	d015      	beq.n	800a17a <_svfiprintf_r+0xf6>
 800a14e:	9a07      	ldr	r2, [sp, #28]
 800a150:	4654      	mov	r4, sl
 800a152:	2000      	movs	r0, #0
 800a154:	f04f 0c0a 	mov.w	ip, #10
 800a158:	4621      	mov	r1, r4
 800a15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15e:	3b30      	subs	r3, #48	; 0x30
 800a160:	2b09      	cmp	r3, #9
 800a162:	d94e      	bls.n	800a202 <_svfiprintf_r+0x17e>
 800a164:	b1b0      	cbz	r0, 800a194 <_svfiprintf_r+0x110>
 800a166:	9207      	str	r2, [sp, #28]
 800a168:	e014      	b.n	800a194 <_svfiprintf_r+0x110>
 800a16a:	eba0 0308 	sub.w	r3, r0, r8
 800a16e:	fa09 f303 	lsl.w	r3, r9, r3
 800a172:	4313      	orrs	r3, r2
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	46a2      	mov	sl, r4
 800a178:	e7d2      	b.n	800a120 <_svfiprintf_r+0x9c>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	1d19      	adds	r1, r3, #4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	9103      	str	r1, [sp, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	bfbb      	ittet	lt
 800a186:	425b      	neglt	r3, r3
 800a188:	f042 0202 	orrlt.w	r2, r2, #2
 800a18c:	9307      	strge	r3, [sp, #28]
 800a18e:	9307      	strlt	r3, [sp, #28]
 800a190:	bfb8      	it	lt
 800a192:	9204      	strlt	r2, [sp, #16]
 800a194:	7823      	ldrb	r3, [r4, #0]
 800a196:	2b2e      	cmp	r3, #46	; 0x2e
 800a198:	d10c      	bne.n	800a1b4 <_svfiprintf_r+0x130>
 800a19a:	7863      	ldrb	r3, [r4, #1]
 800a19c:	2b2a      	cmp	r3, #42	; 0x2a
 800a19e:	d135      	bne.n	800a20c <_svfiprintf_r+0x188>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	1d1a      	adds	r2, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9203      	str	r2, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfb8      	it	lt
 800a1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b0:	3402      	adds	r4, #2
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a280 <_svfiprintf_r+0x1fc>
 800a1b8:	7821      	ldrb	r1, [r4, #0]
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	4650      	mov	r0, sl
 800a1be:	f7f6 f81f 	bl	8000200 <memchr>
 800a1c2:	b140      	cbz	r0, 800a1d6 <_svfiprintf_r+0x152>
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	eba0 000a 	sub.w	r0, r0, sl
 800a1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	4303      	orrs	r3, r0
 800a1d2:	3401      	adds	r4, #1
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1da:	4826      	ldr	r0, [pc, #152]	; (800a274 <_svfiprintf_r+0x1f0>)
 800a1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e0:	2206      	movs	r2, #6
 800a1e2:	f7f6 f80d 	bl	8000200 <memchr>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d038      	beq.n	800a25c <_svfiprintf_r+0x1d8>
 800a1ea:	4b23      	ldr	r3, [pc, #140]	; (800a278 <_svfiprintf_r+0x1f4>)
 800a1ec:	bb1b      	cbnz	r3, 800a236 <_svfiprintf_r+0x1b2>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	4433      	add	r3, r6
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	e767      	b.n	800a0d2 <_svfiprintf_r+0x4e>
 800a202:	fb0c 3202 	mla	r2, ip, r2, r3
 800a206:	460c      	mov	r4, r1
 800a208:	2001      	movs	r0, #1
 800a20a:	e7a5      	b.n	800a158 <_svfiprintf_r+0xd4>
 800a20c:	2300      	movs	r3, #0
 800a20e:	3401      	adds	r4, #1
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	4619      	mov	r1, r3
 800a214:	f04f 0c0a 	mov.w	ip, #10
 800a218:	4620      	mov	r0, r4
 800a21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21e:	3a30      	subs	r2, #48	; 0x30
 800a220:	2a09      	cmp	r2, #9
 800a222:	d903      	bls.n	800a22c <_svfiprintf_r+0x1a8>
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0c5      	beq.n	800a1b4 <_svfiprintf_r+0x130>
 800a228:	9105      	str	r1, [sp, #20]
 800a22a:	e7c3      	b.n	800a1b4 <_svfiprintf_r+0x130>
 800a22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a230:	4604      	mov	r4, r0
 800a232:	2301      	movs	r3, #1
 800a234:	e7f0      	b.n	800a218 <_svfiprintf_r+0x194>
 800a236:	ab03      	add	r3, sp, #12
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	462a      	mov	r2, r5
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a23e:	a904      	add	r1, sp, #16
 800a240:	4638      	mov	r0, r7
 800a242:	f3af 8000 	nop.w
 800a246:	1c42      	adds	r2, r0, #1
 800a248:	4606      	mov	r6, r0
 800a24a:	d1d6      	bne.n	800a1fa <_svfiprintf_r+0x176>
 800a24c:	89ab      	ldrh	r3, [r5, #12]
 800a24e:	065b      	lsls	r3, r3, #25
 800a250:	f53f af2c 	bmi.w	800a0ac <_svfiprintf_r+0x28>
 800a254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a256:	b01d      	add	sp, #116	; 0x74
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462a      	mov	r2, r5
 800a262:	4b06      	ldr	r3, [pc, #24]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a264:	a904      	add	r1, sp, #16
 800a266:	4638      	mov	r0, r7
 800a268:	f000 f9d4 	bl	800a614 <_printf_i>
 800a26c:	e7eb      	b.n	800a246 <_svfiprintf_r+0x1c2>
 800a26e:	bf00      	nop
 800a270:	0800af4c 	.word	0x0800af4c
 800a274:	0800af56 	.word	0x0800af56
 800a278:	00000000 	.word	0x00000000
 800a27c:	08009fcd 	.word	0x08009fcd
 800a280:	0800af52 	.word	0x0800af52

0800a284 <__sfputc_r>:
 800a284:	6893      	ldr	r3, [r2, #8]
 800a286:	3b01      	subs	r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	b410      	push	{r4}
 800a28c:	6093      	str	r3, [r2, #8]
 800a28e:	da08      	bge.n	800a2a2 <__sfputc_r+0x1e>
 800a290:	6994      	ldr	r4, [r2, #24]
 800a292:	42a3      	cmp	r3, r4
 800a294:	db01      	blt.n	800a29a <__sfputc_r+0x16>
 800a296:	290a      	cmp	r1, #10
 800a298:	d103      	bne.n	800a2a2 <__sfputc_r+0x1e>
 800a29a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a29e:	f7ff bb0d 	b.w	80098bc <__swbuf_r>
 800a2a2:	6813      	ldr	r3, [r2, #0]
 800a2a4:	1c58      	adds	r0, r3, #1
 800a2a6:	6010      	str	r0, [r2, #0]
 800a2a8:	7019      	strb	r1, [r3, #0]
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <__sfputs_r>:
 800a2b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	460f      	mov	r7, r1
 800a2b8:	4614      	mov	r4, r2
 800a2ba:	18d5      	adds	r5, r2, r3
 800a2bc:	42ac      	cmp	r4, r5
 800a2be:	d101      	bne.n	800a2c4 <__sfputs_r+0x12>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e007      	b.n	800a2d4 <__sfputs_r+0x22>
 800a2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c8:	463a      	mov	r2, r7
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7ff ffda 	bl	800a284 <__sfputc_r>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d1f3      	bne.n	800a2bc <__sfputs_r+0xa>
 800a2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2d8 <_vfiprintf_r>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	460d      	mov	r5, r1
 800a2de:	b09d      	sub	sp, #116	; 0x74
 800a2e0:	4614      	mov	r4, r2
 800a2e2:	4698      	mov	r8, r3
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	b118      	cbz	r0, 800a2f0 <_vfiprintf_r+0x18>
 800a2e8:	6983      	ldr	r3, [r0, #24]
 800a2ea:	b90b      	cbnz	r3, 800a2f0 <_vfiprintf_r+0x18>
 800a2ec:	f7ff fcc0 	bl	8009c70 <__sinit>
 800a2f0:	4b89      	ldr	r3, [pc, #548]	; (800a518 <_vfiprintf_r+0x240>)
 800a2f2:	429d      	cmp	r5, r3
 800a2f4:	d11b      	bne.n	800a32e <_vfiprintf_r+0x56>
 800a2f6:	6875      	ldr	r5, [r6, #4]
 800a2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2fa:	07d9      	lsls	r1, r3, #31
 800a2fc:	d405      	bmi.n	800a30a <_vfiprintf_r+0x32>
 800a2fe:	89ab      	ldrh	r3, [r5, #12]
 800a300:	059a      	lsls	r2, r3, #22
 800a302:	d402      	bmi.n	800a30a <_vfiprintf_r+0x32>
 800a304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a306:	f7ff fd51 	bl	8009dac <__retarget_lock_acquire_recursive>
 800a30a:	89ab      	ldrh	r3, [r5, #12]
 800a30c:	071b      	lsls	r3, r3, #28
 800a30e:	d501      	bpl.n	800a314 <_vfiprintf_r+0x3c>
 800a310:	692b      	ldr	r3, [r5, #16]
 800a312:	b9eb      	cbnz	r3, 800a350 <_vfiprintf_r+0x78>
 800a314:	4629      	mov	r1, r5
 800a316:	4630      	mov	r0, r6
 800a318:	f7ff fb22 	bl	8009960 <__swsetup_r>
 800a31c:	b1c0      	cbz	r0, 800a350 <_vfiprintf_r+0x78>
 800a31e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a320:	07dc      	lsls	r4, r3, #31
 800a322:	d50e      	bpl.n	800a342 <_vfiprintf_r+0x6a>
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	b01d      	add	sp, #116	; 0x74
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	4b7b      	ldr	r3, [pc, #492]	; (800a51c <_vfiprintf_r+0x244>)
 800a330:	429d      	cmp	r5, r3
 800a332:	d101      	bne.n	800a338 <_vfiprintf_r+0x60>
 800a334:	68b5      	ldr	r5, [r6, #8]
 800a336:	e7df      	b.n	800a2f8 <_vfiprintf_r+0x20>
 800a338:	4b79      	ldr	r3, [pc, #484]	; (800a520 <_vfiprintf_r+0x248>)
 800a33a:	429d      	cmp	r5, r3
 800a33c:	bf08      	it	eq
 800a33e:	68f5      	ldreq	r5, [r6, #12]
 800a340:	e7da      	b.n	800a2f8 <_vfiprintf_r+0x20>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	0598      	lsls	r0, r3, #22
 800a346:	d4ed      	bmi.n	800a324 <_vfiprintf_r+0x4c>
 800a348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a34a:	f7ff fd30 	bl	8009dae <__retarget_lock_release_recursive>
 800a34e:	e7e9      	b.n	800a324 <_vfiprintf_r+0x4c>
 800a350:	2300      	movs	r3, #0
 800a352:	9309      	str	r3, [sp, #36]	; 0x24
 800a354:	2320      	movs	r3, #32
 800a356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a35a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a35e:	2330      	movs	r3, #48	; 0x30
 800a360:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a524 <_vfiprintf_r+0x24c>
 800a364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a368:	f04f 0901 	mov.w	r9, #1
 800a36c:	4623      	mov	r3, r4
 800a36e:	469a      	mov	sl, r3
 800a370:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a374:	b10a      	cbz	r2, 800a37a <_vfiprintf_r+0xa2>
 800a376:	2a25      	cmp	r2, #37	; 0x25
 800a378:	d1f9      	bne.n	800a36e <_vfiprintf_r+0x96>
 800a37a:	ebba 0b04 	subs.w	fp, sl, r4
 800a37e:	d00b      	beq.n	800a398 <_vfiprintf_r+0xc0>
 800a380:	465b      	mov	r3, fp
 800a382:	4622      	mov	r2, r4
 800a384:	4629      	mov	r1, r5
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ff93 	bl	800a2b2 <__sfputs_r>
 800a38c:	3001      	adds	r0, #1
 800a38e:	f000 80aa 	beq.w	800a4e6 <_vfiprintf_r+0x20e>
 800a392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a394:	445a      	add	r2, fp
 800a396:	9209      	str	r2, [sp, #36]	; 0x24
 800a398:	f89a 3000 	ldrb.w	r3, [sl]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80a2 	beq.w	800a4e6 <_vfiprintf_r+0x20e>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ac:	f10a 0a01 	add.w	sl, sl, #1
 800a3b0:	9304      	str	r3, [sp, #16]
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ba:	4654      	mov	r4, sl
 800a3bc:	2205      	movs	r2, #5
 800a3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c2:	4858      	ldr	r0, [pc, #352]	; (800a524 <_vfiprintf_r+0x24c>)
 800a3c4:	f7f5 ff1c 	bl	8000200 <memchr>
 800a3c8:	9a04      	ldr	r2, [sp, #16]
 800a3ca:	b9d8      	cbnz	r0, 800a404 <_vfiprintf_r+0x12c>
 800a3cc:	06d1      	lsls	r1, r2, #27
 800a3ce:	bf44      	itt	mi
 800a3d0:	2320      	movmi	r3, #32
 800a3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d6:	0713      	lsls	r3, r2, #28
 800a3d8:	bf44      	itt	mi
 800a3da:	232b      	movmi	r3, #43	; 0x2b
 800a3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e6:	d015      	beq.n	800a414 <_vfiprintf_r+0x13c>
 800a3e8:	9a07      	ldr	r2, [sp, #28]
 800a3ea:	4654      	mov	r4, sl
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f04f 0c0a 	mov.w	ip, #10
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3f8:	3b30      	subs	r3, #48	; 0x30
 800a3fa:	2b09      	cmp	r3, #9
 800a3fc:	d94e      	bls.n	800a49c <_vfiprintf_r+0x1c4>
 800a3fe:	b1b0      	cbz	r0, 800a42e <_vfiprintf_r+0x156>
 800a400:	9207      	str	r2, [sp, #28]
 800a402:	e014      	b.n	800a42e <_vfiprintf_r+0x156>
 800a404:	eba0 0308 	sub.w	r3, r0, r8
 800a408:	fa09 f303 	lsl.w	r3, r9, r3
 800a40c:	4313      	orrs	r3, r2
 800a40e:	9304      	str	r3, [sp, #16]
 800a410:	46a2      	mov	sl, r4
 800a412:	e7d2      	b.n	800a3ba <_vfiprintf_r+0xe2>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	1d19      	adds	r1, r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	9103      	str	r1, [sp, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfbb      	ittet	lt
 800a420:	425b      	neglt	r3, r3
 800a422:	f042 0202 	orrlt.w	r2, r2, #2
 800a426:	9307      	strge	r3, [sp, #28]
 800a428:	9307      	strlt	r3, [sp, #28]
 800a42a:	bfb8      	it	lt
 800a42c:	9204      	strlt	r2, [sp, #16]
 800a42e:	7823      	ldrb	r3, [r4, #0]
 800a430:	2b2e      	cmp	r3, #46	; 0x2e
 800a432:	d10c      	bne.n	800a44e <_vfiprintf_r+0x176>
 800a434:	7863      	ldrb	r3, [r4, #1]
 800a436:	2b2a      	cmp	r3, #42	; 0x2a
 800a438:	d135      	bne.n	800a4a6 <_vfiprintf_r+0x1ce>
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	1d1a      	adds	r2, r3, #4
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	9203      	str	r2, [sp, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	bfb8      	it	lt
 800a446:	f04f 33ff 	movlt.w	r3, #4294967295
 800a44a:	3402      	adds	r4, #2
 800a44c:	9305      	str	r3, [sp, #20]
 800a44e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a534 <_vfiprintf_r+0x25c>
 800a452:	7821      	ldrb	r1, [r4, #0]
 800a454:	2203      	movs	r2, #3
 800a456:	4650      	mov	r0, sl
 800a458:	f7f5 fed2 	bl	8000200 <memchr>
 800a45c:	b140      	cbz	r0, 800a470 <_vfiprintf_r+0x198>
 800a45e:	2340      	movs	r3, #64	; 0x40
 800a460:	eba0 000a 	sub.w	r0, r0, sl
 800a464:	fa03 f000 	lsl.w	r0, r3, r0
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	4303      	orrs	r3, r0
 800a46c:	3401      	adds	r4, #1
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a474:	482c      	ldr	r0, [pc, #176]	; (800a528 <_vfiprintf_r+0x250>)
 800a476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a47a:	2206      	movs	r2, #6
 800a47c:	f7f5 fec0 	bl	8000200 <memchr>
 800a480:	2800      	cmp	r0, #0
 800a482:	d03f      	beq.n	800a504 <_vfiprintf_r+0x22c>
 800a484:	4b29      	ldr	r3, [pc, #164]	; (800a52c <_vfiprintf_r+0x254>)
 800a486:	bb1b      	cbnz	r3, 800a4d0 <_vfiprintf_r+0x1f8>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	3307      	adds	r3, #7
 800a48c:	f023 0307 	bic.w	r3, r3, #7
 800a490:	3308      	adds	r3, #8
 800a492:	9303      	str	r3, [sp, #12]
 800a494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a496:	443b      	add	r3, r7
 800a498:	9309      	str	r3, [sp, #36]	; 0x24
 800a49a:	e767      	b.n	800a36c <_vfiprintf_r+0x94>
 800a49c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	e7a5      	b.n	800a3f2 <_vfiprintf_r+0x11a>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	3401      	adds	r4, #1
 800a4aa:	9305      	str	r3, [sp, #20]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f04f 0c0a 	mov.w	ip, #10
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4b8:	3a30      	subs	r2, #48	; 0x30
 800a4ba:	2a09      	cmp	r2, #9
 800a4bc:	d903      	bls.n	800a4c6 <_vfiprintf_r+0x1ee>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d0c5      	beq.n	800a44e <_vfiprintf_r+0x176>
 800a4c2:	9105      	str	r1, [sp, #20]
 800a4c4:	e7c3      	b.n	800a44e <_vfiprintf_r+0x176>
 800a4c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e7f0      	b.n	800a4b2 <_vfiprintf_r+0x1da>
 800a4d0:	ab03      	add	r3, sp, #12
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	4b16      	ldr	r3, [pc, #88]	; (800a530 <_vfiprintf_r+0x258>)
 800a4d8:	a904      	add	r1, sp, #16
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f3af 8000 	nop.w
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	1c78      	adds	r0, r7, #1
 800a4e4:	d1d6      	bne.n	800a494 <_vfiprintf_r+0x1bc>
 800a4e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4e8:	07d9      	lsls	r1, r3, #31
 800a4ea:	d405      	bmi.n	800a4f8 <_vfiprintf_r+0x220>
 800a4ec:	89ab      	ldrh	r3, [r5, #12]
 800a4ee:	059a      	lsls	r2, r3, #22
 800a4f0:	d402      	bmi.n	800a4f8 <_vfiprintf_r+0x220>
 800a4f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4f4:	f7ff fc5b 	bl	8009dae <__retarget_lock_release_recursive>
 800a4f8:	89ab      	ldrh	r3, [r5, #12]
 800a4fa:	065b      	lsls	r3, r3, #25
 800a4fc:	f53f af12 	bmi.w	800a324 <_vfiprintf_r+0x4c>
 800a500:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a502:	e711      	b.n	800a328 <_vfiprintf_r+0x50>
 800a504:	ab03      	add	r3, sp, #12
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	462a      	mov	r2, r5
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <_vfiprintf_r+0x258>)
 800a50c:	a904      	add	r1, sp, #16
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 f880 	bl	800a614 <_printf_i>
 800a514:	e7e4      	b.n	800a4e0 <_vfiprintf_r+0x208>
 800a516:	bf00      	nop
 800a518:	0800af0c 	.word	0x0800af0c
 800a51c:	0800af2c 	.word	0x0800af2c
 800a520:	0800aeec 	.word	0x0800aeec
 800a524:	0800af4c 	.word	0x0800af4c
 800a528:	0800af56 	.word	0x0800af56
 800a52c:	00000000 	.word	0x00000000
 800a530:	0800a2b3 	.word	0x0800a2b3
 800a534:	0800af52 	.word	0x0800af52

0800a538 <_printf_common>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	4616      	mov	r6, r2
 800a53e:	4699      	mov	r9, r3
 800a540:	688a      	ldr	r2, [r1, #8]
 800a542:	690b      	ldr	r3, [r1, #16]
 800a544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a548:	4293      	cmp	r3, r2
 800a54a:	bfb8      	it	lt
 800a54c:	4613      	movlt	r3, r2
 800a54e:	6033      	str	r3, [r6, #0]
 800a550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a554:	4607      	mov	r7, r0
 800a556:	460c      	mov	r4, r1
 800a558:	b10a      	cbz	r2, 800a55e <_printf_common+0x26>
 800a55a:	3301      	adds	r3, #1
 800a55c:	6033      	str	r3, [r6, #0]
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	0699      	lsls	r1, r3, #26
 800a562:	bf42      	ittt	mi
 800a564:	6833      	ldrmi	r3, [r6, #0]
 800a566:	3302      	addmi	r3, #2
 800a568:	6033      	strmi	r3, [r6, #0]
 800a56a:	6825      	ldr	r5, [r4, #0]
 800a56c:	f015 0506 	ands.w	r5, r5, #6
 800a570:	d106      	bne.n	800a580 <_printf_common+0x48>
 800a572:	f104 0a19 	add.w	sl, r4, #25
 800a576:	68e3      	ldr	r3, [r4, #12]
 800a578:	6832      	ldr	r2, [r6, #0]
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	42ab      	cmp	r3, r5
 800a57e:	dc26      	bgt.n	800a5ce <_printf_common+0x96>
 800a580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a584:	1e13      	subs	r3, r2, #0
 800a586:	6822      	ldr	r2, [r4, #0]
 800a588:	bf18      	it	ne
 800a58a:	2301      	movne	r3, #1
 800a58c:	0692      	lsls	r2, r2, #26
 800a58e:	d42b      	bmi.n	800a5e8 <_printf_common+0xb0>
 800a590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a594:	4649      	mov	r1, r9
 800a596:	4638      	mov	r0, r7
 800a598:	47c0      	blx	r8
 800a59a:	3001      	adds	r0, #1
 800a59c:	d01e      	beq.n	800a5dc <_printf_common+0xa4>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	68e5      	ldr	r5, [r4, #12]
 800a5a2:	6832      	ldr	r2, [r6, #0]
 800a5a4:	f003 0306 	and.w	r3, r3, #6
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	bf08      	it	eq
 800a5ac:	1aad      	subeq	r5, r5, r2
 800a5ae:	68a3      	ldr	r3, [r4, #8]
 800a5b0:	6922      	ldr	r2, [r4, #16]
 800a5b2:	bf0c      	ite	eq
 800a5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5b8:	2500      	movne	r5, #0
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	bfc4      	itt	gt
 800a5be:	1a9b      	subgt	r3, r3, r2
 800a5c0:	18ed      	addgt	r5, r5, r3
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	341a      	adds	r4, #26
 800a5c6:	42b5      	cmp	r5, r6
 800a5c8:	d11a      	bne.n	800a600 <_printf_common+0xc8>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e008      	b.n	800a5e0 <_printf_common+0xa8>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	4652      	mov	r2, sl
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	47c0      	blx	r8
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d103      	bne.n	800a5e4 <_printf_common+0xac>
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	e7c6      	b.n	800a576 <_printf_common+0x3e>
 800a5e8:	18e1      	adds	r1, r4, r3
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	2030      	movs	r0, #48	; 0x30
 800a5ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5f2:	4422      	add	r2, r4
 800a5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	e7c7      	b.n	800a590 <_printf_common+0x58>
 800a600:	2301      	movs	r3, #1
 800a602:	4622      	mov	r2, r4
 800a604:	4649      	mov	r1, r9
 800a606:	4638      	mov	r0, r7
 800a608:	47c0      	blx	r8
 800a60a:	3001      	adds	r0, #1
 800a60c:	d0e6      	beq.n	800a5dc <_printf_common+0xa4>
 800a60e:	3601      	adds	r6, #1
 800a610:	e7d9      	b.n	800a5c6 <_printf_common+0x8e>
	...

0800a614 <_printf_i>:
 800a614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	460c      	mov	r4, r1
 800a61a:	4691      	mov	r9, r2
 800a61c:	7e27      	ldrb	r7, [r4, #24]
 800a61e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a620:	2f78      	cmp	r7, #120	; 0x78
 800a622:	4680      	mov	r8, r0
 800a624:	469a      	mov	sl, r3
 800a626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a62a:	d807      	bhi.n	800a63c <_printf_i+0x28>
 800a62c:	2f62      	cmp	r7, #98	; 0x62
 800a62e:	d80a      	bhi.n	800a646 <_printf_i+0x32>
 800a630:	2f00      	cmp	r7, #0
 800a632:	f000 80d8 	beq.w	800a7e6 <_printf_i+0x1d2>
 800a636:	2f58      	cmp	r7, #88	; 0x58
 800a638:	f000 80a3 	beq.w	800a782 <_printf_i+0x16e>
 800a63c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a644:	e03a      	b.n	800a6bc <_printf_i+0xa8>
 800a646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a64a:	2b15      	cmp	r3, #21
 800a64c:	d8f6      	bhi.n	800a63c <_printf_i+0x28>
 800a64e:	a001      	add	r0, pc, #4	; (adr r0, 800a654 <_printf_i+0x40>)
 800a650:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a654:	0800a6ad 	.word	0x0800a6ad
 800a658:	0800a6c1 	.word	0x0800a6c1
 800a65c:	0800a63d 	.word	0x0800a63d
 800a660:	0800a63d 	.word	0x0800a63d
 800a664:	0800a63d 	.word	0x0800a63d
 800a668:	0800a63d 	.word	0x0800a63d
 800a66c:	0800a6c1 	.word	0x0800a6c1
 800a670:	0800a63d 	.word	0x0800a63d
 800a674:	0800a63d 	.word	0x0800a63d
 800a678:	0800a63d 	.word	0x0800a63d
 800a67c:	0800a63d 	.word	0x0800a63d
 800a680:	0800a7cd 	.word	0x0800a7cd
 800a684:	0800a6f1 	.word	0x0800a6f1
 800a688:	0800a7af 	.word	0x0800a7af
 800a68c:	0800a63d 	.word	0x0800a63d
 800a690:	0800a63d 	.word	0x0800a63d
 800a694:	0800a7ef 	.word	0x0800a7ef
 800a698:	0800a63d 	.word	0x0800a63d
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a63d 	.word	0x0800a63d
 800a6a4:	0800a63d 	.word	0x0800a63d
 800a6a8:	0800a7b7 	.word	0x0800a7b7
 800a6ac:	680b      	ldr	r3, [r1, #0]
 800a6ae:	1d1a      	adds	r2, r3, #4
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	600a      	str	r2, [r1, #0]
 800a6b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e0a3      	b.n	800a808 <_printf_i+0x1f4>
 800a6c0:	6825      	ldr	r5, [r4, #0]
 800a6c2:	6808      	ldr	r0, [r1, #0]
 800a6c4:	062e      	lsls	r6, r5, #24
 800a6c6:	f100 0304 	add.w	r3, r0, #4
 800a6ca:	d50a      	bpl.n	800a6e2 <_printf_i+0xce>
 800a6cc:	6805      	ldr	r5, [r0, #0]
 800a6ce:	600b      	str	r3, [r1, #0]
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	da03      	bge.n	800a6dc <_printf_i+0xc8>
 800a6d4:	232d      	movs	r3, #45	; 0x2d
 800a6d6:	426d      	negs	r5, r5
 800a6d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6dc:	485e      	ldr	r0, [pc, #376]	; (800a858 <_printf_i+0x244>)
 800a6de:	230a      	movs	r3, #10
 800a6e0:	e019      	b.n	800a716 <_printf_i+0x102>
 800a6e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a6e6:	6805      	ldr	r5, [r0, #0]
 800a6e8:	600b      	str	r3, [r1, #0]
 800a6ea:	bf18      	it	ne
 800a6ec:	b22d      	sxthne	r5, r5
 800a6ee:	e7ef      	b.n	800a6d0 <_printf_i+0xbc>
 800a6f0:	680b      	ldr	r3, [r1, #0]
 800a6f2:	6825      	ldr	r5, [r4, #0]
 800a6f4:	1d18      	adds	r0, r3, #4
 800a6f6:	6008      	str	r0, [r1, #0]
 800a6f8:	0628      	lsls	r0, r5, #24
 800a6fa:	d501      	bpl.n	800a700 <_printf_i+0xec>
 800a6fc:	681d      	ldr	r5, [r3, #0]
 800a6fe:	e002      	b.n	800a706 <_printf_i+0xf2>
 800a700:	0669      	lsls	r1, r5, #25
 800a702:	d5fb      	bpl.n	800a6fc <_printf_i+0xe8>
 800a704:	881d      	ldrh	r5, [r3, #0]
 800a706:	4854      	ldr	r0, [pc, #336]	; (800a858 <_printf_i+0x244>)
 800a708:	2f6f      	cmp	r7, #111	; 0x6f
 800a70a:	bf0c      	ite	eq
 800a70c:	2308      	moveq	r3, #8
 800a70e:	230a      	movne	r3, #10
 800a710:	2100      	movs	r1, #0
 800a712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a716:	6866      	ldr	r6, [r4, #4]
 800a718:	60a6      	str	r6, [r4, #8]
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	bfa2      	ittt	ge
 800a71e:	6821      	ldrge	r1, [r4, #0]
 800a720:	f021 0104 	bicge.w	r1, r1, #4
 800a724:	6021      	strge	r1, [r4, #0]
 800a726:	b90d      	cbnz	r5, 800a72c <_printf_i+0x118>
 800a728:	2e00      	cmp	r6, #0
 800a72a:	d04d      	beq.n	800a7c8 <_printf_i+0x1b4>
 800a72c:	4616      	mov	r6, r2
 800a72e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a732:	fb03 5711 	mls	r7, r3, r1, r5
 800a736:	5dc7      	ldrb	r7, [r0, r7]
 800a738:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a73c:	462f      	mov	r7, r5
 800a73e:	42bb      	cmp	r3, r7
 800a740:	460d      	mov	r5, r1
 800a742:	d9f4      	bls.n	800a72e <_printf_i+0x11a>
 800a744:	2b08      	cmp	r3, #8
 800a746:	d10b      	bne.n	800a760 <_printf_i+0x14c>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	07df      	lsls	r7, r3, #31
 800a74c:	d508      	bpl.n	800a760 <_printf_i+0x14c>
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	4299      	cmp	r1, r3
 800a754:	bfde      	ittt	le
 800a756:	2330      	movle	r3, #48	; 0x30
 800a758:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a75c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a760:	1b92      	subs	r2, r2, r6
 800a762:	6122      	str	r2, [r4, #16]
 800a764:	f8cd a000 	str.w	sl, [sp]
 800a768:	464b      	mov	r3, r9
 800a76a:	aa03      	add	r2, sp, #12
 800a76c:	4621      	mov	r1, r4
 800a76e:	4640      	mov	r0, r8
 800a770:	f7ff fee2 	bl	800a538 <_printf_common>
 800a774:	3001      	adds	r0, #1
 800a776:	d14c      	bne.n	800a812 <_printf_i+0x1fe>
 800a778:	f04f 30ff 	mov.w	r0, #4294967295
 800a77c:	b004      	add	sp, #16
 800a77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a782:	4835      	ldr	r0, [pc, #212]	; (800a858 <_printf_i+0x244>)
 800a784:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	680e      	ldr	r6, [r1, #0]
 800a78c:	061f      	lsls	r7, r3, #24
 800a78e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a792:	600e      	str	r6, [r1, #0]
 800a794:	d514      	bpl.n	800a7c0 <_printf_i+0x1ac>
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	bf44      	itt	mi
 800a79a:	f043 0320 	orrmi.w	r3, r3, #32
 800a79e:	6023      	strmi	r3, [r4, #0]
 800a7a0:	b91d      	cbnz	r5, 800a7aa <_printf_i+0x196>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	f023 0320 	bic.w	r3, r3, #32
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	2310      	movs	r3, #16
 800a7ac:	e7b0      	b.n	800a710 <_printf_i+0xfc>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	f043 0320 	orr.w	r3, r3, #32
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	2378      	movs	r3, #120	; 0x78
 800a7b8:	4828      	ldr	r0, [pc, #160]	; (800a85c <_printf_i+0x248>)
 800a7ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7be:	e7e3      	b.n	800a788 <_printf_i+0x174>
 800a7c0:	065e      	lsls	r6, r3, #25
 800a7c2:	bf48      	it	mi
 800a7c4:	b2ad      	uxthmi	r5, r5
 800a7c6:	e7e6      	b.n	800a796 <_printf_i+0x182>
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	e7bb      	b.n	800a744 <_printf_i+0x130>
 800a7cc:	680b      	ldr	r3, [r1, #0]
 800a7ce:	6826      	ldr	r6, [r4, #0]
 800a7d0:	6960      	ldr	r0, [r4, #20]
 800a7d2:	1d1d      	adds	r5, r3, #4
 800a7d4:	600d      	str	r5, [r1, #0]
 800a7d6:	0635      	lsls	r5, r6, #24
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	d501      	bpl.n	800a7e0 <_printf_i+0x1cc>
 800a7dc:	6018      	str	r0, [r3, #0]
 800a7de:	e002      	b.n	800a7e6 <_printf_i+0x1d2>
 800a7e0:	0671      	lsls	r1, r6, #25
 800a7e2:	d5fb      	bpl.n	800a7dc <_printf_i+0x1c8>
 800a7e4:	8018      	strh	r0, [r3, #0]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6123      	str	r3, [r4, #16]
 800a7ea:	4616      	mov	r6, r2
 800a7ec:	e7ba      	b.n	800a764 <_printf_i+0x150>
 800a7ee:	680b      	ldr	r3, [r1, #0]
 800a7f0:	1d1a      	adds	r2, r3, #4
 800a7f2:	600a      	str	r2, [r1, #0]
 800a7f4:	681e      	ldr	r6, [r3, #0]
 800a7f6:	6862      	ldr	r2, [r4, #4]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f7f5 fd00 	bl	8000200 <memchr>
 800a800:	b108      	cbz	r0, 800a806 <_printf_i+0x1f2>
 800a802:	1b80      	subs	r0, r0, r6
 800a804:	6060      	str	r0, [r4, #4]
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	6123      	str	r3, [r4, #16]
 800a80a:	2300      	movs	r3, #0
 800a80c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a810:	e7a8      	b.n	800a764 <_printf_i+0x150>
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	4632      	mov	r2, r6
 800a816:	4649      	mov	r1, r9
 800a818:	4640      	mov	r0, r8
 800a81a:	47d0      	blx	sl
 800a81c:	3001      	adds	r0, #1
 800a81e:	d0ab      	beq.n	800a778 <_printf_i+0x164>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	079b      	lsls	r3, r3, #30
 800a824:	d413      	bmi.n	800a84e <_printf_i+0x23a>
 800a826:	68e0      	ldr	r0, [r4, #12]
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	4298      	cmp	r0, r3
 800a82c:	bfb8      	it	lt
 800a82e:	4618      	movlt	r0, r3
 800a830:	e7a4      	b.n	800a77c <_printf_i+0x168>
 800a832:	2301      	movs	r3, #1
 800a834:	4632      	mov	r2, r6
 800a836:	4649      	mov	r1, r9
 800a838:	4640      	mov	r0, r8
 800a83a:	47d0      	blx	sl
 800a83c:	3001      	adds	r0, #1
 800a83e:	d09b      	beq.n	800a778 <_printf_i+0x164>
 800a840:	3501      	adds	r5, #1
 800a842:	68e3      	ldr	r3, [r4, #12]
 800a844:	9903      	ldr	r1, [sp, #12]
 800a846:	1a5b      	subs	r3, r3, r1
 800a848:	42ab      	cmp	r3, r5
 800a84a:	dcf2      	bgt.n	800a832 <_printf_i+0x21e>
 800a84c:	e7eb      	b.n	800a826 <_printf_i+0x212>
 800a84e:	2500      	movs	r5, #0
 800a850:	f104 0619 	add.w	r6, r4, #25
 800a854:	e7f5      	b.n	800a842 <_printf_i+0x22e>
 800a856:	bf00      	nop
 800a858:	0800af5d 	.word	0x0800af5d
 800a85c:	0800af6e 	.word	0x0800af6e

0800a860 <_sbrk_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d06      	ldr	r5, [pc, #24]	; (800a87c <_sbrk_r+0x1c>)
 800a864:	2300      	movs	r3, #0
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	602b      	str	r3, [r5, #0]
 800a86c:	f7f7 f972 	bl	8001b54 <_sbrk>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_sbrk_r+0x1a>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_sbrk_r+0x1a>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	20004cac 	.word	0x20004cac

0800a880 <__sread>:
 800a880:	b510      	push	{r4, lr}
 800a882:	460c      	mov	r4, r1
 800a884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a888:	f000 f8e0 	bl	800aa4c <_read_r>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	bfab      	itete	ge
 800a890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a892:	89a3      	ldrhlt	r3, [r4, #12]
 800a894:	181b      	addge	r3, r3, r0
 800a896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a89a:	bfac      	ite	ge
 800a89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a89e:	81a3      	strhlt	r3, [r4, #12]
 800a8a0:	bd10      	pop	{r4, pc}

0800a8a2 <__swrite>:
 800a8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a6:	461f      	mov	r7, r3
 800a8a8:	898b      	ldrh	r3, [r1, #12]
 800a8aa:	05db      	lsls	r3, r3, #23
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	d505      	bpl.n	800a8c0 <__swrite+0x1e>
 800a8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f000 f868 	bl	800a990 <_lseek_r>
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	463b      	mov	r3, r7
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d6:	f000 b817 	b.w	800a908 <_write_r>

0800a8da <__sseek>:
 800a8da:	b510      	push	{r4, lr}
 800a8dc:	460c      	mov	r4, r1
 800a8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e2:	f000 f855 	bl	800a990 <_lseek_r>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	bf15      	itete	ne
 800a8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8f6:	81a3      	strheq	r3, [r4, #12]
 800a8f8:	bf18      	it	ne
 800a8fa:	81a3      	strhne	r3, [r4, #12]
 800a8fc:	bd10      	pop	{r4, pc}

0800a8fe <__sclose>:
 800a8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a902:	f000 b813 	b.w	800a92c <_close_r>
	...

0800a908 <_write_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	; (800a928 <_write_r+0x20>)
 800a90c:	4604      	mov	r4, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	602a      	str	r2, [r5, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7f7 f8cb 	bl	8001ab2 <_write>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_write_r+0x1e>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_write_r+0x1e>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	20004cac 	.word	0x20004cac

0800a92c <_close_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d06      	ldr	r5, [pc, #24]	; (800a948 <_close_r+0x1c>)
 800a930:	2300      	movs	r3, #0
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	602b      	str	r3, [r5, #0]
 800a938:	f7f7 f8d7 	bl	8001aea <_close>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_close_r+0x1a>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_close_r+0x1a>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20004cac 	.word	0x20004cac

0800a94c <_fstat_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	; (800a96c <_fstat_r+0x20>)
 800a950:	2300      	movs	r3, #0
 800a952:	4604      	mov	r4, r0
 800a954:	4608      	mov	r0, r1
 800a956:	4611      	mov	r1, r2
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	f7f7 f8d2 	bl	8001b02 <_fstat>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	d102      	bne.n	800a968 <_fstat_r+0x1c>
 800a962:	682b      	ldr	r3, [r5, #0]
 800a964:	b103      	cbz	r3, 800a968 <_fstat_r+0x1c>
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	bd38      	pop	{r3, r4, r5, pc}
 800a96a:	bf00      	nop
 800a96c:	20004cac 	.word	0x20004cac

0800a970 <_isatty_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4d06      	ldr	r5, [pc, #24]	; (800a98c <_isatty_r+0x1c>)
 800a974:	2300      	movs	r3, #0
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	602b      	str	r3, [r5, #0]
 800a97c:	f7f7 f8d1 	bl	8001b22 <_isatty>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_isatty_r+0x1a>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_isatty_r+0x1a>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	20004cac 	.word	0x20004cac

0800a990 <_lseek_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d07      	ldr	r5, [pc, #28]	; (800a9b0 <_lseek_r+0x20>)
 800a994:	4604      	mov	r4, r0
 800a996:	4608      	mov	r0, r1
 800a998:	4611      	mov	r1, r2
 800a99a:	2200      	movs	r2, #0
 800a99c:	602a      	str	r2, [r5, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f7f7 f8ca 	bl	8001b38 <_lseek>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d102      	bne.n	800a9ae <_lseek_r+0x1e>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b103      	cbz	r3, 800a9ae <_lseek_r+0x1e>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	20004cac 	.word	0x20004cac

0800a9b4 <memmove>:
 800a9b4:	4288      	cmp	r0, r1
 800a9b6:	b510      	push	{r4, lr}
 800a9b8:	eb01 0402 	add.w	r4, r1, r2
 800a9bc:	d902      	bls.n	800a9c4 <memmove+0x10>
 800a9be:	4284      	cmp	r4, r0
 800a9c0:	4623      	mov	r3, r4
 800a9c2:	d807      	bhi.n	800a9d4 <memmove+0x20>
 800a9c4:	1e43      	subs	r3, r0, #1
 800a9c6:	42a1      	cmp	r1, r4
 800a9c8:	d008      	beq.n	800a9dc <memmove+0x28>
 800a9ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9d2:	e7f8      	b.n	800a9c6 <memmove+0x12>
 800a9d4:	4402      	add	r2, r0
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	428a      	cmp	r2, r1
 800a9da:	d100      	bne.n	800a9de <memmove+0x2a>
 800a9dc:	bd10      	pop	{r4, pc}
 800a9de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9e6:	e7f7      	b.n	800a9d8 <memmove+0x24>

0800a9e8 <__malloc_lock>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__malloc_lock+0x8>)
 800a9ea:	f7ff b9df 	b.w	8009dac <__retarget_lock_acquire_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	20004ca4 	.word	0x20004ca4

0800a9f4 <__malloc_unlock>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__malloc_unlock+0x8>)
 800a9f6:	f7ff b9da 	b.w	8009dae <__retarget_lock_release_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	20004ca4 	.word	0x20004ca4

0800aa00 <_realloc_r>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	4607      	mov	r7, r0
 800aa04:	4614      	mov	r4, r2
 800aa06:	460e      	mov	r6, r1
 800aa08:	b921      	cbnz	r1, 800aa14 <_realloc_r+0x14>
 800aa0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa0e:	4611      	mov	r1, r2
 800aa10:	f7ff ba82 	b.w	8009f18 <_malloc_r>
 800aa14:	b922      	cbnz	r2, 800aa20 <_realloc_r+0x20>
 800aa16:	f7ff fa2f 	bl	8009e78 <_free_r>
 800aa1a:	4625      	mov	r5, r4
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa20:	f000 f826 	bl	800aa70 <_malloc_usable_size_r>
 800aa24:	42a0      	cmp	r0, r4
 800aa26:	d20f      	bcs.n	800aa48 <_realloc_r+0x48>
 800aa28:	4621      	mov	r1, r4
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	f7ff fa74 	bl	8009f18 <_malloc_r>
 800aa30:	4605      	mov	r5, r0
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d0f2      	beq.n	800aa1c <_realloc_r+0x1c>
 800aa36:	4631      	mov	r1, r6
 800aa38:	4622      	mov	r2, r4
 800aa3a:	f7fe fded 	bl	8009618 <memcpy>
 800aa3e:	4631      	mov	r1, r6
 800aa40:	4638      	mov	r0, r7
 800aa42:	f7ff fa19 	bl	8009e78 <_free_r>
 800aa46:	e7e9      	b.n	800aa1c <_realloc_r+0x1c>
 800aa48:	4635      	mov	r5, r6
 800aa4a:	e7e7      	b.n	800aa1c <_realloc_r+0x1c>

0800aa4c <_read_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d07      	ldr	r5, [pc, #28]	; (800aa6c <_read_r+0x20>)
 800aa50:	4604      	mov	r4, r0
 800aa52:	4608      	mov	r0, r1
 800aa54:	4611      	mov	r1, r2
 800aa56:	2200      	movs	r2, #0
 800aa58:	602a      	str	r2, [r5, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f7f7 f80c 	bl	8001a78 <_read>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_read_r+0x1e>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_read_r+0x1e>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	20004cac 	.word	0x20004cac

0800aa70 <_malloc_usable_size_r>:
 800aa70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa74:	1f18      	subs	r0, r3, #4
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	bfbc      	itt	lt
 800aa7a:	580b      	ldrlt	r3, [r1, r0]
 800aa7c:	18c0      	addlt	r0, r0, r3
 800aa7e:	4770      	bx	lr

0800aa80 <_init>:
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa82:	bf00      	nop
 800aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa86:	bc08      	pop	{r3}
 800aa88:	469e      	mov	lr, r3
 800aa8a:	4770      	bx	lr

0800aa8c <_fini>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	bf00      	nop
 800aa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa92:	bc08      	pop	{r3}
 800aa94:	469e      	mov	lr, r3
 800aa96:	4770      	bx	lr

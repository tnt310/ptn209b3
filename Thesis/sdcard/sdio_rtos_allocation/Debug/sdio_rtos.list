
sdio_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800c338  0800c338  0001c338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c0  0800c7c0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7c0  0800c7c0  0001c7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c8  0800c7c8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7cc  0800c7cc  0001c7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800c7d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f48  200000b0  0800c880  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ff8  0800c880  00024ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206ee  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046f9  00000000  00000000  000407ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b0  00000000  00000000  00044ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  00046878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002716d  00000000  00000000  00048010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000169c4  00000000  00000000  0006f17d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db152  00000000  00000000  00085b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000713c  00000000  00000000  00160d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c320 	.word	0x0800c320

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800c320 	.word	0x0800c320

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
int
CmdLineProcess(char *pcCmdLine)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 80005a8:	2301      	movs	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 80005b4:	e020      	b.n	80005f8 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b20      	cmp	r3, #32
 80005bc:	d105      	bne.n	80005ca <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e013      	b.n	80005f2 <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d010      	beq.n	80005f2 <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b09      	cmp	r3, #9
 80005d4:	d80a      	bhi.n	80005ec <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 80005d6:	491d      	ldr	r1, [pc, #116]	; (800064c <CmdLineProcess+0xac>)
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	3301      	adds	r3, #1
 80005e4:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e002      	b.n	80005f2 <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 80005ec:	f06f 0301 	mvn.w	r3, #1
 80005f0:	e028      	b.n	8000644 <CmdLineProcess+0xa4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1da      	bne.n	80005b6 <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d01c      	beq.n	8000640 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <CmdLineProcess+0xb0>)
 8000608:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 800060a:	e015      	b.n	8000638 <CmdLineProcess+0x98>
        {
            //
            // If this command entry command string matches argv[0], then call
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <CmdLineProcess+0xac>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4610      	mov	r0, r2
 8000618:	f7ff fdda 	bl	80001d0 <strcmp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <CmdLineProcess+0x92>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	4908      	ldr	r1, [pc, #32]	; (800064c <CmdLineProcess+0xac>)
 800062a:	4610      	mov	r0, r2
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	e008      	b.n	8000644 <CmdLineProcess+0xa4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	330c      	adds	r3, #12
 8000636:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1e5      	bne.n	800060c <CmdLineProcess+0x6c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000cc 	.word	0x200000cc
 8000650:	20000000 	.word	0x20000000

08000654 <UARTIntHandler>:
uint8_t commandBuffer[200];
uint32_t commandBufferIndex = 0;
uint32_t gotCommandFlag = 0;
uint8_t temp[100];

void UARTIntHandler(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint8_t receivedChar;
	char *EnterCMD = "\r\n>";
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <UARTIntHandler+0xa0>)
 800065c:	607b      	str	r3, [r7, #4]
	receivedChar = (uint8_t) ((huart6).Instance->DR & (uint8_t) 0x00FF);
 800065e:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <UARTIntHandler+0xa4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart6, &receivedChar, 1, 100);
 8000668:	1cf9      	adds	r1, r7, #3
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	4822      	ldr	r0, [pc, #136]	; (80006f8 <UARTIntHandler+0xa4>)
 8000670:	f003 ff6b 	bl	800454a <HAL_UART_Transmit>
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <UARTIntHandler+0xa4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <UARTIntHandler+0xa4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f042 0220 	orr.w	r2, r2, #32
 8000682:	60da      	str	r2, [r3, #12]
	if (receivedChar != 13) {
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b0d      	cmp	r3, #13
 8000688:	d01a      	beq.n	80006c0 <UARTIntHandler+0x6c>
		if ((receivedChar == 8) || (receivedChar == 127)) {
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	2b08      	cmp	r3, #8
 800068e:	d002      	beq.n	8000696 <UARTIntHandler+0x42>
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b7f      	cmp	r3, #127	; 0x7f
 8000694:	d109      	bne.n	80006aa <UARTIntHandler+0x56>
			if (commandBufferIndex > 0)
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <UARTIntHandler+0xa8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d026      	beq.n	80006ec <UARTIntHandler+0x98>
				commandBufferIndex--;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <UARTIntHandler+0xa8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a15      	ldr	r2, [pc, #84]	; (80006fc <UARTIntHandler+0xa8>)
 80006a6:	6013      	str	r3, [r2, #0]
			if (commandBufferIndex > 0)
 80006a8:	e020      	b.n	80006ec <UARTIntHandler+0x98>
		} else {
			commandBuffer[commandBufferIndex] = receivedChar;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <UARTIntHandler+0xa8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	78f9      	ldrb	r1, [r7, #3]
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <UARTIntHandler+0xac>)
 80006b2:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex++;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <UARTIntHandler+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <UARTIntHandler+0xa8>)
 80006bc:	6013      	str	r3, [r2, #0]
			commandBufferIndex = 0;
			gotCommandFlag = 1;
		}
		HAL_UART_Transmit(&huart6, (uint8_t*)EnterCMD, 3, 100);
	}
}
 80006be:	e015      	b.n	80006ec <UARTIntHandler+0x98>
		if (commandBufferIndex != 0) {
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <UARTIntHandler+0xa8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00a      	beq.n	80006de <UARTIntHandler+0x8a>
			commandBuffer[commandBufferIndex] = 0;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <UARTIntHandler+0xa8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <UARTIntHandler+0xac>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex = 0;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <UARTIntHandler+0xa8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			gotCommandFlag = 1;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <UARTIntHandler+0xb0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, (uint8_t*)EnterCMD, 3, 100);
 80006de:	2364      	movs	r3, #100	; 0x64
 80006e0:	2203      	movs	r2, #3
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <UARTIntHandler+0xa4>)
 80006e6:	f003 ff30 	bl	800454a <HAL_UART_Transmit>
}
 80006ea:	e7ff      	b.n	80006ec <UARTIntHandler+0x98>
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	0800c3cc 	.word	0x0800c3cc
 80006f8:	200044dc 	.word	0x200044dc
 80006fc:	200000f8 	.word	0x200000f8
 8000700:	200042e4 	.word	0x200042e4
 8000704:	200000fc 	.word	0x200000fc

08000708 <Cmd_read_all>:
//
int Cmd_read_all(int argc, char *argv[])
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	printf("\nCmd_read_all\r\n");
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <Cmd_read_all+0x20>)
 8000714:	f00a ff30 	bl	800b578 <puts>
	printf("------------------\r\n");
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <Cmd_read_all+0x24>)
 800071a:	f00a ff2d 	bl	800b578 <puts>
	//SD_READ_ALL("DEVICE.TXT");
}
 800071e:	bf00      	nop
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	0800c3d0 	.word	0x0800c3d0
 800072c:	0800c3e0 	.word	0x0800c3e0

08000730 <Cmd_load_all>:
int Cmd_load_all(int argc, char *argv[])
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
	printf("\nCmd_load_all\r\n");
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <Cmd_load_all+0x20>)
 800073c:	f00a ff1c 	bl	800b578 <puts>
	printf("------------------\r\n");
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <Cmd_load_all+0x24>)
 8000742:	f00a ff19 	bl	800b578 <puts>
////		{
////			   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
////					   &(dynamic+i)->deviceChannel,&(dynamic+i)->devicestatus,&(dynamic+i)->deviceType,&(dynamic+i)->deviceName,
////					   &(dynamic+i)->channeltitle,&(dynamic+i)->valueType);
////		}
}
 8000746:	bf00      	nop
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	0800c3f4 	.word	0x0800c3f4
 8000754:	0800c3e0 	.word	0x0800c3e0

08000758 <Cmd_allocate_device>:
int Cmd_allocate_device(int argc, char *argv[])
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	printf("\nCmd_allocate_device\r\n");
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <Cmd_allocate_device+0x28>)
 8000764:	f00a ff08 	bl	800b578 <puts>
	printf("------------------\r\n");
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <Cmd_allocate_device+0x2c>)
 800076a:	f00a ff05 	bl	800b578 <puts>
	printf("\r\nALLOCATED DEVICE MEMORY--------------------------------------------------------\r\n");
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <Cmd_allocate_device+0x30>)
 8000770:	f00a ff02 	bl	800b578 <puts>
//	{
//		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
//				   &(dynamic+i)->deviceChannel,&(dynamic+i)->devicestatus,&(dynamic+i)->deviceType,&(dynamic+i)->deviceName,
//				   &(dynamic+i)->channeltitle,&(dynamic+i)->valueType);
//	}
}
 8000774:	bf00      	nop
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	0800c404 	.word	0x0800c404
 8000784:	0800c3e0 	.word	0x0800c3e0
 8000788:	0800c41c 	.word	0x0800c41c

0800078c <Cmd_set_allocation>:
int Cmd_set_allocation(int argc, char *argv[])
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	printf("\nCmd_set_allocation\r\n");
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <Cmd_set_allocation+0x38>)
 8000798:	f00a feee 	bl	800b578 <puts>
	printf("------------------\r\n");
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <Cmd_set_allocation+0x3c>)
 800079e:	f00a feeb 	bl	800b578 <puts>
	uint32_t handle = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
	xQueueSend(xQueueResetHandle,&handle,portMAX_DELAY);
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <Cmd_set_allocation+0x40>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	f107 010c 	add.w	r1, r7, #12
 80007ae:	2300      	movs	r3, #0
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	f008 fc10 	bl	8008fd8 <xQueueGenericSend>
}
 80007b8:	bf00      	nop
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	0800c470 	.word	0x0800c470
 80007c8:	0800c3e0 	.word	0x0800c3e0
 80007cc:	20004770 	.word	0x20004770

080007d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007d4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <__NVIC_SystemReset+0x20>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007e0:	4903      	ldr	r1, [pc, #12]	; (80007f0 <__NVIC_SystemReset+0x20>)
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__NVIC_SystemReset+0x24>)
 80007e4:	4313      	orrs	r3, r2
 80007e6:	60cb      	str	r3, [r1, #12]
 80007e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <__NVIC_SystemReset+0x1c>
 80007f0:	e000ed00 	.word	0xe000ed00
 80007f4:	05fa0004 	.word	0x05fa0004

080007f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4a07      	ldr	r2, [pc, #28]	; (8000824 <vApplicationGetIdleTaskMemory+0x2c>)
 8000808:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <vApplicationGetIdleTaskMemory+0x30>)
 800080e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000816:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20000100 	.word	0x20000100
 8000828:	20000154 	.word	0x20000154

0800082c <MX_FREERTOS_Init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MX_FREERTOS_Init(void) {
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b09a      	sub	sp, #104	; 0x68
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
	  osSemaphoreDef(netMqttIpSemaphore);
 8000832:	2300      	movs	r3, #0
 8000834:	663b      	str	r3, [r7, #96]	; 0x60
 8000836:	2300      	movs	r3, #0
 8000838:	667b      	str	r3, [r7, #100]	; 0x64
	  netMqttIpSemaphoreHandle = osSemaphoreCreate(osSemaphore(netMqttIpSemaphore), 1);
 800083a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800083e:	2101      	movs	r1, #1
 8000840:	4618      	mov	r0, r3
 8000842:	f008 f833 	bl	80088ac <osSemaphoreCreate>
 8000846:	4602      	mov	r2, r0
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_FREERTOS_Init+0xd4>)
 800084a:	601a      	str	r2, [r3, #0]
	  /* USER CODE END RTOS_SEMAPHORES */

	  /* Create the timer(s) */
	  /* definition and creation of myTimer01 */

	osMessageQDef(xQueueControl, 1, xQueueControl_t);
 800084c:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <MX_FREERTOS_Init+0xd8>)
 800084e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueControlHandle = osMessageCreate(osMessageQ(xQueueControl), NULL);
 8000858:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f008 f8ef 	bl	8008a42 <osMessageCreate>
 8000864:	4602      	mov	r2, r0
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_FREERTOS_Init+0xdc>)
 8000868:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueMessage, 1, uint8_t);
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <MX_FREERTOS_Init+0xe0>)
 800086c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueMessageHandle = osMessageCreate(osMessageQ(xQueueMessage), NULL);
 8000876:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f008 f8e0 	bl	8008a42 <osMessageCreate>
 8000882:	4602      	mov	r2, r0
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_FREERTOS_Init+0xe4>)
 8000886:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueDownlink, 1, xQueueMbMqtt_t);
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_FREERTOS_Init+0xe8>)
 800088a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800088e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueDownlinkHandle = osMessageCreate(osMessageQ(xQueueDownlink), NULL);
 8000894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f008 f8d1 	bl	8008a42 <osMessageCreate>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_FREERTOS_Init+0xec>)
 80008a4:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueUplink, 1, xQueueMbMqtt_t);
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_FREERTOS_Init+0xe8>)
 80008a8:	f107 0420 	add.w	r4, r7, #32
 80008ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueUplinkHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f008 f8c2 	bl	8008a42 <osMessageCreate>
 80008be:	4602      	mov	r2, r0
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_FREERTOS_Init+0xf0>)
 80008c2:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueReset, 1, sizeof(uint32_t));
	xQueueResetHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 f8b9 	bl	8008a42 <osMessageCreate>
 80008d0:	4602      	mov	r2, r0
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_FREERTOS_Init+0xf4>)
 80008d4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_FREERTOS_Init+0xf8>)
 80008d8:	1d3c      	adds	r4, r7, #4
 80008da:	461d      	mov	r5, r3
 80008dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f007 ff91 	bl	8008814 <osThreadCreate>
 80008f2:	4602      	mov	r2, r0
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_FREERTOS_Init+0xfc>)
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	3768      	adds	r7, #104	; 0x68
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000900:	20004780 	.word	0x20004780
 8000904:	0800c488 	.word	0x0800c488
 8000908:	20004534 	.word	0x20004534
 800090c:	0800c498 	.word	0x0800c498
 8000910:	20004788 	.word	0x20004788
 8000914:	0800c4a8 	.word	0x0800c4a8
 8000918:	20004774 	.word	0x20004774
 800091c:	20004778 	.word	0x20004778
 8000920:	20004770 	.word	0x20004770
 8000924:	0800c4c4 	.word	0x0800c4c4
 8000928:	20004538 	.word	0x20004538

0800092c <StartDefaultTask>:
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
void StartDefaultTask(void const * argument)
 {
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b090      	sub	sp, #64	; 0x40
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartDefaultTask */
 	/*Create Task Modules in this line*/
 	/*SIm serive*/
	/*Reset Handler*/
	osThreadDef(resetHandlerTask, ResetHandlerTask, osPriorityRealtime, 0, 128);
 8000934:	4b58      	ldr	r3, [pc, #352]	; (8000a98 <StartDefaultTask+0x16c>)
 8000936:	f107 0418 	add.w	r4, r7, #24
 800093a:	461d      	mov	r5, r3
 800093c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000940:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	resetHandlerTask = osThreadCreate(osThread(resetHandlerTask), NULL);
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f007 ff60 	bl	8008814 <osThreadCreate>
 8000954:	4602      	mov	r2, r0
 8000956:	4b51      	ldr	r3, [pc, #324]	; (8000a9c <StartDefaultTask+0x170>)
 8000958:	601a      	str	r2, [r3, #0]
	printf("\r\n MemFree: %d", xPortGetFreeHeapSize());
 800095a:	f00a fc93 	bl	800b284 <xPortGetFreeHeapSize>
 800095e:	4603      	mov	r3, r0
 8000960:	4619      	mov	r1, r3
 8000962:	484f      	ldr	r0, [pc, #316]	; (8000aa0 <StartDefaultTask+0x174>)
 8000964:	f00a fd94 	bl	800b490 <iprintf>
	printf("\r\n MemFree: %d", xPortGetFreeHeapSize());
 8000968:	f00a fc8c 	bl	800b284 <xPortGetFreeHeapSize>
 800096c:	4603      	mov	r3, r0
 800096e:	4619      	mov	r1, r3
 8000970:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <StartDefaultTask+0x174>)
 8000972:	f00a fd8d 	bl	800b490 <iprintf>
 	/*Controller*/
 	xQueueControl_t xQueueControl;
 	#define PORT_DEFAULT_DELAY	1000
 	uint8_t uiSysState = SYS_START;
 8000976:	2300      	movs	r3, #0
 8000978:	73fb      	strb	r3, [r7, #15]
 	uint8_t uiSysUpdate = FALSE;
 800097a:	2300      	movs	r3, #0
 800097c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 	BaseType_t sysError;
 	int ret;
 	char *Badcommand = "Bad Command\r\n>";
 8000980:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <StartDefaultTask+0x178>)
 8000982:	63bb      	str	r3, [r7, #56]	; 0x38
 	/* Infinite loop */
 	for (;;) {
 		switch (uiSysState) {
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d00e      	beq.n	80009a8 <StartDefaultTask+0x7c>
 800098a:	2b02      	cmp	r3, #2
 800098c:	d057      	beq.n	8000a3e <StartDefaultTask+0x112>
 800098e:	2b00      	cmp	r3, #0
 8000990:	d16f      	bne.n	8000a72 <StartDefaultTask+0x146>
 		case SYS_START:
 			printf("\r\n SYS_START: Implementing...  \r\n");
 8000992:	4845      	ldr	r0, [pc, #276]	; (8000aa8 <StartDefaultTask+0x17c>)
 8000994:	f00a fdf0 	bl	800b578 <puts>
 			uiSysUpdate = TRUE;
 8000998:	2301      	movs	r3, #1
 800099a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 			uiSysState++;
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	3301      	adds	r3, #1
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	73fb      	strb	r3, [r7, #15]
 			break;
 80009a6:	e064      	b.n	8000a72 <StartDefaultTask+0x146>
 		case SYS_DEVICE:
 			printf("\r\n SYS_DEVICE: Implementing...  \r\n");
 80009a8:	4840      	ldr	r0, [pc, #256]	; (8000aac <StartDefaultTask+0x180>)
 80009aa:	f00a fde5 	bl	800b578 <puts>
			  MX_FATFS_Init();
 80009ae:	f005 f9cf 	bl	8005d50 <MX_FATFS_Init>
			  if (BSP_SD_Init() == MSD_OK)
 80009b2:	f005 f9e7 	bl	8005d84 <BSP_SD_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d138      	bne.n	8000a2e <StartDefaultTask+0x102>
			  {
				  fresult = f_mount(&fs, "", 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	493c      	ldr	r1, [pc, #240]	; (8000ab0 <StartDefaultTask+0x184>)
 80009c0:	483c      	ldr	r0, [pc, #240]	; (8000ab4 <StartDefaultTask+0x188>)
 80009c2:	f007 f9ab 	bl	8007d1c <f_mount>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <StartDefaultTask+0x18c>)
 80009cc:	701a      	strb	r2, [r3, #0]
				  fresult = f_open(&fil, "device.txt", FA_READ);
 80009ce:	2201      	movs	r2, #1
 80009d0:	493a      	ldr	r1, [pc, #232]	; (8000abc <StartDefaultTask+0x190>)
 80009d2:	483b      	ldr	r0, [pc, #236]	; (8000ac0 <StartDefaultTask+0x194>)
 80009d4:	f007 fa06 	bl	8007de4 <f_open>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <StartDefaultTask+0x18c>)
 80009de:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; (f_eof(&fil) == 0); i++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80009e6:	e015      	b.n	8000a14 <StartDefaultTask+0xe8>
					{
					   memset(SDbuffer,0, sizeof(SDbuffer));
 80009e8:	22c8      	movs	r2, #200	; 0xc8
 80009ea:	2100      	movs	r1, #0
 80009ec:	4835      	ldr	r0, [pc, #212]	; (8000ac4 <StartDefaultTask+0x198>)
 80009ee:	f00a fd46 	bl	800b47e <memset>
					   f_gets((char*)SDbuffer, sizeof(SDbuffer), &fil);
 80009f2:	4a33      	ldr	r2, [pc, #204]	; (8000ac0 <StartDefaultTask+0x194>)
 80009f4:	21c8      	movs	r1, #200	; 0xc8
 80009f6:	4833      	ldr	r0, [pc, #204]	; (8000ac4 <StartDefaultTask+0x198>)
 80009f8:	f007 fddf 	bl	80085ba <f_gets>
					   printf("\r\nLine %d: %s",i, SDbuffer);
 80009fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000a00:	4a30      	ldr	r2, [pc, #192]	; (8000ac4 <StartDefaultTask+0x198>)
 8000a02:	4619      	mov	r1, r3
 8000a04:	4830      	ldr	r0, [pc, #192]	; (8000ac8 <StartDefaultTask+0x19c>)
 8000a06:	f00a fd43 	bl	800b490 <iprintf>
					for (uint8_t i = 0; (f_eof(&fil) == 0); i++)
 8000a0a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000a0e:	3301      	adds	r3, #1
 8000a10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <StartDefaultTask+0x194>)
 8000a16:	699a      	ldr	r2, [r3, #24]
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <StartDefaultTask+0x194>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d1e3      	bne.n	80009e8 <StartDefaultTask+0xbc>

					}
					fresult = f_close(&fil);
 8000a20:	4827      	ldr	r0, [pc, #156]	; (8000ac0 <StartDefaultTask+0x194>)
 8000a22:	f007 fd9b 	bl	800855c <f_close>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <StartDefaultTask+0x18c>)
 8000a2c:	701a      	strb	r2, [r3, #0]
			  }
 			uiSysUpdate = TRUE;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 			uiSysState++;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	73fb      	strb	r3, [r7, #15]
 			break;
 8000a3c:	e019      	b.n	8000a72 <StartDefaultTask+0x146>
		case SYS_DEFAULT:
			if (gotCommandFlag == 1) {
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <StartDefaultTask+0x1a0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d114      	bne.n	8000a70 <StartDefaultTask+0x144>
				gotCommandFlag = 0;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <StartDefaultTask+0x1a0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
				ret = CmdLineProcess(commandBuffer);
 8000a4c:	4820      	ldr	r0, [pc, #128]	; (8000ad0 <StartDefaultTask+0x1a4>)
 8000a4e:	f7ff fda7 	bl	80005a0 <CmdLineProcess>
 8000a52:	6378      	str	r0, [r7, #52]	; 0x34
				if (ret == CMDLINE_BAD_CMD){
 8000a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5a:	d109      	bne.n	8000a70 <StartDefaultTask+0x144>
					HAL_UART_Transmit(&huart6, Badcommand, strlen(Badcommand),100);
 8000a5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000a5e:	f7ff fbc1 	bl	80001e4 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	2364      	movs	r3, #100	; 0x64
 8000a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000a6a:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <StartDefaultTask+0x1a8>)
 8000a6c:	f003 fd6d 	bl	800454a <HAL_UART_Transmit>
				}
			}
			//osDelay(10);
			break;
 8000a70:	bf00      	nop
		}
		if ((uiSysUpdate == TRUE) && (uiSysState != SYS_DEFAULT)) {
 8000a72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d184      	bne.n	8000984 <StartDefaultTask+0x58>
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d081      	beq.n	8000984 <StartDefaultTask+0x58>
			xQueueSend(xQueueMessageHandle, &uiSysState, 0);
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <StartDefaultTask+0x1ac>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	f107 010f 	add.w	r1, r7, #15
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f008 faa4 	bl	8008fd8 <xQueueGenericSend>
			uiSysUpdate = FALSE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 		switch (uiSysState) {
 8000a96:	e775      	b.n	8000984 <StartDefaultTask+0x58>
 8000a98:	0800c57c 	.word	0x0800c57c
 8000a9c:	200049bc 	.word	0x200049bc
 8000aa0:	0800c4e0 	.word	0x0800c4e0
 8000aa4:	0800c4f0 	.word	0x0800c4f0
 8000aa8:	0800c500 	.word	0x0800c500
 8000aac:	0800c524 	.word	0x0800c524
 8000ab0:	0800c548 	.word	0x0800c548
 8000ab4:	2000453c 	.word	0x2000453c
 8000ab8:	20004784 	.word	0x20004784
 8000abc:	0800c54c 	.word	0x0800c54c
 8000ac0:	2000478c 	.word	0x2000478c
 8000ac4:	20004414 	.word	0x20004414
 8000ac8:	0800c558 	.word	0x0800c558
 8000acc:	200000fc 	.word	0x200000fc
 8000ad0:	200042e4 	.word	0x200042e4
 8000ad4:	200044dc 	.word	0x200044dc
 8000ad8:	20004788 	.word	0x20004788

08000adc <ResetHandlerTask>:
		}
 	}
   /* USER CODE END StartDefaultTask */
 }
void ResetHandlerTask(void *arg)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	BaseType_t err = pdFALSE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
	uint32_t handle;
	while (1)
	{
		err = xQueueReceive(xQueueResetHandle, &handle, portMAX_DELAY);
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <ResetHandlerTask+0x44>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f107 0108 	add.w	r1, r7, #8
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 fc87 	bl	8009408 <xQueueReceive>
 8000afa:	60f8      	str	r0, [r7, #12]
		if (err == pdTRUE) {
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d109      	bne.n	8000b16 <ResetHandlerTask+0x3a>
			if (handle == 1) {
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d106      	bne.n	8000b16 <ResetHandlerTask+0x3a>
				handle = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
				//osThreadDef(flashSave, FlashTask, osPriorityRealtime,0, 2 * 128);
				//flashTask = osThreadCreate(osThread(flashSave), NULL);
				//xFlashSave();
				//osDelay(10);
				printf("\r\n System reset \r\n");
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <ResetHandlerTask+0x48>)
 8000b0e:	f00a fd33 	bl	800b578 <puts>
				NVIC_SystemReset();
 8000b12:	f7ff fe5d 	bl	80007d0 <__NVIC_SystemReset>
			}
		}
		vTaskDelay(100);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f009 f9dc 	bl	8009ed4 <vTaskDelay>
		err = xQueueReceive(xQueueResetHandle, &handle, portMAX_DELAY);
 8000b1c:	e7e4      	b.n	8000ae8 <ResetHandlerTask+0xc>
 8000b1e:	bf00      	nop
 8000b20:	20004770 	.word	0x20004770
 8000b24:	0800c598 	.word	0x0800c598

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fc76 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f826 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f900 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b38:	f000 f8d6 	bl	8000ce8 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000b3c:	f000 f88a 	bl	8000c54 <MX_SDIO_SD_Init>
 // MX_FATFS_Init();
  MX_USART6_UART_Init();
 8000b40:	f000 f8a8 	bl	8000c94 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n ********* Access Controller Board **************** \r\n");
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <main+0x48>)
 8000b46:	f00a fd17 	bl	800b578 <puts>
	printf("\r\n TRAN NGOC TRAM \r\n");
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <main+0x4c>)
 8000b4c:	f00a fd14 	bl	800b578 <puts>
	printf("\r\n HEY CAVE, THIS IS ERROR \r\n");
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <main+0x50>)
 8000b52:	f00a fd11 	bl	800b578 <puts>
	 __HAL_UART_ENABLE_IT(&huart6,UART_IT_RXNE);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <main+0x54>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <main+0x54>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f042 0220 	orr.w	r2, r2, #32
 8000b64:	60da      	str	r2, [r3, #12]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
	MX_FREERTOS_Init();
 8000b66:	f7ff fe61 	bl	800082c <MX_FREERTOS_Init>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b6a:	f007 fe30 	bl	80087ce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x46>
 8000b70:	0800c5ac 	.word	0x0800c5ac
 8000b74:	0800c5e4 	.word	0x0800c5e4
 8000b78:	0800c5f8 	.word	0x0800c5f8
 8000b7c:	200044dc 	.word	0x200044dc

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	; 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00a fc75 	bl	800b47e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <SystemClock_Config+0xcc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2310      	movs	r3, #16
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bf4:	23a8      	movs	r3, #168	; 0xa8
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fa85 	bl	8002114 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c10:	f000 f8fa 	bl	8000e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2105      	movs	r1, #5
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fcde 	bl	80025f4 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c3e:	f000 f8e3 	bl	8000e08 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3750      	adds	r7, #80	; 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_SDIO_SD_Init+0x38>)
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <MX_SDIO_SD_Init+0x3c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_SDIO_SD_Init+0x38>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_SDIO_SD_Init+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_SDIO_SD_Init+0x38>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_SDIO_SD_Init+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <MX_SDIO_SD_Init+0x38>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <MX_SDIO_SD_Init+0x38>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20004a80 	.word	0x20004a80
 8000c90:	40012c00 	.word	0x40012c00

08000c94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_USART6_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000ca0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ca4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART6_UART_Init+0x4c>)
 8000ccc:	f003 fbf0 	bl	80044b0 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f000 f897 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200044dc 	.word	0x200044dc
 8000ce4:	40011400 	.word	0x40011400

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_DMA_Init+0x4c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <MX_DMA_Init+0x4c>)
 8000cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_DMA_Init+0x4c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2105      	movs	r1, #5
 8000d0e:	203b      	movs	r0, #59	; 0x3b
 8000d10:	f000 fca0 	bl	8001654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d14:	203b      	movs	r0, #59	; 0x3b
 8000d16:	f000 fcb9 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	2045      	movs	r0, #69	; 0x45
 8000d20:	f000 fc98 	bl	8001654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000d24:	2045      	movs	r0, #69	; 0x45
 8000d26:	f000 fcb1 	bl	800168c <HAL_NVIC_EnableIRQ>

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_GPIO_Init+0x84>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
//  USART_SendData(EVAL_COM1, (uint8_t) ch);
	HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <__io_putchar+0x20>)
 8000dd2:	f003 fbba 	bl	800454a <HAL_UART_Transmit>

  /* Loop until the end of transmission */
//  while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
//  {}

  return ch;
 8000dd6:	687b      	ldr	r3, [r7, #4]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200044dc 	.word	0x200044dc

08000de4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000df6:	f000 fb33 	bl	8001460 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40010000 	.word	0x40010000

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a68      	ldr	r2, [pc, #416]	; (8001028 <HAL_SD_MspInit+0x1c0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	f040 80c9 	bne.w	800101e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	4b66      	ldr	r3, [pc, #408]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	4a65      	ldr	r2, [pc, #404]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000e96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9c:	4b63      	ldr	r3, [pc, #396]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b5f      	ldr	r3, [pc, #380]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	4a5e      	ldr	r2, [pc, #376]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb8:	4b5c      	ldr	r3, [pc, #368]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	4b58      	ldr	r3, [pc, #352]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a57      	ldr	r2, [pc, #348]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b55      	ldr	r3, [pc, #340]	; (800102c <HAL_SD_MspInit+0x1c4>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ee0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ee4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	484c      	ldr	r0, [pc, #304]	; (8001030 <HAL_SD_MspInit+0x1c8>)
 8000efe:	f000 ff6f 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f02:	2304      	movs	r3, #4
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f12:	230c      	movs	r3, #12
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4845      	ldr	r0, [pc, #276]	; (8001034 <HAL_SD_MspInit+0x1cc>)
 8000f1e:	f000 ff5f 	bl	8001de0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000f22:	4b45      	ldr	r3, [pc, #276]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f24:	4a45      	ldr	r2, [pc, #276]	; (800103c <HAL_SD_MspInit+0x1d4>)
 8000f26:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000f28:	4b43      	ldr	r3, [pc, #268]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f30:	4b41      	ldr	r3, [pc, #260]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f32:	2240      	movs	r2, #64	; 0x40
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3c:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f44:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f52:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f56:	2220      	movs	r2, #32
 8000f58:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f68:	2203      	movs	r2, #3
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000f7c:	482e      	ldr	r0, [pc, #184]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f7e:	f000 fb93 	bl	80016a8 <HAL_DMA_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000f88:	f7ff ff3e 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f90:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f92:	4a29      	ldr	r2, [pc, #164]	; (8001038 <HAL_SD_MspInit+0x1d0>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000f9a:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <HAL_SD_MspInit+0x1dc>)
 8000f9c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fcc:	2220      	movs	r2, #32
 8000fce:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fde:	2203      	movs	r2, #3
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fe4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000fec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ff2:	4813      	ldr	r0, [pc, #76]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8000ff4:	f000 fb58 	bl	80016a8 <HAL_DMA_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000ffe:	f7ff ff03 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_SD_MspInit+0x1d8>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2031      	movs	r0, #49	; 0x31
 8001014:	f000 fb1e 	bl	8001654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001018:	2031      	movs	r0, #49	; 0x31
 800101a:	f000 fb37 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40012c00 	.word	0x40012c00
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800
 8001034:	40020c00 	.word	0x40020c00
 8001038:	20004a20 	.word	0x20004a20
 800103c:	40026458 	.word	0x40026458
 8001040:	200049c0 	.word	0x200049c0
 8001044:	400264a0 	.word	0x400264a0

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_UART_MspInit+0x94>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d133      	bne.n	80010d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_UART_MspInit+0x98>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <HAL_UART_MspInit+0x98>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0x98>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_MspInit+0x98>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x98>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_UART_MspInit+0x98>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a2:	23c0      	movs	r3, #192	; 0xc0
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010b2:	2308      	movs	r3, #8
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <HAL_UART_MspInit+0x9c>)
 80010be:	f000 fe8f 	bl	8001de0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2047      	movs	r0, #71	; 0x47
 80010c8:	f000 fac4 	bl	8001654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010cc:	2047      	movs	r0, #71	; 0x47
 80010ce:	f000 fadd 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40011400 	.word	0x40011400
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800

080010e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	2019      	movs	r0, #25
 80010fe:	f000 faa9 	bl	8001654 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001102:	2019      	movs	r0, #25
 8001104:	f000 fac2 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_InitTick+0xa4>)
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_InitTick+0xa4>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6453      	str	r3, [r2, #68]	; 0x44
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_InitTick+0xa4>)
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001124:	f107 0210 	add.w	r2, r7, #16
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fc50 	bl	80029d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001134:	f001 fc3a 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8001138:	4603      	mov	r3, r0
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_InitTick+0xa8>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	3b01      	subs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_InitTick+0xac>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_InitTick+0xb0>)
 8001150:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_InitTick+0xac>)
 8001154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001158:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_InitTick+0xac>)
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_InitTick+0xac>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_InitTick+0xac>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <HAL_InitTick+0xac>)
 800116e:	f002 ff61 	bl	8004034 <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d104      	bne.n	8001182 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <HAL_InitTick+0xac>)
 800117a:	f002 ff90 	bl	800409e <HAL_TIM_Base_Start_IT>
 800117e:	4603      	mov	r3, r0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	431bde83 	.word	0x431bde83
 8001194:	20004b04 	.word	0x20004b04
 8001198:	40010000 	.word	0x40010000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011d6:	f002 ff86 	bl	80040e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20004b04 	.word	0x20004b04

080011e4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <SDIO_IRQHandler+0x10>)
 80011ea:	f001 fe8f 	bl	8002f0c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20004a80 	.word	0x20004a80

080011f8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA2_Stream3_IRQHandler+0x10>)
 80011fe:	f000 fb7b 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20004a20 	.word	0x20004a20

0800120c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA2_Stream6_IRQHandler+0x10>)
 8001212:	f000 fb71 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200049c0 	.word	0x200049c0

08001220 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	UARTIntHandler();
 8001226:	f7ff fa15 	bl	8000654 <UARTIntHandler>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <USART6_IRQHandler+0x30>)
 800122c:	f003 fa26 	bl	800467c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	__HAL_UART_CLEAR_PEFLAG(&huart6);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <USART6_IRQHandler+0x30>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <USART6_IRQHandler+0x30>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END USART1_IRQn 1 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200044dc 	.word	0x200044dc

08001254 <_read>:
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e00a      	b.n	800127c <_read+0x28>
 8001266:	f3af 8000 	nop.w
 800126a:	4601      	mov	r1, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf0      	blt.n	8001266 <_read+0x12>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_write>:
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e009      	b.n	80012b4 <_write+0x26>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd89 	bl	8000dc0 <__io_putchar>
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf1      	blt.n	80012a0 <_write+0x12>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_fstat>:
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	2300      	movs	r3, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_isatty>:
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	2301      	movs	r3, #1
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_lseek>:
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	2300      	movs	r3, #0
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
 8001360:	f00a f858 	bl	800b414 <__errno>
 8001364:	4602      	mov	r2, r0
 8001366:	230c      	movs	r3, #12
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20020000 	.word	0x20020000
 8001390:	00000400 	.word	0x00000400
 8001394:	20000554 	.word	0x20000554
 8001398:	20004ff8 	.word	0x20004ff8

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <SystemInit+0x28>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <SystemInit+0x28>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SystemInit+0x28>)
 80013b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b6:	609a      	str	r2, [r3, #8]
#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013ce:	e003      	b.n	80013d8 <LoopCopyDataInit>

080013d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013d6:	3104      	adds	r1, #4

080013d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013e0:	d3f6      	bcc.n	80013d0 <CopyDataInit>
  ldr  r2, =_sbss
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013e4:	e002      	b.n	80013ec <LoopFillZerobss>

080013e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013e8:	f842 3b04 	str.w	r3, [r2], #4

080013ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013f0:	d3f9      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013f2:	f7ff ffd3 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f00a f813 	bl	800b420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff fb95 	bl	8000b28 <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001400:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001404:	0800c7d0 	.word	0x0800c7d0
  ldr  r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800140c:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8001410:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8001414:	20004ff8 	.word	0x20004ff8

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_Init+0x40>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_Init+0x40>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_Init+0x40>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f8fa 	bl	800163e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fe4c 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fce2 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000044 	.word	0x20000044
 8001484:	20004b44 	.word	0x20004b44

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20004b44 	.word	0x20004b44

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_Delay+0x40>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000044 	.word	0x20000044

080014e4 <__NVIC_SetPriorityGrouping>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff4c 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001666:	f7ff ff61 	bl	800152c <__NVIC_GetPriorityGrouping>
 800166a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	6978      	ldr	r0, [r7, #20]
 8001672:	f7ff ffb1 	bl	80015d8 <NVIC_EncodePriority>
 8001676:	4602      	mov	r2, r0
 8001678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff80 	bl	8001584 <__NVIC_SetPriority>
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff54 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff fee8 	bl	8001488 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e099      	b.n	80017f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e4:	e00f      	b.n	8001706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e6:	f7ff fecf 	bl	8001488 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d908      	bls.n	8001706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2220      	movs	r2, #32
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e078      	b.n	80017f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e8      	bne.n	80016e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_DMA_Init+0x158>)
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2b04      	cmp	r3, #4
 800175e:	d107      	bne.n	8001770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4313      	orrs	r3, r2
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b04      	cmp	r3, #4
 8001798:	d117      	bne.n	80017ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fa9d 	bl	8001cec <DMA_CheckFifoParam>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c6:	2301      	movs	r3, #1
 80017c8:	e016      	b.n	80017f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fa54 	bl	8001c80 <DMA_CalcBaseAndBitshift>
 80017d8:	4603      	mov	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	f010803f 	.word	0xf010803f

08001804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_DMA_Start_IT+0x26>
 8001826:	2302      	movs	r3, #2
 8001828:	e040      	b.n	80018ac <HAL_DMA_Start_IT+0xa8>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d12f      	bne.n	800189e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2202      	movs	r2, #2
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f9e6 	bl	8001c24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	223f      	movs	r2, #63	; 0x3f
 800185e:	409a      	lsls	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0216 	orr.w	r2, r2, #22
 8001872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0208 	orr.w	r2, r2, #8
 800188a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e005      	b.n	80018aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018a6:	2302      	movs	r3, #2
 80018a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00c      	b.n	80018ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2205      	movs	r2, #5
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001904:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_DMA_IRQHandler+0x258>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a92      	ldr	r2, [pc, #584]	; (8001b54 <HAL_DMA_IRQHandler+0x25c>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2208      	movs	r2, #8
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0204 	bic.w	r2, r2, #4
 800194a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2208      	movs	r2, #8
 8001952:	409a      	lsls	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2201      	movs	r2, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d012      	beq.n	800199a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2201      	movs	r2, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	f043 0202 	orr.w	r2, r3, #2
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2204      	movs	r2, #4
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2210      	movs	r2, #16
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d043      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d03c      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2210      	movs	r2, #16
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d018      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d024      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
 8001a26:	e01f      	b.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e016      	b.n	8001a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0208 	bic.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 808e 	beq.w	8001b96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8086 	beq.w	8001b96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2220      	movs	r2, #32
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d136      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0216 	bic.w	r2, r2, #22
 8001ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x1da>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0208 	bic.w	r2, r2, #8
 8001ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	223f      	movs	r2, #63	; 0x3f
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d07d      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
        }
        return;
 8001b0e:	e078      	b.n	8001c02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01c      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d108      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d030      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e02b      	b.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d027      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
 8001b4e:	e022      	b.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
 8001b50:	2000003c 	.word	0x2000003c
 8001b54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0210 	bic.w	r2, r2, #16
 8001b74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d032      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d022      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2205      	movs	r2, #5
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d307      	bcc.n	8001bde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f2      	bne.n	8001bc2 <HAL_DMA_IRQHandler+0x2ca>
 8001bdc:	e000      	b.n	8001be0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e000      	b.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c02:	bf00      	nop
    }
  }
}
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop

08001c0c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b40      	cmp	r3, #64	; 0x40
 8001c50:	d108      	bne.n	8001c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c62:	e007      	b.n	8001c74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	60da      	str	r2, [r3, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b10      	subs	r3, #16
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d909      	bls.n	8001cc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	1d1a      	adds	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8001cc0:	e007      	b.n	8001cd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	aaaaaaab 	.word	0xaaaaaaab
 8001ce8:	0800c68c 	.word	0x0800c68c

08001cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11f      	bne.n	8001d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d855      	bhi.n	8001db8 <DMA_CheckFifoParam+0xcc>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <DMA_CheckFifoParam+0x28>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d25 	.word	0x08001d25
 8001d18:	08001d37 	.word	0x08001d37
 8001d1c:	08001d25 	.word	0x08001d25
 8001d20:	08001db9 	.word	0x08001db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d045      	beq.n	8001dbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d34:	e042      	b.n	8001dbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d3e:	d13f      	bne.n	8001dc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d44:	e03c      	b.n	8001dc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4e:	d121      	bne.n	8001d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d836      	bhi.n	8001dc4 <DMA_CheckFifoParam+0xd8>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <DMA_CheckFifoParam+0x70>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d6d 	.word	0x08001d6d
 8001d68:	08001d85 	.word	0x08001d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d70:	e02f      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d024      	beq.n	8001dc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d82:	e021      	b.n	8001dc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d8c:	d11e      	bne.n	8001dcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d92:	e01b      	b.n	8001dcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d902      	bls.n	8001da0 <DMA_CheckFifoParam+0xb4>
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d003      	beq.n	8001da6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d9e:	e018      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
      break;
 8001da4:	e015      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00e      	beq.n	8001dd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
      break;
 8001db6:	e00b      	b.n	8001dd0 <DMA_CheckFifoParam+0xe4>
      break;
 8001db8:	bf00      	nop
 8001dba:	e00a      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dbc:	bf00      	nop
 8001dbe:	e008      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dc0:	bf00      	nop
 8001dc2:	e006      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dc4:	bf00      	nop
 8001dc6:	e004      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dc8:	bf00      	nop
 8001dca:	e002      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001dcc:	bf00      	nop
 8001dce:	e000      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dd0:	bf00      	nop
    }
  } 
  
  return status; 
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e16b      	b.n	80020d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 815a 	bne.w	80020ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d00b      	beq.n	8001e3a <HAL_GPIO_Init+0x5a>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e2e:	2b11      	cmp	r3, #17
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b12      	cmp	r3, #18
 8001e38:	d130      	bne.n	8001e9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0xfc>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80b4 	beq.w	80020ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <HAL_GPIO_Init+0x308>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a5e      	ldr	r2, [pc, #376]	; (80020e8 <HAL_GPIO_Init+0x308>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <HAL_GPIO_Init+0x308>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a5a      	ldr	r2, [pc, #360]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a51      	ldr	r2, [pc, #324]	; (80020f0 <HAL_GPIO_Init+0x310>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <HAL_GPIO_Init+0x226>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a50      	ldr	r2, [pc, #320]	; (80020f4 <HAL_GPIO_Init+0x314>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x222>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4f      	ldr	r2, [pc, #316]	; (80020f8 <HAL_GPIO_Init+0x318>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x21e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4e      	ldr	r2, [pc, #312]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4d      	ldr	r2, [pc, #308]	; (8002100 <HAL_GPIO_Init+0x320>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4c      	ldr	r2, [pc, #304]	; (8002104 <HAL_GPIO_Init+0x324>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	; (8002108 <HAL_GPIO_Init+0x328>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4a      	ldr	r2, [pc, #296]	; (800210c <HAL_GPIO_Init+0x32c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x20a>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fea:	2308      	movs	r3, #8
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4934      	ldr	r1, [pc, #208]	; (80020ec <HAL_GPIO_Init+0x30c>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002026:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_GPIO_Init+0x330>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204a:	4a31      	ldr	r2, [pc, #196]	; (8002110 <HAL_GPIO_Init+0x330>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_GPIO_Init+0x330>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002074:	4a26      	ldr	r2, [pc, #152]	; (8002110 <HAL_GPIO_Init+0x330>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_GPIO_Init+0x330>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_GPIO_Init+0x330>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_GPIO_Init+0x330>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <HAL_GPIO_Init+0x330>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae90 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3724      	adds	r7, #36	; 0x24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40013800 	.word	0x40013800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020400 	.word	0x40020400
 80020f8:	40020800 	.word	0x40020800
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40021000 	.word	0x40021000
 8002104:	40021400 	.word	0x40021400
 8002108:	40021800 	.word	0x40021800
 800210c:	40021c00 	.word	0x40021c00
 8002110:	40013c00 	.word	0x40013c00

08002114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e25b      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d075      	beq.n	800221e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002132:	4ba3      	ldr	r3, [pc, #652]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d00c      	beq.n	8002158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4ba0      	ldr	r3, [pc, #640]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002146:	2b08      	cmp	r3, #8
 8002148:	d112      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214a:	4b9d      	ldr	r3, [pc, #628]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002156:	d10b      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b99      	ldr	r3, [pc, #612]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d05b      	beq.n	800221c <HAL_RCC_OscConfig+0x108>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d157      	bne.n	800221c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e236      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x74>
 800217a:	4b91      	ldr	r3, [pc, #580]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a90      	ldr	r2, [pc, #576]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xb0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a8a      	ldr	r2, [pc, #552]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a87      	ldr	r2, [pc, #540]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xb0>
 80021ac:	4b84      	ldr	r3, [pc, #528]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a83      	ldr	r2, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a80      	ldr	r2, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff f95c 	bl	8001488 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff f958 	bl	8001488 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1fb      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xc0>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff f948 	bl	8001488 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff f944 	bl	8001488 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e1e7      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0xe8>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222a:	4b65      	ldr	r3, [pc, #404]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b62      	ldr	r3, [pc, #392]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800223e:	2b08      	cmp	r3, #8
 8002240:	d11c      	bne.n	800227c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002242:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x152>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e1bb      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b56      	ldr	r3, [pc, #344]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4952      	ldr	r1, [pc, #328]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e03a      	b.n	80022f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b4f      	ldr	r3, [pc, #316]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7ff f8fd 	bl	8001488 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002292:	f7ff f8f9 	bl	8001488 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e19c      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4940      	ldr	r1, [pc, #256]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b3f      	ldr	r3, [pc, #252]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff f8dc 	bl	8001488 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d4:	f7ff f8d8 	bl	8001488 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e17b      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d030      	beq.n	8002360 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d016      	beq.n	8002334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002306:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_RCC_OscConfig+0x2b4>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff f8bc 	bl	8001488 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002314:	f7ff f8b8 	bl	8001488 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e15b      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x200>
 8002332:	e015      	b.n	8002360 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_OscConfig+0x2b4>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff f8a5 	bl	8001488 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002342:	f7ff f8a1 	bl	8001488 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e144      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80a0 	beq.w	80024ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_OscConfig+0x2b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d121      	bne.n	80023ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCC_OscConfig+0x2b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_RCC_OscConfig+0x2b8>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff f867 	bl	8001488 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e011      	b.n	80023e2 <HAL_RCC_OscConfig+0x2ce>
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	42470000 	.word	0x42470000
 80023c8:	42470e80 	.word	0x42470e80
 80023cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7ff f85a 	bl	8001488 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0fd      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e2:	4b81      	ldr	r3, [pc, #516]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d106      	bne.n	8002404 <HAL_RCC_OscConfig+0x2f0>
 80023f6:	4b7d      	ldr	r3, [pc, #500]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	4a7c      	ldr	r2, [pc, #496]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6713      	str	r3, [r2, #112]	; 0x70
 8002402:	e01c      	b.n	800243e <HAL_RCC_OscConfig+0x32a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x312>
 800240c:	4b77      	ldr	r3, [pc, #476]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a76      	ldr	r2, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
 8002418:	4b74      	ldr	r3, [pc, #464]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4a73      	ldr	r2, [pc, #460]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6713      	str	r3, [r2, #112]	; 0x70
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x32a>
 8002426:	4b71      	ldr	r3, [pc, #452]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a70      	ldr	r2, [pc, #448]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	4b6e      	ldr	r3, [pc, #440]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a6d      	ldr	r2, [pc, #436]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7ff f81f 	bl	8001488 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff f81b 	bl	8001488 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0bc      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ee      	beq.n	800244e <HAL_RCC_OscConfig+0x33a>
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff f809 	bl	8001488 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff f805 	bl	8001488 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0a6      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	4b56      	ldr	r3, [pc, #344]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b52      	ldr	r3, [pc, #328]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a51      	ldr	r2, [pc, #324]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8092 	beq.w	80025dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b8:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d05c      	beq.n	800257e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d141      	bne.n	8002550 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b48      	ldr	r3, [pc, #288]	; (80025f0 <HAL_RCC_OscConfig+0x4dc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe ffd9 	bl	8001488 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe ffd5 	bl	8001488 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e078      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	019b      	lsls	r3, r3, #6
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	3b01      	subs	r3, #1
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	061b      	lsls	r3, r3, #24
 800251c:	4933      	ldr	r1, [pc, #204]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002522:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <HAL_RCC_OscConfig+0x4dc>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe ffae 	bl	8001488 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe ffaa 	bl	8001488 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e04d      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x41c>
 800254e:	e045      	b.n	80025dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_RCC_OscConfig+0x4dc>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe ff97 	bl	8001488 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe ff93 	bl	8001488 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e036      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x44a>
 800257c:	e02e      	b.n	80025dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e029      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_RCC_OscConfig+0x4d8>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	429a      	cmp	r2, r3
 800259c:	d11c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d115      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b2:	4013      	ands	r3, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d10d      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40007000 	.word	0x40007000
 80025ec:	40023800 	.word	0x40023800
 80025f0:	42470060 	.word	0x42470060

080025f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0cc      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d90c      	bls.n	8002630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	494d      	ldr	r1, [pc, #308]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d044      	beq.n	8002714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d119      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e067      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4934      	ldr	r1, [pc, #208]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e4:	f7fe fed0 	bl	8001488 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7fe fecc 	bl	8001488 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e04f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d20c      	bcs.n	800273c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e032      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4916      	ldr	r1, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800277a:	f000 f821 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800277e:	4601      	mov	r1, r0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	5cd3      	ldrb	r3, [r2, r3]
 800278e:	fa21 f303 	lsr.w	r3, r1, r3
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fca4 	bl	80010e8 <HAL_InitTick>

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00
 80027b0:	40023800 	.word	0x40023800
 80027b4:	0800c674 	.word	0x0800c674
 80027b8:	2000003c 	.word	0x2000003c
 80027bc:	20000040 	.word	0x20000040

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d007      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x32>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d008      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x38>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80b4 	bne.w	8002954 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027ee:	60bb      	str	r3, [r7, #8]
       break;
 80027f0:	e0b3      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f2:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027f4:	60bb      	str	r3, [r7, #8]
      break;
 80027f6:	e0b0      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f8:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002800:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002802:	4b58      	ldr	r3, [pc, #352]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d04a      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b55      	ldr	r3, [pc, #340]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	f04f 0400 	mov.w	r4, #0
 8002818:	f240 11ff 	movw	r1, #511	; 0x1ff
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	ea03 0501 	and.w	r5, r3, r1
 8002824:	ea04 0602 	and.w	r6, r4, r2
 8002828:	4629      	mov	r1, r5
 800282a:	4632      	mov	r2, r6
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	f04f 0400 	mov.w	r4, #0
 8002834:	0154      	lsls	r4, r2, #5
 8002836:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800283a:	014b      	lsls	r3, r1, #5
 800283c:	4619      	mov	r1, r3
 800283e:	4622      	mov	r2, r4
 8002840:	1b49      	subs	r1, r1, r5
 8002842:	eb62 0206 	sbc.w	r2, r2, r6
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	f04f 0400 	mov.w	r4, #0
 800284e:	0194      	lsls	r4, r2, #6
 8002850:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002854:	018b      	lsls	r3, r1, #6
 8002856:	1a5b      	subs	r3, r3, r1
 8002858:	eb64 0402 	sbc.w	r4, r4, r2
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	00e2      	lsls	r2, r4, #3
 8002866:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800286a:	00d9      	lsls	r1, r3, #3
 800286c:	460b      	mov	r3, r1
 800286e:	4614      	mov	r4, r2
 8002870:	195b      	adds	r3, r3, r5
 8002872:	eb44 0406 	adc.w	r4, r4, r6
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	02a2      	lsls	r2, r4, #10
 8002880:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002884:	0299      	lsls	r1, r3, #10
 8002886:	460b      	mov	r3, r1
 8002888:	4614      	mov	r4, r2
 800288a:	4618      	mov	r0, r3
 800288c:	4621      	mov	r1, r4
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f04f 0400 	mov.w	r4, #0
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	f7fd fd02 	bl	80002a0 <__aeabi_uldivmod>
 800289c:	4603      	mov	r3, r0
 800289e:	460c      	mov	r4, r1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e049      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	f04f 0400 	mov.w	r4, #0
 80028ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	ea03 0501 	and.w	r5, r3, r1
 80028ba:	ea04 0602 	and.w	r6, r4, r2
 80028be:	4629      	mov	r1, r5
 80028c0:	4632      	mov	r2, r6
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	f04f 0400 	mov.w	r4, #0
 80028ca:	0154      	lsls	r4, r2, #5
 80028cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028d0:	014b      	lsls	r3, r1, #5
 80028d2:	4619      	mov	r1, r3
 80028d4:	4622      	mov	r2, r4
 80028d6:	1b49      	subs	r1, r1, r5
 80028d8:	eb62 0206 	sbc.w	r2, r2, r6
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	f04f 0400 	mov.w	r4, #0
 80028e4:	0194      	lsls	r4, r2, #6
 80028e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028ea:	018b      	lsls	r3, r1, #6
 80028ec:	1a5b      	subs	r3, r3, r1
 80028ee:	eb64 0402 	sbc.w	r4, r4, r2
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	00e2      	lsls	r2, r4, #3
 80028fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002900:	00d9      	lsls	r1, r3, #3
 8002902:	460b      	mov	r3, r1
 8002904:	4614      	mov	r4, r2
 8002906:	195b      	adds	r3, r3, r5
 8002908:	eb44 0406 	adc.w	r4, r4, r6
 800290c:	f04f 0100 	mov.w	r1, #0
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	02a2      	lsls	r2, r4, #10
 8002916:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800291a:	0299      	lsls	r1, r3, #10
 800291c:	460b      	mov	r3, r1
 800291e:	4614      	mov	r4, r2
 8002920:	4618      	mov	r0, r3
 8002922:	4621      	mov	r1, r4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f04f 0400 	mov.w	r4, #0
 800292a:	461a      	mov	r2, r3
 800292c:	4623      	mov	r3, r4
 800292e:	f7fd fcb7 	bl	80002a0 <__aeabi_uldivmod>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	60bb      	str	r3, [r7, #8]
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002956:	60bb      	str	r3, [r7, #8]
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	68bb      	ldr	r3, [r7, #8]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	00f42400 	.word	0x00f42400

0800296c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_RCC_GetHCLKFreq+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	2000003c 	.word	0x2000003c

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002988:	f7ff fff0 	bl	800296c <HAL_RCC_GetHCLKFreq>
 800298c:	4601      	mov	r1, r0
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4a03      	ldr	r2, [pc, #12]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	0800c684 	.word	0x0800c684

080029ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029b0:	f7ff ffdc 	bl	800296c <HAL_RCC_GetHCLKFreq>
 80029b4:	4601      	mov	r1, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0b5b      	lsrs	r3, r3, #13
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	0800c684 	.word	0x0800c684

080029d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	220f      	movs	r2, #15
 80029e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <HAL_RCC_GetClockConfig+0x60>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40023c00 	.word	0x40023c00

08002a38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e022      	b.n	8002a90 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fe fa03 	bl	8000e68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f814 	bl	8002a98 <HAL_SD_InitCard>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00a      	b.n	8002a90 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a98:	b5b0      	push	{r4, r5, r7, lr}
 8002a9a:	b08e      	sub	sp, #56	; 0x38
 8002a9c:	af04      	add	r7, sp, #16
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002ab4:	2376      	movs	r3, #118	; 0x76
 8002ab6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681d      	ldr	r5, [r3, #0]
 8002abc:	466c      	mov	r4, sp
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002aca:	f107 0308 	add.w	r3, r7, #8
 8002ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f002 fbd9 	bl	8005288 <SDIO_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e031      	b.n	8002b4c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_SD_InitCard+0xbc>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 fc11 	bl	800531a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_SD_InitCard+0xbc>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 ffdc 	bl	8003abc <SD_PowerON>
 8002b04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e013      	b.n	8002b4c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fefb 	bl	8003920 <SD_InitCard>
 8002b2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bdb0      	pop	{r4, r5, r7, pc}
 8002b54:	422580a0 	.word	0x422580a0

08002b58 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0c9      	b.n	8002d14 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	f040 80c2 	bne.w	8002d12 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	441a      	add	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d907      	bls.n	8002bb2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0b0      	b.n	8002d14 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a50      	ldr	r2, [pc, #320]	; (8002d1c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8002bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a4f      	ldr	r2, [pc, #316]	; (8002d20 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8002be4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2200      	movs	r2, #0
 8002bec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3380      	adds	r3, #128	; 0x80
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	025b      	lsls	r3, r3, #9
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	f7fe fdff 	bl	8001804 <HAL_DMA_Start_IT>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002c1a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a40      	ldr	r2, [pc, #256]	; (8002d24 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e06b      	b.n	8002d14 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002c3c:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d002      	beq.n	8002c50 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	025b      	lsls	r3, r3, #9
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f002 fbf1 	bl	8005440 <SDMMC_CmdBlockLength>
 8002c5e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00f      	beq.n	8002c86 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e046      	b.n	8002d14 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	025b      	lsls	r3, r3, #9
 8002c90:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002c92:	2390      	movs	r3, #144	; 0x90
 8002c94:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002c96:	2302      	movs	r3, #2
 8002c98:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f107 0210 	add.w	r2, r7, #16
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 fb9b 	bl	80053e8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d90a      	bls.n	8002cce <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2282      	movs	r2, #130	; 0x82
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 fbff 	bl	80054c8 <SDMMC_CmdReadMultiBlock>
 8002cca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002ccc:	e009      	b.n	8002ce2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2281      	movs	r2, #129	; 0x81
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 fbd2 	bl	8005484 <SDMMC_CmdReadSingleBlock>
 8002ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e002      	b.n	8002d14 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3730      	adds	r7, #48	; 0x30
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	0800372f 	.word	0x0800372f
 8002d20:	080037a1 	.word	0x080037a1
 8002d24:	004005ff 	.word	0x004005ff
 8002d28:	4225858c 	.word	0x4225858c

08002d2c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08c      	sub	sp, #48	; 0x30
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0ce      	b.n	8002ef2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	f040 80c7 	bne.w	8002ef0 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	441a      	add	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d907      	bls.n	8002d86 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0b5      	b.n	8002ef2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	025b      	lsls	r3, r3, #9
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 fb31 	bl	8005440 <SDMMC_CmdBlockLength>
 8002dde:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00f      	beq.n	8002e06 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a46      	ldr	r2, [pc, #280]	; (8002f04 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e075      	b.n	8002ef2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d90a      	bls.n	8002e22 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	22a0      	movs	r2, #160	; 0xa0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fb99 	bl	8005550 <SDMMC_CmdWriteMultiBlock>
 8002e1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002e20:	e009      	b.n	8002e36 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2290      	movs	r2, #144	; 0x90
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 fb6c 	bl	800550c <SDMMC_CmdWriteSingleBlock>
 8002e34:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a30      	ldr	r2, [pc, #192]	; (8002f04 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e047      	b.n	8002ef2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3380      	adds	r3, #128	; 0x80
 8002e74:	461a      	mov	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	025b      	lsls	r3, r3, #9
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	f7fe fcc2 	bl	8001804 <HAL_DMA_Start_IT>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01c      	beq.n	8002ec0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002e94:	f023 0302 	bic.w	r3, r3, #2
 8002e98:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e018      	b.n	8002ef2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	025b      	lsls	r3, r3, #9
 8002eca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ecc:	2390      	movs	r3, #144	; 0x90
 8002ece:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f107 0210 	add.w	r2, r7, #16
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 fa7e 	bl	80053e8 <SDIO_ConfigData>

      return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3730      	adds	r7, #48	; 0x30
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	08003705 	.word	0x08003705
 8002f00:	080037a1 	.word	0x080037a1
 8002f04:	004005ff 	.word	0x004005ff
 8002f08:	4225858c 	.word	0x4225858c

08002f0c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_SD_IRQHandler+0x2e>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 ffd8 	bl	8003ee8 <SD_Read_IT>
 8002f38:	e165      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 808f 	beq.w	8003068 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002f62:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002f66:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d039      	beq.n	8002ff6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_SD_IRQHandler+0x8a>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d011      	beq.n	8002fba <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fafa 	bl	8005594 <SDMMC_CmdStopTransfer>
 8002fa0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f92f 	bl	8003218 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f240 523a 	movw	r2, #1338	; 0x53a
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <HAL_SD_IRQHandler+0xda>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f002 ff58 	bl	8005e9c <HAL_SD_RxCpltCallback>
 8002fec:	e10b      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f002 ff4a 	bl	8005e88 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ff4:	e107      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8102 	beq.w	8003206 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d011      	beq.n	8003030 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f002 fabf 	bl	8005594 <SDMMC_CmdStopTransfer>
 8003016:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8f4 	bl	8003218 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 80e5 	bne.w	8003206 <HAL_SD_IRQHandler+0x2fa>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f040 80df 	bne.w	8003206 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0208 	bic.w	r2, r2, #8
 8003056:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f002 ff11 	bl	8005e88 <HAL_SD_TxCpltCallback>
}
 8003066:	e0ce      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_SD_IRQHandler+0x17c>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 ff82 	bl	8003f8a <SD_Write_IT>
 8003086:	e0be      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800308e:	f240 233a 	movw	r3, #570	; 0x23a
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80b6 	beq.w	8003206 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	f043 0202 	orr.w	r2, r3, #2
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f043 0208 	orr.w	r2, r3, #8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	f043 0210 	orr.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	f043 0208 	orr.w	r2, r3, #8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f240 723a 	movw	r2, #1850	; 0x73a
 8003124:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003134:	f023 0302 	bic.w	r3, r3, #2
 8003138:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fa28 	bl	8005594 <SDMMC_CmdStopTransfer>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f855 	bl	8003218 <HAL_SD_ErrorCallback>
}
 800316e:	e04a      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b00      	cmp	r3, #0
 8003178:	d045      	beq.n	8003206 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <HAL_SD_IRQHandler+0x282>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d011      	beq.n	80031b2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <HAL_SD_IRQHandler+0x304>)
 8003194:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fb8a 	bl	80018b4 <HAL_DMA_Abort_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d02f      	beq.n	8003206 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fb4a 	bl	8003844 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80031b0:	e029      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_SD_IRQHandler+0x2ba>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d011      	beq.n	80031ea <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <HAL_SD_IRQHandler+0x308>)
 80031cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fb6e 	bl	80018b4 <HAL_DMA_Abort_IT>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d013      	beq.n	8003206 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fb65 	bl	80038b2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80031e8:	e00d      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f002 fe38 	bl	8005e74 <HAL_SD_AbortCallback>
}
 8003204:	e7ff      	b.n	8003206 <HAL_SD_IRQHandler+0x2fa>
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	08003845 	.word	0x08003845
 8003214:	080038b3 	.word	0x080038b3

08003218 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800323a:	0f9b      	lsrs	r3, r3, #30
 800323c:	b2da      	uxtb	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003246:	0e9b      	lsrs	r3, r3, #26
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	b2da      	uxtb	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	b2da      	uxtb	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	b2da      	uxtb	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	b2da      	uxtb	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003282:	b2da      	uxtb	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328c:	0d1b      	lsrs	r3, r3, #20
 800328e:	b29a      	uxth	r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032aa:	0bdb      	lsrs	r3, r3, #15
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032bc:	0b9b      	lsrs	r3, r3, #14
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ce:	0b5b      	lsrs	r3, r3, #13
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e0:	0b1b      	lsrs	r3, r3, #12
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2200      	movs	r2, #0
 80032f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d163      	bne.n	80033c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003300:	009a      	lsls	r2, r3, #2
 8003302:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800330c:	0f92      	lsrs	r2, r2, #30
 800330e:	431a      	orrs	r2, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003318:	0edb      	lsrs	r3, r3, #27
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	b2da      	uxtb	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332a:	0e1b      	lsrs	r3, r3, #24
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	b2da      	uxtb	r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333c:	0d5b      	lsrs	r3, r3, #21
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	b2da      	uxtb	r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334e:	0c9b      	lsrs	r3, r3, #18
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	b2da      	uxtb	r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003360:	0bdb      	lsrs	r3, r3, #15
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	b2da      	uxtb	r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	7e1b      	ldrb	r3, [r3, #24]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	3302      	adds	r3, #2
 8003384:	2201      	movs	r2, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800338e:	fb02 f203 	mul.w	r2, r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	7a1b      	ldrb	r3, [r3, #8]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	2201      	movs	r2, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033b0:	0a52      	lsrs	r2, r2, #9
 80033b2:	fb02 f203 	mul.w	r2, r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c0:	661a      	str	r2, [r3, #96]	; 0x60
 80033c2:	e031      	b.n	8003428 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d11d      	bne.n	8003408 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d0:	041b      	lsls	r3, r3, #16
 80033d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	431a      	orrs	r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	3301      	adds	r3, #1
 80033e8:	029a      	lsls	r2, r3, #10
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	661a      	str	r2, [r3, #96]	; 0x60
 8003406:	e00f      	b.n	8003428 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a58      	ldr	r2, [pc, #352]	; (8003570 <HAL_SD_GetCardCSD+0x344>)
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e09d      	b.n	8003564 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342c:	0b9b      	lsrs	r3, r3, #14
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343e:	09db      	lsrs	r3, r3, #7
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003446:	b2da      	uxtb	r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003456:	b2da      	uxtb	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	0fdb      	lsrs	r3, r3, #31
 8003462:	b2da      	uxtb	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	0f5b      	lsrs	r3, r3, #29
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	b2da      	uxtb	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	0e9b      	lsrs	r3, r3, #26
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	b2da      	uxtb	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	0d9b      	lsrs	r3, r3, #22
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	b2da      	uxtb	r2, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	0d5b      	lsrs	r3, r3, #21
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	0bdb      	lsrs	r3, r3, #15
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	0b9b      	lsrs	r3, r3, #14
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	0b5b      	lsrs	r3, r3, #13
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	0b1b      	lsrs	r3, r3, #12
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	0a9b      	lsrs	r3, r3, #10
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	b2da      	uxtb	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	b2da      	uxtb	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003552:	b2da      	uxtb	r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	004005ff 	.word	0x004005ff

08003574 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80035cc:	b5b0      	push	{r4, r5, r7, lr}
 80035ce:	b08e      	sub	sp, #56	; 0x38
 80035d0:	af04      	add	r7, sp, #16
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d02e      	beq.n	8003644 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ec:	d106      	bne.n	80035fc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
 80035fa:	e029      	b.n	8003650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003602:	d10a      	bne.n	800361a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fb0f 	bl	8003c28 <SD_WideBus_Enable>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
 8003618:	e01a      	b.n	8003650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fb4c 	bl	8003cbe <SD_WideBus_Disable>
 8003626:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
 8003634:	e00c      	b.n	8003650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	639a      	str	r2, [r3, #56]	; 0x38
 8003642:	e005      	b.n	8003650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e024      	b.n	80036b6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681d      	ldr	r5, [r3, #0]
 8003692:	466c      	mov	r4, sp
 8003694:	f107 0318 	add.w	r3, r7, #24
 8003698:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800369c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036a6:	4628      	mov	r0, r5
 80036a8:	f001 fdee 	bl	8005288 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3728      	adds	r7, #40	; 0x28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bdb0      	pop	{r4, r5, r7, pc}
 80036be:	bf00      	nop
 80036c0:	004005ff 	.word	0x004005ff

080036c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa7e 	bl	8003bd8 <SD_SendStatus>
 80036dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0a5b      	lsrs	r3, r3, #9
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80036fa:	693b      	ldr	r3, [r7, #16]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b82      	cmp	r3, #130	; 0x82
 8003742:	d111      	bne.n	8003768 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f001 ff23 	bl	8005594 <SDMMC_CmdStopTransfer>
 800374e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fd58 	bl	8003218 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0208 	bic.w	r2, r2, #8
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003780:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f002 fb83 	bl	8005e9c <HAL_SD_RxCpltCallback>
#endif
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe fa2c 	bl	8001c0c <HAL_DMA_GetError>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d03e      	beq.n	8003838 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d002      	beq.n	80037d6 <SD_DMAError+0x36>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d12d      	bne.n	8003832 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <SD_DMAError+0xa0>)
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff62 	bl	80036c4 <HAL_SD_GetCardState>
 8003800:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b06      	cmp	r3, #6
 8003806:	d002      	beq.n	800380e <SD_DMAError+0x6e>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10a      	bne.n	8003824 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f001 febe 	bl	8005594 <SDMMC_CmdStopTransfer>
 8003818:	4602      	mov	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	431a      	orrs	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff fcf0 	bl	8003218 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	004005ff 	.word	0x004005ff

08003844 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f240 523a 	movw	r2, #1338	; 0x53a
 800385a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff ff31 	bl	80036c4 <HAL_SD_GetCardState>
 8003862:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b06      	cmp	r3, #6
 8003876:	d002      	beq.n	800387e <SD_DMATxAbort+0x3a>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d10a      	bne.n	8003894 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f001 fe86 	bl	8005594 <SDMMC_CmdStopTransfer>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	431a      	orrs	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f002 fae9 	bl	8005e74 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80038a2:	e002      	b.n	80038aa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff fcb7 	bl	8003218 <HAL_SD_ErrorCallback>
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff fefa 	bl	80036c4 <HAL_SD_GetCardState>
 80038d0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d002      	beq.n	80038ec <SD_DMARxAbort+0x3a>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d10a      	bne.n	8003902 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 fe4f 	bl	8005594 <SDMMC_CmdStopTransfer>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f002 fab2 	bl	8005e74 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003910:	e002      	b.n	8003918 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff fc80 	bl	8003218 <HAL_SD_ErrorCallback>
}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003920:	b5b0      	push	{r4, r5, r7, lr}
 8003922:	b094      	sub	sp, #80	; 0x50
 8003924:	af04      	add	r7, sp, #16
 8003926:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003928:	2301      	movs	r3, #1
 800392a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fd01 	bl	8005338 <SDIO_GetPowerState>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800393c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003940:	e0b7      	b.n	8003ab2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	2b03      	cmp	r3, #3
 8003948:	d02f      	beq.n	80039aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f001 ff2a 	bl	80057a8 <SDMMC_CmdSendCID>
 8003954:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <SD_InitCard+0x40>
    {
      return errorstate;
 800395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395e:	e0a8      	b.n	8003ab2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fd2b 	bl	80053c2 <SDIO_GetResponse>
 800396c:	4602      	mov	r2, r0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2104      	movs	r1, #4
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fd22 	bl	80053c2 <SDIO_GetResponse>
 800397e:	4602      	mov	r2, r0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2108      	movs	r1, #8
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fd19 	bl	80053c2 <SDIO_GetResponse>
 8003990:	4602      	mov	r2, r0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	210c      	movs	r1, #12
 800399c:	4618      	mov	r0, r3
 800399e:	f001 fd10 	bl	80053c2 <SDIO_GetResponse>
 80039a2:	4602      	mov	r2, r0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d00d      	beq.n	80039ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f107 020e 	add.w	r2, r7, #14
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 ff30 	bl	8005822 <SDMMC_CmdSetRelAdd>
 80039c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <SD_InitCard+0xae>
    {
      return errorstate;
 80039ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039cc:	e071      	b.n	8003ab2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d036      	beq.n	8003a44 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f001 fefa 	bl	80057e4 <SDMMC_CmdSendCSD>
 80039f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	e05a      	b.n	8003ab2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fcdd 	bl	80053c2 <SDIO_GetResponse>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2104      	movs	r1, #4
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fcd4 	bl	80053c2 <SDIO_GetResponse>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2108      	movs	r1, #8
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 fccb 	bl	80053c2 <SDIO_GetResponse>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	210c      	movs	r1, #12
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fcc2 	bl	80053c2 <SDIO_GetResponse>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2104      	movs	r1, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 fcb9 	bl	80053c2 <SDIO_GetResponse>
 8003a50:	4603      	mov	r3, r0
 8003a52:	0d1a      	lsrs	r2, r3, #20
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a58:	f107 0310 	add.w	r3, r7, #16
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fbe4 	bl	800322c <HAL_SD_GetCardCSD>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a6e:	e020      	b.n	8003ab2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	f04f 0400 	mov.w	r4, #0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4623      	mov	r3, r4
 8003a82:	4608      	mov	r0, r1
 8003a84:	f001 fda8 	bl	80055d8 <SDMMC_CmdSelDesel>
 8003a88:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <SD_InitCard+0x174>
  {
    return errorstate;
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	e00e      	b.n	8003ab2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681d      	ldr	r5, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	466c      	mov	r4, sp
 8003a9c:	f103 0210 	add.w	r2, r3, #16
 8003aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f001 fbec 	bl	8005288 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3740      	adds	r7, #64	; 0x40
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003abc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 fda2 	bl	800561e <SDMMC_CmdGoIdleState>
 8003ada:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	e072      	b.n	8003bcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fdb5 	bl	800565a <SDMMC_CmdOperCond>
 8003af0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fd8b 	bl	800561e <SDMMC_CmdGoIdleState>
 8003b08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	e05b      	b.n	8003bcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d137      	bne.n	8003b92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fdb5 	bl	8005698 <SDMMC_CmdAppCommand>
 8003b2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02d      	beq.n	8003b92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b3a:	e047      	b.n	8003bcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 fda8 	bl	8005698 <SDMMC_CmdAppCommand>
 8003b48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	e03b      	b.n	8003bcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	491e      	ldr	r1, [pc, #120]	; (8003bd4 <SD_PowerON+0x118>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 fdbe 	bl	80056dc <SDMMC_CmdAppOperCommand>
 8003b60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b6c:	e02e      	b.n	8003bcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 fc24 	bl	80053c2 <SDIO_GetResponse>
 8003b7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	0fdb      	lsrs	r3, r3, #31
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <SD_PowerON+0xcc>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <SD_PowerON+0xce>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]

    count++;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d802      	bhi.n	8003ba2 <SD_PowerON+0xe6>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0cc      	beq.n	8003b3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d902      	bls.n	8003bb2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bb0:	e00c      	b.n	8003bcc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8003bc2:	e002      	b.n	8003bca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	c1100000 	.word	0xc1100000

08003bd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bec:	e018      	b.n	8003c20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f001 fe32 	bl	8005864 <SDMMC_CmdSendStatus>
 8003c00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	e009      	b.n	8003c20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 fbd5 	bl	80053c2 <SDIO_GetResponse>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 fbbf 	bl	80053c2 <SDIO_GetResponse>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4e:	d102      	bne.n	8003c56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c54:	e02f      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f879 	bl	8003d54 <SD_FindSCR>
 8003c62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	e023      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01c      	beq.n	8003cb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f001 fd07 	bl	8005698 <SDMMC_CmdAppCommand>
 8003c8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	e00f      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fd40 	bl	8005722 <SDMMC_CmdBusWidth>
 8003ca2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	e003      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e001      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 fb74 	bl	80053c2 <SDIO_GetResponse>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce4:	d102      	bne.n	8003cec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cea:	e02f      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f82e 	bl	8003d54 <SD_FindSCR>
 8003cf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	e023      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01c      	beq.n	8003d48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f001 fcbc 	bl	8005698 <SDMMC_CmdAppCommand>
 8003d20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	e00f      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fcf5 	bl	8005722 <SDMMC_CmdBusWidth>
 8003d38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	e003      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e001      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b08f      	sub	sp, #60	; 0x3c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d5e:	f7fd fb93 	bl	8001488 <HAL_GetTick>
 8003d62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2108      	movs	r1, #8
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 fb60 	bl	8005440 <SDMMC_CmdBlockLength>
 8003d80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	e0a9      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f001 fc7d 	bl	8005698 <SDMMC_CmdAppCommand>
 8003d9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <SD_FindSCR+0x56>
  {
    return errorstate;
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	e09a      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003db0:	2308      	movs	r3, #8
 8003db2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003db4:	2330      	movs	r3, #48	; 0x30
 8003db6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003db8:	2302      	movs	r3, #2
 8003dba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f107 0210 	add.w	r2, r7, #16
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 fb0a 	bl	80053e8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 fcc4 	bl	8005766 <SDMMC_CmdSendSCR>
 8003dde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d022      	beq.n	8003e2c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	e07a      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6819      	ldr	r1, [r3, #0]
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	f107 0208 	add.w	r2, r7, #8
 8003e04:	18d4      	adds	r4, r2, r3
 8003e06:	4608      	mov	r0, r1
 8003e08:	f001 fa69 	bl	80052de <SDIO_ReadFIFO>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	6023      	str	r3, [r4, #0]
      index++;
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	3301      	adds	r3, #1
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e16:	f7fd fb37 	bl	8001488 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d102      	bne.n	8003e2c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003e26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e2a:	e059      	b.n	8003ee0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	f240 432a 	movw	r3, #1066	; 0x42a
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0d6      	beq.n	8003dea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2208      	movs	r2, #8
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003e52:	2308      	movs	r3, #8
 8003e54:	e044      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e037      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2220      	movs	r2, #32
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003e86:	2320      	movs	r3, #32
 8003e88:	e02a      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	061a      	lsls	r2, r3, #24
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ea0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003eaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	0e1b      	lsrs	r3, r3, #24
 8003eb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	601a      	str	r2, [r3, #0]
    scr++;
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	3304      	adds	r3, #4
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	061a      	lsls	r2, r3, #24
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ec8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ed2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	0e1b      	lsrs	r3, r3, #24
 8003ed8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	373c      	adds	r7, #60	; 0x3c
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd90      	pop	{r4, r7, pc}

08003ee8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d03f      	beq.n	8003f82 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e033      	b.n	8003f70 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 f9e6 	bl	80052de <SDIO_ReadFIFO>
 8003f12:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	0e1b      	lsrs	r3, r3, #24
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b07      	cmp	r3, #7
 8003f74:	d9c8      	bls.n	8003f08 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003f82:	bf00      	nop
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d043      	beq.n	800402c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e037      	b.n	800401a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	021a      	lsls	r2, r3, #8
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	041a      	lsls	r2, r3, #16
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	061a      	lsls	r2, r3, #24
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	3b01      	subs	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f107 0208 	add.w	r2, r7, #8
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f001 f972 	bl	80052f8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3301      	adds	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b07      	cmp	r3, #7
 800401e:	d9c4      	bls.n	8003faa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e01d      	b.n	8004082 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f815 	bl	800408a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f000 f968 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d007      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d122      	bne.n	8004142 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d11b      	bne.n	8004142 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0202 	mvn.w	r2, #2
 8004112:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8ee 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 800412e:	e005      	b.n	800413c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8e0 	bl	80042f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8f1 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d122      	bne.n	8004196 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d11b      	bne.n	8004196 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0204 	mvn.w	r2, #4
 8004166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8c4 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 8004182:	e005      	b.n	8004190 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f8b6 	bl	80042f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8c7 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d122      	bne.n	80041ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d11b      	bne.n	80041ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f06f 0208 	mvn.w	r2, #8
 80041ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2204      	movs	r2, #4
 80041c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f89a 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 80041d6:	e005      	b.n	80041e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f88c 	bl	80042f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f89d 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d122      	bne.n	800423e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d11b      	bne.n	800423e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f06f 0210 	mvn.w	r2, #16
 800420e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2208      	movs	r2, #8
 8004214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f870 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 800422a:	e005      	b.n	8004238 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f862 	bl	80042f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f873 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10e      	bne.n	800426a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d107      	bne.n	800426a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0201 	mvn.w	r2, #1
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fc fdbd 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b80      	cmp	r3, #128	; 0x80
 8004276:	d10e      	bne.n	8004296 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d107      	bne.n	8004296 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800428e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f903 	bl	800449c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d10e      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d107      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f838 	bl	8004332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d10e      	bne.n	80042ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0220 	mvn.w	r2, #32
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8cd 	bl	8004488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a40      	ldr	r2, [pc, #256]	; (800445c <TIM_Base_SetConfig+0x114>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d00f      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a3d      	ldr	r2, [pc, #244]	; (8004460 <TIM_Base_SetConfig+0x118>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a3c      	ldr	r2, [pc, #240]	; (8004464 <TIM_Base_SetConfig+0x11c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3b      	ldr	r2, [pc, #236]	; (8004468 <TIM_Base_SetConfig+0x120>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a3a      	ldr	r2, [pc, #232]	; (800446c <TIM_Base_SetConfig+0x124>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2f      	ldr	r2, [pc, #188]	; (800445c <TIM_Base_SetConfig+0x114>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d02b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d027      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2c      	ldr	r2, [pc, #176]	; (8004460 <TIM_Base_SetConfig+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d023      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2b      	ldr	r2, [pc, #172]	; (8004464 <TIM_Base_SetConfig+0x11c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01f      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2a      	ldr	r2, [pc, #168]	; (8004468 <TIM_Base_SetConfig+0x120>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a29      	ldr	r2, [pc, #164]	; (800446c <TIM_Base_SetConfig+0x124>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d017      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a28      	ldr	r2, [pc, #160]	; (8004470 <TIM_Base_SetConfig+0x128>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a27      	ldr	r2, [pc, #156]	; (8004474 <TIM_Base_SetConfig+0x12c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00f      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a26      	ldr	r2, [pc, #152]	; (8004478 <TIM_Base_SetConfig+0x130>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a25      	ldr	r2, [pc, #148]	; (800447c <TIM_Base_SetConfig+0x134>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <TIM_Base_SetConfig+0x138>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a23      	ldr	r2, [pc, #140]	; (8004484 <TIM_Base_SetConfig+0x13c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d108      	bne.n	800440c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <TIM_Base_SetConfig+0x114>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d003      	beq.n	8004440 <TIM_Base_SetConfig+0xf8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a0c      	ldr	r2, [pc, #48]	; (800446c <TIM_Base_SetConfig+0x124>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d103      	bne.n	8004448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	615a      	str	r2, [r3, #20]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40010400 	.word	0x40010400
 8004470:	40014000 	.word	0x40014000
 8004474:	40014400 	.word	0x40014400
 8004478:	40014800 	.word	0x40014800
 800447c:	40001800 	.word	0x40001800
 8004480:	40001c00 	.word	0x40001c00
 8004484:	40002000 	.word	0x40002000

08004488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e03f      	b.n	8004542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fdb6 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb4b 	bl	8004b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b088      	sub	sp, #32
 800454e:	af02      	add	r7, sp, #8
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	f040 8083 	bne.w	8004672 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_UART_Transmit+0x2e>
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e07b      	b.n	8004674 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_UART_Transmit+0x40>
 8004586:	2302      	movs	r3, #2
 8004588:	e074      	b.n	8004674 <HAL_UART_Transmit+0x12a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2221      	movs	r2, #33	; 0x21
 800459c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80045a0:	f7fc ff72 	bl	8001488 <HAL_GetTick>
 80045a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80045ba:	e042      	b.n	8004642 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d122      	bne.n	800461a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2200      	movs	r2, #0
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f96a 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e042      	b.n	8004674 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004600:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3302      	adds	r3, #2
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	e017      	b.n	8004642 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	3301      	adds	r3, #1
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	e013      	b.n	8004642 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	2180      	movs	r1, #128	; 0x80
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f947 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e01f      	b.n	8004674 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	60ba      	str	r2, [r7, #8]
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1b7      	bne.n	80045bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2200      	movs	r2, #0
 8004654:	2140      	movs	r1, #64	; 0x40
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f92e 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e006      	b.n	8004674 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_UART_IRQHandler+0x52>
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9e0 	bl	8004a8c <UART_Receive_IT>
      return;
 80046cc:	e0d1      	b.n	8004872 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80b0 	beq.w	8004836 <HAL_UART_IRQHandler+0x1ba>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_UART_IRQHandler+0x70>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80a5 	beq.w	8004836 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_UART_IRQHandler+0x90>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	f043 0201 	orr.w	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_UART_IRQHandler+0xb0>
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_UART_IRQHandler+0xd0>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	f043 0204 	orr.w	r2, r3, #4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00f      	beq.n	8004776 <HAL_UART_IRQHandler+0xfa>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_UART_IRQHandler+0xee>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	f043 0208 	orr.w	r2, r3, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d078      	beq.n	8004870 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_UART_IRQHandler+0x11c>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f97a 	bl	8004a8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	bf0c      	ite	eq
 80047a6:	2301      	moveq	r3, #1
 80047a8:	2300      	movne	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <HAL_UART_IRQHandler+0x144>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d031      	beq.n	8004824 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8c3 	bl	800494c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d123      	bne.n	800481c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	4a21      	ldr	r2, [pc, #132]	; (8004878 <HAL_UART_IRQHandler+0x1fc>)
 80047f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fd f85b 	bl	80018b4 <HAL_DMA_Abort_IT>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d016      	beq.n	8004832 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800480e:	4610      	mov	r0, r2
 8004810:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004812:	e00e      	b.n	8004832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f845 	bl	80048a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481a:	e00a      	b.n	8004832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f841 	bl	80048a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004822:	e006      	b.n	8004832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f83d 	bl	80048a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004830:	e01e      	b.n	8004870 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004832:	bf00      	nop
    return;
 8004834:	e01c      	b.n	8004870 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_UART_IRQHandler+0x1d6>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f8b0 	bl	80049b0 <UART_Transmit_IT>
    return;
 8004850:	e00f      	b.n	8004872 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_UART_IRQHandler+0x1f6>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f8f8 	bl	8004a5c <UART_EndTransmit_IT>
    return;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004870:	bf00      	nop
  }
}
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	08004989 	.word	0x08004989

0800487c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c8:	e02c      	b.n	8004924 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d028      	beq.n	8004924 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048d8:	f7fc fdd6 	bl	8001488 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d21d      	bcs.n	8004924 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e00f      	b.n	8004944 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	429a      	cmp	r2, r3
 8004940:	d0c3      	beq.n	80048ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004962:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff ff7e 	bl	80048a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b21      	cmp	r3, #33	; 0x21
 80049c2:	d144      	bne.n	8004a4e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	d11a      	bne.n	8004a04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d105      	bne.n	80049f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	621a      	str	r2, [r3, #32]
 80049f6:	e00e      	b.n	8004a16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	621a      	str	r2, [r3, #32]
 8004a02:	e008      	b.n	8004a16 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	1c59      	adds	r1, r3, #1
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6211      	str	r1, [r2, #32]
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4619      	mov	r1, r3
 8004a24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff fefd 	bl	800487c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b22      	cmp	r3, #34	; 0x22
 8004a9e:	d171      	bne.n	8004b84 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d123      	bne.n	8004af2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10e      	bne.n	8004ad6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	1c9a      	adds	r2, r3, #2
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad4:	e029      	b.n	8004b2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
 8004af0:	e01b      	b.n	8004b2a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6858      	ldr	r0, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	1c59      	adds	r1, r3, #1
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6291      	str	r1, [r2, #40]	; 0x28
 8004b0a:	b2c2      	uxtb	r2, r0
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e00c      	b.n	8004b2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	1c58      	adds	r0, r3, #1
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	6288      	str	r0, [r1, #40]	; 0x28
 8004b22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4619      	mov	r1, r3
 8004b38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d120      	bne.n	8004b80 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0220 	bic.w	r2, r2, #32
 8004b4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fe8a 	bl	8004890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e002      	b.n	8004b86 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004bd2:	f023 030c 	bic.w	r3, r3, #12
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfe:	f040 818b 	bne.w	8004f18 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4ac1      	ldr	r2, [pc, #772]	; (8004f0c <UART_SetConfig+0x37c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d005      	beq.n	8004c18 <UART_SetConfig+0x88>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4abf      	ldr	r2, [pc, #764]	; (8004f10 <UART_SetConfig+0x380>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f040 80bd 	bne.w	8004d92 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7fd fec8 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8004c1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	461d      	mov	r5, r3
 8004c22:	f04f 0600 	mov.w	r6, #0
 8004c26:	46a8      	mov	r8, r5
 8004c28:	46b1      	mov	r9, r6
 8004c2a:	eb18 0308 	adds.w	r3, r8, r8
 8004c2e:	eb49 0409 	adc.w	r4, r9, r9
 8004c32:	4698      	mov	r8, r3
 8004c34:	46a1      	mov	r9, r4
 8004c36:	eb18 0805 	adds.w	r8, r8, r5
 8004c3a:	eb49 0906 	adc.w	r9, r9, r6
 8004c3e:	f04f 0100 	mov.w	r1, #0
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c52:	4688      	mov	r8, r1
 8004c54:	4691      	mov	r9, r2
 8004c56:	eb18 0005 	adds.w	r0, r8, r5
 8004c5a:	eb49 0106 	adc.w	r1, r9, r6
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	461d      	mov	r5, r3
 8004c64:	f04f 0600 	mov.w	r6, #0
 8004c68:	196b      	adds	r3, r5, r5
 8004c6a:	eb46 0406 	adc.w	r4, r6, r6
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4623      	mov	r3, r4
 8004c72:	f7fb fb15 	bl	80002a0 <__aeabi_uldivmod>
 8004c76:	4603      	mov	r3, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4ba5      	ldr	r3, [pc, #660]	; (8004f14 <UART_SetConfig+0x384>)
 8004c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	f04f 0600 	mov.w	r6, #0
 8004c90:	46a9      	mov	r9, r5
 8004c92:	46b2      	mov	sl, r6
 8004c94:	eb19 0309 	adds.w	r3, r9, r9
 8004c98:	eb4a 040a 	adc.w	r4, sl, sl
 8004c9c:	4699      	mov	r9, r3
 8004c9e:	46a2      	mov	sl, r4
 8004ca0:	eb19 0905 	adds.w	r9, r9, r5
 8004ca4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cbc:	4689      	mov	r9, r1
 8004cbe:	4692      	mov	sl, r2
 8004cc0:	eb19 0005 	adds.w	r0, r9, r5
 8004cc4:	eb4a 0106 	adc.w	r1, sl, r6
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	461d      	mov	r5, r3
 8004cce:	f04f 0600 	mov.w	r6, #0
 8004cd2:	196b      	adds	r3, r5, r5
 8004cd4:	eb46 0406 	adc.w	r4, r6, r6
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4623      	mov	r3, r4
 8004cdc:	f7fb fae0 	bl	80002a0 <__aeabi_uldivmod>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b8b      	ldr	r3, [pc, #556]	; (8004f14 <UART_SetConfig+0x384>)
 8004ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	2164      	movs	r1, #100	; 0x64
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	3332      	adds	r3, #50	; 0x32
 8004cfa:	4a86      	ldr	r2, [pc, #536]	; (8004f14 <UART_SetConfig+0x384>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d08:	4498      	add	r8, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	f04f 0600 	mov.w	r6, #0
 8004d12:	46a9      	mov	r9, r5
 8004d14:	46b2      	mov	sl, r6
 8004d16:	eb19 0309 	adds.w	r3, r9, r9
 8004d1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d1e:	4699      	mov	r9, r3
 8004d20:	46a2      	mov	sl, r4
 8004d22:	eb19 0905 	adds.w	r9, r9, r5
 8004d26:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d2a:	f04f 0100 	mov.w	r1, #0
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d3e:	4689      	mov	r9, r1
 8004d40:	4692      	mov	sl, r2
 8004d42:	eb19 0005 	adds.w	r0, r9, r5
 8004d46:	eb4a 0106 	adc.w	r1, sl, r6
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	461d      	mov	r5, r3
 8004d50:	f04f 0600 	mov.w	r6, #0
 8004d54:	196b      	adds	r3, r5, r5
 8004d56:	eb46 0406 	adc.w	r4, r6, r6
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	f7fb fa9f 	bl	80002a0 <__aeabi_uldivmod>
 8004d62:	4603      	mov	r3, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	461a      	mov	r2, r3
 8004d68:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <UART_SetConfig+0x384>)
 8004d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	2164      	movs	r1, #100	; 0x64
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	3332      	adds	r3, #50	; 0x32
 8004d7c:	4a65      	ldr	r2, [pc, #404]	; (8004f14 <UART_SetConfig+0x384>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	f003 0207 	and.w	r2, r3, #7
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4442      	add	r2, r8
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	e26f      	b.n	8005272 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d92:	f7fd fdf7 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8004d96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	f04f 0600 	mov.w	r6, #0
 8004da0:	46a8      	mov	r8, r5
 8004da2:	46b1      	mov	r9, r6
 8004da4:	eb18 0308 	adds.w	r3, r8, r8
 8004da8:	eb49 0409 	adc.w	r4, r9, r9
 8004dac:	4698      	mov	r8, r3
 8004dae:	46a1      	mov	r9, r4
 8004db0:	eb18 0805 	adds.w	r8, r8, r5
 8004db4:	eb49 0906 	adc.w	r9, r9, r6
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004dc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dcc:	4688      	mov	r8, r1
 8004dce:	4691      	mov	r9, r2
 8004dd0:	eb18 0005 	adds.w	r0, r8, r5
 8004dd4:	eb49 0106 	adc.w	r1, r9, r6
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	461d      	mov	r5, r3
 8004dde:	f04f 0600 	mov.w	r6, #0
 8004de2:	196b      	adds	r3, r5, r5
 8004de4:	eb46 0406 	adc.w	r4, r6, r6
 8004de8:	461a      	mov	r2, r3
 8004dea:	4623      	mov	r3, r4
 8004dec:	f7fb fa58 	bl	80002a0 <__aeabi_uldivmod>
 8004df0:	4603      	mov	r3, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <UART_SetConfig+0x384>)
 8004df8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	461d      	mov	r5, r3
 8004e06:	f04f 0600 	mov.w	r6, #0
 8004e0a:	46a9      	mov	r9, r5
 8004e0c:	46b2      	mov	sl, r6
 8004e0e:	eb19 0309 	adds.w	r3, r9, r9
 8004e12:	eb4a 040a 	adc.w	r4, sl, sl
 8004e16:	4699      	mov	r9, r3
 8004e18:	46a2      	mov	sl, r4
 8004e1a:	eb19 0905 	adds.w	r9, r9, r5
 8004e1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e22:	f04f 0100 	mov.w	r1, #0
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e36:	4689      	mov	r9, r1
 8004e38:	4692      	mov	sl, r2
 8004e3a:	eb19 0005 	adds.w	r0, r9, r5
 8004e3e:	eb4a 0106 	adc.w	r1, sl, r6
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	461d      	mov	r5, r3
 8004e48:	f04f 0600 	mov.w	r6, #0
 8004e4c:	196b      	adds	r3, r5, r5
 8004e4e:	eb46 0406 	adc.w	r4, r6, r6
 8004e52:	461a      	mov	r2, r3
 8004e54:	4623      	mov	r3, r4
 8004e56:	f7fb fa23 	bl	80002a0 <__aeabi_uldivmod>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	461a      	mov	r2, r3
 8004e60:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <UART_SetConfig+0x384>)
 8004e62:	fba3 1302 	umull	r1, r3, r3, r2
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2164      	movs	r1, #100	; 0x64
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	3332      	adds	r3, #50	; 0x32
 8004e74:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <UART_SetConfig+0x384>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e82:	4498      	add	r8, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	461d      	mov	r5, r3
 8004e88:	f04f 0600 	mov.w	r6, #0
 8004e8c:	46a9      	mov	r9, r5
 8004e8e:	46b2      	mov	sl, r6
 8004e90:	eb19 0309 	adds.w	r3, r9, r9
 8004e94:	eb4a 040a 	adc.w	r4, sl, sl
 8004e98:	4699      	mov	r9, r3
 8004e9a:	46a2      	mov	sl, r4
 8004e9c:	eb19 0905 	adds.w	r9, r9, r5
 8004ea0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ea4:	f04f 0100 	mov.w	r1, #0
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004eb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004eb8:	4689      	mov	r9, r1
 8004eba:	4692      	mov	sl, r2
 8004ebc:	eb19 0005 	adds.w	r0, r9, r5
 8004ec0:	eb4a 0106 	adc.w	r1, sl, r6
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	461d      	mov	r5, r3
 8004eca:	f04f 0600 	mov.w	r6, #0
 8004ece:	196b      	adds	r3, r5, r5
 8004ed0:	eb46 0406 	adc.w	r4, r6, r6
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	f7fb f9e2 	bl	80002a0 <__aeabi_uldivmod>
 8004edc:	4603      	mov	r3, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <UART_SetConfig+0x384>)
 8004ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	2164      	movs	r1, #100	; 0x64
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	3332      	adds	r3, #50	; 0x32
 8004ef6:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <UART_SetConfig+0x384>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	f003 0207 	and.w	r2, r3, #7
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4442      	add	r2, r8
 8004f08:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004f0a:	e1b2      	b.n	8005272 <UART_SetConfig+0x6e2>
 8004f0c:	40011000 	.word	0x40011000
 8004f10:	40011400 	.word	0x40011400
 8004f14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4ad7      	ldr	r2, [pc, #860]	; (800527c <UART_SetConfig+0x6ec>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d005      	beq.n	8004f2e <UART_SetConfig+0x39e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4ad6      	ldr	r2, [pc, #856]	; (8005280 <UART_SetConfig+0x6f0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	f040 80d1 	bne.w	80050d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f2e:	f7fd fd3d 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8004f32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	469a      	mov	sl, r3
 8004f38:	f04f 0b00 	mov.w	fp, #0
 8004f3c:	46d0      	mov	r8, sl
 8004f3e:	46d9      	mov	r9, fp
 8004f40:	eb18 0308 	adds.w	r3, r8, r8
 8004f44:	eb49 0409 	adc.w	r4, r9, r9
 8004f48:	4698      	mov	r8, r3
 8004f4a:	46a1      	mov	r9, r4
 8004f4c:	eb18 080a 	adds.w	r8, r8, sl
 8004f50:	eb49 090b 	adc.w	r9, r9, fp
 8004f54:	f04f 0100 	mov.w	r1, #0
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f68:	4688      	mov	r8, r1
 8004f6a:	4691      	mov	r9, r2
 8004f6c:	eb1a 0508 	adds.w	r5, sl, r8
 8004f70:	eb4b 0609 	adc.w	r6, fp, r9
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	f04f 0400 	mov.w	r4, #0
 8004f86:	0094      	lsls	r4, r2, #2
 8004f88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f8c:	008b      	lsls	r3, r1, #2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4623      	mov	r3, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	4631      	mov	r1, r6
 8004f96:	f7fb f983 	bl	80002a0 <__aeabi_uldivmod>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4bb8      	ldr	r3, [pc, #736]	; (8005284 <UART_SetConfig+0x6f4>)
 8004fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	469b      	mov	fp, r3
 8004fb0:	f04f 0c00 	mov.w	ip, #0
 8004fb4:	46d9      	mov	r9, fp
 8004fb6:	46e2      	mov	sl, ip
 8004fb8:	eb19 0309 	adds.w	r3, r9, r9
 8004fbc:	eb4a 040a 	adc.w	r4, sl, sl
 8004fc0:	4699      	mov	r9, r3
 8004fc2:	46a2      	mov	sl, r4
 8004fc4:	eb19 090b 	adds.w	r9, r9, fp
 8004fc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fe0:	4689      	mov	r9, r1
 8004fe2:	4692      	mov	sl, r2
 8004fe4:	eb1b 0509 	adds.w	r5, fp, r9
 8004fe8:	eb4c 060a 	adc.w	r6, ip, sl
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	0094      	lsls	r4, r2, #2
 8005000:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005004:	008b      	lsls	r3, r1, #2
 8005006:	461a      	mov	r2, r3
 8005008:	4623      	mov	r3, r4
 800500a:	4628      	mov	r0, r5
 800500c:	4631      	mov	r1, r6
 800500e:	f7fb f947 	bl	80002a0 <__aeabi_uldivmod>
 8005012:	4603      	mov	r3, r0
 8005014:	460c      	mov	r4, r1
 8005016:	461a      	mov	r2, r3
 8005018:	4b9a      	ldr	r3, [pc, #616]	; (8005284 <UART_SetConfig+0x6f4>)
 800501a:	fba3 1302 	umull	r1, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	2164      	movs	r1, #100	; 0x64
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	3332      	adds	r3, #50	; 0x32
 800502c:	4a95      	ldr	r2, [pc, #596]	; (8005284 <UART_SetConfig+0x6f4>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005038:	4498      	add	r8, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	469b      	mov	fp, r3
 800503e:	f04f 0c00 	mov.w	ip, #0
 8005042:	46d9      	mov	r9, fp
 8005044:	46e2      	mov	sl, ip
 8005046:	eb19 0309 	adds.w	r3, r9, r9
 800504a:	eb4a 040a 	adc.w	r4, sl, sl
 800504e:	4699      	mov	r9, r3
 8005050:	46a2      	mov	sl, r4
 8005052:	eb19 090b 	adds.w	r9, r9, fp
 8005056:	eb4a 0a0c 	adc.w	sl, sl, ip
 800505a:	f04f 0100 	mov.w	r1, #0
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005066:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800506a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800506e:	4689      	mov	r9, r1
 8005070:	4692      	mov	sl, r2
 8005072:	eb1b 0509 	adds.w	r5, fp, r9
 8005076:	eb4c 060a 	adc.w	r6, ip, sl
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4619      	mov	r1, r3
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	f04f 0400 	mov.w	r4, #0
 800508c:	0094      	lsls	r4, r2, #2
 800508e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005092:	008b      	lsls	r3, r1, #2
 8005094:	461a      	mov	r2, r3
 8005096:	4623      	mov	r3, r4
 8005098:	4628      	mov	r0, r5
 800509a:	4631      	mov	r1, r6
 800509c:	f7fb f900 	bl	80002a0 <__aeabi_uldivmod>
 80050a0:	4603      	mov	r3, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	461a      	mov	r2, r3
 80050a6:	4b77      	ldr	r3, [pc, #476]	; (8005284 <UART_SetConfig+0x6f4>)
 80050a8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	2164      	movs	r1, #100	; 0x64
 80050b0:	fb01 f303 	mul.w	r3, r1, r3
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	3332      	adds	r3, #50	; 0x32
 80050ba:	4a72      	ldr	r2, [pc, #456]	; (8005284 <UART_SetConfig+0x6f4>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	f003 020f 	and.w	r2, r3, #15
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4442      	add	r2, r8
 80050cc:	609a      	str	r2, [r3, #8]
 80050ce:	e0d0      	b.n	8005272 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fd fc58 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 80050d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	469a      	mov	sl, r3
 80050da:	f04f 0b00 	mov.w	fp, #0
 80050de:	46d0      	mov	r8, sl
 80050e0:	46d9      	mov	r9, fp
 80050e2:	eb18 0308 	adds.w	r3, r8, r8
 80050e6:	eb49 0409 	adc.w	r4, r9, r9
 80050ea:	4698      	mov	r8, r3
 80050ec:	46a1      	mov	r9, r4
 80050ee:	eb18 080a 	adds.w	r8, r8, sl
 80050f2:	eb49 090b 	adc.w	r9, r9, fp
 80050f6:	f04f 0100 	mov.w	r1, #0
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005102:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005106:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800510a:	4688      	mov	r8, r1
 800510c:	4691      	mov	r9, r2
 800510e:	eb1a 0508 	adds.w	r5, sl, r8
 8005112:	eb4b 0609 	adc.w	r6, fp, r9
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4619      	mov	r1, r3
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	f04f 0400 	mov.w	r4, #0
 8005128:	0094      	lsls	r4, r2, #2
 800512a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800512e:	008b      	lsls	r3, r1, #2
 8005130:	461a      	mov	r2, r3
 8005132:	4623      	mov	r3, r4
 8005134:	4628      	mov	r0, r5
 8005136:	4631      	mov	r1, r6
 8005138:	f7fb f8b2 	bl	80002a0 <__aeabi_uldivmod>
 800513c:	4603      	mov	r3, r0
 800513e:	460c      	mov	r4, r1
 8005140:	461a      	mov	r2, r3
 8005142:	4b50      	ldr	r3, [pc, #320]	; (8005284 <UART_SetConfig+0x6f4>)
 8005144:	fba3 2302 	umull	r2, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	469b      	mov	fp, r3
 8005152:	f04f 0c00 	mov.w	ip, #0
 8005156:	46d9      	mov	r9, fp
 8005158:	46e2      	mov	sl, ip
 800515a:	eb19 0309 	adds.w	r3, r9, r9
 800515e:	eb4a 040a 	adc.w	r4, sl, sl
 8005162:	4699      	mov	r9, r3
 8005164:	46a2      	mov	sl, r4
 8005166:	eb19 090b 	adds.w	r9, r9, fp
 800516a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800517e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005182:	4689      	mov	r9, r1
 8005184:	4692      	mov	sl, r2
 8005186:	eb1b 0509 	adds.w	r5, fp, r9
 800518a:	eb4c 060a 	adc.w	r6, ip, sl
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4619      	mov	r1, r3
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	f04f 0400 	mov.w	r4, #0
 80051a0:	0094      	lsls	r4, r2, #2
 80051a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051a6:	008b      	lsls	r3, r1, #2
 80051a8:	461a      	mov	r2, r3
 80051aa:	4623      	mov	r3, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	4631      	mov	r1, r6
 80051b0:	f7fb f876 	bl	80002a0 <__aeabi_uldivmod>
 80051b4:	4603      	mov	r3, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b32      	ldr	r3, [pc, #200]	; (8005284 <UART_SetConfig+0x6f4>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	2164      	movs	r1, #100	; 0x64
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	3332      	adds	r3, #50	; 0x32
 80051ce:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <UART_SetConfig+0x6f4>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051da:	4498      	add	r8, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	469b      	mov	fp, r3
 80051e0:	f04f 0c00 	mov.w	ip, #0
 80051e4:	46d9      	mov	r9, fp
 80051e6:	46e2      	mov	sl, ip
 80051e8:	eb19 0309 	adds.w	r3, r9, r9
 80051ec:	eb4a 040a 	adc.w	r4, sl, sl
 80051f0:	4699      	mov	r9, r3
 80051f2:	46a2      	mov	sl, r4
 80051f4:	eb19 090b 	adds.w	r9, r9, fp
 80051f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005208:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800520c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005210:	4689      	mov	r9, r1
 8005212:	4692      	mov	sl, r2
 8005214:	eb1b 0509 	adds.w	r5, fp, r9
 8005218:	eb4c 060a 	adc.w	r6, ip, sl
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4619      	mov	r1, r3
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	0094      	lsls	r4, r2, #2
 8005230:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005234:	008b      	lsls	r3, r1, #2
 8005236:	461a      	mov	r2, r3
 8005238:	4623      	mov	r3, r4
 800523a:	4628      	mov	r0, r5
 800523c:	4631      	mov	r1, r6
 800523e:	f7fb f82f 	bl	80002a0 <__aeabi_uldivmod>
 8005242:	4603      	mov	r3, r0
 8005244:	460c      	mov	r4, r1
 8005246:	461a      	mov	r2, r3
 8005248:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <UART_SetConfig+0x6f4>)
 800524a:	fba3 1302 	umull	r1, r3, r3, r2
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2164      	movs	r1, #100	; 0x64
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	3332      	adds	r3, #50	; 0x32
 800525c:	4a09      	ldr	r2, [pc, #36]	; (8005284 <UART_SetConfig+0x6f4>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	f003 020f 	and.w	r2, r3, #15
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4442      	add	r2, r8
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	e7ff      	b.n	8005272 <UART_SetConfig+0x6e2>
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527c:	40011000 	.word	0x40011000
 8005280:	40011400 	.word	0x40011400
 8005284:	51eb851f 	.word	0x51eb851f

08005288 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005288:	b084      	sub	sp, #16
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	f107 001c 	add.w	r0, r7, #28
 8005296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800529e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80052a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80052aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80052ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80052b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80052c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	b004      	add	sp, #16
 80052dc:	4770      	bx	lr

080052de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2203      	movs	r2, #3
 8005326:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005328:	2002      	movs	r0, #2
 800532a:	f7fc f8b9 	bl	80014a0 <HAL_Delay>
  
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0303 	and.w	r3, r3, #3
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005372:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005378:	431a      	orrs	r2, r3
                       Command->CPSM);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800537e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800538e:	f023 030f 	bic.w	r3, r3, #15
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	b2db      	uxtb	r3, r3
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3314      	adds	r3, #20
 80053d0:	461a      	mov	r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
}  
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800540e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005414:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800541a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005432:	2300      	movs	r3, #0

}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800544e:	2310      	movs	r3, #16
 8005450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800545a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800545e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005460:	f107 0308 	add.w	r3, r7, #8
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff ff74 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800546c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005470:	2110      	movs	r1, #16
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa40 	bl	80058f8 <SDMMC_GetCmdResp1>
 8005478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800547a:	69fb      	ldr	r3, [r7, #28]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005492:	2311      	movs	r3, #17
 8005494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005496:	2340      	movs	r3, #64	; 0x40
 8005498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800549e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a4:	f107 0308 	add.w	r3, r7, #8
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff ff52 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b4:	2111      	movs	r1, #17
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa1e 	bl	80058f8 <SDMMC_GetCmdResp1>
 80054bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054be:	69fb      	ldr	r3, [r7, #28]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80054d6:	2312      	movs	r3, #18
 80054d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ff30 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	2112      	movs	r1, #18
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f9fc 	bl	80058f8 <SDMMC_GetCmdResp1>
 8005500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005502:	69fb      	ldr	r3, [r7, #28]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800551a:	2318      	movs	r3, #24
 800551c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800551e:	2340      	movs	r3, #64	; 0x40
 8005520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800552a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800552c:	f107 0308 	add.w	r3, r7, #8
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff ff0e 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	2118      	movs	r1, #24
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9da 	bl	80058f8 <SDMMC_GetCmdResp1>
 8005544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005546:	69fb      	ldr	r3, [r7, #28]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800555e:	2319      	movs	r3, #25
 8005560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800556a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800556e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005570:	f107 0308 	add.w	r3, r7, #8
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff feec 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800557c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005580:	2119      	movs	r1, #25
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f9b8 	bl	80058f8 <SDMMC_GetCmdResp1>
 8005588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800558a:	69fb      	ldr	r3, [r7, #28]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055a0:	230c      	movs	r3, #12
 80055a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055a4:	2340      	movs	r3, #64	; 0x40
 80055a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff fecb 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80055be:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <SDMMC_CmdStopTransfer+0x40>)
 80055c0:	210c      	movs	r1, #12
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f998 	bl	80058f8 <SDMMC_GetCmdResp1>
 80055c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055ca:	69fb      	ldr	r3, [r7, #28]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	05f5e100 	.word	0x05f5e100

080055d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	; 0x28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80055e8:	2307      	movs	r3, #7
 80055ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055ec:	2340      	movs	r3, #64	; 0x40
 80055ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055fa:	f107 0310 	add.w	r3, r7, #16
 80055fe:	4619      	mov	r1, r3
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fea7 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005606:	f241 3288 	movw	r2, #5000	; 0x1388
 800560a:	2107      	movs	r1, #7
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f973 	bl	80058f8 <SDMMC_GetCmdResp1>
 8005612:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005616:	4618      	mov	r0, r3
 8005618:	3728      	adds	r7, #40	; 0x28
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b088      	sub	sp, #32
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fe86 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f92d 	bl	80058a8 <SDMMC_GetCmdError>
 800564e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005650:	69fb      	ldr	r3, [r7, #28]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b088      	sub	sp, #32
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005662:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005668:	2308      	movs	r3, #8
 800566a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800566c:	2340      	movs	r3, #64	; 0x40
 800566e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005678:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fe67 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fb16 	bl	8005cb8 <SDMMC_GetCmdResp7>
 800568c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800568e:	69fb      	ldr	r3, [r7, #28]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056a6:	2337      	movs	r3, #55	; 0x37
 80056a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056aa:	2340      	movs	r3, #64	; 0x40
 80056ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056b8:	f107 0308 	add.w	r3, r7, #8
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fe48 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80056c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c8:	2137      	movs	r1, #55	; 0x37
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f914 	bl	80058f8 <SDMMC_GetCmdResp1>
 80056d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056d2:	69fb      	ldr	r3, [r7, #28]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80056f2:	2329      	movs	r3, #41	; 0x29
 80056f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056f6:	2340      	movs	r3, #64	; 0x40
 80056f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005704:	f107 0308 	add.w	r3, r7, #8
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fe22 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fa23 	bl	8005b5c <SDMMC_GetCmdResp3>
 8005716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005718:	69fb      	ldr	r3, [r7, #28]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b088      	sub	sp, #32
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005730:	2306      	movs	r3, #6
 8005732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005734:	2340      	movs	r3, #64	; 0x40
 8005736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800573c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005740:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff fe03 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800574e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005752:	2106      	movs	r1, #6
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f8cf 	bl	80058f8 <SDMMC_GetCmdResp1>
 800575a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800575c:	69fb      	ldr	r3, [r7, #28]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b088      	sub	sp, #32
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005772:	2333      	movs	r3, #51	; 0x33
 8005774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800577e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005784:	f107 0308 	add.w	r3, r7, #8
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fde2 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	2133      	movs	r1, #51	; 0x33
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8ae 	bl	80058f8 <SDMMC_GetCmdResp1>
 800579c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800579e:	69fb      	ldr	r3, [r7, #28]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057b4:	2302      	movs	r3, #2
 80057b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057b8:	23c0      	movs	r3, #192	; 0xc0
 80057ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057c6:	f107 0308 	add.w	r3, r7, #8
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fdc1 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f97c 	bl	8005ad0 <SDMMC_GetCmdResp2>
 80057d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057da:	69fb      	ldr	r3, [r7, #28]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80057f2:	2309      	movs	r3, #9
 80057f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057f6:	23c0      	movs	r3, #192	; 0xc0
 80057f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005802:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005804:	f107 0308 	add.w	r3, r7, #8
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fda2 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f95d 	bl	8005ad0 <SDMMC_GetCmdResp2>
 8005816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005818:	69fb      	ldr	r3, [r7, #28]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b088      	sub	sp, #32
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005830:	2303      	movs	r3, #3
 8005832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005834:	2340      	movs	r3, #64	; 0x40
 8005836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800583c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff fd83 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	2103      	movs	r1, #3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9bc 	bl	8005bd0 <SDMMC_GetCmdResp6>
 8005858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800585a:	69fb      	ldr	r3, [r7, #28]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005872:	230d      	movs	r3, #13
 8005874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005876:	2340      	movs	r3, #64	; 0x40
 8005878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800587e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005882:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005884:	f107 0308 	add.w	r3, r7, #8
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fd62 	bl	8005354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005890:	f241 3288 	movw	r2, #5000	; 0x1388
 8005894:	210d      	movs	r1, #13
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f82e 	bl	80058f8 <SDMMC_GetCmdResp1>
 800589c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800589e:	69fb      	ldr	r3, [r7, #28]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3720      	adds	r7, #32
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80058a8:	b490      	push	{r4, r7}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <SDMMC_GetCmdError+0x48>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a0f      	ldr	r2, [pc, #60]	; (80058f4 <SDMMC_GetCmdError+0x4c>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0a5b      	lsrs	r3, r3, #9
 80058bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80058c4:	4623      	mov	r3, r4
 80058c6:	1e5c      	subs	r4, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058d0:	e009      	b.n	80058e6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f2      	beq.n	80058c4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	22c5      	movs	r2, #197	; 0xc5
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc90      	pop	{r4, r7}
 80058ee:	4770      	bx	lr
 80058f0:	2000003c 	.word	0x2000003c
 80058f4:	10624dd3 	.word	0x10624dd3

080058f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	460b      	mov	r3, r1
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005906:	4b6f      	ldr	r3, [pc, #444]	; (8005ac4 <SDMMC_GetCmdResp1+0x1cc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a6f      	ldr	r2, [pc, #444]	; (8005ac8 <SDMMC_GetCmdResp1+0x1d0>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	0a5b      	lsrs	r3, r3, #9
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005918:	4623      	mov	r3, r4
 800591a:	1e5c      	subs	r4, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d102      	bne.n	8005926 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005924:	e0c9      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <SDMMC_GetCmdResp1+0x20>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1eb      	bne.n	8005918 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2204      	movs	r2, #4
 8005950:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005952:	2304      	movs	r3, #4
 8005954:	e0b1      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005968:	2301      	movs	r3, #1
 800596a:	e0a6      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	22c5      	movs	r2, #197	; 0xc5
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fd18 	bl	80053a8 <SDIO_GetCommandResponse>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	7afb      	ldrb	r3, [r7, #11]
 800597e:	4293      	cmp	r3, r2
 8005980:	d001      	beq.n	8005986 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005982:	2301      	movs	r3, #1
 8005984:	e099      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005986:	2100      	movs	r1, #0
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7ff fd1a 	bl	80053c2 <SDIO_GetResponse>
 800598e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4b4e      	ldr	r3, [pc, #312]	; (8005acc <SDMMC_GetCmdResp1+0x1d4>)
 8005994:	4013      	ands	r3, r2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800599a:	2300      	movs	r3, #0
 800599c:	e08d      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	da02      	bge.n	80059aa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80059a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059a8:	e087      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80059b4:	2340      	movs	r3, #64	; 0x40
 80059b6:	e080      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	e079      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80059d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059d4:	e071      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80059e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e4:	e069      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80059f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f4:	e061      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a04:	e059      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a14:	e051      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a24:	e049      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a34:	e041      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a44:	e039      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a54:	e031      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a64:	e029      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005a74:	e021      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005a80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a84:	e019      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a94:	e011      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005aa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005aa4:	e009      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005ab0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ab4:	e001      	b.n	8005aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd90      	pop	{r4, r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	2000003c 	.word	0x2000003c
 8005ac8:	10624dd3 	.word	0x10624dd3
 8005acc:	fdffe008 	.word	0xfdffe008

08005ad0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005ad0:	b490      	push	{r4, r7}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ad8:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <SDMMC_GetCmdResp2+0x84>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <SDMMC_GetCmdResp2+0x88>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	0a5b      	lsrs	r3, r3, #9
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005aec:	4623      	mov	r3, r4
 8005aee:	1e5c      	subs	r4, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005af8:	e026      	b.n	8005b48 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <SDMMC_GetCmdResp2+0x1c>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1eb      	bne.n	8005aec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2204      	movs	r2, #4
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b26:	2304      	movs	r3, #4
 8005b28:	e00e      	b.n	8005b48 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e003      	b.n	8005b48 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	22c5      	movs	r2, #197	; 0xc5
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc90      	pop	{r4, r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000003c 	.word	0x2000003c
 8005b58:	10624dd3 	.word	0x10624dd3

08005b5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005b5c:	b490      	push	{r4, r7}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b64:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <SDMMC_GetCmdResp3+0x6c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <SDMMC_GetCmdResp3+0x70>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	0a5b      	lsrs	r3, r3, #9
 8005b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005b78:	4623      	mov	r3, r4
 8005b7a:	1e5c      	subs	r4, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b84:	e01b      	b.n	8005bbe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <SDMMC_GetCmdResp3+0x1c>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1eb      	bne.n	8005b78 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	e003      	b.n	8005bbe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	22c5      	movs	r2, #197	; 0xc5
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc90      	pop	{r4, r7}
 8005bc6:	4770      	bx	lr
 8005bc8:	2000003c 	.word	0x2000003c
 8005bcc:	10624dd3 	.word	0x10624dd3

08005bd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bde:	4b34      	ldr	r3, [pc, #208]	; (8005cb0 <SDMMC_GetCmdResp6+0xe0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a34      	ldr	r2, [pc, #208]	; (8005cb4 <SDMMC_GetCmdResp6+0xe4>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	0a5b      	lsrs	r3, r3, #9
 8005bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	1e5c      	subs	r4, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bfe:	e052      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <SDMMC_GetCmdResp6+0x22>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1eb      	bne.n	8005bf2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	e03a      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e02f      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff fbae 	bl	80053a8 <SDIO_GetCommandResponse>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	7afb      	ldrb	r3, [r7, #11]
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d001      	beq.n	8005c5a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e025      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	22c5      	movs	r2, #197	; 0xc5
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c60:	2100      	movs	r1, #0
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff fbad 	bl	80053c2 <SDIO_GetResponse>
 8005c68:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	0c1b      	lsrs	r3, r3, #16
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e011      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c90:	e009      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ca0:	e001      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd90      	pop	{r4, r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	2000003c 	.word	0x2000003c
 8005cb4:	10624dd3 	.word	0x10624dd3

08005cb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005cb8:	b490      	push	{r4, r7}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cc0:	4b21      	ldr	r3, [pc, #132]	; (8005d48 <SDMMC_GetCmdResp7+0x90>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a21      	ldr	r2, [pc, #132]	; (8005d4c <SDMMC_GetCmdResp7+0x94>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	0a5b      	lsrs	r3, r3, #9
 8005ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	1e5c      	subs	r4, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ce0:	e02c      	b.n	8005d3c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <SDMMC_GetCmdResp7+0x1c>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1eb      	bne.n	8005cd4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d0e:	2304      	movs	r3, #4
 8005d10:	e014      	b.n	8005d3c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e009      	b.n	8005d3c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2240      	movs	r2, #64	; 0x40
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d3a:	2300      	movs	r3, #0
  
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc90      	pop	{r4, r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	2000003c 	.word	0x2000003c
 8005d4c:	10624dd3 	.word	0x10624dd3

08005d50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d54:	4904      	ldr	r1, [pc, #16]	; (8005d68 <MX_FATFS_Init+0x18>)
 8005d56:	4805      	ldr	r0, [pc, #20]	; (8005d6c <MX_FATFS_Init+0x1c>)
 8005d58:	f002 fcb4 	bl	80086c4 <FATFS_LinkDriver>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <MX_FATFS_Init+0x20>)
 8005d62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d64:	bf00      	nop
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20004b4c 	.word	0x20004b4c
 8005d6c:	0800c694 	.word	0x0800c694
 8005d70:	20004b48 	.word	0x20004b48

08005d74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005d8e:	f000 f896 	bl	8005ebe <BSP_SD_IsDetected>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d001      	beq.n	8005d9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e012      	b.n	8005dc2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005d9c:	480b      	ldr	r0, [pc, #44]	; (8005dcc <BSP_SD_Init+0x48>)
 8005d9e:	f7fc fe4b 	bl	8002a38 <HAL_SD_Init>
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d109      	bne.n	8005dc0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005db0:	4806      	ldr	r0, [pc, #24]	; (8005dcc <BSP_SD_Init+0x48>)
 8005db2:	f7fd fc0b 	bl	80035cc <HAL_SD_ConfigWideBusOperation>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20004a80 	.word	0x20004a80

08005dd0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	68f9      	ldr	r1, [r7, #12]
 8005de6:	4806      	ldr	r0, [pc, #24]	; (8005e00 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005de8:	f7fc feb6 	bl	8002b58 <HAL_SD_ReadBlocks_DMA>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20004a80 	.word	0x20004a80

08005e04 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	68f9      	ldr	r1, [r7, #12]
 8005e1a:	4806      	ldr	r0, [pc, #24]	; (8005e34 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005e1c:	f7fc ff86 	bl	8002d2c <HAL_SD_WriteBlocks_DMA>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20004a80 	.word	0x20004a80

08005e38 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e3c:	4805      	ldr	r0, [pc, #20]	; (8005e54 <BSP_SD_GetCardState+0x1c>)
 8005e3e:	f7fd fc41 	bl	80036c4 <HAL_SD_GetCardState>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	bf14      	ite	ne
 8005e48:	2301      	movne	r3, #1
 8005e4a:	2300      	moveq	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20004a80 	.word	0x20004a80

08005e58 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4803      	ldr	r0, [pc, #12]	; (8005e70 <BSP_SD_GetCardInfo+0x18>)
 8005e64:	f7fd fb86 	bl	8003574 <HAL_SD_GetCardInfo>
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20004a80 	.word	0x20004a80

08005e74 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005e7c:	f000 f818 	bl	8005eb0 <BSP_SD_AbortCallback>
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005e90:	f000 f9a8 	bl	80061e4 <BSP_SD_WriteCpltCallback>
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005ea4:	f000 f9ac 	bl	8006200 <BSP_SD_ReadCpltCallback>
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0

}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	b2db      	uxtb	r3, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8005ee0:	f002 fc88 	bl	80087f4 <osKernelSysTick>
 8005ee4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8005ee6:	e006      	b.n	8005ef6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ee8:	f7ff ffa6 	bl	8005e38 <BSP_SD_GetCardState>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e009      	b.n	8005f0a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8005ef6:	f002 fc7d 	bl	80087f4 <osKernelSysTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d8f0      	bhi.n	8005ee8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <SD_CheckStatus+0x38>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f24:	f7ff ff88 	bl	8005e38 <BSP_SD_GetCardState>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <SD_CheckStatus+0x38>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <SD_CheckStatus+0x38>)
 8005f3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f3e:	4b03      	ldr	r3, [pc, #12]	; (8005f4c <SD_CheckStatus+0x38>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b2db      	uxtb	r3, r3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20000045 	.word	0x20000045

08005f50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	4603      	mov	r3, r0
 8005f58:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <SD_initialize+0x8c>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8005f60:	f002 fc3c 	bl	80087dc <osKernelRunning>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d030      	beq.n	8005fcc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005f6a:	f7ff ff0b 	bl	8005d84 <BSP_SD_Init>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff ffcc 	bl	8005f14 <SD_CheckStatus>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4b16      	ldr	r3, [pc, #88]	; (8005fdc <SD_initialize+0x8c>)
 8005f82:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <SD_initialize+0x8c>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d01e      	beq.n	8005fcc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <SD_initialize+0x90>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10e      	bne.n	8005fb4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8005f96:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <SD_initialize+0x94>)
 8005f98:	f107 0408 	add.w	r4, r7, #8
 8005f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8005fa2:	f107 0308 	add.w	r3, r7, #8
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f002 fd4a 	bl	8008a42 <osMessageCreate>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <SD_initialize+0x90>)
 8005fb2:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8005fb4:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <SD_initialize+0x90>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d107      	bne.n	8005fcc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <SD_initialize+0x8c>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <SD_initialize+0x8c>)
 8005fca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <SD_initialize+0x8c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b2db      	uxtb	r3, r3
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd90      	pop	{r4, r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000045 	.word	0x20000045
 8005fe0:	20000558 	.word	0x20000558
 8005fe4:	0800c618 	.word	0x0800c618

08005fe8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff ff8d 	bl	8005f14 <SD_CheckStatus>
 8005ffa:	4603      	mov	r3, r0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	; 0x28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800601a:	f247 5030 	movw	r0, #30000	; 0x7530
 800601e:	f7ff ff5b 	bl	8005ed8 <SD_CheckStatusWithTimeout>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	da02      	bge.n	800602e <SD_read+0x2a>
  {
    return res;
 8006028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800602c:	e032      	b.n	8006094 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	68b8      	ldr	r0, [r7, #8]
 8006034:	f7ff fecc 	bl	8005dd0 <BSP_SD_ReadBlocks_DMA>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800603e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006042:	2b00      	cmp	r3, #0
 8006044:	d124      	bne.n	8006090 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <SD_read+0x98>)
 8006048:	6819      	ldr	r1, [r3, #0]
 800604a:	f107 0314 	add.w	r3, r7, #20
 800604e:	f247 5230 	movw	r2, #30000	; 0x7530
 8006052:	4618      	mov	r0, r3
 8006054:	f002 fd5e 	bl	8008b14 <osMessageGet>

    if (event.status == osEventMessage)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2b10      	cmp	r3, #16
 800605c:	d118      	bne.n	8006090 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d115      	bne.n	8006090 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8006064:	f002 fbc6 	bl	80087f4 <osKernelSysTick>
 8006068:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800606a:	e008      	b.n	800607e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800606c:	f7ff fee4 	bl	8005e38 <BSP_SD_GetCardState>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <SD_read+0x7a>
              {
                res = RES_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800607c:	e008      	b.n	8006090 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800607e:	f002 fbb9 	bl	80087f4 <osKernelSysTick>
 8006082:	4602      	mov	r2, r0
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f247 522f 	movw	r2, #29999	; 0x752f
 800608c:	4293      	cmp	r3, r2
 800608e:	d9ed      	bls.n	800606c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006094:	4618      	mov	r0, r3
 8006096:	3728      	adds	r7, #40	; 0x28
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000558 	.word	0x20000558

080060a0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80060b6:	f247 5030 	movw	r0, #30000	; 0x7530
 80060ba:	f7ff ff0d 	bl	8005ed8 <SD_CheckStatusWithTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da02      	bge.n	80060ca <SD_write+0x2a>
  {
    return res;
 80060c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060c8:	e02e      	b.n	8006128 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68b8      	ldr	r0, [r7, #8]
 80060d0:	f7ff fe98 	bl	8005e04 <BSP_SD_WriteBlocks_DMA>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d124      	bne.n	8006124 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80060da:	4b15      	ldr	r3, [pc, #84]	; (8006130 <SD_write+0x90>)
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	f247 5230 	movw	r2, #30000	; 0x7530
 80060e6:	4618      	mov	r0, r3
 80060e8:	f002 fd14 	bl	8008b14 <osMessageGet>

    if (event.status == osEventMessage)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d118      	bne.n	8006124 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d115      	bne.n	8006124 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80060f8:	f002 fb7c 	bl	80087f4 <osKernelSysTick>
 80060fc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80060fe:	e008      	b.n	8006112 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006100:	f7ff fe9a 	bl	8005e38 <BSP_SD_GetCardState>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <SD_write+0x72>
          {
            res = RES_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8006110:	e008      	b.n	8006124 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006112:	f002 fb6f 	bl	80087f4 <osKernelSysTick>
 8006116:	4602      	mov	r2, r0
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f247 522f 	movw	r2, #29999	; 0x752f
 8006120:	4293      	cmp	r3, r2
 8006122:	d9ed      	bls.n	8006100 <SD_write+0x60>
    }

  }
#endif

  return res;
 8006124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006128:	4618      	mov	r0, r3
 800612a:	3728      	adds	r7, #40	; 0x28
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000558 	.word	0x20000558

08006134 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08c      	sub	sp, #48	; 0x30
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	603a      	str	r2, [r7, #0]
 800613e:	71fb      	strb	r3, [r7, #7]
 8006140:	460b      	mov	r3, r1
 8006142:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800614a:	4b25      	ldr	r3, [pc, #148]	; (80061e0 <SD_ioctl+0xac>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <SD_ioctl+0x28>
 8006158:	2303      	movs	r3, #3
 800615a:	e03c      	b.n	80061d6 <SD_ioctl+0xa2>

  switch (cmd)
 800615c:	79bb      	ldrb	r3, [r7, #6]
 800615e:	2b03      	cmp	r3, #3
 8006160:	d834      	bhi.n	80061cc <SD_ioctl+0x98>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <SD_ioctl+0x34>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	08006179 	.word	0x08006179
 800616c:	08006181 	.word	0x08006181
 8006170:	08006199 	.word	0x08006199
 8006174:	080061b3 	.word	0x080061b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800617e:	e028      	b.n	80061d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006180:	f107 030c 	add.w	r3, r7, #12
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fe67 	bl	8005e58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800618a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006196:	e01c      	b.n	80061d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006198:	f107 030c 	add.w	r3, r7, #12
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff fe5b 	bl	8005e58 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061b0:	e00f      	b.n	80061d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061b2:	f107 030c 	add.w	r3, r7, #12
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff fe4e 	bl	8005e58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	0a5a      	lsrs	r2, r3, #9
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061ca:	e002      	b.n	80061d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80061d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3730      	adds	r7, #48	; 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000045 	.word	0x20000045

080061e4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <BSP_SD_WriteCpltCallback+0x18>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2102      	movs	r1, #2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f002 fc4f 	bl	8008a94 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80061f6:	bf00      	nop
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000558 	.word	0x20000558

08006200 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <BSP_SD_ReadCpltCallback+0x18>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2200      	movs	r2, #0
 800620a:	2101      	movs	r1, #1
 800620c:	4618      	mov	r0, r3
 800620e:	f002 fc41 	bl	8008a94 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000558 	.word	0x20000558

0800621c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	4a08      	ldr	r2, [pc, #32]	; (800624c <disk_status+0x30>)
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	79fa      	ldrb	r2, [r7, #7]
 8006234:	4905      	ldr	r1, [pc, #20]	; (800624c <disk_status+0x30>)
 8006236:	440a      	add	r2, r1
 8006238:	7a12      	ldrb	r2, [r2, #8]
 800623a:	4610      	mov	r0, r2
 800623c:	4798      	blx	r3
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006242:	7bfb      	ldrb	r3, [r7, #15]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000584 	.word	0x20000584

08006250 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <disk_initialize+0x48>)
 8006262:	5cd3      	ldrb	r3, [r2, r3]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d111      	bne.n	800628c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	4a0b      	ldr	r2, [pc, #44]	; (8006298 <disk_initialize+0x48>)
 800626c:	2101      	movs	r1, #1
 800626e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	4a09      	ldr	r2, [pc, #36]	; (8006298 <disk_initialize+0x48>)
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	79fa      	ldrb	r2, [r7, #7]
 800627e:	4906      	ldr	r1, [pc, #24]	; (8006298 <disk_initialize+0x48>)
 8006280:	440a      	add	r2, r1
 8006282:	7a12      	ldrb	r2, [r2, #8]
 8006284:	4610      	mov	r0, r2
 8006286:	4798      	blx	r3
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000584 	.word	0x20000584

0800629c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <disk_read+0x3c>)
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	689c      	ldr	r4, [r3, #8]
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <disk_read+0x3c>)
 80062bc:	4413      	add	r3, r2
 80062be:	7a18      	ldrb	r0, [r3, #8]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	47a0      	blx	r4
 80062c8:	4603      	mov	r3, r0
 80062ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd90      	pop	{r4, r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000584 	.word	0x20000584

080062dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	4a0a      	ldr	r2, [pc, #40]	; (8006318 <disk_write+0x3c>)
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68dc      	ldr	r4, [r3, #12]
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	4a07      	ldr	r2, [pc, #28]	; (8006318 <disk_write+0x3c>)
 80062fc:	4413      	add	r3, r2
 80062fe:	7a18      	ldrb	r0, [r3, #8]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	47a0      	blx	r4
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]
  return res;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
}
 800630e:	4618      	mov	r0, r3
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	bf00      	nop
 8006318:	20000584 	.word	0x20000584

0800631c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	603a      	str	r2, [r7, #0]
 8006326:	71fb      	strb	r3, [r7, #7]
 8006328:	460b      	mov	r3, r1
 800632a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	4a09      	ldr	r2, [pc, #36]	; (8006354 <disk_ioctl+0x38>)
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	79fa      	ldrb	r2, [r7, #7]
 800633a:	4906      	ldr	r1, [pc, #24]	; (8006354 <disk_ioctl+0x38>)
 800633c:	440a      	add	r2, r1
 800633e:	7a10      	ldrb	r0, [r2, #8]
 8006340:	79b9      	ldrb	r1, [r7, #6]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	4798      	blx	r3
 8006346:	4603      	mov	r3, r0
 8006348:	73fb      	strb	r3, [r7, #15]
  return res;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000584 	.word	0x20000584

08006358 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3301      	adds	r3, #1
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006368:	89fb      	ldrh	r3, [r7, #14]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	b21a      	sxth	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	b21b      	sxth	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b21b      	sxth	r3, r3
 8006378:	81fb      	strh	r3, [r7, #14]
	return rv;
 800637a:	89fb      	ldrh	r3, [r7, #14]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3303      	adds	r3, #3
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	3202      	adds	r2, #2
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	3201      	adds	r2, #1
 80063ae:	7812      	ldrb	r2, [r2, #0]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
	return rv;
 80063c0:	68fb      	ldr	r3, [r7, #12]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	460b      	mov	r3, r1
 80063d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	887a      	ldrh	r2, [r7, #2]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	0a1b      	lsrs	r3, r3, #8
 80063ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	887a      	ldrh	r2, [r7, #2]
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	0a1b      	lsrs	r3, r3, #8
 8006430:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	0a1b      	lsrs	r3, r3, #8
 8006442:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	1c53      	adds	r3, r2, #1
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	6179      	str	r1, [r7, #20]
 8006482:	7812      	ldrb	r2, [r2, #0]
 8006484:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3b01      	subs	r3, #1
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f1      	bne.n	8006476 <mem_cpy+0x1a>
	}
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800649e:	b480      	push	{r7}
 80064a0:	b087      	sub	sp, #28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	617a      	str	r2, [r7, #20]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3b01      	subs	r3, #1
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f3      	bne.n	80064ae <mem_set+0x10>
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80064d2:	b480      	push	{r7}
 80064d4:	b089      	sub	sp, #36	; 0x24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	61fa      	str	r2, [r7, #28]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	4619      	mov	r1, r3
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	61ba      	str	r2, [r7, #24]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	1acb      	subs	r3, r1, r3
 80064fe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3b01      	subs	r3, #1
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <mem_cmp+0x40>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0eb      	beq.n	80064ea <mem_cmp+0x18>

	return r;
 8006512:	697b      	ldr	r3, [r7, #20]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3724      	adds	r7, #36	; 0x24
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800652a:	e002      	b.n	8006532 <chk_chr+0x12>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3301      	adds	r3, #1
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <chk_chr+0x26>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	4293      	cmp	r3, r2
 8006544:	d1f2      	bne.n	800652c <chk_chr+0xc>
	return *str;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	781b      	ldrb	r3, [r3, #0]
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d009      	beq.n	8006578 <lock_fs+0x22>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4618      	mov	r0, r3
 800656a:	f002 f8e6 	bl	800873a <ff_req_grant>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <lock_fs+0x22>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <lock_fs+0x24>
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00d      	beq.n	80065b0 <unlock_fs+0x2e>
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d00a      	beq.n	80065b0 <unlock_fs+0x2e>
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	2b0b      	cmp	r3, #11
 800659e:	d007      	beq.n	80065b0 <unlock_fs+0x2e>
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	2b0f      	cmp	r3, #15
 80065a4:	d004      	beq.n	80065b0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f002 f8da 	bl	8008764 <ff_rel_grant>
	}
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e029      	b.n	8006620 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <chk_lock+0xb4>)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	4413      	add	r3, r2
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01d      	beq.n	8006616 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065da:	4a24      	ldr	r2, [pc, #144]	; (800666c <chk_lock+0xb4>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	4413      	add	r3, r2
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d116      	bne.n	800661a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80065ec:	4a1f      	ldr	r2, [pc, #124]	; (800666c <chk_lock+0xb4>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	4413      	add	r3, r2
 80065f4:	3304      	adds	r3, #4
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d10c      	bne.n	800661a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <chk_lock+0xb4>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	4413      	add	r3, r2
 8006608:	3308      	adds	r3, #8
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006610:	429a      	cmp	r2, r3
 8006612:	d102      	bne.n	800661a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006614:	e007      	b.n	8006626 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006616:	2301      	movs	r3, #1
 8006618:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d9d2      	bls.n	80065cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d109      	bne.n	8006640 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d102      	bne.n	8006638 <chk_lock+0x80>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d101      	bne.n	800663c <chk_lock+0x84>
 8006638:	2300      	movs	r3, #0
 800663a:	e010      	b.n	800665e <chk_lock+0xa6>
 800663c:	2312      	movs	r3, #18
 800663e:	e00e      	b.n	800665e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d108      	bne.n	8006658 <chk_lock+0xa0>
 8006646:	4a09      	ldr	r2, [pc, #36]	; (800666c <chk_lock+0xb4>)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	4413      	add	r3, r2
 800664e:	330c      	adds	r3, #12
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d101      	bne.n	800665c <chk_lock+0xa4>
 8006658:	2310      	movs	r3, #16
 800665a:	e000      	b.n	800665e <chk_lock+0xa6>
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000564 	.word	0x20000564

08006670 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006676:	2300      	movs	r3, #0
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	e002      	b.n	8006682 <enq_lock+0x12>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3301      	adds	r3, #1
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d806      	bhi.n	8006696 <enq_lock+0x26>
 8006688:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <enq_lock+0x40>)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	4413      	add	r3, r2
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f2      	bne.n	800667c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b02      	cmp	r3, #2
 800669a:	bf14      	ite	ne
 800669c:	2301      	movne	r3, #1
 800669e:	2300      	moveq	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	20000564 	.word	0x20000564

080066b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e01f      	b.n	8006704 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80066c4:	4a41      	ldr	r2, [pc, #260]	; (80067cc <inc_lock+0x118>)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	4413      	add	r3, r2
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d113      	bne.n	80066fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80066d6:	4a3d      	ldr	r2, [pc, #244]	; (80067cc <inc_lock+0x118>)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	4413      	add	r3, r2
 80066de:	3304      	adds	r3, #4
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d109      	bne.n	80066fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80066ea:	4a38      	ldr	r2, [pc, #224]	; (80067cc <inc_lock+0x118>)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	4413      	add	r3, r2
 80066f2:	3308      	adds	r3, #8
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d006      	beq.n	800670c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3301      	adds	r3, #1
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d9dc      	bls.n	80066c4 <inc_lock+0x10>
 800670a:	e000      	b.n	800670e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800670c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d132      	bne.n	800677a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e002      	b.n	8006720 <inc_lock+0x6c>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d806      	bhi.n	8006734 <inc_lock+0x80>
 8006726:	4a29      	ldr	r2, [pc, #164]	; (80067cc <inc_lock+0x118>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	4413      	add	r3, r2
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f2      	bne.n	800671a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d101      	bne.n	800673e <inc_lock+0x8a>
 800673a:	2300      	movs	r3, #0
 800673c:	e040      	b.n	80067c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4922      	ldr	r1, [pc, #136]	; (80067cc <inc_lock+0x118>)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	440b      	add	r3, r1
 800674a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	491e      	ldr	r1, [pc, #120]	; (80067cc <inc_lock+0x118>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	440b      	add	r3, r1
 8006758:	3304      	adds	r3, #4
 800675a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	695a      	ldr	r2, [r3, #20]
 8006760:	491a      	ldr	r1, [pc, #104]	; (80067cc <inc_lock+0x118>)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	440b      	add	r3, r1
 8006768:	3308      	adds	r3, #8
 800676a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800676c:	4a17      	ldr	r2, [pc, #92]	; (80067cc <inc_lock+0x118>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	4413      	add	r3, r2
 8006774:	330c      	adds	r3, #12
 8006776:	2200      	movs	r2, #0
 8006778:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <inc_lock+0xe0>
 8006780:	4a12      	ldr	r2, [pc, #72]	; (80067cc <inc_lock+0x118>)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	4413      	add	r3, r2
 8006788:	330c      	adds	r3, #12
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <inc_lock+0xe0>
 8006790:	2300      	movs	r3, #0
 8006792:	e015      	b.n	80067c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d108      	bne.n	80067ac <inc_lock+0xf8>
 800679a:	4a0c      	ldr	r2, [pc, #48]	; (80067cc <inc_lock+0x118>)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	4413      	add	r3, r2
 80067a2:	330c      	adds	r3, #12
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	e001      	b.n	80067b0 <inc_lock+0xfc>
 80067ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b0:	4906      	ldr	r1, [pc, #24]	; (80067cc <inc_lock+0x118>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	440b      	add	r3, r1
 80067b8:	330c      	adds	r3, #12
 80067ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	20000564 	.word	0x20000564

080067d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3b01      	subs	r3, #1
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d825      	bhi.n	8006830 <dec_lock+0x60>
		n = Files[i].ctr;
 80067e4:	4a17      	ldr	r2, [pc, #92]	; (8006844 <dec_lock+0x74>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	4413      	add	r3, r2
 80067ec:	330c      	adds	r3, #12
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f8:	d101      	bne.n	80067fe <dec_lock+0x2e>
 80067fa:	2300      	movs	r3, #0
 80067fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80067fe:	89fb      	ldrh	r3, [r7, #14]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <dec_lock+0x3a>
 8006804:	89fb      	ldrh	r3, [r7, #14]
 8006806:	3b01      	subs	r3, #1
 8006808:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800680a:	4a0e      	ldr	r2, [pc, #56]	; (8006844 <dec_lock+0x74>)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	4413      	add	r3, r2
 8006812:	330c      	adds	r3, #12
 8006814:	89fa      	ldrh	r2, [r7, #14]
 8006816:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <dec_lock+0x5a>
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <dec_lock+0x74>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	4413      	add	r3, r2
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	737b      	strb	r3, [r7, #13]
 800682e:	e001      	b.n	8006834 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006830:	2302      	movs	r3, #2
 8006832:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006834:	7b7b      	ldrb	r3, [r7, #13]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000564 	.word	0x20000564

08006848 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e010      	b.n	8006878 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006856:	4a0d      	ldr	r2, [pc, #52]	; (800688c <clear_lock+0x44>)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	4413      	add	r3, r2
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d105      	bne.n	8006872 <clear_lock+0x2a>
 8006866:	4a09      	ldr	r2, [pc, #36]	; (800688c <clear_lock+0x44>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	4413      	add	r3, r2
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d9eb      	bls.n	8006856 <clear_lock+0xe>
	}
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	20000564 	.word	0x20000564

08006890 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	78db      	ldrb	r3, [r3, #3]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d034      	beq.n	800690e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7858      	ldrb	r0, [r3, #1]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80068b4:	2301      	movs	r3, #1
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	f7ff fd10 	bl	80062dc <disk_write>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
 80068c6:	e022      	b.n	800690e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	1ad2      	subs	r2, r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d217      	bcs.n	800690e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	789b      	ldrb	r3, [r3, #2]
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	e010      	b.n	8006908 <sync_window+0x78>
					wsect += fs->fsize;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4413      	add	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7858      	ldrb	r0, [r3, #1]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80068fa:	2301      	movs	r3, #1
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	f7ff fced 	bl	80062dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	3b01      	subs	r3, #1
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d8eb      	bhi.n	80068e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d01b      	beq.n	8006968 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff ffad 	bl	8006890 <sync_window>
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d113      	bne.n	8006968 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7858      	ldrb	r0, [r3, #1]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800694a:	2301      	movs	r3, #1
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	f7ff fca5 	bl	800629c <disk_read>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006958:	f04f 33ff 	mov.w	r3, #4294967295
 800695c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff ff87 	bl	8006890 <sync_window>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d158      	bne.n	8006a3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b03      	cmp	r3, #3
 8006992:	d148      	bne.n	8006a26 <sync_fs+0xb2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	791b      	ldrb	r3, [r3, #4]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d144      	bne.n	8006a26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3334      	adds	r3, #52	; 0x34
 80069a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a4:	2100      	movs	r1, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fd79 	bl	800649e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3334      	adds	r3, #52	; 0x34
 80069b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff fd08 	bl	80063ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3334      	adds	r3, #52	; 0x34
 80069c2:	4921      	ldr	r1, [pc, #132]	; (8006a48 <sync_fs+0xd4>)
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fd1d 	bl	8006404 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3334      	adds	r3, #52	; 0x34
 80069ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069d2:	491e      	ldr	r1, [pc, #120]	; (8006a4c <sync_fs+0xd8>)
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff fd15 	bl	8006404 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3334      	adds	r3, #52	; 0x34
 80069de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7ff fd0b 	bl	8006404 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3334      	adds	r3, #52	; 0x34
 80069f2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f7ff fd01 	bl	8006404 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	7858      	ldrb	r0, [r3, #1]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f7ff fc5e 	bl	80062dc <disk_write>
			fs->fsi_flag = 0;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fc74 	bl	800631c <disk_ioctl>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <sync_fs+0xca>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	41615252 	.word	0x41615252
 8006a4c:	61417272 	.word	0x61417272

08006a50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	3b02      	subs	r3, #2
 8006a5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	3b02      	subs	r3, #2
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d301      	bcc.n	8006a70 <clust2sect+0x20>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e008      	b.n	8006a82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	895b      	ldrh	r3, [r3, #10]
 8006a74:	461a      	mov	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	fb03 f202 	mul.w	r2, r3, r2
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	4413      	add	r3, r2
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b086      	sub	sp, #24
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d904      	bls.n	8006aae <get_fat+0x20>
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d302      	bcc.n	8006ab4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e08c      	b.n	8006bce <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d045      	beq.n	8006b4e <get_fat+0xc0>
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d05d      	beq.n	8006b82 <get_fat+0xf4>
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d177      	bne.n	8006bba <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	0a5b      	lsrs	r3, r3, #9
 8006ae0:	4413      	add	r3, r2
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6938      	ldr	r0, [r7, #16]
 8006ae6:	f7ff ff17 	bl	8006918 <move_window>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d167      	bne.n	8006bc0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	60fa      	str	r2, [r7, #12]
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4413      	add	r3, r2
 8006afe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b02:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0a5b      	lsrs	r3, r3, #9
 8006b0c:	4413      	add	r3, r2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6938      	ldr	r0, [r7, #16]
 8006b12:	f7ff ff01 	bl	8006918 <move_window>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d153      	bne.n	8006bc4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4413      	add	r3, r2
 8006b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <get_fat+0xb6>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	091b      	lsrs	r3, r3, #4
 8006b42:	e002      	b.n	8006b4a <get_fat+0xbc>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b4a:	617b      	str	r3, [r7, #20]
			break;
 8006b4c:	e03f      	b.n	8006bce <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	0a1b      	lsrs	r3, r3, #8
 8006b56:	4413      	add	r3, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6938      	ldr	r0, [r7, #16]
 8006b5c:	f7ff fedc 	bl	8006918 <move_window>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d130      	bne.n	8006bc8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006b74:	4413      	add	r3, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff fbee 	bl	8006358 <ld_word>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	617b      	str	r3, [r7, #20]
			break;
 8006b80:	e025      	b.n	8006bce <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	09db      	lsrs	r3, r3, #7
 8006b8a:	4413      	add	r3, r2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6938      	ldr	r0, [r7, #16]
 8006b90:	f7ff fec2 	bl	8006918 <move_window>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d118      	bne.n	8006bcc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006ba8:	4413      	add	r3, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fbec 	bl	8006388 <ld_dword>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bb6:	617b      	str	r3, [r7, #20]
			break;
 8006bb8:	e009      	b.n	8006bce <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006bba:	2301      	movs	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e006      	b.n	8006bce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bc0:	bf00      	nop
 8006bc2:	e004      	b.n	8006bce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bc4:	bf00      	nop
 8006bc6:	e002      	b.n	8006bce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc8:	bf00      	nop
 8006bca:	e000      	b.n	8006bce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bcc:	bf00      	nop
		}
	}

	return val;
 8006bce:	697b      	ldr	r3, [r7, #20]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b089      	sub	sp, #36	; 0x24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006be4:	2302      	movs	r3, #2
 8006be6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	f240 80d6 	bls.w	8006d9c <put_fat+0x1c4>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	f080 80d0 	bcs.w	8006d9c <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d073      	beq.n	8006cec <put_fat+0x114>
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	f000 8091 	beq.w	8006d2c <put_fat+0x154>
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	f040 80c6 	bne.w	8006d9c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	0a5b      	lsrs	r3, r3, #9
 8006c26:	4413      	add	r3, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7ff fe74 	bl	8006918 <move_window>
 8006c30:	4603      	mov	r3, r0
 8006c32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c34:	7ffb      	ldrb	r3, [r7, #31]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f040 80a9 	bne.w	8006d8e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	1c59      	adds	r1, r3, #1
 8006c46:	61b9      	str	r1, [r7, #24]
 8006c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4c:	4413      	add	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00d      	beq.n	8006c76 <put_fat+0x9e>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	b25a      	sxtb	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	b25b      	sxtb	r3, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	e001      	b.n	8006c7a <put_fat+0xa2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	0a5b      	lsrs	r3, r3, #9
 8006c8c:	4413      	add	r3, r2
 8006c8e:	4619      	mov	r1, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7ff fe41 	bl	8006918 <move_window>
 8006c96:	4603      	mov	r3, r0
 8006c98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c9a:	7ffb      	ldrb	r3, [r7, #31]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d178      	bne.n	8006d92 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cac:	4413      	add	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <put_fat+0xea>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	e00e      	b.n	8006ce0 <put_fat+0x108>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b25b      	sxtb	r3, r3
 8006cc8:	f023 030f 	bic.w	r3, r3, #15
 8006ccc:	b25a      	sxtb	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0a1b      	lsrs	r3, r3, #8
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	b25b      	sxtb	r3, r3
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	b25b      	sxtb	r3, r3
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	70da      	strb	r2, [r3, #3]
			break;
 8006cea:	e057      	b.n	8006d9c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	4413      	add	r3, r2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff fe0d 	bl	8006918 <move_window>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d02:	7ffb      	ldrb	r3, [r7, #31]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d146      	bne.n	8006d96 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006d16:	4413      	add	r3, r2
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	b292      	uxth	r2, r2
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fb55 	bl	80063ce <st_word>
			fs->wflag = 1;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	70da      	strb	r2, [r3, #3]
			break;
 8006d2a:	e037      	b.n	8006d9c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	09db      	lsrs	r3, r3, #7
 8006d34:	4413      	add	r3, r2
 8006d36:	4619      	mov	r1, r3
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fded 	bl	8006918 <move_window>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d42:	7ffb      	ldrb	r3, [r7, #31]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d128      	bne.n	8006d9a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006d5c:	4413      	add	r3, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fb12 	bl	8006388 <ld_dword>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006d6a:	4323      	orrs	r3, r4
 8006d6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006d7c:	4413      	add	r3, r2
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff fb3f 	bl	8006404 <st_dword>
			fs->wflag = 1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	70da      	strb	r2, [r3, #3]
			break;
 8006d8c:	e006      	b.n	8006d9c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006d8e:	bf00      	nop
 8006d90:	e004      	b.n	8006d9c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006d92:	bf00      	nop
 8006d94:	e002      	b.n	8006d9c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006d96:	bf00      	nop
 8006d98:	e000      	b.n	8006d9c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006d9a:	bf00      	nop
		}
	}
	return res;
 8006d9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3724      	adds	r7, #36	; 0x24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd90      	pop	{r4, r7, pc}

08006da6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b088      	sub	sp, #32
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d904      	bls.n	8006dcc <remove_chain+0x26>
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d301      	bcc.n	8006dd0 <remove_chain+0x2a>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e04b      	b.n	8006e68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00c      	beq.n	8006df0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	69b8      	ldr	r0, [r7, #24]
 8006dde:	f7ff fefb 	bl	8006bd8 <put_fat>
 8006de2:	4603      	mov	r3, r0
 8006de4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006de6:	7ffb      	ldrb	r3, [r7, #31]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <remove_chain+0x4a>
 8006dec:	7ffb      	ldrb	r3, [r7, #31]
 8006dee:	e03b      	b.n	8006e68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7ff fe4b 	bl	8006a8e <get_fat>
 8006df8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d031      	beq.n	8006e64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <remove_chain+0x64>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e02e      	b.n	8006e68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d101      	bne.n	8006e16 <remove_chain+0x70>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e028      	b.n	8006e68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006e16:	2200      	movs	r2, #0
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	69b8      	ldr	r0, [r7, #24]
 8006e1c:	f7ff fedc 	bl	8006bd8 <put_fat>
 8006e20:	4603      	mov	r3, r0
 8006e22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e24:	7ffb      	ldrb	r3, [r7, #31]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <remove_chain+0x88>
 8006e2a:	7ffb      	ldrb	r3, [r7, #31]
 8006e2c:	e01c      	b.n	8006e68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	3b02      	subs	r3, #2
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d20b      	bcs.n	8006e54 <remove_chain+0xae>
			fs->free_clst++;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	791b      	ldrb	r3, [r3, #4]
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d3c6      	bcc.n	8006df0 <remove_chain+0x4a>
 8006e62:	e000      	b.n	8006e66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006e64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10d      	bne.n	8006ea2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <create_chain+0x2c>
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d31b      	bcc.n	8006ed4 <create_chain+0x64>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e018      	b.n	8006ed4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff fdf2 	bl	8006a8e <get_fat>
 8006eaa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d801      	bhi.n	8006eb6 <create_chain+0x46>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e070      	b.n	8006f98 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebc:	d101      	bne.n	8006ec2 <create_chain+0x52>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	e06a      	b.n	8006f98 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d201      	bcs.n	8006ed0 <create_chain+0x60>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	e063      	b.n	8006f98 <create_chain+0x128>
		scl = clst;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	3301      	adds	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d307      	bcc.n	8006ef8 <create_chain+0x88>
				ncl = 2;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d901      	bls.n	8006ef8 <create_chain+0x88>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e04f      	b.n	8006f98 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006ef8:	69f9      	ldr	r1, [r7, #28]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fdc7 	bl	8006a8e <get_fat>
 8006f00:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00e      	beq.n	8006f26 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d003      	beq.n	8006f16 <create_chain+0xa6>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d101      	bne.n	8006f1a <create_chain+0xaa>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	e03e      	b.n	8006f98 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d1da      	bne.n	8006ed8 <create_chain+0x68>
 8006f22:	2300      	movs	r3, #0
 8006f24:	e038      	b.n	8006f98 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f26:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2c:	69f9      	ldr	r1, [r7, #28]
 8006f2e:	6938      	ldr	r0, [r7, #16]
 8006f30:	f7ff fe52 	bl	8006bd8 <put_fat>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <create_chain+0xe2>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d006      	beq.n	8006f52 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6938      	ldr	r0, [r7, #16]
 8006f4a:	f7ff fe45 	bl	8006bd8 <put_fat>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d116      	bne.n	8006f86 <create_chain+0x116>
		fs->last_clst = ncl;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	695a      	ldr	r2, [r3, #20]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	3b02      	subs	r3, #2
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d804      	bhi.n	8006f76 <create_chain+0x106>
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	1e5a      	subs	r2, r3, #1
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	791b      	ldrb	r3, [r3, #4]
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	711a      	strb	r2, [r3, #4]
 8006f84:	e007      	b.n	8006f96 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d102      	bne.n	8006f92 <create_chain+0x122>
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	e000      	b.n	8006f94 <create_chain+0x124>
 8006f92:	2301      	movs	r3, #1
 8006f94:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006f96:	69fb      	ldr	r3, [r7, #28]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3720      	adds	r7, #32
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	0a5b      	lsrs	r3, r3, #9
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	8952      	ldrh	r2, [r2, #10]
 8006fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1d1a      	adds	r2, r3, #4
 8006fca:	613a      	str	r2, [r7, #16]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <clmt_clust+0x3a>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e010      	b.n	8006ffc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d307      	bcc.n	8006ff2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3304      	adds	r3, #4
 8006fee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ff0:	e7e9      	b.n	8006fc6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006ff2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4413      	add	r3, r2
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800701e:	d204      	bcs.n	800702a <dir_sdi+0x22>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <dir_sdi+0x26>
		return FR_INT_ERR;
 800702a:	2302      	movs	r3, #2
 800702c:	e063      	b.n	80070f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <dir_sdi+0x46>
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d902      	bls.n	800704e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10c      	bne.n	800706e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	8912      	ldrh	r2, [r2, #8]
 800705c:	4293      	cmp	r3, r2
 800705e:	d301      	bcc.n	8007064 <dir_sdi+0x5c>
 8007060:	2302      	movs	r3, #2
 8007062:	e048      	b.n	80070f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	61da      	str	r2, [r3, #28]
 800706c:	e029      	b.n	80070c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	895b      	ldrh	r3, [r3, #10]
 8007072:	025b      	lsls	r3, r3, #9
 8007074:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007076:	e019      	b.n	80070ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6979      	ldr	r1, [r7, #20]
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff fd06 	bl	8006a8e <get_fat>
 8007082:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d101      	bne.n	8007090 <dir_sdi+0x88>
 800708c:	2301      	movs	r3, #1
 800708e:	e032      	b.n	80070f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d904      	bls.n	80070a0 <dir_sdi+0x98>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	429a      	cmp	r2, r3
 800709e:	d301      	bcc.n	80070a4 <dir_sdi+0x9c>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e028      	b.n	80070f6 <dir_sdi+0xee>
			ofs -= csz;
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d2e1      	bcs.n	8007078 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80070b4:	6979      	ldr	r1, [r7, #20]
 80070b6:	6938      	ldr	r0, [r7, #16]
 80070b8:	f7ff fcca 	bl	8006a50 <clust2sect>
 80070bc:	4602      	mov	r2, r0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <dir_sdi+0xcc>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e010      	b.n	80070f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	69da      	ldr	r2, [r3, #28]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	0a5b      	lsrs	r3, r3, #9
 80070dc:	441a      	add	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	441a      	add	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b086      	sub	sp, #24
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	3320      	adds	r3, #32
 8007114:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <dir_next+0x28>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007124:	d301      	bcc.n	800712a <dir_next+0x2c>
 8007126:	2304      	movs	r3, #4
 8007128:	e0aa      	b.n	8007280 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 8098 	bne.w	8007266 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10b      	bne.n	8007160 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	8912      	ldrh	r2, [r2, #8]
 8007150:	4293      	cmp	r3, r2
 8007152:	f0c0 8088 	bcc.w	8007266 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	61da      	str	r2, [r3, #28]
 800715c:	2304      	movs	r3, #4
 800715e:	e08f      	b.n	8007280 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	0a5b      	lsrs	r3, r3, #9
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	8952      	ldrh	r2, [r2, #10]
 8007168:	3a01      	subs	r2, #1
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d17a      	bne.n	8007266 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f7ff fc88 	bl	8006a8e <get_fat>
 800717e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d801      	bhi.n	800718a <dir_next+0x8c>
 8007186:	2302      	movs	r3, #2
 8007188:	e07a      	b.n	8007280 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007190:	d101      	bne.n	8007196 <dir_next+0x98>
 8007192:	2301      	movs	r3, #1
 8007194:	e074      	b.n	8007280 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	429a      	cmp	r2, r3
 800719e:	d358      	bcc.n	8007252 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	61da      	str	r2, [r3, #28]
 80071ac:	2304      	movs	r3, #4
 80071ae:	e067      	b.n	8007280 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f7ff fe59 	bl	8006e70 <create_chain>
 80071be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <dir_next+0xcc>
 80071c6:	2307      	movs	r3, #7
 80071c8:	e05a      	b.n	8007280 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <dir_next+0xd6>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e055      	b.n	8007280 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d101      	bne.n	80071e0 <dir_next+0xe2>
 80071dc:	2301      	movs	r3, #1
 80071de:	e04f      	b.n	8007280 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff fb55 	bl	8006890 <sync_window>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <dir_next+0xf2>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e047      	b.n	8007280 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3334      	adds	r3, #52	; 0x34
 80071f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071f8:	2100      	movs	r1, #0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff f94f 	bl	800649e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007200:	2300      	movs	r3, #0
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	6979      	ldr	r1, [r7, #20]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff fc22 	bl	8006a50 <clust2sect>
 800720c:	4602      	mov	r2, r0
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	631a      	str	r2, [r3, #48]	; 0x30
 8007212:	e012      	b.n	800723a <dir_next+0x13c>
						fs->wflag = 1;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff fb38 	bl	8006890 <sync_window>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <dir_next+0x12c>
 8007226:	2301      	movs	r3, #1
 8007228:	e02a      	b.n	8007280 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	3301      	adds	r3, #1
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	895b      	ldrh	r3, [r3, #10]
 800723e:	461a      	mov	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4293      	cmp	r3, r2
 8007244:	d3e6      	bcc.n	8007214 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007258:	6979      	ldr	r1, [r7, #20]
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff fbf8 	bl	8006a50 <clust2sect>
 8007260:	4602      	mov	r2, r0
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007278:	441a      	add	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff feb4 	bl	8007008 <dir_sdi>
 80072a0:	4603      	mov	r3, r0
 80072a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d12b      	bne.n	8007302 <dir_alloc+0x7a>
		n = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	4619      	mov	r1, r3
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff fb2f 	bl	8006918 <move_window>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11d      	bne.n	8007300 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2be5      	cmp	r3, #229	; 0xe5
 80072cc:	d004      	beq.n	80072d8 <dir_alloc+0x50>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d107      	bne.n	80072e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	3301      	adds	r3, #1
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d102      	bne.n	80072ec <dir_alloc+0x64>
 80072e6:	e00c      	b.n	8007302 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80072ec:	2101      	movs	r1, #1
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff ff05 	bl	80070fe <dir_next>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0d7      	beq.n	80072ae <dir_alloc+0x26>
 80072fe:	e000      	b.n	8007302 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007300:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	2b04      	cmp	r3, #4
 8007306:	d101      	bne.n	800730c <dir_alloc+0x84>
 8007308:	2307      	movs	r3, #7
 800730a:	75fb      	strb	r3, [r7, #23]
	return res;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	331a      	adds	r3, #26
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff f817 	bl	8006358 <ld_word>
 800732a:	4603      	mov	r3, r0
 800732c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d109      	bne.n	800734a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff f80c 	bl	8006358 <ld_word>
 8007340:	4603      	mov	r3, r0
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800734a:	68fb      	ldr	r3, [r7, #12]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	331a      	adds	r3, #26
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	b292      	uxth	r2, r2
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff f82f 	bl	80063ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d109      	bne.n	800738c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f103 0214 	add.w	r2, r3, #20
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0c1b      	lsrs	r3, r3, #16
 8007382:	b29b      	uxth	r3, r3
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f7ff f821 	bl	80063ce <st_word>
	}
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80073a2:	2100      	movs	r1, #0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff fe2f 	bl	8007008 <dir_sdi>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <dir_find+0x24>
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	e03e      	b.n	8007436 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	4619      	mov	r1, r3
 80073be:	6938      	ldr	r0, [r7, #16]
 80073c0:	f7ff faaa 	bl	8006918 <move_window>
 80073c4:	4603      	mov	r3, r0
 80073c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12f      	bne.n	800742e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d102      	bne.n	80073e2 <dir_find+0x4e>
 80073dc:	2304      	movs	r3, #4
 80073de:	75fb      	strb	r3, [r7, #23]
 80073e0:	e028      	b.n	8007434 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	330b      	adds	r3, #11
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	330b      	adds	r3, #11
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <dir_find+0x86>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a18      	ldr	r0, [r3, #32]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	220b      	movs	r2, #11
 800740e:	4619      	mov	r1, r3
 8007410:	f7ff f85f 	bl	80064d2 <mem_cmp>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00b      	beq.n	8007432 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800741a:	2100      	movs	r1, #0
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fe6e 	bl	80070fe <dir_next>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0c5      	beq.n	80073b8 <dir_find+0x24>
 800742c:	e002      	b.n	8007434 <dir_find+0xa0>
		if (res != FR_OK) break;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007432:	bf00      	nop

	return res;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800744c:	2101      	movs	r1, #1
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff ff1a 	bl	8007288 <dir_alloc>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d11c      	bne.n	8007498 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	4619      	mov	r1, r3
 8007464:	68b8      	ldr	r0, [r7, #8]
 8007466:	f7ff fa57 	bl	8006918 <move_window>
 800746a:	4603      	mov	r3, r0
 800746c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d111      	bne.n	8007498 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	2220      	movs	r2, #32
 800747a:	2100      	movs	r1, #0
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff f80e 	bl	800649e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a18      	ldr	r0, [r3, #32]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3324      	adds	r3, #36	; 0x24
 800748a:	220b      	movs	r2, #11
 800748c:	4619      	mov	r1, r3
 800748e:	f7fe ffe5 	bl	800645c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2201      	movs	r2, #1
 8007496:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3324      	adds	r3, #36	; 0x24
 80074b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80074ba:	220b      	movs	r2, #11
 80074bc:	2120      	movs	r1, #32
 80074be:	68b8      	ldr	r0, [r7, #8]
 80074c0:	f7fe ffed 	bl	800649e <mem_set>
	si = i = 0; ni = 8;
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	2308      	movs	r3, #8
 80074ce:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	617a      	str	r2, [r7, #20]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80074de:	7ffb      	ldrb	r3, [r7, #31]
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d94e      	bls.n	8007582 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80074e4:	7ffb      	ldrb	r3, [r7, #31]
 80074e6:	2b2f      	cmp	r3, #47	; 0x2f
 80074e8:	d006      	beq.n	80074f8 <create_name+0x54>
 80074ea:	7ffb      	ldrb	r3, [r7, #31]
 80074ec:	2b5c      	cmp	r3, #92	; 0x5c
 80074ee:	d110      	bne.n	8007512 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80074f0:	e002      	b.n	80074f8 <create_name+0x54>
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	3301      	adds	r3, #1
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	4413      	add	r3, r2
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b2f      	cmp	r3, #47	; 0x2f
 8007502:	d0f6      	beq.n	80074f2 <create_name+0x4e>
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b5c      	cmp	r3, #92	; 0x5c
 800750e:	d0f0      	beq.n	80074f2 <create_name+0x4e>
			break;
 8007510:	e038      	b.n	8007584 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007512:	7ffb      	ldrb	r3, [r7, #31]
 8007514:	2b2e      	cmp	r3, #46	; 0x2e
 8007516:	d003      	beq.n	8007520 <create_name+0x7c>
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	d30c      	bcc.n	800753a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	2b0b      	cmp	r3, #11
 8007524:	d002      	beq.n	800752c <create_name+0x88>
 8007526:	7ffb      	ldrb	r3, [r7, #31]
 8007528:	2b2e      	cmp	r3, #46	; 0x2e
 800752a:	d001      	beq.n	8007530 <create_name+0x8c>
 800752c:	2306      	movs	r3, #6
 800752e:	e044      	b.n	80075ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007530:	2308      	movs	r3, #8
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	230b      	movs	r3, #11
 8007536:	61bb      	str	r3, [r7, #24]
			continue;
 8007538:	e022      	b.n	8007580 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800753a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800753e:	2b00      	cmp	r3, #0
 8007540:	da04      	bge.n	800754c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007542:	7ffb      	ldrb	r3, [r7, #31]
 8007544:	3b80      	subs	r3, #128	; 0x80
 8007546:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <create_name+0x120>)
 8007548:	5cd3      	ldrb	r3, [r2, r3]
 800754a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800754c:	7ffb      	ldrb	r3, [r7, #31]
 800754e:	4619      	mov	r1, r3
 8007550:	481d      	ldr	r0, [pc, #116]	; (80075c8 <create_name+0x124>)
 8007552:	f7fe ffe5 	bl	8006520 <chk_chr>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <create_name+0xbc>
 800755c:	2306      	movs	r3, #6
 800755e:	e02c      	b.n	80075ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007560:	7ffb      	ldrb	r3, [r7, #31]
 8007562:	2b60      	cmp	r3, #96	; 0x60
 8007564:	d905      	bls.n	8007572 <create_name+0xce>
 8007566:	7ffb      	ldrb	r3, [r7, #31]
 8007568:	2b7a      	cmp	r3, #122	; 0x7a
 800756a:	d802      	bhi.n	8007572 <create_name+0xce>
 800756c:	7ffb      	ldrb	r3, [r7, #31]
 800756e:	3b20      	subs	r3, #32
 8007570:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	613a      	str	r2, [r7, #16]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	4413      	add	r3, r2
 800757c:	7ffa      	ldrb	r2, [r7, #31]
 800757e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007580:	e7a6      	b.n	80074d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007582:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	441a      	add	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <create_name+0xf4>
 8007594:	2306      	movs	r3, #6
 8007596:	e010      	b.n	80075ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2be5      	cmp	r3, #229	; 0xe5
 800759e:	d102      	bne.n	80075a6 <create_name+0x102>
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2205      	movs	r2, #5
 80075a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d801      	bhi.n	80075b0 <create_name+0x10c>
 80075ac:	2204      	movs	r2, #4
 80075ae:	e000      	b.n	80075b2 <create_name+0x10e>
 80075b0:	2200      	movs	r2, #0
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	330b      	adds	r3, #11
 80075b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80075b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	0800c6a8 	.word	0x0800c6a8
 80075c8:	0800c628 	.word	0x0800c628

080075cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80075e0:	e002      	b.n	80075e8 <follow_path+0x1c>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	3301      	adds	r3, #1
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b2f      	cmp	r3, #47	; 0x2f
 80075ee:	d0f8      	beq.n	80075e2 <follow_path+0x16>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b5c      	cmp	r3, #92	; 0x5c
 80075f6:	d0f4      	beq.n	80075e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2200      	movs	r2, #0
 80075fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b1f      	cmp	r3, #31
 8007604:	d80a      	bhi.n	800761c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2280      	movs	r2, #128	; 0x80
 800760a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800760e:	2100      	movs	r1, #0
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fcf9 	bl	8007008 <dir_sdi>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]
 800761a:	e043      	b.n	80076a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800761c:	463b      	mov	r3, r7
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff ff3f 	bl	80074a4 <create_name>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d134      	bne.n	800769a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff feaf 	bl	8007394 <dir_find>
 8007636:	4603      	mov	r3, r0
 8007638:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007640:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	2b04      	cmp	r3, #4
 800764c:	d127      	bne.n	800769e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d122      	bne.n	800769e <follow_path+0xd2>
 8007658:	2305      	movs	r3, #5
 800765a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800765c:	e01f      	b.n	800769e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11c      	bne.n	80076a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	799b      	ldrb	r3, [r3, #6]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007674:	2305      	movs	r3, #5
 8007676:	75fb      	strb	r3, [r7, #23]
 8007678:	e014      	b.n	80076a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007688:	4413      	add	r3, r2
 800768a:	4619      	mov	r1, r3
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fe42 	bl	8007316 <ld_clust>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007698:	e7c0      	b.n	800761c <follow_path+0x50>
			if (res != FR_OK) break;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <follow_path+0xd8>
				break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80076a2:	bf00      	nop
			}
		}
	}

	return res;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b087      	sub	sp, #28
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80076b6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d031      	beq.n	8007728 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	e002      	b.n	80076d2 <get_ldnumber+0x24>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	3301      	adds	r3, #1
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d903      	bls.n	80076e2 <get_ldnumber+0x34>
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b3a      	cmp	r3, #58	; 0x3a
 80076e0:	d1f4      	bne.n	80076cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b3a      	cmp	r3, #58	; 0x3a
 80076e8:	d11c      	bne.n	8007724 <get_ldnumber+0x76>
			tp = *path;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	60fa      	str	r2, [r7, #12]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	3b30      	subs	r3, #48	; 0x30
 80076fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d80e      	bhi.n	8007720 <get_ldnumber+0x72>
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	429a      	cmp	r2, r3
 8007708:	d10a      	bne.n	8007720 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <get_ldnumber+0x72>
					vol = (int)i;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	3301      	adds	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	e002      	b.n	800772a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007724:	2300      	movs	r3, #0
 8007726:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007728:	693b      	ldr	r3, [r7, #16]
}
 800772a:	4618      	mov	r0, r3
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	70da      	strb	r2, [r3, #3]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f04f 32ff 	mov.w	r2, #4294967295
 800774e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff f8e0 	bl	8006918 <move_window>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <check_fs+0x2a>
 800775e:	2304      	movs	r3, #4
 8007760:	e038      	b.n	80077d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3334      	adds	r3, #52	; 0x34
 8007766:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fdf4 	bl	8006358 <ld_word>
 8007770:	4603      	mov	r3, r0
 8007772:	461a      	mov	r2, r3
 8007774:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007778:	429a      	cmp	r2, r3
 800777a:	d001      	beq.n	8007780 <check_fs+0x48>
 800777c:	2303      	movs	r3, #3
 800777e:	e029      	b.n	80077d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007786:	2be9      	cmp	r3, #233	; 0xe9
 8007788:	d009      	beq.n	800779e <check_fs+0x66>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007790:	2beb      	cmp	r3, #235	; 0xeb
 8007792:	d11e      	bne.n	80077d2 <check_fs+0x9a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800779a:	2b90      	cmp	r3, #144	; 0x90
 800779c:	d119      	bne.n	80077d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3334      	adds	r3, #52	; 0x34
 80077a2:	3336      	adds	r3, #54	; 0x36
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fe fdef 	bl	8006388 <ld_dword>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <check_fs+0xa4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d101      	bne.n	80077ba <check_fs+0x82>
 80077b6:	2300      	movs	r3, #0
 80077b8:	e00c      	b.n	80077d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3334      	adds	r3, #52	; 0x34
 80077be:	3352      	adds	r3, #82	; 0x52
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fe fde1 	bl	8006388 <ld_dword>
 80077c6:	4602      	mov	r2, r0
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <check_fs+0xa8>)
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d101      	bne.n	80077d2 <check_fs+0x9a>
 80077ce:	2300      	movs	r3, #0
 80077d0:	e000      	b.n	80077d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80077d2:	2302      	movs	r3, #2
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	00544146 	.word	0x00544146
 80077e0:	33544146 	.word	0x33544146

080077e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b096      	sub	sp, #88	; 0x58
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7ff ff58 	bl	80076ae <get_ldnumber>
 80077fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	da01      	bge.n	800780a <find_volume+0x26>
 8007806:	230b      	movs	r3, #11
 8007808:	e236      	b.n	8007c78 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800780a:	4aac      	ldr	r2, [pc, #688]	; (8007abc <find_volume+0x2d8>)
 800780c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800780e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007812:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <find_volume+0x3a>
 800781a:	230c      	movs	r3, #12
 800781c:	e22c      	b.n	8007c78 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800781e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007820:	f7fe fe99 	bl	8006556 <lock_fs>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <find_volume+0x4a>
 800782a:	230f      	movs	r3, #15
 800782c:	e224      	b.n	8007c78 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007832:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	f023 0301 	bic.w	r3, r3, #1
 800783a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01a      	beq.n	800787a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe fce7 	bl	800621c <disk_status>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10c      	bne.n	800787a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <find_volume+0x92>
 8007866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007872:	230a      	movs	r3, #10
 8007874:	e200      	b.n	8007c78 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8007876:	2300      	movs	r3, #0
 8007878:	e1fe      	b.n	8007c78 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007882:	b2da      	uxtb	r2, r3
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fcdf 	bl	8006250 <disk_initialize>
 8007892:	4603      	mov	r3, r0
 8007894:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80078a4:	2303      	movs	r3, #3
 80078a6:	e1e7      	b.n	8007c78 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <find_volume+0xda>
 80078ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80078ba:	230a      	movs	r3, #10
 80078bc:	e1dc      	b.n	8007c78 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80078c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078c6:	f7ff ff37 	bl	8007738 <check_fs>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80078d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d14b      	bne.n	8007970 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80078d8:	2300      	movs	r3, #0
 80078da:	643b      	str	r3, [r7, #64]	; 0x40
 80078dc:	e01f      	b.n	800791e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80078e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80078ec:	4413      	add	r3, r2
 80078ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	3304      	adds	r3, #4
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d006      	beq.n	8007908 <find_volume+0x124>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	3308      	adds	r3, #8
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fd42 	bl	8006388 <ld_dword>
 8007904:	4602      	mov	r2, r0
 8007906:	e000      	b.n	800790a <find_volume+0x126>
 8007908:	2200      	movs	r2, #0
 800790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007912:	440b      	add	r3, r1
 8007914:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800791a:	3301      	adds	r3, #1
 800791c:	643b      	str	r3, [r7, #64]	; 0x40
 800791e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007920:	2b03      	cmp	r3, #3
 8007922:	d9dc      	bls.n	80078de <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007924:	2300      	movs	r3, #0
 8007926:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <find_volume+0x150>
 800792e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007930:	3b01      	subs	r3, #1
 8007932:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800793c:	4413      	add	r3, r2
 800793e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007942:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <find_volume+0x172>
 800794a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800794c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800794e:	f7ff fef3 	bl	8007738 <check_fs>
 8007952:	4603      	mov	r3, r0
 8007954:	e000      	b.n	8007958 <find_volume+0x174>
 8007956:	2303      	movs	r3, #3
 8007958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800795c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007960:	2b01      	cmp	r3, #1
 8007962:	d905      	bls.n	8007970 <find_volume+0x18c>
 8007964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007966:	3301      	adds	r3, #1
 8007968:	643b      	str	r3, [r7, #64]	; 0x40
 800796a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796c:	2b03      	cmp	r3, #3
 800796e:	d9e1      	bls.n	8007934 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007974:	2b04      	cmp	r3, #4
 8007976:	d101      	bne.n	800797c <find_volume+0x198>
 8007978:	2301      	movs	r3, #1
 800797a:	e17d      	b.n	8007c78 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800797c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007980:	2b01      	cmp	r3, #1
 8007982:	d901      	bls.n	8007988 <find_volume+0x1a4>
 8007984:	230d      	movs	r3, #13
 8007986:	e177      	b.n	8007c78 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	3334      	adds	r3, #52	; 0x34
 800798c:	330b      	adds	r3, #11
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fce2 	bl	8006358 <ld_word>
 8007994:	4603      	mov	r3, r0
 8007996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800799a:	d001      	beq.n	80079a0 <find_volume+0x1bc>
 800799c:	230d      	movs	r3, #13
 800799e:	e16b      	b.n	8007c78 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	3334      	adds	r3, #52	; 0x34
 80079a4:	3316      	adds	r3, #22
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fcd6 	bl	8006358 <ld_word>
 80079ac:	4603      	mov	r3, r0
 80079ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80079b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <find_volume+0x1e0>
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	3334      	adds	r3, #52	; 0x34
 80079ba:	3324      	adds	r3, #36	; 0x24
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fce3 	bl	8006388 <ld_dword>
 80079c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079c8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	789b      	ldrb	r3, [r3, #2]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d005      	beq.n	80079e8 <find_volume+0x204>
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	789b      	ldrb	r3, [r3, #2]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d001      	beq.n	80079e8 <find_volume+0x204>
 80079e4:	230d      	movs	r3, #13
 80079e6:	e147      	b.n	8007c78 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	789b      	ldrb	r3, [r3, #2]
 80079ec:	461a      	mov	r2, r3
 80079ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80079f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	895b      	ldrh	r3, [r3, #10]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <find_volume+0x238>
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	895b      	ldrh	r3, [r3, #10]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	895b      	ldrh	r3, [r3, #10]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	4013      	ands	r3, r2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <find_volume+0x23c>
 8007a1c:	230d      	movs	r3, #13
 8007a1e:	e12b      	b.n	8007c78 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	3334      	adds	r3, #52	; 0x34
 8007a24:	3311      	adds	r3, #17
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fc96 	bl	8006358 <ld_word>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	891b      	ldrh	r3, [r3, #8]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <find_volume+0x262>
 8007a42:	230d      	movs	r3, #13
 8007a44:	e118      	b.n	8007c78 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	3334      	adds	r3, #52	; 0x34
 8007a4a:	3313      	adds	r3, #19
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fc83 	bl	8006358 <ld_word>
 8007a52:	4603      	mov	r3, r0
 8007a54:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <find_volume+0x286>
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5e:	3334      	adds	r3, #52	; 0x34
 8007a60:	3320      	adds	r3, #32
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fc90 	bl	8006388 <ld_dword>
 8007a68:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	3334      	adds	r3, #52	; 0x34
 8007a6e:	330e      	adds	r3, #14
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fc71 	bl	8006358 <ld_word>
 8007a76:	4603      	mov	r3, r0
 8007a78:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <find_volume+0x2a0>
 8007a80:	230d      	movs	r3, #13
 8007a82:	e0f9      	b.n	8007c78 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a88:	4413      	add	r3, r2
 8007a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a8c:	8912      	ldrh	r2, [r2, #8]
 8007a8e:	0912      	lsrs	r2, r2, #4
 8007a90:	b292      	uxth	r2, r2
 8007a92:	4413      	add	r3, r2
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d201      	bcs.n	8007aa2 <find_volume+0x2be>
 8007a9e:	230d      	movs	r3, #13
 8007aa0:	e0ea      	b.n	8007c78 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aaa:	8952      	ldrh	r2, [r2, #10]
 8007aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <find_volume+0x2dc>
 8007ab8:	230d      	movs	r3, #13
 8007aba:	e0dd      	b.n	8007c78 <find_volume+0x494>
 8007abc:	2000055c 	.word	0x2000055c
		fmt = FS_FAT32;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d802      	bhi.n	8007ad6 <find_volume+0x2f2>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d802      	bhi.n	8007ae6 <find_volume+0x302>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	1c9a      	adds	r2, r3, #2
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007af2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007af4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af8:	441a      	add	r2, r3
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007afe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	441a      	add	r2, r3
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d11e      	bne.n	8007b4e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	3334      	adds	r3, #52	; 0x34
 8007b14:	332a      	adds	r3, #42	; 0x2a
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fc1e 	bl	8006358 <ld_word>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <find_volume+0x342>
 8007b22:	230d      	movs	r3, #13
 8007b24:	e0a8      	b.n	8007c78 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	891b      	ldrh	r3, [r3, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <find_volume+0x34e>
 8007b2e:	230d      	movs	r3, #13
 8007b30:	e0a2      	b.n	8007c78 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	3334      	adds	r3, #52	; 0x34
 8007b36:	332c      	adds	r3, #44	; 0x2c
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fe fc25 	bl	8006388 <ld_dword>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b4c:	e01f      	b.n	8007b8e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	891b      	ldrh	r3, [r3, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <find_volume+0x376>
 8007b56:	230d      	movs	r3, #13
 8007b58:	e08e      	b.n	8007c78 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b60:	441a      	add	r2, r3
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d103      	bne.n	8007b76 <find_volume+0x392>
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	e00a      	b.n	8007b8c <find_volume+0x3a8>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	4413      	add	r3, r2
 8007b80:	085a      	lsrs	r2, r3, #1
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b8c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	69da      	ldr	r2, [r3, #28]
 8007b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b94:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007b98:	0a5b      	lsrs	r3, r3, #9
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d201      	bcs.n	8007ba2 <find_volume+0x3be>
 8007b9e:	230d      	movs	r3, #13
 8007ba0:	e06a      	b.n	8007c78 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	615a      	str	r2, [r3, #20]
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	2280      	movs	r2, #128	; 0x80
 8007bb6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007bb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d149      	bne.n	8007c54 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	3334      	adds	r3, #52	; 0x34
 8007bc4:	3330      	adds	r3, #48	; 0x30
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fbc6 	bl	8006358 <ld_word>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d140      	bne.n	8007c54 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bda:	f7fe fe9d 	bl	8006918 <move_window>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d137      	bne.n	8007c54 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	2200      	movs	r2, #0
 8007be8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	3334      	adds	r3, #52	; 0x34
 8007bee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fbb0 	bl	8006358 <ld_word>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d127      	bne.n	8007c54 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	3334      	adds	r3, #52	; 0x34
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fbbd 	bl	8006388 <ld_dword>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	4b1b      	ldr	r3, [pc, #108]	; (8007c80 <find_volume+0x49c>)
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d11e      	bne.n	8007c54 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	3334      	adds	r3, #52	; 0x34
 8007c1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fbb2 	bl	8006388 <ld_dword>
 8007c24:	4602      	mov	r2, r0
 8007c26:	4b17      	ldr	r3, [pc, #92]	; (8007c84 <find_volume+0x4a0>)
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d113      	bne.n	8007c54 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	3334      	adds	r3, #52	; 0x34
 8007c30:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe fba7 	bl	8006388 <ld_dword>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	3334      	adds	r3, #52	; 0x34
 8007c44:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fb9d 	bl	8006388 <ld_dword>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007c5a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <find_volume+0x4a4>)
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	3301      	adds	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <find_volume+0x4a4>)
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <find_volume+0x4a4>)
 8007c6a:	881a      	ldrh	r2, [r3, #0]
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007c70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c72:	f7fe fde9 	bl	8006848 <clear_lock>
#endif
	return FR_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3758      	adds	r7, #88	; 0x58
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	41615252 	.word	0x41615252
 8007c84:	61417272 	.word	0x61417272
 8007c88:	20000560 	.word	0x20000560

08007c8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c96:	2309      	movs	r3, #9
 8007c98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d02e      	beq.n	8007cfe <validate+0x72>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d02a      	beq.n	8007cfe <validate+0x72>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d025      	beq.n	8007cfe <validate+0x72>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	889a      	ldrh	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d11e      	bne.n	8007cfe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fe fc46 	bl	8006556 <lock_fs>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d014      	beq.n	8007cfa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe faa0 	bl	800621c <disk_status>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <validate+0x60>
				res = FR_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
 8007cea:	e008      	b.n	8007cfe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fc45 	bl	8006582 <unlock_fs>
 8007cf8:	e001      	b.n	8007cfe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007cfa:	230f      	movs	r3, #15
 8007cfc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <validate+0x7e>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	e000      	b.n	8007d0c <validate+0x80>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	6013      	str	r3, [r2, #0]
	return res;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007d2e:	f107 0310 	add.w	r3, r7, #16
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fcbb 	bl	80076ae <get_ldnumber>
 8007d38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	da01      	bge.n	8007d44 <f_mount+0x28>
 8007d40:	230b      	movs	r3, #11
 8007d42:	e048      	b.n	8007dd6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d44:	4a26      	ldr	r2, [pc, #152]	; (8007de0 <f_mount+0xc4>)
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00f      	beq.n	8007d74 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d54:	69b8      	ldr	r0, [r7, #24]
 8007d56:	f7fe fd77 	bl	8006848 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fcdf 	bl	8008722 <ff_del_syncobj>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <f_mount+0x52>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e033      	b.n	8007dd6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00f      	beq.n	8007d9a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	330c      	adds	r3, #12
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f000 fca9 	bl	80086e2 <ff_cre_syncobj>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <f_mount+0x7e>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e01d      	b.n	8007dd6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4910      	ldr	r1, [pc, #64]	; (8007de0 <f_mount+0xc4>)
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <f_mount+0x94>
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d001      	beq.n	8007db4 <f_mount+0x98>
 8007db0:	2300      	movs	r3, #0
 8007db2:	e010      	b.n	8007dd6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007db4:	f107 010c 	add.w	r1, r7, #12
 8007db8:	f107 0308 	add.w	r3, r7, #8
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fd10 	bl	80077e4 <find_volume>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	7dfa      	ldrb	r2, [r7, #23]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fbd7 	bl	8006582 <unlock_fs>
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3720      	adds	r7, #32
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	2000055c 	.word	0x2000055c

08007de4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b098      	sub	sp, #96	; 0x60
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <f_open+0x18>
 8007df8:	2309      	movs	r3, #9
 8007dfa:	e1b4      	b.n	8008166 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007e04:	79fa      	ldrb	r2, [r7, #7]
 8007e06:	f107 0110 	add.w	r1, r7, #16
 8007e0a:	f107 0308 	add.w	r3, r7, #8
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff fce8 	bl	80077e4 <find_volume>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f040 8191 	bne.w	8008146 <f_open+0x362>
		dj.obj.fs = fs;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	f107 0314 	add.w	r3, r7, #20
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff fbcb 	bl	80075cc <follow_path>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11a      	bne.n	8007e7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007e44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e48:	b25b      	sxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da03      	bge.n	8007e56 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007e4e:	2306      	movs	r3, #6
 8007e50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007e54:	e011      	b.n	8007e7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bf14      	ite	ne
 8007e60:	2301      	movne	r3, #1
 8007e62:	2300      	moveq	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	461a      	mov	r2, r3
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fba2 	bl	80065b8 <chk_lock>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	f003 031c 	and.w	r3, r3, #28
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d07f      	beq.n	8007f84 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d017      	beq.n	8007ebc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d10e      	bne.n	8007eb2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e94:	f7fe fbec 	bl	8006670 <enq_lock>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d006      	beq.n	8007eac <f_open+0xc8>
 8007e9e:	f107 0314 	add.w	r3, r7, #20
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff facb 	bl	800743e <dir_register>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	e000      	b.n	8007eae <f_open+0xca>
 8007eac:	2312      	movs	r3, #18
 8007eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	f043 0308 	orr.w	r3, r3, #8
 8007eb8:	71fb      	strb	r3, [r7, #7]
 8007eba:	e010      	b.n	8007ede <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ebc:	7ebb      	ldrb	r3, [r7, #26]
 8007ebe:	f003 0311 	and.w	r3, r3, #17
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <f_open+0xea>
					res = FR_DENIED;
 8007ec6:	2307      	movs	r3, #7
 8007ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007ecc:	e007      	b.n	8007ede <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <f_open+0xfa>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007ede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d168      	bne.n	8007fb8 <f_open+0x1d4>
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d063      	beq.n	8007fb8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007ef0:	f7fd ff40 	bl	8005d74 <get_fattime>
 8007ef4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef8:	330e      	adds	r3, #14
 8007efa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fa81 	bl	8006404 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	3316      	adds	r3, #22
 8007f06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe fa7b 	bl	8006404 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	330b      	adds	r3, #11
 8007f12:	2220      	movs	r2, #32
 8007f14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff f9fa 	bl	8007316 <ld_clust>
 8007f22:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff fa12 	bl	8007354 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f32:	331c      	adds	r3, #28
 8007f34:	2100      	movs	r1, #0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fa64 	bl	8006404 <st_dword>
					fs->wflag = 1;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d037      	beq.n	8007fb8 <f_open+0x1d4>
						dw = fs->winsect;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007f4e:	f107 0314 	add.w	r3, r7, #20
 8007f52:	2200      	movs	r2, #0
 8007f54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe ff25 	bl	8006da6 <remove_chain>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d126      	bne.n	8007fb8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fcd2 	bl	8006918 <move_window>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f7e:	3a01      	subs	r2, #1
 8007f80:	611a      	str	r2, [r3, #16]
 8007f82:	e019      	b.n	8007fb8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d115      	bne.n	8007fb8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007f8c:	7ebb      	ldrb	r3, [r7, #26]
 8007f8e:	f003 0310 	and.w	r3, r3, #16
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007f96:	2304      	movs	r3, #4
 8007f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007f9c:	e00c      	b.n	8007fb8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <f_open+0x1d4>
 8007fa8:	7ebb      	ldrb	r3, [r7, #26]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <f_open+0x1d4>
						res = FR_DENIED;
 8007fb2:	2307      	movs	r3, #7
 8007fb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d128      	bne.n	8008012 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	f003 0308 	and.w	r3, r3, #8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf14      	ite	ne
 8007fea:	2301      	movne	r3, #1
 8007fec:	2300      	moveq	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f107 0314 	add.w	r3, r7, #20
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fb5b 	bl	80066b4 <inc_lock>
 8007ffe:	4602      	mov	r2, r0
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d102      	bne.n	8008012 <f_open+0x22e>
 800800c:	2302      	movs	r3, #2
 800800e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008016:	2b00      	cmp	r3, #0
 8008018:	f040 8095 	bne.w	8008146 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008020:	4611      	mov	r1, r2
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff f977 	bl	8007316 <ld_clust>
 8008028:	4602      	mov	r2, r0
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800802e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008030:	331c      	adds	r3, #28
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe f9a8 	bl	8006388 <ld_dword>
 8008038:	4602      	mov	r2, r0
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	88da      	ldrh	r2, [r3, #6]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	79fa      	ldrb	r2, [r7, #7]
 8008056:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3330      	adds	r3, #48	; 0x30
 800806e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008072:	2100      	movs	r1, #0
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fa12 	bl	800649e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	d060      	beq.n	8008146 <f_open+0x362>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d05c      	beq.n	8008146 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	895b      	ldrh	r3, [r3, #10]
 8008098:	025b      	lsls	r3, r3, #9
 800809a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	657b      	str	r3, [r7, #84]	; 0x54
 80080a8:	e016      	b.n	80080d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fced 	bl	8006a8e <get_fat>
 80080b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80080b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d802      	bhi.n	80080c2 <f_open+0x2de>
 80080bc:	2302      	movs	r3, #2
 80080be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80080c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d102      	bne.n	80080d0 <f_open+0x2ec>
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	657b      	str	r3, [r7, #84]	; 0x54
 80080d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <f_open+0x304>
 80080e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d8e0      	bhi.n	80080aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80080ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d127      	bne.n	8008146 <f_open+0x362>
 80080f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d022      	beq.n	8008146 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fca3 	bl	8006a50 <clust2sect>
 800810a:	6478      	str	r0, [r7, #68]	; 0x44
 800810c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <f_open+0x336>
						res = FR_INT_ERR;
 8008112:	2302      	movs	r3, #2
 8008114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008118:	e015      	b.n	8008146 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800811a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800811c:	0a5a      	lsrs	r2, r3, #9
 800811e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008120:	441a      	add	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	7858      	ldrb	r0, [r3, #1]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a1a      	ldr	r2, [r3, #32]
 8008134:	2301      	movs	r3, #1
 8008136:	f7fe f8b1 	bl	800629c <disk_read>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <f_open+0x362>
 8008140:	2301      	movs	r3, #1
 8008142:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <f_open+0x370>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fa10 	bl	8006582 <unlock_fs>
 8008162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008166:	4618      	mov	r0, r3
 8008168:	3760      	adds	r7, #96	; 0x60
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b08e      	sub	sp, #56	; 0x38
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f107 0214 	add.w	r2, r7, #20
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fd7c 	bl	8007c8c <validate>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800819a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d107      	bne.n	80081b2 <f_read+0x44>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	7d5b      	ldrb	r3, [r3, #21]
 80081a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80081aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <f_read+0x58>
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe f9e1 	bl	8006582 <unlock_fs>
 80081c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081c4:	e13d      	b.n	8008442 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	7d1b      	ldrb	r3, [r3, #20]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <f_read+0x72>
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2107      	movs	r1, #7
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe f9d3 	bl	8006582 <unlock_fs>
 80081dc:	2307      	movs	r3, #7
 80081de:	e130      	b.n	8008442 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	f240 811c 	bls.w	800842e <f_read+0x2c0>
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80081fa:	e118      	b.n	800842e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 80e4 	bne.w	80083d2 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	0a5b      	lsrs	r3, r3, #9
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	8952      	ldrh	r2, [r2, #10]
 8008214:	3a01      	subs	r2, #1
 8008216:	4013      	ands	r3, r2
 8008218:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d139      	bne.n	8008294 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d103      	bne.n	8008230 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	633b      	str	r3, [r7, #48]	; 0x30
 800822e:	e013      	b.n	8008258 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	4619      	mov	r1, r3
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7fe feae 	bl	8006fa0 <clmt_clust>
 8008244:	6338      	str	r0, [r7, #48]	; 0x30
 8008246:	e007      	b.n	8008258 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	4619      	mov	r1, r3
 8008250:	4610      	mov	r0, r2
 8008252:	f7fe fc1c 	bl	8006a8e <get_fat>
 8008256:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	2b01      	cmp	r3, #1
 800825c:	d809      	bhi.n	8008272 <f_read+0x104>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2202      	movs	r2, #2
 8008262:	755a      	strb	r2, [r3, #21]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2102      	movs	r1, #2
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe f98a 	bl	8006582 <unlock_fs>
 800826e:	2302      	movs	r3, #2
 8008270:	e0e7      	b.n	8008442 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d109      	bne.n	800828e <f_read+0x120>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	755a      	strb	r2, [r3, #21]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2101      	movs	r1, #1
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe f97c 	bl	8006582 <unlock_fs>
 800828a:	2301      	movs	r3, #1
 800828c:	e0d9      	b.n	8008442 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008292:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	4619      	mov	r1, r3
 800829c:	4610      	mov	r0, r2
 800829e:	f7fe fbd7 	bl	8006a50 <clust2sect>
 80082a2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <f_read+0x150>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2202      	movs	r2, #2
 80082ae:	755a      	strb	r2, [r3, #21]
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2102      	movs	r1, #2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe f964 	bl	8006582 <unlock_fs>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e0c1      	b.n	8008442 <f_read+0x2d4>
			sect += csect;
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	0a5b      	lsrs	r3, r3, #9
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d03e      	beq.n	8008350 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	4413      	add	r3, r2
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	8952      	ldrh	r2, [r2, #10]
 80082dc:	4293      	cmp	r3, r2
 80082de:	d905      	bls.n	80082ec <f_read+0x17e>
					cc = fs->csize - csect;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	895b      	ldrh	r3, [r3, #10]
 80082e4:	461a      	mov	r2, r3
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	7858      	ldrb	r0, [r3, #1]
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082f6:	f7fd ffd1 	bl	800629c <disk_read>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d009      	beq.n	8008314 <f_read+0x1a6>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	755a      	strb	r2, [r3, #21]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2101      	movs	r1, #1
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe f939 	bl	8006582 <unlock_fs>
 8008310:	2301      	movs	r3, #1
 8008312:	e096      	b.n	8008442 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	7d1b      	ldrb	r3, [r3, #20]
 8008318:	b25b      	sxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	da14      	bge.n	8008348 <f_read+0x1da>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a1a      	ldr	r2, [r3, #32]
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008328:	429a      	cmp	r2, r3
 800832a:	d90d      	bls.n	8008348 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a1a      	ldr	r2, [r3, #32]
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	025b      	lsls	r3, r3, #9
 8008336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008338:	18d0      	adds	r0, r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3330      	adds	r3, #48	; 0x30
 800833e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008342:	4619      	mov	r1, r3
 8008344:	f7fe f88a 	bl	800645c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	025b      	lsls	r3, r3, #9
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800834e:	e05a      	b.n	8008406 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	429a      	cmp	r2, r3
 8008358:	d038      	beq.n	80083cc <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	7d1b      	ldrb	r3, [r3, #20]
 800835e:	b25b      	sxtb	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	da1d      	bge.n	80083a0 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	7858      	ldrb	r0, [r3, #1]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a1a      	ldr	r2, [r3, #32]
 8008372:	2301      	movs	r3, #1
 8008374:	f7fd ffb2 	bl	80062dc <disk_write>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <f_read+0x224>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	755a      	strb	r2, [r3, #21]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2101      	movs	r1, #1
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe f8fa 	bl	8006582 <unlock_fs>
 800838e:	2301      	movs	r3, #1
 8008390:	e057      	b.n	8008442 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	7d1b      	ldrb	r3, [r3, #20]
 8008396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839a:	b2da      	uxtb	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	7858      	ldrb	r0, [r3, #1]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083aa:	2301      	movs	r3, #1
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	f7fd ff75 	bl	800629c <disk_read>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d009      	beq.n	80083cc <f_read+0x25e>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	755a      	strb	r2, [r3, #21]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2101      	movs	r1, #1
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe f8dd 	bl	8006582 <unlock_fs>
 80083c8:	2301      	movs	r3, #1
 80083ca:	e03a      	b.n	8008442 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80083e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d901      	bls.n	80083ec <f_read+0x27e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fa:	4413      	add	r3, r2
 80083fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083fe:	4619      	mov	r1, r3
 8008400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008402:	f7fe f82b 	bl	800645c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	4413      	add	r3, r2
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	441a      	add	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	619a      	str	r2, [r3, #24]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	441a      	add	r2, r3
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f47f aee3 	bne.w	80081fc <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2100      	movs	r1, #0
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe f8a1 	bl	8006582 <unlock_fs>
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3738      	adds	r7, #56	; 0x38
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b086      	sub	sp, #24
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f107 0208 	add.w	r2, r7, #8
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff fc16 	bl	8007c8c <validate>
 8008460:	4603      	mov	r3, r0
 8008462:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d16d      	bne.n	8008546 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7d1b      	ldrb	r3, [r3, #20]
 800846e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	d067      	beq.n	8008546 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	7d1b      	ldrb	r3, [r3, #20]
 800847a:	b25b      	sxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	da1a      	bge.n	80084b6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	7858      	ldrb	r0, [r3, #1]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1a      	ldr	r2, [r3, #32]
 800848e:	2301      	movs	r3, #1
 8008490:	f7fd ff24 	bl	80062dc <disk_write>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d006      	beq.n	80084a8 <f_sync+0x5e>
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2101      	movs	r1, #1
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe f86f 	bl	8006582 <unlock_fs>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e055      	b.n	8008554 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	7d1b      	ldrb	r3, [r3, #20]
 80084ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80084b6:	f7fd fc5d 	bl	8005d74 <get_fattime>
 80084ba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	4619      	mov	r1, r3
 80084c4:	4610      	mov	r0, r2
 80084c6:	f7fe fa27 	bl	8006918 <move_window>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d138      	bne.n	8008546 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	330b      	adds	r3, #11
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	330b      	adds	r3, #11
 80084e4:	f042 0220 	orr.w	r2, r2, #32
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	461a      	mov	r2, r3
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	f7fe ff2c 	bl	8007354 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f103 021c 	add.w	r2, r3, #28
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	4619      	mov	r1, r3
 8008508:	4610      	mov	r0, r2
 800850a:	f7fd ff7b 	bl	8006404 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3316      	adds	r3, #22
 8008512:	6939      	ldr	r1, [r7, #16]
 8008514:	4618      	mov	r0, r3
 8008516:	f7fd ff75 	bl	8006404 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3312      	adds	r3, #18
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f7fd ff54 	bl	80063ce <st_word>
					fs->wflag = 1;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2201      	movs	r2, #1
 800852a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fa20 	bl	8006974 <sync_fs>
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7d1b      	ldrb	r3, [r3, #20]
 800853c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008540:	b2da      	uxtb	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	7dfa      	ldrb	r2, [r7, #23]
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe f818 	bl	8006582 <unlock_fs>
 8008552:	7dfb      	ldrb	r3, [r7, #23]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff ff70 	bl	800844a <f_sync>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d11d      	bne.n	80085b0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f107 0208 	add.w	r2, r7, #8
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff fb85 	bl	8007c8c <validate>
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d111      	bne.n	80085b0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe f91d 	bl	80067d0 <dec_lock>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fd ffe9 	bl	8006582 <unlock_fs>
#endif
		}
	}
	return res;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b088      	sub	sp, #32
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
	int n = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80085ce:	e017      	b.n	8008600 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	f107 0114 	add.w	r1, r7, #20
 80085d8:	2201      	movs	r2, #1
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff fdc7 	bl	800816e <f_read>
		if (rc != 1) break;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d112      	bne.n	800860c <f_gets+0x52>
		c = s[0];
 80085e6:	7d3b      	ldrb	r3, [r7, #20]
 80085e8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	61ba      	str	r2, [r7, #24]
 80085f0:	7dfa      	ldrb	r2, [r7, #23]
 80085f2:	701a      	strb	r2, [r3, #0]
		n++;
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	3301      	adds	r3, #1
 80085f8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	2b0a      	cmp	r3, #10
 80085fe:	d007      	beq.n	8008610 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	3b01      	subs	r3, #1
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	429a      	cmp	r2, r3
 8008608:	dbe2      	blt.n	80085d0 <f_gets+0x16>
 800860a:	e002      	b.n	8008612 <f_gets+0x58>
		if (rc != 1) break;
 800860c:	bf00      	nop
 800860e:	e000      	b.n	8008612 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8008610:	bf00      	nop
	}
	*p = 0;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <f_gets+0x68>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	e000      	b.n	8008624 <f_gets+0x6a>
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3720      	adds	r7, #32
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008642:	4b1f      	ldr	r3, [pc, #124]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008644:	7a5b      	ldrb	r3, [r3, #9]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d131      	bne.n	80086b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800864c:	4b1c      	ldr	r3, [pc, #112]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 800864e:	7a5b      	ldrb	r3, [r3, #9]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	4b1a      	ldr	r3, [pc, #104]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008656:	2100      	movs	r1, #0
 8008658:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800865a:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 800865c:	7a5b      	ldrb	r3, [r3, #9]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	4a17      	ldr	r2, [pc, #92]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800866a:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 800866c:	7a5b      	ldrb	r3, [r3, #9]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008674:	4413      	add	r3, r2
 8008676:	79fa      	ldrb	r2, [r7, #7]
 8008678:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800867a:	4b11      	ldr	r3, [pc, #68]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 800867c:	7a5b      	ldrb	r3, [r3, #9]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	b2d1      	uxtb	r1, r2
 8008684:	4a0e      	ldr	r2, [pc, #56]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008686:	7251      	strb	r1, [r2, #9]
 8008688:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800868a:	7dbb      	ldrb	r3, [r7, #22]
 800868c:	3330      	adds	r3, #48	; 0x30
 800868e:	b2da      	uxtb	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	3301      	adds	r3, #1
 8008698:	223a      	movs	r2, #58	; 0x3a
 800869a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3302      	adds	r3, #2
 80086a0:	222f      	movs	r2, #47	; 0x2f
 80086a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	3303      	adds	r3, #3
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	20000584 	.word	0x20000584

080086c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086ce:	2200      	movs	r2, #0
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff ffaa 	bl	800862c <FATFS_LinkDriverEx>
 80086d8:	4603      	mov	r3, r0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b086      	sub	sp, #24
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	4603      	mov	r3, r0
 80086ea:	6039      	str	r1, [r7, #0]
 80086ec:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	2300      	movs	r3, #0
 80086f4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80086f6:	f107 030c 	add.w	r3, r7, #12
 80086fa:	2101      	movs	r1, #1
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 f8d5 	bl	80088ac <osSemaphoreCreate>
 8008702:	4602      	mov	r2, r0
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	bf14      	ite	ne
 8008710:	2301      	movne	r3, #1
 8008712:	2300      	moveq	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	617b      	str	r3, [r7, #20]

    return ret;
 8008718:	697b      	ldr	r3, [r7, #20]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f976 	bl	8008a1c <osSemaphoreDelete>
#endif
    return 1;
 8008730:	2301      	movs	r3, #1
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008746:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8e2 	bl	8008914 <osSemaphoreWait>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8008756:	2301      	movs	r3, #1
 8008758:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800875a:	68fb      	ldr	r3, [r7, #12]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f91f 	bl	80089b0 <osSemaphoreRelease>
#endif
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	4603      	mov	r3, r0
 8008782:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800878c:	2b84      	cmp	r3, #132	; 0x84
 800878e:	d005      	beq.n	800879c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008790:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	3303      	adds	r3, #3
 800879a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800879c:	68fb      	ldr	r3, [r7, #12]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087b0:	f3ef 8305 	mrs	r3, IPSR
 80087b4:	607b      	str	r3, [r7, #4]
  return(result);
 80087b6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bf14      	ite	ne
 80087bc:	2301      	movne	r3, #1
 80087be:	2300      	moveq	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80087d2:	f001 fbb3 	bl	8009f3c <vTaskStartScheduler>
  
  return osOK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	bd80      	pop	{r7, pc}

080087dc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80087e0:	f001 ffc2 	bl	800a768 <xTaskGetSchedulerState>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d101      	bne.n	80087ee <osKernelRunning+0x12>
    return 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	e000      	b.n	80087f0 <osKernelRunning+0x14>
  else
    return 1;
 80087ee:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80087f8:	f7ff ffd7 	bl	80087aa <inHandlerMode>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008802:	f001 fcb3 	bl	800a16c <xTaskGetTickCountFromISR>
 8008806:	4603      	mov	r3, r0
 8008808:	e002      	b.n	8008810 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800880a:	f001 fc9f 	bl	800a14c <xTaskGetTickCount>
 800880e:	4603      	mov	r3, r0
  }
}
 8008810:	4618      	mov	r0, r3
 8008812:	bd80      	pop	{r7, pc}

08008814 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008816:	b089      	sub	sp, #36	; 0x24
 8008818:	af04      	add	r7, sp, #16
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d020      	beq.n	8008868 <osThreadCreate+0x54>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01c      	beq.n	8008868 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685c      	ldr	r4, [r3, #4]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681d      	ldr	r5, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691e      	ldr	r6, [r3, #16]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff ff9a 	bl	800877a <makeFreeRtosPriority>
 8008846:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008850:	9202      	str	r2, [sp, #8]
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	9100      	str	r1, [sp, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	4632      	mov	r2, r6
 800885a:	4629      	mov	r1, r5
 800885c:	4620      	mov	r0, r4
 800885e:	f001 f9a9 	bl	8009bb4 <xTaskCreateStatic>
 8008862:	4603      	mov	r3, r0
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	e01c      	b.n	80088a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685c      	ldr	r4, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008874:	b29e      	uxth	r6, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff ff7c 	bl	800877a <makeFreeRtosPriority>
 8008882:	4602      	mov	r2, r0
 8008884:	f107 030c 	add.w	r3, r7, #12
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	9200      	str	r2, [sp, #0]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	4632      	mov	r2, r6
 8008890:	4629      	mov	r1, r5
 8008892:	4620      	mov	r0, r4
 8008894:	f001 f9e8 	bl	8009c68 <xTaskCreate>
 8008898:	4603      	mov	r3, r0
 800889a:	2b01      	cmp	r3, #1
 800889c:	d001      	beq.n	80088a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	e000      	b.n	80088a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80088a2:	68fb      	ldr	r3, [r7, #12]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d010      	beq.n	80088e0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d10b      	bne.n	80088dc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	2303      	movs	r3, #3
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4613      	mov	r3, r2
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	2001      	movs	r0, #1
 80088d4:	f000 faae 	bl	8008e34 <xQueueGenericCreateStatic>
 80088d8:	4603      	mov	r3, r0
 80088da:	e016      	b.n	800890a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80088dc:	2300      	movs	r3, #0
 80088de:	e014      	b.n	800890a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d110      	bne.n	8008908 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80088e6:	2203      	movs	r2, #3
 80088e8:	2100      	movs	r1, #0
 80088ea:	2001      	movs	r0, #1
 80088ec:	f000 fb15 	bl	8008f1a <xQueueGenericCreate>
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d005      	beq.n	8008904 <osSemaphoreCreate+0x58>
 80088f8:	2300      	movs	r3, #0
 80088fa:	2200      	movs	r2, #0
 80088fc:	2100      	movs	r1, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fb6a 	bl	8008fd8 <xQueueGenericSend>
      return sema;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	e000      	b.n	800890a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008908:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800891e:	2300      	movs	r3, #0
 8008920:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008928:	2380      	movs	r3, #128	; 0x80
 800892a:	e03a      	b.n	80089a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d103      	bne.n	8008940 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	e009      	b.n	8008954 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d006      	beq.n	8008954 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <osSemaphoreWait+0x40>
      ticks = 1;
 8008950:	2301      	movs	r3, #1
 8008952:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008954:	f7ff ff29 	bl	80087aa <inHandlerMode>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d017      	beq.n	800898e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800895e:	f107 0308 	add.w	r3, r7, #8
 8008962:	461a      	mov	r2, r3
 8008964:	2100      	movs	r1, #0
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 ff32 	bl	80097d0 <xQueueReceiveFromISR>
 800896c:	4603      	mov	r3, r0
 800896e:	2b01      	cmp	r3, #1
 8008970:	d001      	beq.n	8008976 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008972:	23ff      	movs	r3, #255	; 0xff
 8008974:	e015      	b.n	80089a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d011      	beq.n	80089a0 <osSemaphoreWait+0x8c>
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <osSemaphoreWait+0x98>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	e008      	b.n	80089a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800898e:	68f9      	ldr	r1, [r7, #12]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fe15 	bl	80095c0 <xQueueSemaphoreTake>
 8008996:	4603      	mov	r3, r0
 8008998:	2b01      	cmp	r3, #1
 800899a:	d001      	beq.n	80089a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800899c:	23ff      	movs	r3, #255	; 0xff
 800899e:	e000      	b.n	80089a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	e000ed04 	.word	0xe000ed04

080089b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80089bc:	2300      	movs	r3, #0
 80089be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80089c0:	f7ff fef3 	bl	80087aa <inHandlerMode>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d016      	beq.n	80089f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80089ca:	f107 0308 	add.w	r3, r7, #8
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fc8f 	bl	80092f4 <xQueueGiveFromISR>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d001      	beq.n	80089e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80089dc:	23ff      	movs	r3, #255	; 0xff
 80089de:	e017      	b.n	8008a10 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d013      	beq.n	8008a0e <osSemaphoreRelease+0x5e>
 80089e6:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <osSemaphoreRelease+0x68>)
 80089e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	e00a      	b.n	8008a0e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80089f8:	2300      	movs	r3, #0
 80089fa:	2200      	movs	r2, #0
 80089fc:	2100      	movs	r1, #0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 faea 	bl	8008fd8 <xQueueGenericSend>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d001      	beq.n	8008a0e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008a0a:	23ff      	movs	r3, #255	; 0xff
 8008a0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	e000ed04 	.word	0xe000ed04

08008a1c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008a24:	f7ff fec1 	bl	80087aa <inHandlerMode>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008a2e:	2382      	movs	r3, #130	; 0x82
 8008a30:	e003      	b.n	8008a3a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 ff49 	bl	80098ca <vQueueDelete>

  return osOK; 
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008a42:	b590      	push	{r4, r7, lr}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af02      	add	r7, sp, #8
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d012      	beq.n	8008a7a <osMessageCreate+0x38>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00e      	beq.n	8008a7a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6859      	ldr	r1, [r3, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68dc      	ldr	r4, [r3, #12]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	4623      	mov	r3, r4
 8008a72:	f000 f9df 	bl	8008e34 <xQueueGenericCreateStatic>
 8008a76:	4603      	mov	r3, r0
 8008a78:	e008      	b.n	8008a8c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	4619      	mov	r1, r3
 8008a86:	f000 fa48 	bl	8008f1a <xQueueGenericCreate>
 8008a8a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd90      	pop	{r4, r7, pc}

08008a94 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <osMessagePut+0x1e>
    ticks = 1;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008ab2:	f7ff fe7a 	bl	80087aa <inHandlerMode>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d018      	beq.n	8008aee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008abc:	f107 0210 	add.w	r2, r7, #16
 8008ac0:	f107 0108 	add.w	r1, r7, #8
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fb80 	bl	80091cc <xQueueGenericSendFromISR>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d001      	beq.n	8008ad6 <osMessagePut+0x42>
      return osErrorOS;
 8008ad2:	23ff      	movs	r3, #255	; 0xff
 8008ad4:	e018      	b.n	8008b08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d014      	beq.n	8008b06 <osMessagePut+0x72>
 8008adc:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <osMessagePut+0x7c>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	e00b      	b.n	8008b06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008aee:	f107 0108 	add.w	r1, r7, #8
 8008af2:	2300      	movs	r3, #0
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fa6e 	bl	8008fd8 <xQueueGenericSend>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d001      	beq.n	8008b06 <osMessagePut+0x72>
      return osErrorOS;
 8008b02:	23ff      	movs	r3, #255	; 0xff
 8008b04:	e000      	b.n	8008b08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008b14:	b590      	push	{r4, r7, lr}
 8008b16:	b08b      	sub	sp, #44	; 0x2c
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	617b      	str	r3, [r7, #20]
    return event;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	461c      	mov	r4, r3
 8008b36:	f107 0314 	add.w	r3, r7, #20
 8008b3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b42:	e054      	b.n	8008bee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008b44:	2300      	movs	r3, #0
 8008b46:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	d103      	bne.n	8008b5c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008b54:	f04f 33ff 	mov.w	r3, #4294967295
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5a:	e009      	b.n	8008b70 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d006      	beq.n	8008b70 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <osMessageGet+0x5c>
      ticks = 1;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008b70:	f7ff fe1b 	bl	80087aa <inHandlerMode>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01c      	beq.n	8008bb4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008b7a:	f107 0220 	add.w	r2, r7, #32
 8008b7e:	f107 0314 	add.w	r3, r7, #20
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	68b8      	ldr	r0, [r7, #8]
 8008b88:	f000 fe22 	bl	80097d0 <xQueueReceiveFromISR>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d102      	bne.n	8008b98 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008b92:	2310      	movs	r3, #16
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e001      	b.n	8008b9c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d01d      	beq.n	8008bde <osMessageGet+0xca>
 8008ba2:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <osMessageGet+0xe4>)
 8008ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	e014      	b.n	8008bde <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008bb4:	f107 0314 	add.w	r3, r7, #20
 8008bb8:	3304      	adds	r3, #4
 8008bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	68b8      	ldr	r0, [r7, #8]
 8008bc0:	f000 fc22 	bl	8009408 <xQueueReceive>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d102      	bne.n	8008bd0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008bca:	2310      	movs	r3, #16
 8008bcc:	617b      	str	r3, [r7, #20]
 8008bce:	e006      	b.n	8008bde <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <osMessageGet+0xc6>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e000      	b.n	8008bdc <osMessageGet+0xc8>
 8008bda:	2340      	movs	r3, #64	; 0x40
 8008bdc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	461c      	mov	r4, r3
 8008be2:	f107 0314 	add.w	r3, r7, #20
 8008be6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	372c      	adds	r7, #44	; 0x2c
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd90      	pop	{r4, r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	e000ed04 	.word	0xe000ed04

08008bfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f103 0208 	add.w	r2, r3, #8
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f103 0208 	add.w	r2, r3, #8
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f103 0208 	add.w	r2, r3, #8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c56:	b480      	push	{r7}
 8008c58:	b085      	sub	sp, #20
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	601a      	str	r2, [r3, #0]
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb4:	d103      	bne.n	8008cbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	e00c      	b.n	8008cd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	e002      	b.n	8008ccc <vListInsert+0x2e>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d2f6      	bcs.n	8008cc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	1c5a      	adds	r2, r3, #1
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	601a      	str	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6892      	ldr	r2, [r2, #8]
 8008d26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6852      	ldr	r2, [r2, #4]
 8008d30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d103      	bne.n	8008d44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	e7fe      	b.n	8008d8a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008d8c:	f002 f846 	bl	800ae1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d98:	68f9      	ldr	r1, [r7, #12]
 8008d9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	441a      	add	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dc2:	fb01 f303 	mul.w	r3, r1, r3
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	22ff      	movs	r2, #255	; 0xff
 8008dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	22ff      	movs	r2, #255	; 0xff
 8008dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d114      	bne.n	8008e0c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01a      	beq.n	8008e20 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3310      	adds	r3, #16
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 fb04 	bl	800a3fc <xTaskRemoveFromEventList>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d012      	beq.n	8008e20 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dfa:	4b0d      	ldr	r3, [pc, #52]	; (8008e30 <xQueueGenericReset+0xcc>)
 8008dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	e009      	b.n	8008e20 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3310      	adds	r3, #16
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fef3 	bl	8008bfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3324      	adds	r3, #36	; 0x24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff feee 	bl	8008bfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e20:	f002 f82a 	bl	800ae78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e24:	2301      	movs	r3, #1
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	e000ed04 	.word	0xe000ed04

08008e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08e      	sub	sp, #56	; 0x38
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d109      	bne.n	8008e5c <xQueueGenericCreateStatic+0x28>
 8008e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e5a:	e7fe      	b.n	8008e5a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <xQueueGenericCreateStatic+0x42>
 8008e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
 8008e74:	e7fe      	b.n	8008e74 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <xQueueGenericCreateStatic+0x4e>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <xQueueGenericCreateStatic+0x52>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <xQueueGenericCreateStatic+0x54>
 8008e86:	2300      	movs	r3, #0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <xQueueGenericCreateStatic+0x6c>
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	623b      	str	r3, [r7, #32]
 8008e9e:	e7fe      	b.n	8008e9e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d102      	bne.n	8008eac <xQueueGenericCreateStatic+0x78>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <xQueueGenericCreateStatic+0x7c>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e000      	b.n	8008eb2 <xQueueGenericCreateStatic+0x7e>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <xQueueGenericCreateStatic+0x96>
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	61fb      	str	r3, [r7, #28]
 8008ec8:	e7fe      	b.n	8008ec8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eca:	2348      	movs	r3, #72	; 0x48
 8008ecc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b48      	cmp	r3, #72	; 0x48
 8008ed2:	d009      	beq.n	8008ee8 <xQueueGenericCreateStatic+0xb4>
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e7fe      	b.n	8008ee6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ee8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00d      	beq.n	8008f10 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008efc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	4613      	mov	r3, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 f844 	bl	8008f98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3730      	adds	r7, #48	; 0x30
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b08a      	sub	sp, #40	; 0x28
 8008f1e:	af02      	add	r7, sp, #8
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d109      	bne.n	8008f42 <xQueueGenericCreate+0x28>
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	613b      	str	r3, [r7, #16]
 8008f40:	e7fe      	b.n	8008f40 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61fb      	str	r3, [r7, #28]
 8008f4c:	e004      	b.n	8008f58 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	fb02 f303 	mul.w	r3, r2, r3
 8008f56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	3348      	adds	r3, #72	; 0x48
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f002 f877 	bl	800b050 <pvPortMalloc>
 8008f62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d011      	beq.n	8008f8e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	3348      	adds	r3, #72	; 0x48
 8008f72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f7c:	79fa      	ldrb	r2, [r7, #7]
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	4613      	mov	r3, r2
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f805 	bl	8008f98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f8e:	69bb      	ldr	r3, [r7, #24]
	}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3720      	adds	r7, #32
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d103      	bne.n	8008fb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	e002      	b.n	8008fba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	69b8      	ldr	r0, [r7, #24]
 8008fca:	f7ff fecb 	bl	8008d64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08e      	sub	sp, #56	; 0x38
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d109      	bne.n	8009008 <xQueueGenericSend+0x30>
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
 8009006:	e7fe      	b.n	8009006 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d103      	bne.n	8009016 <xQueueGenericSend+0x3e>
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <xQueueGenericSend+0x42>
 8009016:	2301      	movs	r3, #1
 8009018:	e000      	b.n	800901c <xQueueGenericSend+0x44>
 800901a:	2300      	movs	r3, #0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d109      	bne.n	8009034 <xQueueGenericSend+0x5c>
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
 8009032:	e7fe      	b.n	8009032 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d103      	bne.n	8009042 <xQueueGenericSend+0x6a>
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <xQueueGenericSend+0x6e>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <xQueueGenericSend+0x70>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d109      	bne.n	8009060 <xQueueGenericSend+0x88>
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	623b      	str	r3, [r7, #32]
 800905e:	e7fe      	b.n	800905e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009060:	f001 fb82 	bl	800a768 <xTaskGetSchedulerState>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d102      	bne.n	8009070 <xQueueGenericSend+0x98>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <xQueueGenericSend+0x9c>
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <xQueueGenericSend+0x9e>
 8009074:	2300      	movs	r3, #0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d109      	bne.n	800908e <xQueueGenericSend+0xb6>
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	e7fe      	b.n	800908c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800908e:	f001 fec5 	bl	800ae1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909a:	429a      	cmp	r2, r3
 800909c:	d302      	bcc.n	80090a4 <xQueueGenericSend+0xcc>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d129      	bne.n	80090f8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090aa:	f000 fc48 	bl	800993e <prvCopyDataToQueue>
 80090ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d010      	beq.n	80090da <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	3324      	adds	r3, #36	; 0x24
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 f99d 	bl	800a3fc <xTaskRemoveFromEventList>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d013      	beq.n	80090f0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090c8:	4b3f      	ldr	r3, [pc, #252]	; (80091c8 <xQueueGenericSend+0x1f0>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	e00a      	b.n	80090f0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d007      	beq.n	80090f0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090e0:	4b39      	ldr	r3, [pc, #228]	; (80091c8 <xQueueGenericSend+0x1f0>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090f0:	f001 fec2 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e063      	b.n	80091c0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090fe:	f001 febb 	bl	800ae78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009102:	2300      	movs	r3, #0
 8009104:	e05c      	b.n	80091c0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009108:	2b00      	cmp	r3, #0
 800910a:	d106      	bne.n	800911a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800910c:	f107 0314 	add.w	r3, r7, #20
 8009110:	4618      	mov	r0, r3
 8009112:	f001 f9d5 	bl	800a4c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009116:	2301      	movs	r3, #1
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800911a:	f001 fead 	bl	800ae78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800911e:	f000 ff6b 	bl	8009ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009122:	f001 fe7b 	bl	800ae1c <vPortEnterCritical>
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800912c:	b25b      	sxtb	r3, r3
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009132:	d103      	bne.n	800913c <xQueueGenericSend+0x164>
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009142:	b25b      	sxtb	r3, r3
 8009144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009148:	d103      	bne.n	8009152 <xQueueGenericSend+0x17a>
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009152:	f001 fe91 	bl	800ae78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009156:	1d3a      	adds	r2, r7, #4
 8009158:	f107 0314 	add.w	r3, r7, #20
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f001 f9c4 	bl	800a4ec <xTaskCheckForTimeOut>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d124      	bne.n	80091b4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800916a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800916c:	f000 fcdf 	bl	8009b2e <prvIsQueueFull>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d018      	beq.n	80091a8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	3310      	adds	r3, #16
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f001 f918 	bl	800a3b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009186:	f000 fc6a 	bl	8009a5e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800918a:	f000 ff43 	bl	800a014 <xTaskResumeAll>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	f47f af7c 	bne.w	800908e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009196:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <xQueueGenericSend+0x1f0>)
 8009198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	e772      	b.n	800908e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091aa:	f000 fc58 	bl	8009a5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ae:	f000 ff31 	bl	800a014 <xTaskResumeAll>
 80091b2:	e76c      	b.n	800908e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b6:	f000 fc52 	bl	8009a5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091ba:	f000 ff2b 	bl	800a014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3738      	adds	r7, #56	; 0x38
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08e      	sub	sp, #56	; 0x38
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d109      	bne.n	80091f8 <xQueueGenericSendFromISR+0x2c>
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
 80091f6:	e7fe      	b.n	80091f6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d103      	bne.n	8009206 <xQueueGenericSendFromISR+0x3a>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <xQueueGenericSendFromISR+0x3e>
 8009206:	2301      	movs	r3, #1
 8009208:	e000      	b.n	800920c <xQueueGenericSendFromISR+0x40>
 800920a:	2300      	movs	r3, #0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d109      	bne.n	8009224 <xQueueGenericSendFromISR+0x58>
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	623b      	str	r3, [r7, #32]
 8009222:	e7fe      	b.n	8009222 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d103      	bne.n	8009232 <xQueueGenericSendFromISR+0x66>
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922e:	2b01      	cmp	r3, #1
 8009230:	d101      	bne.n	8009236 <xQueueGenericSendFromISR+0x6a>
 8009232:	2301      	movs	r3, #1
 8009234:	e000      	b.n	8009238 <xQueueGenericSendFromISR+0x6c>
 8009236:	2300      	movs	r3, #0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d109      	bne.n	8009250 <xQueueGenericSendFromISR+0x84>
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	61fb      	str	r3, [r7, #28]
 800924e:	e7fe      	b.n	800924e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009250:	f001 fec0 	bl	800afd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009254:	f3ef 8211 	mrs	r2, BASEPRI
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	61ba      	str	r2, [r7, #24]
 800926a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800926c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800926e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009278:	429a      	cmp	r2, r3
 800927a:	d302      	bcc.n	8009282 <xQueueGenericSendFromISR+0xb6>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d12c      	bne.n	80092dc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009292:	f000 fb54 	bl	800993e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009296:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800929a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929e:	d112      	bne.n	80092c6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d016      	beq.n	80092d6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	3324      	adds	r3, #36	; 0x24
 80092ac:	4618      	mov	r0, r3
 80092ae:	f001 f8a5 	bl	800a3fc <xTaskRemoveFromEventList>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00e      	beq.n	80092d6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	e007      	b.n	80092d6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092ca:	3301      	adds	r3, #1
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	b25a      	sxtb	r2, r3
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092d6:	2301      	movs	r3, #1
 80092d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80092da:	e001      	b.n	80092e0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092dc:	2300      	movs	r3, #0
 80092de:	637b      	str	r3, [r7, #52]	; 0x34
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3738      	adds	r7, #56	; 0x38
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08e      	sub	sp, #56	; 0x38
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	2b00      	cmp	r3, #0
 8009306:	d109      	bne.n	800931c <xQueueGiveFromISR+0x28>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	623b      	str	r3, [r7, #32]
 800931a:	e7fe      	b.n	800931a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d009      	beq.n	8009338 <xQueueGiveFromISR+0x44>
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	61fb      	str	r3, [r7, #28]
 8009336:	e7fe      	b.n	8009336 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d103      	bne.n	8009348 <xQueueGiveFromISR+0x54>
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <xQueueGiveFromISR+0x58>
 8009348:	2301      	movs	r3, #1
 800934a:	e000      	b.n	800934e <xQueueGiveFromISR+0x5a>
 800934c:	2300      	movs	r3, #0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <xQueueGiveFromISR+0x72>
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	61bb      	str	r3, [r7, #24]
 8009364:	e7fe      	b.n	8009364 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009366:	f001 fe35 	bl	800afd4 <vPortValidateInterruptPriority>
	__asm volatile
 800936a:	f3ef 8211 	mrs	r2, BASEPRI
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	617a      	str	r2, [r7, #20]
 8009380:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009382:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009384:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009392:	429a      	cmp	r2, r3
 8009394:	d22b      	bcs.n	80093ee <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800939c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d112      	bne.n	80093d8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d016      	beq.n	80093e8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	3324      	adds	r3, #36	; 0x24
 80093be:	4618      	mov	r0, r3
 80093c0:	f001 f81c 	bl	800a3fc <xTaskRemoveFromEventList>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00e      	beq.n	80093e8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2201      	movs	r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e007      	b.n	80093e8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093dc:	3301      	adds	r3, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	b25a      	sxtb	r2, r3
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093e8:	2301      	movs	r3, #1
 80093ea:	637b      	str	r3, [r7, #52]	; 0x34
 80093ec:	e001      	b.n	80093f2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	637b      	str	r3, [r7, #52]	; 0x34
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3738      	adds	r7, #56	; 0x38
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
	...

08009408 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	; 0x30
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009414:	2300      	movs	r3, #0
 8009416:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <xQueueReceive+0x2e>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	623b      	str	r3, [r7, #32]
 8009434:	e7fe      	b.n	8009434 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d103      	bne.n	8009444 <xQueueReceive+0x3c>
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <xQueueReceive+0x40>
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <xQueueReceive+0x42>
 8009448:	2300      	movs	r3, #0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <xQueueReceive+0x5a>
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e7fe      	b.n	8009460 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009462:	f001 f981 	bl	800a768 <xTaskGetSchedulerState>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d102      	bne.n	8009472 <xQueueReceive+0x6a>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <xQueueReceive+0x6e>
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <xQueueReceive+0x70>
 8009476:	2300      	movs	r3, #0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <xQueueReceive+0x88>
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	61bb      	str	r3, [r7, #24]
 800948e:	e7fe      	b.n	800948e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009490:	f001 fcc4 	bl	800ae1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01f      	beq.n	80094e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094a0:	68b9      	ldr	r1, [r7, #8]
 80094a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a4:	f000 fab5 	bl	8009a12 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	1e5a      	subs	r2, r3, #1
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00f      	beq.n	80094d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	3310      	adds	r3, #16
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 ff9d 	bl	800a3fc <xTaskRemoveFromEventList>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d007      	beq.n	80094d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094c8:	4b3c      	ldr	r3, [pc, #240]	; (80095bc <xQueueReceive+0x1b4>)
 80094ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094d8:	f001 fcce 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 80094dc:	2301      	movs	r3, #1
 80094de:	e069      	b.n	80095b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d103      	bne.n	80094ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094e6:	f001 fcc7 	bl	800ae78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e062      	b.n	80095b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d106      	bne.n	8009502 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094f4:	f107 0310 	add.w	r3, r7, #16
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 ffe1 	bl	800a4c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094fe:	2301      	movs	r3, #1
 8009500:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009502:	f001 fcb9 	bl	800ae78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009506:	f000 fd77 	bl	8009ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800950a:	f001 fc87 	bl	800ae1c <vPortEnterCritical>
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009514:	b25b      	sxtb	r3, r3
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d103      	bne.n	8009524 <xQueueReceive+0x11c>
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800952a:	b25b      	sxtb	r3, r3
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d103      	bne.n	800953a <xQueueReceive+0x132>
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800953a:	f001 fc9d 	bl	800ae78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800953e:	1d3a      	adds	r2, r7, #4
 8009540:	f107 0310 	add.w	r3, r7, #16
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f000 ffd0 	bl	800a4ec <xTaskCheckForTimeOut>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d123      	bne.n	800959a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009554:	f000 fad5 	bl	8009b02 <prvIsQueueEmpty>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d017      	beq.n	800958e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	3324      	adds	r3, #36	; 0x24
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	4611      	mov	r1, r2
 8009566:	4618      	mov	r0, r3
 8009568:	f000 ff24 	bl	800a3b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800956c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800956e:	f000 fa76 	bl	8009a5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009572:	f000 fd4f 	bl	800a014 <xTaskResumeAll>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d189      	bne.n	8009490 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <xQueueReceive+0x1b4>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	e780      	b.n	8009490 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800958e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009590:	f000 fa65 	bl	8009a5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009594:	f000 fd3e 	bl	800a014 <xTaskResumeAll>
 8009598:	e77a      	b.n	8009490 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800959a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800959c:	f000 fa5f 	bl	8009a5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095a0:	f000 fd38 	bl	800a014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a6:	f000 faac 	bl	8009b02 <prvIsQueueEmpty>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f43f af6f 	beq.w	8009490 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3730      	adds	r7, #48	; 0x30
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	e000ed04 	.word	0xe000ed04

080095c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08e      	sub	sp, #56	; 0x38
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80095ca:	2300      	movs	r3, #0
 80095cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <xQueueSemaphoreTake+0x30>
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	623b      	str	r3, [r7, #32]
 80095ee:	e7fe      	b.n	80095ee <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d009      	beq.n	800960c <xQueueSemaphoreTake+0x4c>
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	e7fe      	b.n	800960a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800960c:	f001 f8ac 	bl	800a768 <xTaskGetSchedulerState>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d102      	bne.n	800961c <xQueueSemaphoreTake+0x5c>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <xQueueSemaphoreTake+0x60>
 800961c:	2301      	movs	r3, #1
 800961e:	e000      	b.n	8009622 <xQueueSemaphoreTake+0x62>
 8009620:	2300      	movs	r3, #0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d109      	bne.n	800963a <xQueueSemaphoreTake+0x7a>
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	61bb      	str	r3, [r7, #24]
 8009638:	e7fe      	b.n	8009638 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800963a:	f001 fbef 	bl	800ae1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	2b00      	cmp	r3, #0
 8009648:	d024      	beq.n	8009694 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	1e5a      	subs	r2, r3, #1
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800965a:	f001 fa3f 	bl	800aadc <pvTaskIncrementMutexHeldCount>
 800965e:	4602      	mov	r2, r0
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00f      	beq.n	800968c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	3310      	adds	r3, #16
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fec3 	bl	800a3fc <xTaskRemoveFromEventList>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d007      	beq.n	800968c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800967c:	4b53      	ldr	r3, [pc, #332]	; (80097cc <xQueueSemaphoreTake+0x20c>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800968c:	f001 fbf4 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 8009690:	2301      	movs	r3, #1
 8009692:	e096      	b.n	80097c2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d110      	bne.n	80096bc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	2b00      	cmp	r3, #0
 800969e:	d009      	beq.n	80096b4 <xQueueSemaphoreTake+0xf4>
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	617b      	str	r3, [r7, #20]
 80096b2:	e7fe      	b.n	80096b2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80096b4:	f001 fbe0 	bl	800ae78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096b8:	2300      	movs	r3, #0
 80096ba:	e082      	b.n	80097c2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096c2:	f107 030c 	add.w	r3, r7, #12
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fefa 	bl	800a4c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096cc:	2301      	movs	r3, #1
 80096ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096d0:	f001 fbd2 	bl	800ae78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096d4:	f000 fc90 	bl	8009ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096d8:	f001 fba0 	bl	800ae1c <vPortEnterCritical>
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096e2:	b25b      	sxtb	r3, r3
 80096e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e8:	d103      	bne.n	80096f2 <xQueueSemaphoreTake+0x132>
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096f8:	b25b      	sxtb	r3, r3
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d103      	bne.n	8009708 <xQueueSemaphoreTake+0x148>
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009708:	f001 fbb6 	bl	800ae78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800970c:	463a      	mov	r2, r7
 800970e:	f107 030c 	add.w	r3, r7, #12
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fee9 	bl	800a4ec <xTaskCheckForTimeOut>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d132      	bne.n	8009786 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009722:	f000 f9ee 	bl	8009b02 <prvIsQueueEmpty>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d026      	beq.n	800977a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d109      	bne.n	8009748 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009734:	f001 fb72 	bl	800ae1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	4618      	mov	r0, r3
 800973e:	f001 f831 	bl	800a7a4 <xTaskPriorityInherit>
 8009742:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009744:	f001 fb98 	bl	800ae78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	3324      	adds	r3, #36	; 0x24
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	4611      	mov	r1, r2
 8009750:	4618      	mov	r0, r3
 8009752:	f000 fe2f 	bl	800a3b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009758:	f000 f981 	bl	8009a5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800975c:	f000 fc5a 	bl	800a014 <xTaskResumeAll>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	f47f af69 	bne.w	800963a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009768:	4b18      	ldr	r3, [pc, #96]	; (80097cc <xQueueSemaphoreTake+0x20c>)
 800976a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	e75f      	b.n	800963a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800977a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800977c:	f000 f96f 	bl	8009a5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009780:	f000 fc48 	bl	800a014 <xTaskResumeAll>
 8009784:	e759      	b.n	800963a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009788:	f000 f969 	bl	8009a5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800978c:	f000 fc42 	bl	800a014 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009790:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009792:	f000 f9b6 	bl	8009b02 <prvIsQueueEmpty>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	f43f af4e 	beq.w	800963a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00d      	beq.n	80097c0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80097a4:	f001 fb3a 	bl	800ae1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80097a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097aa:	f000 f8b0 	bl	800990e <prvGetDisinheritPriorityAfterTimeout>
 80097ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80097b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097b6:	4618      	mov	r0, r3
 80097b8:	f001 f8f8 	bl	800a9ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80097bc:	f001 fb5c 	bl	800ae78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3738      	adds	r7, #56	; 0x38
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08e      	sub	sp, #56	; 0x38
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <xQueueReceiveFromISR+0x2a>
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	623b      	str	r3, [r7, #32]
 80097f8:	e7fe      	b.n	80097f8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <xQueueReceiveFromISR+0x38>
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <xQueueReceiveFromISR+0x3c>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <xQueueReceiveFromISR+0x3e>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d109      	bne.n	8009826 <xQueueReceiveFromISR+0x56>
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	61fb      	str	r3, [r7, #28]
 8009824:	e7fe      	b.n	8009824 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009826:	f001 fbd5 	bl	800afd4 <vPortValidateInterruptPriority>
	__asm volatile
 800982a:	f3ef 8211 	mrs	r2, BASEPRI
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	61ba      	str	r2, [r7, #24]
 8009840:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009842:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009844:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d02f      	beq.n	80098b2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009860:	f000 f8d7 	bl	8009a12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	1e5a      	subs	r2, r3, #1
 8009868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800986c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009874:	d112      	bne.n	800989c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d016      	beq.n	80098ac <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	3310      	adds	r3, #16
 8009882:	4618      	mov	r0, r3
 8009884:	f000 fdba 	bl	800a3fc <xTaskRemoveFromEventList>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00e      	beq.n	80098ac <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	e007      	b.n	80098ac <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800989c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a0:	3301      	adds	r3, #1
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	b25a      	sxtb	r2, r3
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80098ac:	2301      	movs	r3, #1
 80098ae:	637b      	str	r3, [r7, #52]	; 0x34
 80098b0:	e001      	b.n	80098b6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	637b      	str	r3, [r7, #52]	; 0x34
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3738      	adds	r7, #56	; 0x38
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d109      	bne.n	80098f0 <vQueueDelete+0x26>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	60bb      	str	r3, [r7, #8]
 80098ee:	e7fe      	b.n	80098ee <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 f935 	bl	8009b60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f001 fc67 	bl	800b1d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800990e:	b480      	push	{r7}
 8009910:	b085      	sub	sp, #20
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991a:	2b00      	cmp	r3, #0
 800991c:	d006      	beq.n	800992c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f1c3 0307 	rsb	r3, r3, #7
 8009928:	60fb      	str	r3, [r7, #12]
 800992a:	e001      	b.n	8009930 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009930:	68fb      	ldr	r3, [r7, #12]
	}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b086      	sub	sp, #24
 8009942:	af00      	add	r7, sp, #0
 8009944:	60f8      	str	r0, [r7, #12]
 8009946:	60b9      	str	r1, [r7, #8]
 8009948:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800994a:	2300      	movs	r3, #0
 800994c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009952:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10d      	bne.n	8009978 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d14d      	bne.n	8009a00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 ff9b 	bl	800a8a4 <xTaskPriorityDisinherit>
 800996e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	609a      	str	r2, [r3, #8]
 8009976:	e043      	b.n	8009a00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d119      	bne.n	80099b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6858      	ldr	r0, [r3, #4]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009986:	461a      	mov	r2, r3
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	f001 fd6d 	bl	800b468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	441a      	add	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d32b      	bcc.n	8009a00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	605a      	str	r2, [r3, #4]
 80099b0:	e026      	b.n	8009a00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	68d8      	ldr	r0, [r3, #12]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	461a      	mov	r2, r3
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	f001 fd53 	bl	800b468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	425b      	negs	r3, r3
 80099cc:	441a      	add	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d207      	bcs.n	80099ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	689a      	ldr	r2, [r3, #8]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	425b      	negs	r3, r3
 80099e8:	441a      	add	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d105      	bne.n	8009a00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a08:	697b      	ldr	r3, [r7, #20]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d018      	beq.n	8009a56 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	441a      	add	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d303      	bcc.n	8009a46 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68d9      	ldr	r1, [r3, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6838      	ldr	r0, [r7, #0]
 8009a52:	f001 fd09 	bl	800b468 <memcpy>
	}
}
 8009a56:	bf00      	nop
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a66:	f001 f9d9 	bl	800ae1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a70:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a72:	e011      	b.n	8009a98 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d012      	beq.n	8009aa2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3324      	adds	r3, #36	; 0x24
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fcbb 	bl	800a3fc <xTaskRemoveFromEventList>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a8c:	f000 fd8e 	bl	800a5ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dce9      	bgt.n	8009a74 <prvUnlockQueue+0x16>
 8009aa0:	e000      	b.n	8009aa4 <prvUnlockQueue+0x46>
					break;
 8009aa2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	22ff      	movs	r2, #255	; 0xff
 8009aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009aac:	f001 f9e4 	bl	800ae78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ab0:	f001 f9b4 	bl	800ae1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009abc:	e011      	b.n	8009ae2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d012      	beq.n	8009aec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3310      	adds	r3, #16
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fc96 	bl	800a3fc <xTaskRemoveFromEventList>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ad6:	f000 fd69 	bl	800a5ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dce9      	bgt.n	8009abe <prvUnlockQueue+0x60>
 8009aea:	e000      	b.n	8009aee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009aec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	22ff      	movs	r2, #255	; 0xff
 8009af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009af6:	f001 f9bf 	bl	800ae78 <vPortExitCritical>
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b0a:	f001 f987 	bl	800ae1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b16:	2301      	movs	r3, #1
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	e001      	b.n	8009b20 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b20:	f001 f9aa 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 8009b24:	68fb      	ldr	r3, [r7, #12]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b36:	f001 f971 	bl	800ae1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d102      	bne.n	8009b4c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b46:	2301      	movs	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	e001      	b.n	8009b50 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b50:	f001 f992 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 8009b54:	68fb      	ldr	r3, [r7, #12]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	e016      	b.n	8009b9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009b6e:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <vQueueUnregisterQueue+0x50>)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	4413      	add	r3, r2
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d10b      	bne.n	8009b96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009b7e:	4a0c      	ldr	r2, [pc, #48]	; (8009bb0 <vQueueUnregisterQueue+0x50>)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2100      	movs	r1, #0
 8009b84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009b88:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <vQueueUnregisterQueue+0x50>)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	4413      	add	r3, r2
 8009b90:	2200      	movs	r2, #0
 8009b92:	605a      	str	r2, [r3, #4]
				break;
 8009b94:	e005      	b.n	8009ba2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b07      	cmp	r3, #7
 8009ba0:	d9e5      	bls.n	8009b6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009ba2:	bf00      	nop
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	20004fb4 	.word	0x20004fb4

08009bb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08e      	sub	sp, #56	; 0x38
 8009bb8:	af04      	add	r7, sp, #16
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d109      	bne.n	8009bdc <xTaskCreateStatic+0x28>
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	623b      	str	r3, [r7, #32]
 8009bda:	e7fe      	b.n	8009bda <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <xTaskCreateStatic+0x42>
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	61fb      	str	r3, [r7, #28]
 8009bf4:	e7fe      	b.n	8009bf4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009bf6:	2354      	movs	r3, #84	; 0x54
 8009bf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b54      	cmp	r3, #84	; 0x54
 8009bfe:	d009      	beq.n	8009c14 <xTaskCreateStatic+0x60>
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	61bb      	str	r3, [r7, #24]
 8009c12:	e7fe      	b.n	8009c12 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01e      	beq.n	8009c5a <xTaskCreateStatic+0xa6>
 8009c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01b      	beq.n	8009c5a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c34:	2300      	movs	r3, #0
 8009c36:	9303      	str	r3, [sp, #12]
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	9302      	str	r3, [sp, #8]
 8009c3c:	f107 0314 	add.w	r3, r7, #20
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f850 	bl	8009cf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c54:	f000 f8d4 	bl	8009e00 <prvAddNewTaskToReadyList>
 8009c58:	e001      	b.n	8009c5e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c5e:	697b      	ldr	r3, [r7, #20]
	}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3728      	adds	r7, #40	; 0x28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08c      	sub	sp, #48	; 0x30
 8009c6c:	af04      	add	r7, sp, #16
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	4613      	mov	r3, r2
 8009c76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c78:	88fb      	ldrh	r3, [r7, #6]
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f001 f9e7 	bl	800b050 <pvPortMalloc>
 8009c82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00e      	beq.n	8009ca8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c8a:	2054      	movs	r0, #84	; 0x54
 8009c8c:	f001 f9e0 	bl	800b050 <pvPortMalloc>
 8009c90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8009c9e:	e005      	b.n	8009cac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ca0:	6978      	ldr	r0, [r7, #20]
 8009ca2:	f001 fa97 	bl	800b1d4 <vPortFree>
 8009ca6:	e001      	b.n	8009cac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d017      	beq.n	8009ce2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cba:	88fa      	ldrh	r2, [r7, #6]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9303      	str	r3, [sp, #12]
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	9302      	str	r3, [sp, #8]
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f80e 	bl	8009cf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cd6:	69f8      	ldr	r0, [r7, #28]
 8009cd8:	f000 f892 	bl	8009e00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	e002      	b.n	8009ce8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ce8:	69bb      	ldr	r3, [r7, #24]
	}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b088      	sub	sp, #32
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	f023 0307 	bic.w	r3, r3, #7
 8009d18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d009      	beq.n	8009d38 <prvInitialiseNewTask+0x46>
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	617b      	str	r3, [r7, #20]
 8009d36:	e7fe      	b.n	8009d36 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d01f      	beq.n	8009d7e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
 8009d42:	e012      	b.n	8009d6a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	4413      	add	r3, r2
 8009d4a:	7819      	ldrb	r1, [r3, #0]
 8009d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	4413      	add	r3, r2
 8009d52:	3334      	adds	r3, #52	; 0x34
 8009d54:	460a      	mov	r2, r1
 8009d56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	3301      	adds	r3, #1
 8009d68:	61fb      	str	r3, [r7, #28]
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	2b0f      	cmp	r3, #15
 8009d6e:	d9e9      	bls.n	8009d44 <prvInitialiseNewTask+0x52>
 8009d70:	e000      	b.n	8009d74 <prvInitialiseNewTask+0x82>
			{
				break;
 8009d72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d7c:	e003      	b.n	8009d86 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	2b06      	cmp	r3, #6
 8009d8a:	d901      	bls.n	8009d90 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d8c:	2306      	movs	r3, #6
 8009d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d9a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	2200      	movs	r2, #0
 8009da0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	3304      	adds	r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe ff48 	bl	8008c3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	3318      	adds	r3, #24
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe ff43 	bl	8008c3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	f1c3 0207 	rsb	r2, r3, #7
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	2200      	movs	r2, #0
 8009dd0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	68f9      	ldr	r1, [r7, #12]
 8009dde:	69b8      	ldr	r0, [r7, #24]
 8009de0:	f000 fef6 	bl	800abd0 <pxPortInitialiseStack>
 8009de4:	4602      	mov	r2, r0
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009df6:	bf00      	nop
 8009df8:	3720      	adds	r7, #32
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e08:	f001 f808 	bl	800ae1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e0c:	4b2a      	ldr	r3, [pc, #168]	; (8009eb8 <prvAddNewTaskToReadyList+0xb8>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	4a29      	ldr	r2, [pc, #164]	; (8009eb8 <prvAddNewTaskToReadyList+0xb8>)
 8009e14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e16:	4b29      	ldr	r3, [pc, #164]	; (8009ebc <prvAddNewTaskToReadyList+0xbc>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d109      	bne.n	8009e32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e1e:	4a27      	ldr	r2, [pc, #156]	; (8009ebc <prvAddNewTaskToReadyList+0xbc>)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e24:	4b24      	ldr	r3, [pc, #144]	; (8009eb8 <prvAddNewTaskToReadyList+0xb8>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d110      	bne.n	8009e4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e2c:	f000 fbe2 	bl	800a5f4 <prvInitialiseTaskLists>
 8009e30:	e00d      	b.n	8009e4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e32:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <prvAddNewTaskToReadyList+0xc0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d109      	bne.n	8009e4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e3a:	4b20      	ldr	r3, [pc, #128]	; (8009ebc <prvAddNewTaskToReadyList+0xbc>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d802      	bhi.n	8009e4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e48:	4a1c      	ldr	r2, [pc, #112]	; (8009ebc <prvAddNewTaskToReadyList+0xbc>)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e4e:	4b1d      	ldr	r3, [pc, #116]	; (8009ec4 <prvAddNewTaskToReadyList+0xc4>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3301      	adds	r3, #1
 8009e54:	4a1b      	ldr	r2, [pc, #108]	; (8009ec4 <prvAddNewTaskToReadyList+0xc4>)
 8009e56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	409a      	lsls	r2, r3
 8009e60:	4b19      	ldr	r3, [pc, #100]	; (8009ec8 <prvAddNewTaskToReadyList+0xc8>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	4a18      	ldr	r2, [pc, #96]	; (8009ec8 <prvAddNewTaskToReadyList+0xc8>)
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a15      	ldr	r2, [pc, #84]	; (8009ecc <prvAddNewTaskToReadyList+0xcc>)
 8009e78:	441a      	add	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7fe fee8 	bl	8008c56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e86:	f000 fff7 	bl	800ae78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <prvAddNewTaskToReadyList+0xc0>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00e      	beq.n	8009eb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e92:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <prvAddNewTaskToReadyList+0xbc>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d207      	bcs.n	8009eb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ea0:	4b0b      	ldr	r3, [pc, #44]	; (8009ed0 <prvAddNewTaskToReadyList+0xd0>)
 8009ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	20000690 	.word	0x20000690
 8009ebc:	20000590 	.word	0x20000590
 8009ec0:	2000069c 	.word	0x2000069c
 8009ec4:	200006ac 	.word	0x200006ac
 8009ec8:	20000698 	.word	0x20000698
 8009ecc:	20000594 	.word	0x20000594
 8009ed0:	e000ed04 	.word	0xe000ed04

08009ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d016      	beq.n	8009f14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ee6:	4b13      	ldr	r3, [pc, #76]	; (8009f34 <vTaskDelay+0x60>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <vTaskDelay+0x2e>
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	60bb      	str	r3, [r7, #8]
 8009f00:	e7fe      	b.n	8009f00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009f02:	f000 f879 	bl	8009ff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f06:	2100      	movs	r1, #0
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fdfb 	bl	800ab04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f0e:	f000 f881 	bl	800a014 <xTaskResumeAll>
 8009f12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d107      	bne.n	8009f2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009f1a:	4b07      	ldr	r3, [pc, #28]	; (8009f38 <vTaskDelay+0x64>)
 8009f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f20:	601a      	str	r2, [r3, #0]
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f2a:	bf00      	nop
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	200006b8 	.word	0x200006b8
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	; 0x28
 8009f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	1d39      	adds	r1, r7, #4
 8009f4e:	f107 0308 	add.w	r3, r7, #8
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f6 fc50 	bl	80007f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	9202      	str	r2, [sp, #8]
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	2300      	movs	r3, #0
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	2300      	movs	r3, #0
 8009f68:	460a      	mov	r2, r1
 8009f6a:	491d      	ldr	r1, [pc, #116]	; (8009fe0 <vTaskStartScheduler+0xa4>)
 8009f6c:	481d      	ldr	r0, [pc, #116]	; (8009fe4 <vTaskStartScheduler+0xa8>)
 8009f6e:	f7ff fe21 	bl	8009bb4 <xTaskCreateStatic>
 8009f72:	4602      	mov	r2, r0
 8009f74:	4b1c      	ldr	r3, [pc, #112]	; (8009fe8 <vTaskStartScheduler+0xac>)
 8009f76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f78:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <vTaskStartScheduler+0xac>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d002      	beq.n	8009f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f80:	2301      	movs	r3, #1
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	e001      	b.n	8009f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d115      	bne.n	8009fbc <vTaskStartScheduler+0x80>
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fa2:	4b12      	ldr	r3, [pc, #72]	; (8009fec <vTaskStartScheduler+0xb0>)
 8009fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009faa:	4b11      	ldr	r3, [pc, #68]	; (8009ff0 <vTaskStartScheduler+0xb4>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fb0:	4b10      	ldr	r3, [pc, #64]	; (8009ff4 <vTaskStartScheduler+0xb8>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fb6:	f000 fe93 	bl	800ace0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fba:	e00d      	b.n	8009fd8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc2:	d109      	bne.n	8009fd8 <vTaskStartScheduler+0x9c>
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e7fe      	b.n	8009fd6 <vTaskStartScheduler+0x9a>
}
 8009fd8:	bf00      	nop
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	0800c66c 	.word	0x0800c66c
 8009fe4:	0800a5c5 	.word	0x0800a5c5
 8009fe8:	200006b4 	.word	0x200006b4
 8009fec:	200006b0 	.word	0x200006b0
 8009ff0:	2000069c 	.word	0x2000069c
 8009ff4:	20000694 	.word	0x20000694

08009ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009ffc:	4b04      	ldr	r3, [pc, #16]	; (800a010 <vTaskSuspendAll+0x18>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3301      	adds	r3, #1
 800a002:	4a03      	ldr	r2, [pc, #12]	; (800a010 <vTaskSuspendAll+0x18>)
 800a004:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a006:	bf00      	nop
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	200006b8 	.word	0x200006b8

0800a014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a022:	4b41      	ldr	r3, [pc, #260]	; (800a128 <xTaskResumeAll+0x114>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d109      	bne.n	800a03e <xTaskResumeAll+0x2a>
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	e7fe      	b.n	800a03c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a03e:	f000 feed 	bl	800ae1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a042:	4b39      	ldr	r3, [pc, #228]	; (800a128 <xTaskResumeAll+0x114>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3b01      	subs	r3, #1
 800a048:	4a37      	ldr	r2, [pc, #220]	; (800a128 <xTaskResumeAll+0x114>)
 800a04a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a04c:	4b36      	ldr	r3, [pc, #216]	; (800a128 <xTaskResumeAll+0x114>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d161      	bne.n	800a118 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a054:	4b35      	ldr	r3, [pc, #212]	; (800a12c <xTaskResumeAll+0x118>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d05d      	beq.n	800a118 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a05c:	e02e      	b.n	800a0bc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a05e:	4b34      	ldr	r3, [pc, #208]	; (800a130 <xTaskResumeAll+0x11c>)
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3318      	adds	r3, #24
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fe50 	bl	8008d10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3304      	adds	r3, #4
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe fe4b 	bl	8008d10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07e:	2201      	movs	r2, #1
 800a080:	409a      	lsls	r2, r3
 800a082:	4b2c      	ldr	r3, [pc, #176]	; (800a134 <xTaskResumeAll+0x120>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4313      	orrs	r3, r2
 800a088:	4a2a      	ldr	r2, [pc, #168]	; (800a134 <xTaskResumeAll+0x120>)
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4a27      	ldr	r2, [pc, #156]	; (800a138 <xTaskResumeAll+0x124>)
 800a09a:	441a      	add	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f7fe fdd7 	bl	8008c56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ac:	4b23      	ldr	r3, [pc, #140]	; (800a13c <xTaskResumeAll+0x128>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d302      	bcc.n	800a0bc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a0b6:	4b22      	ldr	r3, [pc, #136]	; (800a140 <xTaskResumeAll+0x12c>)
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0bc:	4b1c      	ldr	r3, [pc, #112]	; (800a130 <xTaskResumeAll+0x11c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1cc      	bne.n	800a05e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0ca:	f000 fb2d 	bl	800a728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a0ce:	4b1d      	ldr	r3, [pc, #116]	; (800a144 <xTaskResumeAll+0x130>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d010      	beq.n	800a0fc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0da:	f000 f859 	bl	800a190 <xTaskIncrementTick>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a0e4:	4b16      	ldr	r3, [pc, #88]	; (800a140 <xTaskResumeAll+0x12c>)
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f1      	bne.n	800a0da <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a0f6:	4b13      	ldr	r3, [pc, #76]	; (800a144 <xTaskResumeAll+0x130>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a0fc:	4b10      	ldr	r3, [pc, #64]	; (800a140 <xTaskResumeAll+0x12c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d009      	beq.n	800a118 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a104:	2301      	movs	r3, #1
 800a106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a108:	4b0f      	ldr	r3, [pc, #60]	; (800a148 <xTaskResumeAll+0x134>)
 800a10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a118:	f000 feae 	bl	800ae78 <vPortExitCritical>

	return xAlreadyYielded;
 800a11c:	68bb      	ldr	r3, [r7, #8]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	200006b8 	.word	0x200006b8
 800a12c:	20000690 	.word	0x20000690
 800a130:	20000650 	.word	0x20000650
 800a134:	20000698 	.word	0x20000698
 800a138:	20000594 	.word	0x20000594
 800a13c:	20000590 	.word	0x20000590
 800a140:	200006a4 	.word	0x200006a4
 800a144:	200006a0 	.word	0x200006a0
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a152:	4b05      	ldr	r3, [pc, #20]	; (800a168 <xTaskGetTickCount+0x1c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a158:	687b      	ldr	r3, [r7, #4]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	20000694 	.word	0x20000694

0800a16c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a172:	f000 ff2f 	bl	800afd4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a176:	2300      	movs	r3, #0
 800a178:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a17a:	4b04      	ldr	r3, [pc, #16]	; (800a18c <xTaskGetTickCountFromISR+0x20>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a180:	683b      	ldr	r3, [r7, #0]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000694 	.word	0x20000694

0800a190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a19a:	4b4e      	ldr	r3, [pc, #312]	; (800a2d4 <xTaskIncrementTick+0x144>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f040 8087 	bne.w	800a2b2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1a4:	4b4c      	ldr	r3, [pc, #304]	; (800a2d8 <xTaskIncrementTick+0x148>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1ac:	4a4a      	ldr	r2, [pc, #296]	; (800a2d8 <xTaskIncrementTick+0x148>)
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d11f      	bne.n	800a1f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1b8:	4b48      	ldr	r3, [pc, #288]	; (800a2dc <xTaskIncrementTick+0x14c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d009      	beq.n	800a1d6 <xTaskIncrementTick+0x46>
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	e7fe      	b.n	800a1d4 <xTaskIncrementTick+0x44>
 800a1d6:	4b41      	ldr	r3, [pc, #260]	; (800a2dc <xTaskIncrementTick+0x14c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	4b40      	ldr	r3, [pc, #256]	; (800a2e0 <xTaskIncrementTick+0x150>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a3e      	ldr	r2, [pc, #248]	; (800a2dc <xTaskIncrementTick+0x14c>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	4a3e      	ldr	r2, [pc, #248]	; (800a2e0 <xTaskIncrementTick+0x150>)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	4b3e      	ldr	r3, [pc, #248]	; (800a2e4 <xTaskIncrementTick+0x154>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	4a3c      	ldr	r2, [pc, #240]	; (800a2e4 <xTaskIncrementTick+0x154>)
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	f000 fa98 	bl	800a728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1f8:	4b3b      	ldr	r3, [pc, #236]	; (800a2e8 <xTaskIncrementTick+0x158>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d348      	bcc.n	800a294 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a202:	4b36      	ldr	r3, [pc, #216]	; (800a2dc <xTaskIncrementTick+0x14c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a20c:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <xTaskIncrementTick+0x158>)
 800a20e:	f04f 32ff 	mov.w	r2, #4294967295
 800a212:	601a      	str	r2, [r3, #0]
					break;
 800a214:	e03e      	b.n	800a294 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a216:	4b31      	ldr	r3, [pc, #196]	; (800a2dc <xTaskIncrementTick+0x14c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d203      	bcs.n	800a236 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a22e:	4a2e      	ldr	r2, [pc, #184]	; (800a2e8 <xTaskIncrementTick+0x158>)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a234:	e02e      	b.n	800a294 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	3304      	adds	r3, #4
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fd68 	bl	8008d10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	3318      	adds	r3, #24
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fe fd5f 	bl	8008d10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	2201      	movs	r2, #1
 800a258:	409a      	lsls	r2, r3
 800a25a:	4b24      	ldr	r3, [pc, #144]	; (800a2ec <xTaskIncrementTick+0x15c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4313      	orrs	r3, r2
 800a260:	4a22      	ldr	r2, [pc, #136]	; (800a2ec <xTaskIncrementTick+0x15c>)
 800a262:	6013      	str	r3, [r2, #0]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	4613      	mov	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4a1f      	ldr	r2, [pc, #124]	; (800a2f0 <xTaskIncrementTick+0x160>)
 800a272:	441a      	add	r2, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	3304      	adds	r3, #4
 800a278:	4619      	mov	r1, r3
 800a27a:	4610      	mov	r0, r2
 800a27c:	f7fe fceb 	bl	8008c56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a284:	4b1b      	ldr	r3, [pc, #108]	; (800a2f4 <xTaskIncrementTick+0x164>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d3b9      	bcc.n	800a202 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a28e:	2301      	movs	r3, #1
 800a290:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a292:	e7b6      	b.n	800a202 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a294:	4b17      	ldr	r3, [pc, #92]	; (800a2f4 <xTaskIncrementTick+0x164>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29a:	4915      	ldr	r1, [pc, #84]	; (800a2f0 <xTaskIncrementTick+0x160>)
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	440b      	add	r3, r1
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d907      	bls.n	800a2bc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	e004      	b.n	800a2bc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a2b2:	4b11      	ldr	r3, [pc, #68]	; (800a2f8 <xTaskIncrementTick+0x168>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	4a0f      	ldr	r2, [pc, #60]	; (800a2f8 <xTaskIncrementTick+0x168>)
 800a2ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a2bc:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <xTaskIncrementTick+0x16c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a2c8:	697b      	ldr	r3, [r7, #20]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200006b8 	.word	0x200006b8
 800a2d8:	20000694 	.word	0x20000694
 800a2dc:	20000648 	.word	0x20000648
 800a2e0:	2000064c 	.word	0x2000064c
 800a2e4:	200006a8 	.word	0x200006a8
 800a2e8:	200006b0 	.word	0x200006b0
 800a2ec:	20000698 	.word	0x20000698
 800a2f0:	20000594 	.word	0x20000594
 800a2f4:	20000590 	.word	0x20000590
 800a2f8:	200006a0 	.word	0x200006a0
 800a2fc:	200006a4 	.word	0x200006a4

0800a300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a306:	4b26      	ldr	r3, [pc, #152]	; (800a3a0 <vTaskSwitchContext+0xa0>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a30e:	4b25      	ldr	r3, [pc, #148]	; (800a3a4 <vTaskSwitchContext+0xa4>)
 800a310:	2201      	movs	r2, #1
 800a312:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a314:	e03e      	b.n	800a394 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a316:	4b23      	ldr	r3, [pc, #140]	; (800a3a4 <vTaskSwitchContext+0xa4>)
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31c:	4b22      	ldr	r3, [pc, #136]	; (800a3a8 <vTaskSwitchContext+0xa8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	fab3 f383 	clz	r3, r3
 800a328:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a32a:	7afb      	ldrb	r3, [r7, #11]
 800a32c:	f1c3 031f 	rsb	r3, r3, #31
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	491e      	ldr	r1, [pc, #120]	; (800a3ac <vTaskSwitchContext+0xac>)
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	e7fe      	b.n	800a358 <vTaskSwitchContext+0x58>
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4a11      	ldr	r2, [pc, #68]	; (800a3ac <vTaskSwitchContext+0xac>)
 800a366:	4413      	add	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	605a      	str	r2, [r3, #4]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	685a      	ldr	r2, [r3, #4]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	3308      	adds	r3, #8
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d104      	bne.n	800a38a <vTaskSwitchContext+0x8a>
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	605a      	str	r2, [r3, #4]
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	4a07      	ldr	r2, [pc, #28]	; (800a3b0 <vTaskSwitchContext+0xb0>)
 800a392:	6013      	str	r3, [r2, #0]
}
 800a394:	bf00      	nop
 800a396:	371c      	adds	r7, #28
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	200006b8 	.word	0x200006b8
 800a3a4:	200006a4 	.word	0x200006a4
 800a3a8:	20000698 	.word	0x20000698
 800a3ac:	20000594 	.word	0x20000594
 800a3b0:	20000590 	.word	0x20000590

0800a3b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d109      	bne.n	800a3d8 <vTaskPlaceOnEventList+0x24>
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	e7fe      	b.n	800a3d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3d8:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <vTaskPlaceOnEventList+0x44>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3318      	adds	r3, #24
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7fe fc5c 	bl	8008c9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	6838      	ldr	r0, [r7, #0]
 800a3ea:	f000 fb8b 	bl	800ab04 <prvAddCurrentTaskToDelayedList>
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000590 	.word	0x20000590

0800a3fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d109      	bne.n	800a426 <xTaskRemoveFromEventList+0x2a>
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	e7fe      	b.n	800a424 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	3318      	adds	r3, #24
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fc70 	bl	8008d10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a430:	4b1d      	ldr	r3, [pc, #116]	; (800a4a8 <xTaskRemoveFromEventList+0xac>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d11c      	bne.n	800a472 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	3304      	adds	r3, #4
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe fc67 	bl	8008d10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	2201      	movs	r2, #1
 800a448:	409a      	lsls	r2, r3
 800a44a:	4b18      	ldr	r3, [pc, #96]	; (800a4ac <xTaskRemoveFromEventList+0xb0>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4313      	orrs	r3, r2
 800a450:	4a16      	ldr	r2, [pc, #88]	; (800a4ac <xTaskRemoveFromEventList+0xb0>)
 800a452:	6013      	str	r3, [r2, #0]
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a458:	4613      	mov	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4a13      	ldr	r2, [pc, #76]	; (800a4b0 <xTaskRemoveFromEventList+0xb4>)
 800a462:	441a      	add	r2, r3
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	3304      	adds	r3, #4
 800a468:	4619      	mov	r1, r3
 800a46a:	4610      	mov	r0, r2
 800a46c:	f7fe fbf3 	bl	8008c56 <vListInsertEnd>
 800a470:	e005      	b.n	800a47e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	3318      	adds	r3, #24
 800a476:	4619      	mov	r1, r3
 800a478:	480e      	ldr	r0, [pc, #56]	; (800a4b4 <xTaskRemoveFromEventList+0xb8>)
 800a47a:	f7fe fbec 	bl	8008c56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a482:	4b0d      	ldr	r3, [pc, #52]	; (800a4b8 <xTaskRemoveFromEventList+0xbc>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	429a      	cmp	r2, r3
 800a48a:	d905      	bls.n	800a498 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a48c:	2301      	movs	r3, #1
 800a48e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a490:	4b0a      	ldr	r3, [pc, #40]	; (800a4bc <xTaskRemoveFromEventList+0xc0>)
 800a492:	2201      	movs	r2, #1
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	e001      	b.n	800a49c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a498:	2300      	movs	r3, #0
 800a49a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a49c:	697b      	ldr	r3, [r7, #20]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200006b8 	.word	0x200006b8
 800a4ac:	20000698 	.word	0x20000698
 800a4b0:	20000594 	.word	0x20000594
 800a4b4:	20000650 	.word	0x20000650
 800a4b8:	20000590 	.word	0x20000590
 800a4bc:	200006a4 	.word	0x200006a4

0800a4c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4c8:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <vTaskInternalSetTimeOutState+0x24>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4d0:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <vTaskInternalSetTimeOutState+0x28>)
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	605a      	str	r2, [r3, #4]
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	200006a8 	.word	0x200006a8
 800a4e8:	20000694 	.word	0x20000694

0800a4ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d109      	bne.n	800a510 <xTaskCheckForTimeOut+0x24>
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	613b      	str	r3, [r7, #16]
 800a50e:	e7fe      	b.n	800a50e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d109      	bne.n	800a52a <xTaskCheckForTimeOut+0x3e>
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e7fe      	b.n	800a528 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a52a:	f000 fc77 	bl	800ae1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a52e:	4b1d      	ldr	r3, [pc, #116]	; (800a5a4 <xTaskCheckForTimeOut+0xb8>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d102      	bne.n	800a54e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a548:	2300      	movs	r3, #0
 800a54a:	61fb      	str	r3, [r7, #28]
 800a54c:	e023      	b.n	800a596 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <xTaskCheckForTimeOut+0xbc>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d007      	beq.n	800a56a <xTaskCheckForTimeOut+0x7e>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	429a      	cmp	r2, r3
 800a562:	d302      	bcc.n	800a56a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a564:	2301      	movs	r3, #1
 800a566:	61fb      	str	r3, [r7, #28]
 800a568:	e015      	b.n	800a596 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	429a      	cmp	r2, r3
 800a572:	d20b      	bcs.n	800a58c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	1ad2      	subs	r2, r2, r3
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff ff9d 	bl	800a4c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a586:	2300      	movs	r3, #0
 800a588:	61fb      	str	r3, [r7, #28]
 800a58a:	e004      	b.n	800a596 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a592:	2301      	movs	r3, #1
 800a594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a596:	f000 fc6f 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 800a59a:	69fb      	ldr	r3, [r7, #28]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3720      	adds	r7, #32
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000694 	.word	0x20000694
 800a5a8:	200006a8 	.word	0x200006a8

0800a5ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5b0:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <vTaskMissedYield+0x14>)
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	601a      	str	r2, [r3, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	200006a4 	.word	0x200006a4

0800a5c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5cc:	f000 f852 	bl	800a674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <prvIdleTask+0x28>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d9f9      	bls.n	800a5cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5d8:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <prvIdleTask+0x2c>)
 800a5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5e8:	e7f0      	b.n	800a5cc <prvIdleTask+0x8>
 800a5ea:	bf00      	nop
 800a5ec:	20000594 	.word	0x20000594
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	607b      	str	r3, [r7, #4]
 800a5fe:	e00c      	b.n	800a61a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4a12      	ldr	r2, [pc, #72]	; (800a654 <prvInitialiseTaskLists+0x60>)
 800a60c:	4413      	add	r3, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe faf4 	bl	8008bfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3301      	adds	r3, #1
 800a618:	607b      	str	r3, [r7, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b06      	cmp	r3, #6
 800a61e:	d9ef      	bls.n	800a600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a620:	480d      	ldr	r0, [pc, #52]	; (800a658 <prvInitialiseTaskLists+0x64>)
 800a622:	f7fe faeb 	bl	8008bfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a626:	480d      	ldr	r0, [pc, #52]	; (800a65c <prvInitialiseTaskLists+0x68>)
 800a628:	f7fe fae8 	bl	8008bfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a62c:	480c      	ldr	r0, [pc, #48]	; (800a660 <prvInitialiseTaskLists+0x6c>)
 800a62e:	f7fe fae5 	bl	8008bfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a632:	480c      	ldr	r0, [pc, #48]	; (800a664 <prvInitialiseTaskLists+0x70>)
 800a634:	f7fe fae2 	bl	8008bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a638:	480b      	ldr	r0, [pc, #44]	; (800a668 <prvInitialiseTaskLists+0x74>)
 800a63a:	f7fe fadf 	bl	8008bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a63e:	4b0b      	ldr	r3, [pc, #44]	; (800a66c <prvInitialiseTaskLists+0x78>)
 800a640:	4a05      	ldr	r2, [pc, #20]	; (800a658 <prvInitialiseTaskLists+0x64>)
 800a642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <prvInitialiseTaskLists+0x7c>)
 800a646:	4a05      	ldr	r2, [pc, #20]	; (800a65c <prvInitialiseTaskLists+0x68>)
 800a648:	601a      	str	r2, [r3, #0]
}
 800a64a:	bf00      	nop
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20000594 	.word	0x20000594
 800a658:	20000620 	.word	0x20000620
 800a65c:	20000634 	.word	0x20000634
 800a660:	20000650 	.word	0x20000650
 800a664:	20000664 	.word	0x20000664
 800a668:	2000067c 	.word	0x2000067c
 800a66c:	20000648 	.word	0x20000648
 800a670:	2000064c 	.word	0x2000064c

0800a674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a67a:	e019      	b.n	800a6b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a67c:	f000 fbce 	bl	800ae1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a680:	4b0f      	ldr	r3, [pc, #60]	; (800a6c0 <prvCheckTasksWaitingTermination+0x4c>)
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	3304      	adds	r3, #4
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe fb3f 	bl	8008d10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <prvCheckTasksWaitingTermination+0x50>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	3b01      	subs	r3, #1
 800a698:	4a0a      	ldr	r2, [pc, #40]	; (800a6c4 <prvCheckTasksWaitingTermination+0x50>)
 800a69a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a69c:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <prvCheckTasksWaitingTermination+0x54>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	4a09      	ldr	r2, [pc, #36]	; (800a6c8 <prvCheckTasksWaitingTermination+0x54>)
 800a6a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6a6:	f000 fbe7 	bl	800ae78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f80e 	bl	800a6cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6b0:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <prvCheckTasksWaitingTermination+0x54>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1e1      	bne.n	800a67c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20000664 	.word	0x20000664
 800a6c4:	20000690 	.word	0x20000690
 800a6c8:	20000678 	.word	0x20000678

0800a6cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d108      	bne.n	800a6f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 fd76 	bl	800b1d4 <vPortFree>
				vPortFree( pxTCB );
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fd73 	bl	800b1d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6ee:	e017      	b.n	800a720 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d103      	bne.n	800a702 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fd6a 	bl	800b1d4 <vPortFree>
	}
 800a700:	e00e      	b.n	800a720 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d009      	beq.n	800a720 <prvDeleteTCB+0x54>
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	60fb      	str	r3, [r7, #12]
 800a71e:	e7fe      	b.n	800a71e <prvDeleteTCB+0x52>
	}
 800a720:	bf00      	nop
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a72e:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <prvResetNextTaskUnblockTime+0x38>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a738:	4b0a      	ldr	r3, [pc, #40]	; (800a764 <prvResetNextTaskUnblockTime+0x3c>)
 800a73a:	f04f 32ff 	mov.w	r2, #4294967295
 800a73e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a740:	e008      	b.n	800a754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <prvResetNextTaskUnblockTime+0x38>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4a04      	ldr	r2, [pc, #16]	; (800a764 <prvResetNextTaskUnblockTime+0x3c>)
 800a752:	6013      	str	r3, [r2, #0]
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	20000648 	.word	0x20000648
 800a764:	200006b0 	.word	0x200006b0

0800a768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a76e:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <xTaskGetSchedulerState+0x34>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d102      	bne.n	800a77c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a776:	2301      	movs	r3, #1
 800a778:	607b      	str	r3, [r7, #4]
 800a77a:	e008      	b.n	800a78e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a77c:	4b08      	ldr	r3, [pc, #32]	; (800a7a0 <xTaskGetSchedulerState+0x38>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d102      	bne.n	800a78a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a784:	2302      	movs	r3, #2
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	e001      	b.n	800a78e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a78a:	2300      	movs	r3, #0
 800a78c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a78e:	687b      	ldr	r3, [r7, #4]
	}
 800a790:	4618      	mov	r0, r3
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	2000069c 	.word	0x2000069c
 800a7a0:	200006b8 	.word	0x200006b8

0800a7a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d069      	beq.n	800a88e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7be:	4b36      	ldr	r3, [pc, #216]	; (800a898 <xTaskPriorityInherit+0xf4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d259      	bcs.n	800a87c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	db06      	blt.n	800a7de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d0:	4b31      	ldr	r3, [pc, #196]	; (800a898 <xTaskPriorityInherit+0xf4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d6:	f1c3 0207 	rsb	r2, r3, #7
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	6959      	ldr	r1, [r3, #20]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4413      	add	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4a2b      	ldr	r2, [pc, #172]	; (800a89c <xTaskPriorityInherit+0xf8>)
 800a7f0:	4413      	add	r3, r2
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	d13a      	bne.n	800a86c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fa88 	bl	8008d10 <uxListRemove>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d115      	bne.n	800a832 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80a:	4924      	ldr	r1, [pc, #144]	; (800a89c <xTaskPriorityInherit+0xf8>)
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	440b      	add	r3, r1
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <xTaskPriorityInherit+0x8e>
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a820:	2201      	movs	r2, #1
 800a822:	fa02 f303 	lsl.w	r3, r2, r3
 800a826:	43da      	mvns	r2, r3
 800a828:	4b1d      	ldr	r3, [pc, #116]	; (800a8a0 <xTaskPriorityInherit+0xfc>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4013      	ands	r3, r2
 800a82e:	4a1c      	ldr	r2, [pc, #112]	; (800a8a0 <xTaskPriorityInherit+0xfc>)
 800a830:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a832:	4b19      	ldr	r3, [pc, #100]	; (800a898 <xTaskPriorityInherit+0xf4>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	2201      	movs	r2, #1
 800a842:	409a      	lsls	r2, r3
 800a844:	4b16      	ldr	r3, [pc, #88]	; (800a8a0 <xTaskPriorityInherit+0xfc>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4313      	orrs	r3, r2
 800a84a:	4a15      	ldr	r2, [pc, #84]	; (800a8a0 <xTaskPriorityInherit+0xfc>)
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4a10      	ldr	r2, [pc, #64]	; (800a89c <xTaskPriorityInherit+0xf8>)
 800a85c:	441a      	add	r2, r3
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	3304      	adds	r3, #4
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f7fe f9f6 	bl	8008c56 <vListInsertEnd>
 800a86a:	e004      	b.n	800a876 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a86c:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <xTaskPriorityInherit+0xf4>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a876:	2301      	movs	r3, #1
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	e008      	b.n	800a88e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a880:	4b05      	ldr	r3, [pc, #20]	; (800a898 <xTaskPriorityInherit+0xf4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	429a      	cmp	r2, r3
 800a888:	d201      	bcs.n	800a88e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a88a:	2301      	movs	r3, #1
 800a88c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a88e:	68fb      	ldr	r3, [r7, #12]
	}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20000590 	.word	0x20000590
 800a89c:	20000594 	.word	0x20000594
 800a8a0:	20000698 	.word	0x20000698

0800a8a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d06c      	beq.n	800a994 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8ba:	4b39      	ldr	r3, [pc, #228]	; (800a9a0 <xTaskPriorityDisinherit+0xfc>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d009      	beq.n	800a8d8 <xTaskPriorityDisinherit+0x34>
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	e7fe      	b.n	800a8d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d109      	bne.n	800a8f4 <xTaskPriorityDisinherit+0x50>
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	e7fe      	b.n	800a8f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f8:	1e5a      	subs	r2, r3, #1
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a906:	429a      	cmp	r2, r3
 800a908:	d044      	beq.n	800a994 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d140      	bne.n	800a994 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	3304      	adds	r3, #4
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe f9fa 	bl	8008d10 <uxListRemove>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d115      	bne.n	800a94e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a926:	491f      	ldr	r1, [pc, #124]	; (800a9a4 <xTaskPriorityDisinherit+0x100>)
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <xTaskPriorityDisinherit+0xaa>
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	2201      	movs	r2, #1
 800a93e:	fa02 f303 	lsl.w	r3, r2, r3
 800a942:	43da      	mvns	r2, r3
 800a944:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <xTaskPriorityDisinherit+0x104>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4013      	ands	r3, r2
 800a94a:	4a17      	ldr	r2, [pc, #92]	; (800a9a8 <xTaskPriorityDisinherit+0x104>)
 800a94c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95a:	f1c3 0207 	rsb	r2, r3, #7
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a966:	2201      	movs	r2, #1
 800a968:	409a      	lsls	r2, r3
 800a96a:	4b0f      	ldr	r3, [pc, #60]	; (800a9a8 <xTaskPriorityDisinherit+0x104>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4313      	orrs	r3, r2
 800a970:	4a0d      	ldr	r2, [pc, #52]	; (800a9a8 <xTaskPriorityDisinherit+0x104>)
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a978:	4613      	mov	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4413      	add	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4a08      	ldr	r2, [pc, #32]	; (800a9a4 <xTaskPriorityDisinherit+0x100>)
 800a982:	441a      	add	r2, r3
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	3304      	adds	r3, #4
 800a988:	4619      	mov	r1, r3
 800a98a:	4610      	mov	r0, r2
 800a98c:	f7fe f963 	bl	8008c56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a990:	2301      	movs	r3, #1
 800a992:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a994:	697b      	ldr	r3, [r7, #20]
	}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20000590 	.word	0x20000590
 800a9a4:	20000594 	.word	0x20000594
 800a9a8:	20000698 	.word	0x20000698

0800a9ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 8081 	beq.w	800aac8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d109      	bne.n	800a9e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	e7fe      	b.n	800a9e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d902      	bls.n	800a9f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	61fb      	str	r3, [r7, #28]
 800a9f0:	e002      	b.n	800a9f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	69fa      	ldr	r2, [r7, #28]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d062      	beq.n	800aac8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d15d      	bne.n	800aac8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aa0c:	4b30      	ldr	r3, [pc, #192]	; (800aad0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d109      	bne.n	800aa2a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800aa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	60bb      	str	r3, [r7, #8]
 800aa28:	e7fe      	b.n	800aa28 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	69fa      	ldr	r2, [r7, #28]
 800aa34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	db04      	blt.n	800aa48 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	f1c3 0207 	rsb	r2, r3, #7
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	6959      	ldr	r1, [r3, #20]
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4a1f      	ldr	r2, [pc, #124]	; (800aad4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800aa58:	4413      	add	r3, r2
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	d134      	bne.n	800aac8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	3304      	adds	r3, #4
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe f954 	bl	8008d10 <uxListRemove>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d115      	bne.n	800aa9a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa72:	4918      	ldr	r1, [pc, #96]	; (800aad4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800aa74:	4613      	mov	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	440b      	add	r3, r1
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa88:	2201      	movs	r2, #1
 800aa8a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8e:	43da      	mvns	r2, r3
 800aa90:	4b11      	ldr	r3, [pc, #68]	; (800aad8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4013      	ands	r3, r2
 800aa96:	4a10      	ldr	r2, [pc, #64]	; (800aad8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800aa98:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	409a      	lsls	r2, r3
 800aaa2:	4b0d      	ldr	r3, [pc, #52]	; (800aad8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	4a0b      	ldr	r2, [pc, #44]	; (800aad8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4a06      	ldr	r2, [pc, #24]	; (800aad4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800aaba:	441a      	add	r2, r3
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fe f8c7 	bl	8008c56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aac8:	bf00      	nop
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	20000590 	.word	0x20000590
 800aad4:	20000594 	.word	0x20000594
 800aad8:	20000698 	.word	0x20000698

0800aadc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aae0:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <pvTaskIncrementMutexHeldCount+0x24>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d004      	beq.n	800aaf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aae8:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <pvTaskIncrementMutexHeldCount+0x24>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aaee:	3201      	adds	r2, #1
 800aaf0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800aaf2:	4b03      	ldr	r3, [pc, #12]	; (800ab00 <pvTaskIncrementMutexHeldCount+0x24>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
	}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	20000590 	.word	0x20000590

0800ab04 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab0e:	4b29      	ldr	r3, [pc, #164]	; (800abb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab14:	4b28      	ldr	r3, [pc, #160]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe f8f8 	bl	8008d10 <uxListRemove>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10b      	bne.n	800ab3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ab26:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab32:	43da      	mvns	r2, r3
 800ab34:	4b21      	ldr	r3, [pc, #132]	; (800abbc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4013      	ands	r3, r2
 800ab3a:	4a20      	ldr	r2, [pc, #128]	; (800abbc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab44:	d10a      	bne.n	800ab5c <prvAddCurrentTaskToDelayedList+0x58>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d007      	beq.n	800ab5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab4c:	4b1a      	ldr	r3, [pc, #104]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3304      	adds	r3, #4
 800ab52:	4619      	mov	r1, r3
 800ab54:	481a      	ldr	r0, [pc, #104]	; (800abc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ab56:	f7fe f87e 	bl	8008c56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab5a:	e026      	b.n	800abaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4413      	add	r3, r2
 800ab62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab64:	4b14      	ldr	r3, [pc, #80]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d209      	bcs.n	800ab88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab74:	4b13      	ldr	r3, [pc, #76]	; (800abc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7fe f88c 	bl	8008c9e <vListInsert>
}
 800ab86:	e010      	b.n	800abaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab88:	4b0f      	ldr	r3, [pc, #60]	; (800abc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3304      	adds	r3, #4
 800ab92:	4619      	mov	r1, r3
 800ab94:	4610      	mov	r0, r2
 800ab96:	f7fe f882 	bl	8008c9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab9a:	4b0c      	ldr	r3, [pc, #48]	; (800abcc <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d202      	bcs.n	800abaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aba4:	4a09      	ldr	r2, [pc, #36]	; (800abcc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	6013      	str	r3, [r2, #0]
}
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20000694 	.word	0x20000694
 800abb8:	20000590 	.word	0x20000590
 800abbc:	20000698 	.word	0x20000698
 800abc0:	2000067c 	.word	0x2000067c
 800abc4:	2000064c 	.word	0x2000064c
 800abc8:	20000648 	.word	0x20000648
 800abcc:	200006b0 	.word	0x200006b0

0800abd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3b04      	subs	r3, #4
 800abe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3b04      	subs	r3, #4
 800abee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f023 0201 	bic.w	r2, r3, #1
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3b04      	subs	r3, #4
 800abfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac00:	4a0c      	ldr	r2, [pc, #48]	; (800ac34 <pxPortInitialiseStack+0x64>)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3b14      	subs	r3, #20
 800ac0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3b04      	subs	r3, #4
 800ac16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f06f 0202 	mvn.w	r2, #2
 800ac1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3b20      	subs	r3, #32
 800ac24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac26:	68fb      	ldr	r3, [r7, #12]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	0800ac39 	.word	0x0800ac39

0800ac38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac42:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <prvTaskExitError+0x50>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d009      	beq.n	800ac60 <prvTaskExitError+0x28>
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	60fb      	str	r3, [r7, #12]
 800ac5e:	e7fe      	b.n	800ac5e <prvTaskExitError+0x26>
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac72:	bf00      	nop
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d0fc      	beq.n	800ac74 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac7a:	bf00      	nop
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	20000048 	.word	0x20000048
 800ac8c:	00000000 	.word	0x00000000

0800ac90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac90:	4b07      	ldr	r3, [pc, #28]	; (800acb0 <pxCurrentTCBConst2>)
 800ac92:	6819      	ldr	r1, [r3, #0]
 800ac94:	6808      	ldr	r0, [r1, #0]
 800ac96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	f380 8809 	msr	PSP, r0
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f04f 0000 	mov.w	r0, #0
 800aca6:	f380 8811 	msr	BASEPRI, r0
 800acaa:	4770      	bx	lr
 800acac:	f3af 8000 	nop.w

0800acb0 <pxCurrentTCBConst2>:
 800acb0:	20000590 	.word	0x20000590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop

0800acb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800acb8:	4808      	ldr	r0, [pc, #32]	; (800acdc <prvPortStartFirstTask+0x24>)
 800acba:	6800      	ldr	r0, [r0, #0]
 800acbc:	6800      	ldr	r0, [r0, #0]
 800acbe:	f380 8808 	msr	MSP, r0
 800acc2:	f04f 0000 	mov.w	r0, #0
 800acc6:	f380 8814 	msr	CONTROL, r0
 800acca:	b662      	cpsie	i
 800accc:	b661      	cpsie	f
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	df00      	svc	0
 800acd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acda:	bf00      	nop
 800acdc:	e000ed08 	.word	0xe000ed08

0800ace0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ace6:	4b44      	ldr	r3, [pc, #272]	; (800adf8 <xPortStartScheduler+0x118>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a44      	ldr	r2, [pc, #272]	; (800adfc <xPortStartScheduler+0x11c>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d109      	bne.n	800ad04 <xPortStartScheduler+0x24>
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	e7fe      	b.n	800ad02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad04:	4b3c      	ldr	r3, [pc, #240]	; (800adf8 <xPortStartScheduler+0x118>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a3d      	ldr	r2, [pc, #244]	; (800ae00 <xPortStartScheduler+0x120>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d109      	bne.n	800ad22 <xPortStartScheduler+0x42>
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	e7fe      	b.n	800ad20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad22:	4b38      	ldr	r3, [pc, #224]	; (800ae04 <xPortStartScheduler+0x124>)
 800ad24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	22ff      	movs	r2, #255	; 0xff
 800ad32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	4b30      	ldr	r3, [pc, #192]	; (800ae08 <xPortStartScheduler+0x128>)
 800ad48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad4a:	4b30      	ldr	r3, [pc, #192]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad4c:	2207      	movs	r2, #7
 800ad4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad50:	e009      	b.n	800ad66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ad52:	4b2e      	ldr	r3, [pc, #184]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	4a2c      	ldr	r2, [pc, #176]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad66:	78fb      	ldrb	r3, [r7, #3]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d0ef      	beq.n	800ad52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad72:	4b26      	ldr	r3, [pc, #152]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f1c3 0307 	rsb	r3, r3, #7
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d009      	beq.n	800ad92 <xPortStartScheduler+0xb2>
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	60bb      	str	r3, [r7, #8]
 800ad90:	e7fe      	b.n	800ad90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad92:	4b1e      	ldr	r3, [pc, #120]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	4a1c      	ldr	r2, [pc, #112]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad9c:	4b1b      	ldr	r3, [pc, #108]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ada4:	4a19      	ldr	r2, [pc, #100]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ada6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800adb0:	4b17      	ldr	r3, [pc, #92]	; (800ae10 <xPortStartScheduler+0x130>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a16      	ldr	r2, [pc, #88]	; (800ae10 <xPortStartScheduler+0x130>)
 800adb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800adba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adbc:	4b14      	ldr	r3, [pc, #80]	; (800ae10 <xPortStartScheduler+0x130>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a13      	ldr	r2, [pc, #76]	; (800ae10 <xPortStartScheduler+0x130>)
 800adc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adc8:	f000 f8d6 	bl	800af78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adcc:	4b11      	ldr	r3, [pc, #68]	; (800ae14 <xPortStartScheduler+0x134>)
 800adce:	2200      	movs	r2, #0
 800add0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800add2:	f000 f8f5 	bl	800afc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800add6:	4b10      	ldr	r3, [pc, #64]	; (800ae18 <xPortStartScheduler+0x138>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a0f      	ldr	r2, [pc, #60]	; (800ae18 <xPortStartScheduler+0x138>)
 800addc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ade0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ade2:	f7ff ff69 	bl	800acb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ade6:	f7ff fa8b 	bl	800a300 <vTaskSwitchContext>
	prvTaskExitError();
 800adea:	f7ff ff25 	bl	800ac38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	e000ed00 	.word	0xe000ed00
 800adfc:	410fc271 	.word	0x410fc271
 800ae00:	410fc270 	.word	0x410fc270
 800ae04:	e000e400 	.word	0xe000e400
 800ae08:	200006bc 	.word	0x200006bc
 800ae0c:	200006c0 	.word	0x200006c0
 800ae10:	e000ed20 	.word	0xe000ed20
 800ae14:	20000048 	.word	0x20000048
 800ae18:	e000ef34 	.word	0xe000ef34

0800ae1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae34:	4b0e      	ldr	r3, [pc, #56]	; (800ae70 <vPortEnterCritical+0x54>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	4a0d      	ldr	r2, [pc, #52]	; (800ae70 <vPortEnterCritical+0x54>)
 800ae3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae3e:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <vPortEnterCritical+0x54>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d10e      	bne.n	800ae64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <vPortEnterCritical+0x58>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d009      	beq.n	800ae64 <vPortEnterCritical+0x48>
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	603b      	str	r3, [r7, #0]
 800ae62:	e7fe      	b.n	800ae62 <vPortEnterCritical+0x46>
	}
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20000048 	.word	0x20000048
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae7e:	4b11      	ldr	r3, [pc, #68]	; (800aec4 <vPortExitCritical+0x4c>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d109      	bne.n	800ae9a <vPortExitCritical+0x22>
 800ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	607b      	str	r3, [r7, #4]
 800ae98:	e7fe      	b.n	800ae98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <vPortExitCritical+0x4c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	4a08      	ldr	r2, [pc, #32]	; (800aec4 <vPortExitCritical+0x4c>)
 800aea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aea4:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <vPortExitCritical+0x4c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d104      	bne.n	800aeb6 <vPortExitCritical+0x3e>
 800aeac:	2300      	movs	r3, #0
 800aeae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aeb6:	bf00      	nop
 800aeb8:	370c      	adds	r7, #12
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	20000048 	.word	0x20000048
	...

0800aed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aed0:	f3ef 8009 	mrs	r0, PSP
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	4b15      	ldr	r3, [pc, #84]	; (800af30 <pxCurrentTCBConst>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	f01e 0f10 	tst.w	lr, #16
 800aee0:	bf08      	it	eq
 800aee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeea:	6010      	str	r0, [r2, #0]
 800aeec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aef4:	f380 8811 	msr	BASEPRI, r0
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f7ff f9fe 	bl	800a300 <vTaskSwitchContext>
 800af04:	f04f 0000 	mov.w	r0, #0
 800af08:	f380 8811 	msr	BASEPRI, r0
 800af0c:	bc09      	pop	{r0, r3}
 800af0e:	6819      	ldr	r1, [r3, #0]
 800af10:	6808      	ldr	r0, [r1, #0]
 800af12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af16:	f01e 0f10 	tst.w	lr, #16
 800af1a:	bf08      	it	eq
 800af1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af20:	f380 8809 	msr	PSP, r0
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	f3af 8000 	nop.w

0800af30 <pxCurrentTCBConst>:
 800af30:	20000590 	.word	0x20000590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop

0800af38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af50:	f7ff f91e 	bl	800a190 <xTaskIncrementTick>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af5a:	4b06      	ldr	r3, [pc, #24]	; (800af74 <SysTick_Handler+0x3c>)
 800af5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	2300      	movs	r3, #0
 800af64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	e000ed04 	.word	0xe000ed04

0800af78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af7c:	4b0b      	ldr	r3, [pc, #44]	; (800afac <vPortSetupTimerInterrupt+0x34>)
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af82:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <vPortSetupTimerInterrupt+0x38>)
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af88:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <vPortSetupTimerInterrupt+0x3c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a0a      	ldr	r2, [pc, #40]	; (800afb8 <vPortSetupTimerInterrupt+0x40>)
 800af8e:	fba2 2303 	umull	r2, r3, r2, r3
 800af92:	099b      	lsrs	r3, r3, #6
 800af94:	4a09      	ldr	r2, [pc, #36]	; (800afbc <vPortSetupTimerInterrupt+0x44>)
 800af96:	3b01      	subs	r3, #1
 800af98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af9a:	4b04      	ldr	r3, [pc, #16]	; (800afac <vPortSetupTimerInterrupt+0x34>)
 800af9c:	2207      	movs	r2, #7
 800af9e:	601a      	str	r2, [r3, #0]
}
 800afa0:	bf00      	nop
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	e000e010 	.word	0xe000e010
 800afb0:	e000e018 	.word	0xe000e018
 800afb4:	2000003c 	.word	0x2000003c
 800afb8:	10624dd3 	.word	0x10624dd3
 800afbc:	e000e014 	.word	0xe000e014

0800afc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afd0 <vPortEnableVFP+0x10>
 800afc4:	6801      	ldr	r1, [r0, #0]
 800afc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afca:	6001      	str	r1, [r0, #0]
 800afcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afce:	bf00      	nop
 800afd0:	e000ed88 	.word	0xe000ed88

0800afd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afda:	f3ef 8305 	mrs	r3, IPSR
 800afde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b0f      	cmp	r3, #15
 800afe4:	d913      	bls.n	800b00e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afe6:	4a16      	ldr	r2, [pc, #88]	; (800b040 <vPortValidateInterruptPriority+0x6c>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aff0:	4b14      	ldr	r3, [pc, #80]	; (800b044 <vPortValidateInterruptPriority+0x70>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	7afa      	ldrb	r2, [r7, #11]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d209      	bcs.n	800b00e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	607b      	str	r3, [r7, #4]
 800b00c:	e7fe      	b.n	800b00c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b00e:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <vPortValidateInterruptPriority+0x74>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b016:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <vPortValidateInterruptPriority+0x78>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d909      	bls.n	800b032 <vPortValidateInterruptPriority+0x5e>
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	e7fe      	b.n	800b030 <vPortValidateInterruptPriority+0x5c>
	}
 800b032:	bf00      	nop
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	e000e3f0 	.word	0xe000e3f0
 800b044:	200006bc 	.word	0x200006bc
 800b048:	e000ed0c 	.word	0xe000ed0c
 800b04c:	200006c0 	.word	0x200006c0

0800b050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08a      	sub	sp, #40	; 0x28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b058:	2300      	movs	r3, #0
 800b05a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b05c:	f7fe ffcc 	bl	8009ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b060:	4b57      	ldr	r3, [pc, #348]	; (800b1c0 <pvPortMalloc+0x170>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b068:	f000 f918 	bl	800b29c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b06c:	4b55      	ldr	r3, [pc, #340]	; (800b1c4 <pvPortMalloc+0x174>)
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4013      	ands	r3, r2
 800b074:	2b00      	cmp	r3, #0
 800b076:	f040 808c 	bne.w	800b192 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d01c      	beq.n	800b0ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b080:	2208      	movs	r2, #8
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4413      	add	r3, r2
 800b086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d013      	beq.n	800b0ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f023 0307 	bic.w	r3, r3, #7
 800b098:	3308      	adds	r3, #8
 800b09a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f003 0307 	and.w	r3, r3, #7
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <pvPortMalloc+0x6a>
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	e7fe      	b.n	800b0b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d068      	beq.n	800b192 <pvPortMalloc+0x142>
 800b0c0:	4b41      	ldr	r3, [pc, #260]	; (800b1c8 <pvPortMalloc+0x178>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d863      	bhi.n	800b192 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0ca:	4b40      	ldr	r3, [pc, #256]	; (800b1cc <pvPortMalloc+0x17c>)
 800b0cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0ce:	4b3f      	ldr	r3, [pc, #252]	; (800b1cc <pvPortMalloc+0x17c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0d4:	e004      	b.n	800b0e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d903      	bls.n	800b0f2 <pvPortMalloc+0xa2>
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1f1      	bne.n	800b0d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0f2:	4b33      	ldr	r3, [pc, #204]	; (800b1c0 <pvPortMalloc+0x170>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d04a      	beq.n	800b192 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2208      	movs	r2, #8
 800b102:	4413      	add	r3, r2
 800b104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	1ad2      	subs	r2, r2, r3
 800b116:	2308      	movs	r3, #8
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d91e      	bls.n	800b15c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4413      	add	r3, r2
 800b124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	f003 0307 	and.w	r3, r3, #7
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d009      	beq.n	800b144 <pvPortMalloc+0xf4>
 800b130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	613b      	str	r3, [r7, #16]
 800b142:	e7fe      	b.n	800b142 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	1ad2      	subs	r2, r2, r3
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b156:	69b8      	ldr	r0, [r7, #24]
 800b158:	f000 f902 	bl	800b360 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b15c:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <pvPortMalloc+0x178>)
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	4a18      	ldr	r2, [pc, #96]	; (800b1c8 <pvPortMalloc+0x178>)
 800b168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b16a:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <pvPortMalloc+0x178>)
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	4b18      	ldr	r3, [pc, #96]	; (800b1d0 <pvPortMalloc+0x180>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d203      	bcs.n	800b17e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <pvPortMalloc+0x178>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a15      	ldr	r2, [pc, #84]	; (800b1d0 <pvPortMalloc+0x180>)
 800b17c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <pvPortMalloc+0x174>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	431a      	orrs	r2, r3
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b192:	f7fe ff3f 	bl	800a014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d009      	beq.n	800b1b4 <pvPortMalloc+0x164>
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	e7fe      	b.n	800b1b2 <pvPortMalloc+0x162>
	return pvReturn;
 800b1b4:	69fb      	ldr	r3, [r7, #28]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3728      	adds	r7, #40	; 0x28
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	200042cc 	.word	0x200042cc
 800b1c4:	200042d8 	.word	0x200042d8
 800b1c8:	200042d0 	.word	0x200042d0
 800b1cc:	200042c4 	.word	0x200042c4
 800b1d0:	200042d4 	.word	0x200042d4

0800b1d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d046      	beq.n	800b274 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1e6:	2308      	movs	r3, #8
 800b1e8:	425b      	negs	r3, r3
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	4b20      	ldr	r3, [pc, #128]	; (800b27c <vPortFree+0xa8>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <vPortFree+0x42>
 800b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	e7fe      	b.n	800b214 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d009      	beq.n	800b232 <vPortFree+0x5e>
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	60bb      	str	r3, [r7, #8]
 800b230:	e7fe      	b.n	800b230 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	4b11      	ldr	r3, [pc, #68]	; (800b27c <vPortFree+0xa8>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4013      	ands	r3, r2
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d019      	beq.n	800b274 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d115      	bne.n	800b274 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <vPortFree+0xa8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	43db      	mvns	r3, r3
 800b252:	401a      	ands	r2, r3
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b258:	f7fe fece 	bl	8009ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <vPortFree+0xac>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4413      	add	r3, r2
 800b266:	4a06      	ldr	r2, [pc, #24]	; (800b280 <vPortFree+0xac>)
 800b268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b26a:	6938      	ldr	r0, [r7, #16]
 800b26c:	f000 f878 	bl	800b360 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b270:	f7fe fed0 	bl	800a014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b274:	bf00      	nop
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200042d8 	.word	0x200042d8
 800b280:	200042d0 	.word	0x200042d0

0800b284 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800b284:	b480      	push	{r7}
 800b286:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800b288:	4b03      	ldr	r3, [pc, #12]	; (800b298 <xPortGetFreeHeapSize+0x14>)
 800b28a:	681b      	ldr	r3, [r3, #0]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	200042d0 	.word	0x200042d0

0800b29c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b2a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2a8:	4b27      	ldr	r3, [pc, #156]	; (800b348 <prvHeapInit+0xac>)
 800b2aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f003 0307 	and.w	r3, r3, #7
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00c      	beq.n	800b2d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3307      	adds	r3, #7
 800b2ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 0307 	bic.w	r3, r3, #7
 800b2c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	4a1f      	ldr	r2, [pc, #124]	; (800b348 <prvHeapInit+0xac>)
 800b2cc:	4413      	add	r3, r2
 800b2ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2d4:	4a1d      	ldr	r2, [pc, #116]	; (800b34c <prvHeapInit+0xb0>)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2da:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <prvHeapInit+0xb0>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	1a9b      	subs	r3, r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 0307 	bic.w	r3, r3, #7
 800b2f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4a15      	ldr	r2, [pc, #84]	; (800b350 <prvHeapInit+0xb4>)
 800b2fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2fe:	4b14      	ldr	r3, [pc, #80]	; (800b350 <prvHeapInit+0xb4>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2200      	movs	r2, #0
 800b304:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b306:	4b12      	ldr	r3, [pc, #72]	; (800b350 <prvHeapInit+0xb4>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	1ad2      	subs	r2, r2, r3
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b31c:	4b0c      	ldr	r3, [pc, #48]	; (800b350 <prvHeapInit+0xb4>)
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	4a0a      	ldr	r2, [pc, #40]	; (800b354 <prvHeapInit+0xb8>)
 800b32a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	4a09      	ldr	r2, [pc, #36]	; (800b358 <prvHeapInit+0xbc>)
 800b332:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b334:	4b09      	ldr	r3, [pc, #36]	; (800b35c <prvHeapInit+0xc0>)
 800b336:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b33a:	601a      	str	r2, [r3, #0]
}
 800b33c:	bf00      	nop
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	200006c4 	.word	0x200006c4
 800b34c:	200042c4 	.word	0x200042c4
 800b350:	200042cc 	.word	0x200042cc
 800b354:	200042d4 	.word	0x200042d4
 800b358:	200042d0 	.word	0x200042d0
 800b35c:	200042d8 	.word	0x200042d8

0800b360 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b368:	4b28      	ldr	r3, [pc, #160]	; (800b40c <prvInsertBlockIntoFreeList+0xac>)
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	e002      	b.n	800b374 <prvInsertBlockIntoFreeList+0x14>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d8f7      	bhi.n	800b36e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	4413      	add	r3, r2
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d108      	bne.n	800b3a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	441a      	add	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	441a      	add	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d118      	bne.n	800b3e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	4b15      	ldr	r3, [pc, #84]	; (800b410 <prvInsertBlockIntoFreeList+0xb0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d00d      	beq.n	800b3de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	441a      	add	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	e008      	b.n	800b3f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3de:	4b0c      	ldr	r3, [pc, #48]	; (800b410 <prvInsertBlockIntoFreeList+0xb0>)
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	601a      	str	r2, [r3, #0]
 800b3e6:	e003      	b.n	800b3f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d002      	beq.n	800b3fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3fe:	bf00      	nop
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	200042c4 	.word	0x200042c4
 800b410:	200042cc 	.word	0x200042cc

0800b414 <__errno>:
 800b414:	4b01      	ldr	r3, [pc, #4]	; (800b41c <__errno+0x8>)
 800b416:	6818      	ldr	r0, [r3, #0]
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	2000004c 	.word	0x2000004c

0800b420 <__libc_init_array>:
 800b420:	b570      	push	{r4, r5, r6, lr}
 800b422:	4e0d      	ldr	r6, [pc, #52]	; (800b458 <__libc_init_array+0x38>)
 800b424:	4c0d      	ldr	r4, [pc, #52]	; (800b45c <__libc_init_array+0x3c>)
 800b426:	1ba4      	subs	r4, r4, r6
 800b428:	10a4      	asrs	r4, r4, #2
 800b42a:	2500      	movs	r5, #0
 800b42c:	42a5      	cmp	r5, r4
 800b42e:	d109      	bne.n	800b444 <__libc_init_array+0x24>
 800b430:	4e0b      	ldr	r6, [pc, #44]	; (800b460 <__libc_init_array+0x40>)
 800b432:	4c0c      	ldr	r4, [pc, #48]	; (800b464 <__libc_init_array+0x44>)
 800b434:	f000 ff74 	bl	800c320 <_init>
 800b438:	1ba4      	subs	r4, r4, r6
 800b43a:	10a4      	asrs	r4, r4, #2
 800b43c:	2500      	movs	r5, #0
 800b43e:	42a5      	cmp	r5, r4
 800b440:	d105      	bne.n	800b44e <__libc_init_array+0x2e>
 800b442:	bd70      	pop	{r4, r5, r6, pc}
 800b444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b448:	4798      	blx	r3
 800b44a:	3501      	adds	r5, #1
 800b44c:	e7ee      	b.n	800b42c <__libc_init_array+0xc>
 800b44e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b452:	4798      	blx	r3
 800b454:	3501      	adds	r5, #1
 800b456:	e7f2      	b.n	800b43e <__libc_init_array+0x1e>
 800b458:	0800c7c8 	.word	0x0800c7c8
 800b45c:	0800c7c8 	.word	0x0800c7c8
 800b460:	0800c7c8 	.word	0x0800c7c8
 800b464:	0800c7cc 	.word	0x0800c7cc

0800b468 <memcpy>:
 800b468:	b510      	push	{r4, lr}
 800b46a:	1e43      	subs	r3, r0, #1
 800b46c:	440a      	add	r2, r1
 800b46e:	4291      	cmp	r1, r2
 800b470:	d100      	bne.n	800b474 <memcpy+0xc>
 800b472:	bd10      	pop	{r4, pc}
 800b474:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b47c:	e7f7      	b.n	800b46e <memcpy+0x6>

0800b47e <memset>:
 800b47e:	4402      	add	r2, r0
 800b480:	4603      	mov	r3, r0
 800b482:	4293      	cmp	r3, r2
 800b484:	d100      	bne.n	800b488 <memset+0xa>
 800b486:	4770      	bx	lr
 800b488:	f803 1b01 	strb.w	r1, [r3], #1
 800b48c:	e7f9      	b.n	800b482 <memset+0x4>
	...

0800b490 <iprintf>:
 800b490:	b40f      	push	{r0, r1, r2, r3}
 800b492:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <iprintf+0x2c>)
 800b494:	b513      	push	{r0, r1, r4, lr}
 800b496:	681c      	ldr	r4, [r3, #0]
 800b498:	b124      	cbz	r4, 800b4a4 <iprintf+0x14>
 800b49a:	69a3      	ldr	r3, [r4, #24]
 800b49c:	b913      	cbnz	r3, 800b4a4 <iprintf+0x14>
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 fa22 	bl	800b8e8 <__sinit>
 800b4a4:	ab05      	add	r3, sp, #20
 800b4a6:	9a04      	ldr	r2, [sp, #16]
 800b4a8:	68a1      	ldr	r1, [r4, #8]
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fbdb 	bl	800bc68 <_vfiprintf_r>
 800b4b2:	b002      	add	sp, #8
 800b4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b8:	b004      	add	sp, #16
 800b4ba:	4770      	bx	lr
 800b4bc:	2000004c 	.word	0x2000004c

0800b4c0 <_puts_r>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	460e      	mov	r6, r1
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	b118      	cbz	r0, 800b4d0 <_puts_r+0x10>
 800b4c8:	6983      	ldr	r3, [r0, #24]
 800b4ca:	b90b      	cbnz	r3, 800b4d0 <_puts_r+0x10>
 800b4cc:	f000 fa0c 	bl	800b8e8 <__sinit>
 800b4d0:	69ab      	ldr	r3, [r5, #24]
 800b4d2:	68ac      	ldr	r4, [r5, #8]
 800b4d4:	b913      	cbnz	r3, 800b4dc <_puts_r+0x1c>
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 fa06 	bl	800b8e8 <__sinit>
 800b4dc:	4b23      	ldr	r3, [pc, #140]	; (800b56c <_puts_r+0xac>)
 800b4de:	429c      	cmp	r4, r3
 800b4e0:	d117      	bne.n	800b512 <_puts_r+0x52>
 800b4e2:	686c      	ldr	r4, [r5, #4]
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	071b      	lsls	r3, r3, #28
 800b4e8:	d51d      	bpl.n	800b526 <_puts_r+0x66>
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	b1db      	cbz	r3, 800b526 <_puts_r+0x66>
 800b4ee:	3e01      	subs	r6, #1
 800b4f0:	68a3      	ldr	r3, [r4, #8]
 800b4f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	60a3      	str	r3, [r4, #8]
 800b4fa:	b9e9      	cbnz	r1, 800b538 <_puts_r+0x78>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	da2e      	bge.n	800b55e <_puts_r+0x9e>
 800b500:	4622      	mov	r2, r4
 800b502:	210a      	movs	r1, #10
 800b504:	4628      	mov	r0, r5
 800b506:	f000 f83f 	bl	800b588 <__swbuf_r>
 800b50a:	3001      	adds	r0, #1
 800b50c:	d011      	beq.n	800b532 <_puts_r+0x72>
 800b50e:	200a      	movs	r0, #10
 800b510:	e011      	b.n	800b536 <_puts_r+0x76>
 800b512:	4b17      	ldr	r3, [pc, #92]	; (800b570 <_puts_r+0xb0>)
 800b514:	429c      	cmp	r4, r3
 800b516:	d101      	bne.n	800b51c <_puts_r+0x5c>
 800b518:	68ac      	ldr	r4, [r5, #8]
 800b51a:	e7e3      	b.n	800b4e4 <_puts_r+0x24>
 800b51c:	4b15      	ldr	r3, [pc, #84]	; (800b574 <_puts_r+0xb4>)
 800b51e:	429c      	cmp	r4, r3
 800b520:	bf08      	it	eq
 800b522:	68ec      	ldreq	r4, [r5, #12]
 800b524:	e7de      	b.n	800b4e4 <_puts_r+0x24>
 800b526:	4621      	mov	r1, r4
 800b528:	4628      	mov	r0, r5
 800b52a:	f000 f87f 	bl	800b62c <__swsetup_r>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d0dd      	beq.n	800b4ee <_puts_r+0x2e>
 800b532:	f04f 30ff 	mov.w	r0, #4294967295
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	2b00      	cmp	r3, #0
 800b53a:	da04      	bge.n	800b546 <_puts_r+0x86>
 800b53c:	69a2      	ldr	r2, [r4, #24]
 800b53e:	429a      	cmp	r2, r3
 800b540:	dc06      	bgt.n	800b550 <_puts_r+0x90>
 800b542:	290a      	cmp	r1, #10
 800b544:	d004      	beq.n	800b550 <_puts_r+0x90>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	6022      	str	r2, [r4, #0]
 800b54c:	7019      	strb	r1, [r3, #0]
 800b54e:	e7cf      	b.n	800b4f0 <_puts_r+0x30>
 800b550:	4622      	mov	r2, r4
 800b552:	4628      	mov	r0, r5
 800b554:	f000 f818 	bl	800b588 <__swbuf_r>
 800b558:	3001      	adds	r0, #1
 800b55a:	d1c9      	bne.n	800b4f0 <_puts_r+0x30>
 800b55c:	e7e9      	b.n	800b532 <_puts_r+0x72>
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	200a      	movs	r0, #10
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	6022      	str	r2, [r4, #0]
 800b566:	7018      	strb	r0, [r3, #0]
 800b568:	e7e5      	b.n	800b536 <_puts_r+0x76>
 800b56a:	bf00      	nop
 800b56c:	0800c74c 	.word	0x0800c74c
 800b570:	0800c76c 	.word	0x0800c76c
 800b574:	0800c72c 	.word	0x0800c72c

0800b578 <puts>:
 800b578:	4b02      	ldr	r3, [pc, #8]	; (800b584 <puts+0xc>)
 800b57a:	4601      	mov	r1, r0
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	f7ff bf9f 	b.w	800b4c0 <_puts_r>
 800b582:	bf00      	nop
 800b584:	2000004c 	.word	0x2000004c

0800b588 <__swbuf_r>:
 800b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58a:	460e      	mov	r6, r1
 800b58c:	4614      	mov	r4, r2
 800b58e:	4605      	mov	r5, r0
 800b590:	b118      	cbz	r0, 800b59a <__swbuf_r+0x12>
 800b592:	6983      	ldr	r3, [r0, #24]
 800b594:	b90b      	cbnz	r3, 800b59a <__swbuf_r+0x12>
 800b596:	f000 f9a7 	bl	800b8e8 <__sinit>
 800b59a:	4b21      	ldr	r3, [pc, #132]	; (800b620 <__swbuf_r+0x98>)
 800b59c:	429c      	cmp	r4, r3
 800b59e:	d12a      	bne.n	800b5f6 <__swbuf_r+0x6e>
 800b5a0:	686c      	ldr	r4, [r5, #4]
 800b5a2:	69a3      	ldr	r3, [r4, #24]
 800b5a4:	60a3      	str	r3, [r4, #8]
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	071a      	lsls	r2, r3, #28
 800b5aa:	d52e      	bpl.n	800b60a <__swbuf_r+0x82>
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	b363      	cbz	r3, 800b60a <__swbuf_r+0x82>
 800b5b0:	6923      	ldr	r3, [r4, #16]
 800b5b2:	6820      	ldr	r0, [r4, #0]
 800b5b4:	1ac0      	subs	r0, r0, r3
 800b5b6:	6963      	ldr	r3, [r4, #20]
 800b5b8:	b2f6      	uxtb	r6, r6
 800b5ba:	4283      	cmp	r3, r0
 800b5bc:	4637      	mov	r7, r6
 800b5be:	dc04      	bgt.n	800b5ca <__swbuf_r+0x42>
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	f000 f926 	bl	800b814 <_fflush_r>
 800b5c8:	bb28      	cbnz	r0, 800b616 <__swbuf_r+0x8e>
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	60a3      	str	r3, [r4, #8]
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	6022      	str	r2, [r4, #0]
 800b5d6:	701e      	strb	r6, [r3, #0]
 800b5d8:	6963      	ldr	r3, [r4, #20]
 800b5da:	3001      	adds	r0, #1
 800b5dc:	4283      	cmp	r3, r0
 800b5de:	d004      	beq.n	800b5ea <__swbuf_r+0x62>
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	07db      	lsls	r3, r3, #31
 800b5e4:	d519      	bpl.n	800b61a <__swbuf_r+0x92>
 800b5e6:	2e0a      	cmp	r6, #10
 800b5e8:	d117      	bne.n	800b61a <__swbuf_r+0x92>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f000 f911 	bl	800b814 <_fflush_r>
 800b5f2:	b190      	cbz	r0, 800b61a <__swbuf_r+0x92>
 800b5f4:	e00f      	b.n	800b616 <__swbuf_r+0x8e>
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <__swbuf_r+0x9c>)
 800b5f8:	429c      	cmp	r4, r3
 800b5fa:	d101      	bne.n	800b600 <__swbuf_r+0x78>
 800b5fc:	68ac      	ldr	r4, [r5, #8]
 800b5fe:	e7d0      	b.n	800b5a2 <__swbuf_r+0x1a>
 800b600:	4b09      	ldr	r3, [pc, #36]	; (800b628 <__swbuf_r+0xa0>)
 800b602:	429c      	cmp	r4, r3
 800b604:	bf08      	it	eq
 800b606:	68ec      	ldreq	r4, [r5, #12]
 800b608:	e7cb      	b.n	800b5a2 <__swbuf_r+0x1a>
 800b60a:	4621      	mov	r1, r4
 800b60c:	4628      	mov	r0, r5
 800b60e:	f000 f80d 	bl	800b62c <__swsetup_r>
 800b612:	2800      	cmp	r0, #0
 800b614:	d0cc      	beq.n	800b5b0 <__swbuf_r+0x28>
 800b616:	f04f 37ff 	mov.w	r7, #4294967295
 800b61a:	4638      	mov	r0, r7
 800b61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b61e:	bf00      	nop
 800b620:	0800c74c 	.word	0x0800c74c
 800b624:	0800c76c 	.word	0x0800c76c
 800b628:	0800c72c 	.word	0x0800c72c

0800b62c <__swsetup_r>:
 800b62c:	4b32      	ldr	r3, [pc, #200]	; (800b6f8 <__swsetup_r+0xcc>)
 800b62e:	b570      	push	{r4, r5, r6, lr}
 800b630:	681d      	ldr	r5, [r3, #0]
 800b632:	4606      	mov	r6, r0
 800b634:	460c      	mov	r4, r1
 800b636:	b125      	cbz	r5, 800b642 <__swsetup_r+0x16>
 800b638:	69ab      	ldr	r3, [r5, #24]
 800b63a:	b913      	cbnz	r3, 800b642 <__swsetup_r+0x16>
 800b63c:	4628      	mov	r0, r5
 800b63e:	f000 f953 	bl	800b8e8 <__sinit>
 800b642:	4b2e      	ldr	r3, [pc, #184]	; (800b6fc <__swsetup_r+0xd0>)
 800b644:	429c      	cmp	r4, r3
 800b646:	d10f      	bne.n	800b668 <__swsetup_r+0x3c>
 800b648:	686c      	ldr	r4, [r5, #4]
 800b64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b64e:	b29a      	uxth	r2, r3
 800b650:	0715      	lsls	r5, r2, #28
 800b652:	d42c      	bmi.n	800b6ae <__swsetup_r+0x82>
 800b654:	06d0      	lsls	r0, r2, #27
 800b656:	d411      	bmi.n	800b67c <__swsetup_r+0x50>
 800b658:	2209      	movs	r2, #9
 800b65a:	6032      	str	r2, [r6, #0]
 800b65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b660:	81a3      	strh	r3, [r4, #12]
 800b662:	f04f 30ff 	mov.w	r0, #4294967295
 800b666:	e03e      	b.n	800b6e6 <__swsetup_r+0xba>
 800b668:	4b25      	ldr	r3, [pc, #148]	; (800b700 <__swsetup_r+0xd4>)
 800b66a:	429c      	cmp	r4, r3
 800b66c:	d101      	bne.n	800b672 <__swsetup_r+0x46>
 800b66e:	68ac      	ldr	r4, [r5, #8]
 800b670:	e7eb      	b.n	800b64a <__swsetup_r+0x1e>
 800b672:	4b24      	ldr	r3, [pc, #144]	; (800b704 <__swsetup_r+0xd8>)
 800b674:	429c      	cmp	r4, r3
 800b676:	bf08      	it	eq
 800b678:	68ec      	ldreq	r4, [r5, #12]
 800b67a:	e7e6      	b.n	800b64a <__swsetup_r+0x1e>
 800b67c:	0751      	lsls	r1, r2, #29
 800b67e:	d512      	bpl.n	800b6a6 <__swsetup_r+0x7a>
 800b680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b682:	b141      	cbz	r1, 800b696 <__swsetup_r+0x6a>
 800b684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b688:	4299      	cmp	r1, r3
 800b68a:	d002      	beq.n	800b692 <__swsetup_r+0x66>
 800b68c:	4630      	mov	r0, r6
 800b68e:	f000 fa19 	bl	800bac4 <_free_r>
 800b692:	2300      	movs	r3, #0
 800b694:	6363      	str	r3, [r4, #52]	; 0x34
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	6063      	str	r3, [r4, #4]
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	6023      	str	r3, [r4, #0]
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	f043 0308 	orr.w	r3, r3, #8
 800b6ac:	81a3      	strh	r3, [r4, #12]
 800b6ae:	6923      	ldr	r3, [r4, #16]
 800b6b0:	b94b      	cbnz	r3, 800b6c6 <__swsetup_r+0x9a>
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6bc:	d003      	beq.n	800b6c6 <__swsetup_r+0x9a>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f000 f9bf 	bl	800ba44 <__smakebuf_r>
 800b6c6:	89a2      	ldrh	r2, [r4, #12]
 800b6c8:	f012 0301 	ands.w	r3, r2, #1
 800b6cc:	d00c      	beq.n	800b6e8 <__swsetup_r+0xbc>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60a3      	str	r3, [r4, #8]
 800b6d2:	6963      	ldr	r3, [r4, #20]
 800b6d4:	425b      	negs	r3, r3
 800b6d6:	61a3      	str	r3, [r4, #24]
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	b953      	cbnz	r3, 800b6f2 <__swsetup_r+0xc6>
 800b6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b6e4:	d1ba      	bne.n	800b65c <__swsetup_r+0x30>
 800b6e6:	bd70      	pop	{r4, r5, r6, pc}
 800b6e8:	0792      	lsls	r2, r2, #30
 800b6ea:	bf58      	it	pl
 800b6ec:	6963      	ldrpl	r3, [r4, #20]
 800b6ee:	60a3      	str	r3, [r4, #8]
 800b6f0:	e7f2      	b.n	800b6d8 <__swsetup_r+0xac>
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	e7f7      	b.n	800b6e6 <__swsetup_r+0xba>
 800b6f6:	bf00      	nop
 800b6f8:	2000004c 	.word	0x2000004c
 800b6fc:	0800c74c 	.word	0x0800c74c
 800b700:	0800c76c 	.word	0x0800c76c
 800b704:	0800c72c 	.word	0x0800c72c

0800b708 <__sflush_r>:
 800b708:	898a      	ldrh	r2, [r1, #12]
 800b70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70e:	4605      	mov	r5, r0
 800b710:	0710      	lsls	r0, r2, #28
 800b712:	460c      	mov	r4, r1
 800b714:	d458      	bmi.n	800b7c8 <__sflush_r+0xc0>
 800b716:	684b      	ldr	r3, [r1, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	dc05      	bgt.n	800b728 <__sflush_r+0x20>
 800b71c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b71e:	2b00      	cmp	r3, #0
 800b720:	dc02      	bgt.n	800b728 <__sflush_r+0x20>
 800b722:	2000      	movs	r0, #0
 800b724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b72a:	2e00      	cmp	r6, #0
 800b72c:	d0f9      	beq.n	800b722 <__sflush_r+0x1a>
 800b72e:	2300      	movs	r3, #0
 800b730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b734:	682f      	ldr	r7, [r5, #0]
 800b736:	6a21      	ldr	r1, [r4, #32]
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	d032      	beq.n	800b7a2 <__sflush_r+0x9a>
 800b73c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	075a      	lsls	r2, r3, #29
 800b742:	d505      	bpl.n	800b750 <__sflush_r+0x48>
 800b744:	6863      	ldr	r3, [r4, #4]
 800b746:	1ac0      	subs	r0, r0, r3
 800b748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b74a:	b10b      	cbz	r3, 800b750 <__sflush_r+0x48>
 800b74c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b74e:	1ac0      	subs	r0, r0, r3
 800b750:	2300      	movs	r3, #0
 800b752:	4602      	mov	r2, r0
 800b754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b756:	6a21      	ldr	r1, [r4, #32]
 800b758:	4628      	mov	r0, r5
 800b75a:	47b0      	blx	r6
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	d106      	bne.n	800b770 <__sflush_r+0x68>
 800b762:	6829      	ldr	r1, [r5, #0]
 800b764:	291d      	cmp	r1, #29
 800b766:	d848      	bhi.n	800b7fa <__sflush_r+0xf2>
 800b768:	4a29      	ldr	r2, [pc, #164]	; (800b810 <__sflush_r+0x108>)
 800b76a:	40ca      	lsrs	r2, r1
 800b76c:	07d6      	lsls	r6, r2, #31
 800b76e:	d544      	bpl.n	800b7fa <__sflush_r+0xf2>
 800b770:	2200      	movs	r2, #0
 800b772:	6062      	str	r2, [r4, #4]
 800b774:	04d9      	lsls	r1, r3, #19
 800b776:	6922      	ldr	r2, [r4, #16]
 800b778:	6022      	str	r2, [r4, #0]
 800b77a:	d504      	bpl.n	800b786 <__sflush_r+0x7e>
 800b77c:	1c42      	adds	r2, r0, #1
 800b77e:	d101      	bne.n	800b784 <__sflush_r+0x7c>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	b903      	cbnz	r3, 800b786 <__sflush_r+0x7e>
 800b784:	6560      	str	r0, [r4, #84]	; 0x54
 800b786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b788:	602f      	str	r7, [r5, #0]
 800b78a:	2900      	cmp	r1, #0
 800b78c:	d0c9      	beq.n	800b722 <__sflush_r+0x1a>
 800b78e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b792:	4299      	cmp	r1, r3
 800b794:	d002      	beq.n	800b79c <__sflush_r+0x94>
 800b796:	4628      	mov	r0, r5
 800b798:	f000 f994 	bl	800bac4 <_free_r>
 800b79c:	2000      	movs	r0, #0
 800b79e:	6360      	str	r0, [r4, #52]	; 0x34
 800b7a0:	e7c0      	b.n	800b724 <__sflush_r+0x1c>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	47b0      	blx	r6
 800b7a8:	1c41      	adds	r1, r0, #1
 800b7aa:	d1c8      	bne.n	800b73e <__sflush_r+0x36>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d0c5      	beq.n	800b73e <__sflush_r+0x36>
 800b7b2:	2b1d      	cmp	r3, #29
 800b7b4:	d001      	beq.n	800b7ba <__sflush_r+0xb2>
 800b7b6:	2b16      	cmp	r3, #22
 800b7b8:	d101      	bne.n	800b7be <__sflush_r+0xb6>
 800b7ba:	602f      	str	r7, [r5, #0]
 800b7bc:	e7b1      	b.n	800b722 <__sflush_r+0x1a>
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	e7ad      	b.n	800b724 <__sflush_r+0x1c>
 800b7c8:	690f      	ldr	r7, [r1, #16]
 800b7ca:	2f00      	cmp	r7, #0
 800b7cc:	d0a9      	beq.n	800b722 <__sflush_r+0x1a>
 800b7ce:	0793      	lsls	r3, r2, #30
 800b7d0:	680e      	ldr	r6, [r1, #0]
 800b7d2:	bf08      	it	eq
 800b7d4:	694b      	ldreq	r3, [r1, #20]
 800b7d6:	600f      	str	r7, [r1, #0]
 800b7d8:	bf18      	it	ne
 800b7da:	2300      	movne	r3, #0
 800b7dc:	eba6 0807 	sub.w	r8, r6, r7
 800b7e0:	608b      	str	r3, [r1, #8]
 800b7e2:	f1b8 0f00 	cmp.w	r8, #0
 800b7e6:	dd9c      	ble.n	800b722 <__sflush_r+0x1a>
 800b7e8:	4643      	mov	r3, r8
 800b7ea:	463a      	mov	r2, r7
 800b7ec:	6a21      	ldr	r1, [r4, #32]
 800b7ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	47b0      	blx	r6
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	dc06      	bgt.n	800b806 <__sflush_r+0xfe>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	f04f 30ff 	mov.w	r0, #4294967295
 800b804:	e78e      	b.n	800b724 <__sflush_r+0x1c>
 800b806:	4407      	add	r7, r0
 800b808:	eba8 0800 	sub.w	r8, r8, r0
 800b80c:	e7e9      	b.n	800b7e2 <__sflush_r+0xda>
 800b80e:	bf00      	nop
 800b810:	20400001 	.word	0x20400001

0800b814 <_fflush_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	690b      	ldr	r3, [r1, #16]
 800b818:	4605      	mov	r5, r0
 800b81a:	460c      	mov	r4, r1
 800b81c:	b1db      	cbz	r3, 800b856 <_fflush_r+0x42>
 800b81e:	b118      	cbz	r0, 800b828 <_fflush_r+0x14>
 800b820:	6983      	ldr	r3, [r0, #24]
 800b822:	b90b      	cbnz	r3, 800b828 <_fflush_r+0x14>
 800b824:	f000 f860 	bl	800b8e8 <__sinit>
 800b828:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <_fflush_r+0x48>)
 800b82a:	429c      	cmp	r4, r3
 800b82c:	d109      	bne.n	800b842 <_fflush_r+0x2e>
 800b82e:	686c      	ldr	r4, [r5, #4]
 800b830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b834:	b17b      	cbz	r3, 800b856 <_fflush_r+0x42>
 800b836:	4621      	mov	r1, r4
 800b838:	4628      	mov	r0, r5
 800b83a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b83e:	f7ff bf63 	b.w	800b708 <__sflush_r>
 800b842:	4b07      	ldr	r3, [pc, #28]	; (800b860 <_fflush_r+0x4c>)
 800b844:	429c      	cmp	r4, r3
 800b846:	d101      	bne.n	800b84c <_fflush_r+0x38>
 800b848:	68ac      	ldr	r4, [r5, #8]
 800b84a:	e7f1      	b.n	800b830 <_fflush_r+0x1c>
 800b84c:	4b05      	ldr	r3, [pc, #20]	; (800b864 <_fflush_r+0x50>)
 800b84e:	429c      	cmp	r4, r3
 800b850:	bf08      	it	eq
 800b852:	68ec      	ldreq	r4, [r5, #12]
 800b854:	e7ec      	b.n	800b830 <_fflush_r+0x1c>
 800b856:	2000      	movs	r0, #0
 800b858:	bd38      	pop	{r3, r4, r5, pc}
 800b85a:	bf00      	nop
 800b85c:	0800c74c 	.word	0x0800c74c
 800b860:	0800c76c 	.word	0x0800c76c
 800b864:	0800c72c 	.word	0x0800c72c

0800b868 <std>:
 800b868:	2300      	movs	r3, #0
 800b86a:	b510      	push	{r4, lr}
 800b86c:	4604      	mov	r4, r0
 800b86e:	e9c0 3300 	strd	r3, r3, [r0]
 800b872:	6083      	str	r3, [r0, #8]
 800b874:	8181      	strh	r1, [r0, #12]
 800b876:	6643      	str	r3, [r0, #100]	; 0x64
 800b878:	81c2      	strh	r2, [r0, #14]
 800b87a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b87e:	6183      	str	r3, [r0, #24]
 800b880:	4619      	mov	r1, r3
 800b882:	2208      	movs	r2, #8
 800b884:	305c      	adds	r0, #92	; 0x5c
 800b886:	f7ff fdfa 	bl	800b47e <memset>
 800b88a:	4b05      	ldr	r3, [pc, #20]	; (800b8a0 <std+0x38>)
 800b88c:	6263      	str	r3, [r4, #36]	; 0x24
 800b88e:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <std+0x3c>)
 800b890:	62a3      	str	r3, [r4, #40]	; 0x28
 800b892:	4b05      	ldr	r3, [pc, #20]	; (800b8a8 <std+0x40>)
 800b894:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b896:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <std+0x44>)
 800b898:	6224      	str	r4, [r4, #32]
 800b89a:	6323      	str	r3, [r4, #48]	; 0x30
 800b89c:	bd10      	pop	{r4, pc}
 800b89e:	bf00      	nop
 800b8a0:	0800c1c5 	.word	0x0800c1c5
 800b8a4:	0800c1e7 	.word	0x0800c1e7
 800b8a8:	0800c21f 	.word	0x0800c21f
 800b8ac:	0800c243 	.word	0x0800c243

0800b8b0 <_cleanup_r>:
 800b8b0:	4901      	ldr	r1, [pc, #4]	; (800b8b8 <_cleanup_r+0x8>)
 800b8b2:	f000 b885 	b.w	800b9c0 <_fwalk_reent>
 800b8b6:	bf00      	nop
 800b8b8:	0800b815 	.word	0x0800b815

0800b8bc <__sfmoreglue>:
 800b8bc:	b570      	push	{r4, r5, r6, lr}
 800b8be:	1e4a      	subs	r2, r1, #1
 800b8c0:	2568      	movs	r5, #104	; 0x68
 800b8c2:	4355      	muls	r5, r2
 800b8c4:	460e      	mov	r6, r1
 800b8c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8ca:	f000 f949 	bl	800bb60 <_malloc_r>
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	b140      	cbz	r0, 800b8e4 <__sfmoreglue+0x28>
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	e9c0 1600 	strd	r1, r6, [r0]
 800b8d8:	300c      	adds	r0, #12
 800b8da:	60a0      	str	r0, [r4, #8]
 800b8dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8e0:	f7ff fdcd 	bl	800b47e <memset>
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}

0800b8e8 <__sinit>:
 800b8e8:	6983      	ldr	r3, [r0, #24]
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	bb33      	cbnz	r3, 800b93e <__sinit+0x56>
 800b8f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b8f4:	6503      	str	r3, [r0, #80]	; 0x50
 800b8f6:	4b12      	ldr	r3, [pc, #72]	; (800b940 <__sinit+0x58>)
 800b8f8:	4a12      	ldr	r2, [pc, #72]	; (800b944 <__sinit+0x5c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6282      	str	r2, [r0, #40]	; 0x28
 800b8fe:	4298      	cmp	r0, r3
 800b900:	bf04      	itt	eq
 800b902:	2301      	moveq	r3, #1
 800b904:	6183      	streq	r3, [r0, #24]
 800b906:	f000 f81f 	bl	800b948 <__sfp>
 800b90a:	6060      	str	r0, [r4, #4]
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 f81b 	bl	800b948 <__sfp>
 800b912:	60a0      	str	r0, [r4, #8]
 800b914:	4620      	mov	r0, r4
 800b916:	f000 f817 	bl	800b948 <__sfp>
 800b91a:	2200      	movs	r2, #0
 800b91c:	60e0      	str	r0, [r4, #12]
 800b91e:	2104      	movs	r1, #4
 800b920:	6860      	ldr	r0, [r4, #4]
 800b922:	f7ff ffa1 	bl	800b868 <std>
 800b926:	2201      	movs	r2, #1
 800b928:	2109      	movs	r1, #9
 800b92a:	68a0      	ldr	r0, [r4, #8]
 800b92c:	f7ff ff9c 	bl	800b868 <std>
 800b930:	2202      	movs	r2, #2
 800b932:	2112      	movs	r1, #18
 800b934:	68e0      	ldr	r0, [r4, #12]
 800b936:	f7ff ff97 	bl	800b868 <std>
 800b93a:	2301      	movs	r3, #1
 800b93c:	61a3      	str	r3, [r4, #24]
 800b93e:	bd10      	pop	{r4, pc}
 800b940:	0800c728 	.word	0x0800c728
 800b944:	0800b8b1 	.word	0x0800b8b1

0800b948 <__sfp>:
 800b948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94a:	4b1b      	ldr	r3, [pc, #108]	; (800b9b8 <__sfp+0x70>)
 800b94c:	681e      	ldr	r6, [r3, #0]
 800b94e:	69b3      	ldr	r3, [r6, #24]
 800b950:	4607      	mov	r7, r0
 800b952:	b913      	cbnz	r3, 800b95a <__sfp+0x12>
 800b954:	4630      	mov	r0, r6
 800b956:	f7ff ffc7 	bl	800b8e8 <__sinit>
 800b95a:	3648      	adds	r6, #72	; 0x48
 800b95c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b960:	3b01      	subs	r3, #1
 800b962:	d503      	bpl.n	800b96c <__sfp+0x24>
 800b964:	6833      	ldr	r3, [r6, #0]
 800b966:	b133      	cbz	r3, 800b976 <__sfp+0x2e>
 800b968:	6836      	ldr	r6, [r6, #0]
 800b96a:	e7f7      	b.n	800b95c <__sfp+0x14>
 800b96c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b970:	b16d      	cbz	r5, 800b98e <__sfp+0x46>
 800b972:	3468      	adds	r4, #104	; 0x68
 800b974:	e7f4      	b.n	800b960 <__sfp+0x18>
 800b976:	2104      	movs	r1, #4
 800b978:	4638      	mov	r0, r7
 800b97a:	f7ff ff9f 	bl	800b8bc <__sfmoreglue>
 800b97e:	6030      	str	r0, [r6, #0]
 800b980:	2800      	cmp	r0, #0
 800b982:	d1f1      	bne.n	800b968 <__sfp+0x20>
 800b984:	230c      	movs	r3, #12
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	4604      	mov	r4, r0
 800b98a:	4620      	mov	r0, r4
 800b98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b98e:	4b0b      	ldr	r3, [pc, #44]	; (800b9bc <__sfp+0x74>)
 800b990:	6665      	str	r5, [r4, #100]	; 0x64
 800b992:	e9c4 5500 	strd	r5, r5, [r4]
 800b996:	60a5      	str	r5, [r4, #8]
 800b998:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b99c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b9a0:	2208      	movs	r2, #8
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9a8:	f7ff fd69 	bl	800b47e <memset>
 800b9ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9b4:	e7e9      	b.n	800b98a <__sfp+0x42>
 800b9b6:	bf00      	nop
 800b9b8:	0800c728 	.word	0x0800c728
 800b9bc:	ffff0001 	.word	0xffff0001

0800b9c0 <_fwalk_reent>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	4689      	mov	r9, r1
 800b9c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9cc:	2600      	movs	r6, #0
 800b9ce:	b914      	cbnz	r4, 800b9d6 <_fwalk_reent+0x16>
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b9da:	3f01      	subs	r7, #1
 800b9dc:	d501      	bpl.n	800b9e2 <_fwalk_reent+0x22>
 800b9de:	6824      	ldr	r4, [r4, #0]
 800b9e0:	e7f5      	b.n	800b9ce <_fwalk_reent+0xe>
 800b9e2:	89ab      	ldrh	r3, [r5, #12]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d907      	bls.n	800b9f8 <_fwalk_reent+0x38>
 800b9e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	d003      	beq.n	800b9f8 <_fwalk_reent+0x38>
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	47c8      	blx	r9
 800b9f6:	4306      	orrs	r6, r0
 800b9f8:	3568      	adds	r5, #104	; 0x68
 800b9fa:	e7ee      	b.n	800b9da <_fwalk_reent+0x1a>

0800b9fc <__swhatbuf_r>:
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	460e      	mov	r6, r1
 800ba00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba04:	2900      	cmp	r1, #0
 800ba06:	b096      	sub	sp, #88	; 0x58
 800ba08:	4614      	mov	r4, r2
 800ba0a:	461d      	mov	r5, r3
 800ba0c:	da07      	bge.n	800ba1e <__swhatbuf_r+0x22>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	89b3      	ldrh	r3, [r6, #12]
 800ba14:	061a      	lsls	r2, r3, #24
 800ba16:	d410      	bmi.n	800ba3a <__swhatbuf_r+0x3e>
 800ba18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba1c:	e00e      	b.n	800ba3c <__swhatbuf_r+0x40>
 800ba1e:	466a      	mov	r2, sp
 800ba20:	f000 fc36 	bl	800c290 <_fstat_r>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	dbf2      	blt.n	800ba0e <__swhatbuf_r+0x12>
 800ba28:	9a01      	ldr	r2, [sp, #4]
 800ba2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba32:	425a      	negs	r2, r3
 800ba34:	415a      	adcs	r2, r3
 800ba36:	602a      	str	r2, [r5, #0]
 800ba38:	e7ee      	b.n	800ba18 <__swhatbuf_r+0x1c>
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	6023      	str	r3, [r4, #0]
 800ba40:	b016      	add	sp, #88	; 0x58
 800ba42:	bd70      	pop	{r4, r5, r6, pc}

0800ba44 <__smakebuf_r>:
 800ba44:	898b      	ldrh	r3, [r1, #12]
 800ba46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba48:	079d      	lsls	r5, r3, #30
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	d507      	bpl.n	800ba60 <__smakebuf_r+0x1c>
 800ba50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	6123      	str	r3, [r4, #16]
 800ba58:	2301      	movs	r3, #1
 800ba5a:	6163      	str	r3, [r4, #20]
 800ba5c:	b002      	add	sp, #8
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}
 800ba60:	ab01      	add	r3, sp, #4
 800ba62:	466a      	mov	r2, sp
 800ba64:	f7ff ffca 	bl	800b9fc <__swhatbuf_r>
 800ba68:	9900      	ldr	r1, [sp, #0]
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 f877 	bl	800bb60 <_malloc_r>
 800ba72:	b948      	cbnz	r0, 800ba88 <__smakebuf_r+0x44>
 800ba74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba78:	059a      	lsls	r2, r3, #22
 800ba7a:	d4ef      	bmi.n	800ba5c <__smakebuf_r+0x18>
 800ba7c:	f023 0303 	bic.w	r3, r3, #3
 800ba80:	f043 0302 	orr.w	r3, r3, #2
 800ba84:	81a3      	strh	r3, [r4, #12]
 800ba86:	e7e3      	b.n	800ba50 <__smakebuf_r+0xc>
 800ba88:	4b0d      	ldr	r3, [pc, #52]	; (800bac0 <__smakebuf_r+0x7c>)
 800ba8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	6020      	str	r0, [r4, #0]
 800ba90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	9b00      	ldr	r3, [sp, #0]
 800ba98:	6163      	str	r3, [r4, #20]
 800ba9a:	9b01      	ldr	r3, [sp, #4]
 800ba9c:	6120      	str	r0, [r4, #16]
 800ba9e:	b15b      	cbz	r3, 800bab8 <__smakebuf_r+0x74>
 800baa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baa4:	4630      	mov	r0, r6
 800baa6:	f000 fc05 	bl	800c2b4 <_isatty_r>
 800baaa:	b128      	cbz	r0, 800bab8 <__smakebuf_r+0x74>
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	f023 0303 	bic.w	r3, r3, #3
 800bab2:	f043 0301 	orr.w	r3, r3, #1
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	431d      	orrs	r5, r3
 800babc:	81a5      	strh	r5, [r4, #12]
 800babe:	e7cd      	b.n	800ba5c <__smakebuf_r+0x18>
 800bac0:	0800b8b1 	.word	0x0800b8b1

0800bac4 <_free_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4605      	mov	r5, r0
 800bac8:	2900      	cmp	r1, #0
 800baca:	d045      	beq.n	800bb58 <_free_r+0x94>
 800bacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bad0:	1f0c      	subs	r4, r1, #4
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	bfb8      	it	lt
 800bad6:	18e4      	addlt	r4, r4, r3
 800bad8:	f000 fc0e 	bl	800c2f8 <__malloc_lock>
 800badc:	4a1f      	ldr	r2, [pc, #124]	; (800bb5c <_free_r+0x98>)
 800bade:	6813      	ldr	r3, [r2, #0]
 800bae0:	4610      	mov	r0, r2
 800bae2:	b933      	cbnz	r3, 800baf2 <_free_r+0x2e>
 800bae4:	6063      	str	r3, [r4, #4]
 800bae6:	6014      	str	r4, [r2, #0]
 800bae8:	4628      	mov	r0, r5
 800baea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baee:	f000 bc04 	b.w	800c2fa <__malloc_unlock>
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	d90c      	bls.n	800bb10 <_free_r+0x4c>
 800baf6:	6821      	ldr	r1, [r4, #0]
 800baf8:	1862      	adds	r2, r4, r1
 800bafa:	4293      	cmp	r3, r2
 800bafc:	bf04      	itt	eq
 800bafe:	681a      	ldreq	r2, [r3, #0]
 800bb00:	685b      	ldreq	r3, [r3, #4]
 800bb02:	6063      	str	r3, [r4, #4]
 800bb04:	bf04      	itt	eq
 800bb06:	1852      	addeq	r2, r2, r1
 800bb08:	6022      	streq	r2, [r4, #0]
 800bb0a:	6004      	str	r4, [r0, #0]
 800bb0c:	e7ec      	b.n	800bae8 <_free_r+0x24>
 800bb0e:	4613      	mov	r3, r2
 800bb10:	685a      	ldr	r2, [r3, #4]
 800bb12:	b10a      	cbz	r2, 800bb18 <_free_r+0x54>
 800bb14:	42a2      	cmp	r2, r4
 800bb16:	d9fa      	bls.n	800bb0e <_free_r+0x4a>
 800bb18:	6819      	ldr	r1, [r3, #0]
 800bb1a:	1858      	adds	r0, r3, r1
 800bb1c:	42a0      	cmp	r0, r4
 800bb1e:	d10b      	bne.n	800bb38 <_free_r+0x74>
 800bb20:	6820      	ldr	r0, [r4, #0]
 800bb22:	4401      	add	r1, r0
 800bb24:	1858      	adds	r0, r3, r1
 800bb26:	4282      	cmp	r2, r0
 800bb28:	6019      	str	r1, [r3, #0]
 800bb2a:	d1dd      	bne.n	800bae8 <_free_r+0x24>
 800bb2c:	6810      	ldr	r0, [r2, #0]
 800bb2e:	6852      	ldr	r2, [r2, #4]
 800bb30:	605a      	str	r2, [r3, #4]
 800bb32:	4401      	add	r1, r0
 800bb34:	6019      	str	r1, [r3, #0]
 800bb36:	e7d7      	b.n	800bae8 <_free_r+0x24>
 800bb38:	d902      	bls.n	800bb40 <_free_r+0x7c>
 800bb3a:	230c      	movs	r3, #12
 800bb3c:	602b      	str	r3, [r5, #0]
 800bb3e:	e7d3      	b.n	800bae8 <_free_r+0x24>
 800bb40:	6820      	ldr	r0, [r4, #0]
 800bb42:	1821      	adds	r1, r4, r0
 800bb44:	428a      	cmp	r2, r1
 800bb46:	bf04      	itt	eq
 800bb48:	6811      	ldreq	r1, [r2, #0]
 800bb4a:	6852      	ldreq	r2, [r2, #4]
 800bb4c:	6062      	str	r2, [r4, #4]
 800bb4e:	bf04      	itt	eq
 800bb50:	1809      	addeq	r1, r1, r0
 800bb52:	6021      	streq	r1, [r4, #0]
 800bb54:	605c      	str	r4, [r3, #4]
 800bb56:	e7c7      	b.n	800bae8 <_free_r+0x24>
 800bb58:	bd38      	pop	{r3, r4, r5, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200042dc 	.word	0x200042dc

0800bb60 <_malloc_r>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	1ccd      	adds	r5, r1, #3
 800bb64:	f025 0503 	bic.w	r5, r5, #3
 800bb68:	3508      	adds	r5, #8
 800bb6a:	2d0c      	cmp	r5, #12
 800bb6c:	bf38      	it	cc
 800bb6e:	250c      	movcc	r5, #12
 800bb70:	2d00      	cmp	r5, #0
 800bb72:	4606      	mov	r6, r0
 800bb74:	db01      	blt.n	800bb7a <_malloc_r+0x1a>
 800bb76:	42a9      	cmp	r1, r5
 800bb78:	d903      	bls.n	800bb82 <_malloc_r+0x22>
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	6033      	str	r3, [r6, #0]
 800bb7e:	2000      	movs	r0, #0
 800bb80:	bd70      	pop	{r4, r5, r6, pc}
 800bb82:	f000 fbb9 	bl	800c2f8 <__malloc_lock>
 800bb86:	4a21      	ldr	r2, [pc, #132]	; (800bc0c <_malloc_r+0xac>)
 800bb88:	6814      	ldr	r4, [r2, #0]
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	b991      	cbnz	r1, 800bbb4 <_malloc_r+0x54>
 800bb8e:	4c20      	ldr	r4, [pc, #128]	; (800bc10 <_malloc_r+0xb0>)
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	b91b      	cbnz	r3, 800bb9c <_malloc_r+0x3c>
 800bb94:	4630      	mov	r0, r6
 800bb96:	f000 fb05 	bl	800c1a4 <_sbrk_r>
 800bb9a:	6020      	str	r0, [r4, #0]
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f000 fb00 	bl	800c1a4 <_sbrk_r>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	d124      	bne.n	800bbf2 <_malloc_r+0x92>
 800bba8:	230c      	movs	r3, #12
 800bbaa:	6033      	str	r3, [r6, #0]
 800bbac:	4630      	mov	r0, r6
 800bbae:	f000 fba4 	bl	800c2fa <__malloc_unlock>
 800bbb2:	e7e4      	b.n	800bb7e <_malloc_r+0x1e>
 800bbb4:	680b      	ldr	r3, [r1, #0]
 800bbb6:	1b5b      	subs	r3, r3, r5
 800bbb8:	d418      	bmi.n	800bbec <_malloc_r+0x8c>
 800bbba:	2b0b      	cmp	r3, #11
 800bbbc:	d90f      	bls.n	800bbde <_malloc_r+0x7e>
 800bbbe:	600b      	str	r3, [r1, #0]
 800bbc0:	50cd      	str	r5, [r1, r3]
 800bbc2:	18cc      	adds	r4, r1, r3
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	f000 fb98 	bl	800c2fa <__malloc_unlock>
 800bbca:	f104 000b 	add.w	r0, r4, #11
 800bbce:	1d23      	adds	r3, r4, #4
 800bbd0:	f020 0007 	bic.w	r0, r0, #7
 800bbd4:	1ac3      	subs	r3, r0, r3
 800bbd6:	d0d3      	beq.n	800bb80 <_malloc_r+0x20>
 800bbd8:	425a      	negs	r2, r3
 800bbda:	50e2      	str	r2, [r4, r3]
 800bbdc:	e7d0      	b.n	800bb80 <_malloc_r+0x20>
 800bbde:	428c      	cmp	r4, r1
 800bbe0:	684b      	ldr	r3, [r1, #4]
 800bbe2:	bf16      	itet	ne
 800bbe4:	6063      	strne	r3, [r4, #4]
 800bbe6:	6013      	streq	r3, [r2, #0]
 800bbe8:	460c      	movne	r4, r1
 800bbea:	e7eb      	b.n	800bbc4 <_malloc_r+0x64>
 800bbec:	460c      	mov	r4, r1
 800bbee:	6849      	ldr	r1, [r1, #4]
 800bbf0:	e7cc      	b.n	800bb8c <_malloc_r+0x2c>
 800bbf2:	1cc4      	adds	r4, r0, #3
 800bbf4:	f024 0403 	bic.w	r4, r4, #3
 800bbf8:	42a0      	cmp	r0, r4
 800bbfa:	d005      	beq.n	800bc08 <_malloc_r+0xa8>
 800bbfc:	1a21      	subs	r1, r4, r0
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f000 fad0 	bl	800c1a4 <_sbrk_r>
 800bc04:	3001      	adds	r0, #1
 800bc06:	d0cf      	beq.n	800bba8 <_malloc_r+0x48>
 800bc08:	6025      	str	r5, [r4, #0]
 800bc0a:	e7db      	b.n	800bbc4 <_malloc_r+0x64>
 800bc0c:	200042dc 	.word	0x200042dc
 800bc10:	200042e0 	.word	0x200042e0

0800bc14 <__sfputc_r>:
 800bc14:	6893      	ldr	r3, [r2, #8]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	b410      	push	{r4}
 800bc1c:	6093      	str	r3, [r2, #8]
 800bc1e:	da08      	bge.n	800bc32 <__sfputc_r+0x1e>
 800bc20:	6994      	ldr	r4, [r2, #24]
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	db01      	blt.n	800bc2a <__sfputc_r+0x16>
 800bc26:	290a      	cmp	r1, #10
 800bc28:	d103      	bne.n	800bc32 <__sfputc_r+0x1e>
 800bc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc2e:	f7ff bcab 	b.w	800b588 <__swbuf_r>
 800bc32:	6813      	ldr	r3, [r2, #0]
 800bc34:	1c58      	adds	r0, r3, #1
 800bc36:	6010      	str	r0, [r2, #0]
 800bc38:	7019      	strb	r1, [r3, #0]
 800bc3a:	4608      	mov	r0, r1
 800bc3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <__sfputs_r>:
 800bc42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc44:	4606      	mov	r6, r0
 800bc46:	460f      	mov	r7, r1
 800bc48:	4614      	mov	r4, r2
 800bc4a:	18d5      	adds	r5, r2, r3
 800bc4c:	42ac      	cmp	r4, r5
 800bc4e:	d101      	bne.n	800bc54 <__sfputs_r+0x12>
 800bc50:	2000      	movs	r0, #0
 800bc52:	e007      	b.n	800bc64 <__sfputs_r+0x22>
 800bc54:	463a      	mov	r2, r7
 800bc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7ff ffda 	bl	800bc14 <__sfputc_r>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d1f3      	bne.n	800bc4c <__sfputs_r+0xa>
 800bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc68 <_vfiprintf_r>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	b09d      	sub	sp, #116	; 0x74
 800bc70:	4617      	mov	r7, r2
 800bc72:	461d      	mov	r5, r3
 800bc74:	4606      	mov	r6, r0
 800bc76:	b118      	cbz	r0, 800bc80 <_vfiprintf_r+0x18>
 800bc78:	6983      	ldr	r3, [r0, #24]
 800bc7a:	b90b      	cbnz	r3, 800bc80 <_vfiprintf_r+0x18>
 800bc7c:	f7ff fe34 	bl	800b8e8 <__sinit>
 800bc80:	4b7c      	ldr	r3, [pc, #496]	; (800be74 <_vfiprintf_r+0x20c>)
 800bc82:	429c      	cmp	r4, r3
 800bc84:	d158      	bne.n	800bd38 <_vfiprintf_r+0xd0>
 800bc86:	6874      	ldr	r4, [r6, #4]
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	0718      	lsls	r0, r3, #28
 800bc8c:	d55e      	bpl.n	800bd4c <_vfiprintf_r+0xe4>
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d05b      	beq.n	800bd4c <_vfiprintf_r+0xe4>
 800bc94:	2300      	movs	r3, #0
 800bc96:	9309      	str	r3, [sp, #36]	; 0x24
 800bc98:	2320      	movs	r3, #32
 800bc9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc9e:	2330      	movs	r3, #48	; 0x30
 800bca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bca4:	9503      	str	r5, [sp, #12]
 800bca6:	f04f 0b01 	mov.w	fp, #1
 800bcaa:	46b8      	mov	r8, r7
 800bcac:	4645      	mov	r5, r8
 800bcae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bcb2:	b10b      	cbz	r3, 800bcb8 <_vfiprintf_r+0x50>
 800bcb4:	2b25      	cmp	r3, #37	; 0x25
 800bcb6:	d154      	bne.n	800bd62 <_vfiprintf_r+0xfa>
 800bcb8:	ebb8 0a07 	subs.w	sl, r8, r7
 800bcbc:	d00b      	beq.n	800bcd6 <_vfiprintf_r+0x6e>
 800bcbe:	4653      	mov	r3, sl
 800bcc0:	463a      	mov	r2, r7
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7ff ffbc 	bl	800bc42 <__sfputs_r>
 800bcca:	3001      	adds	r0, #1
 800bccc:	f000 80c2 	beq.w	800be54 <_vfiprintf_r+0x1ec>
 800bcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd2:	4453      	add	r3, sl
 800bcd4:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd6:	f898 3000 	ldrb.w	r3, [r8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 80ba 	beq.w	800be54 <_vfiprintf_r+0x1ec>
 800bce0:	2300      	movs	r3, #0
 800bce2:	f04f 32ff 	mov.w	r2, #4294967295
 800bce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	9307      	str	r3, [sp, #28]
 800bcee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcf2:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf4:	46a8      	mov	r8, r5
 800bcf6:	2205      	movs	r2, #5
 800bcf8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bcfc:	485e      	ldr	r0, [pc, #376]	; (800be78 <_vfiprintf_r+0x210>)
 800bcfe:	f7f4 fa7f 	bl	8000200 <memchr>
 800bd02:	9b04      	ldr	r3, [sp, #16]
 800bd04:	bb78      	cbnz	r0, 800bd66 <_vfiprintf_r+0xfe>
 800bd06:	06d9      	lsls	r1, r3, #27
 800bd08:	bf44      	itt	mi
 800bd0a:	2220      	movmi	r2, #32
 800bd0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd10:	071a      	lsls	r2, r3, #28
 800bd12:	bf44      	itt	mi
 800bd14:	222b      	movmi	r2, #43	; 0x2b
 800bd16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd1a:	782a      	ldrb	r2, [r5, #0]
 800bd1c:	2a2a      	cmp	r2, #42	; 0x2a
 800bd1e:	d02a      	beq.n	800bd76 <_vfiprintf_r+0x10e>
 800bd20:	9a07      	ldr	r2, [sp, #28]
 800bd22:	46a8      	mov	r8, r5
 800bd24:	2000      	movs	r0, #0
 800bd26:	250a      	movs	r5, #10
 800bd28:	4641      	mov	r1, r8
 800bd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2e:	3b30      	subs	r3, #48	; 0x30
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d969      	bls.n	800be08 <_vfiprintf_r+0x1a0>
 800bd34:	b360      	cbz	r0, 800bd90 <_vfiprintf_r+0x128>
 800bd36:	e024      	b.n	800bd82 <_vfiprintf_r+0x11a>
 800bd38:	4b50      	ldr	r3, [pc, #320]	; (800be7c <_vfiprintf_r+0x214>)
 800bd3a:	429c      	cmp	r4, r3
 800bd3c:	d101      	bne.n	800bd42 <_vfiprintf_r+0xda>
 800bd3e:	68b4      	ldr	r4, [r6, #8]
 800bd40:	e7a2      	b.n	800bc88 <_vfiprintf_r+0x20>
 800bd42:	4b4f      	ldr	r3, [pc, #316]	; (800be80 <_vfiprintf_r+0x218>)
 800bd44:	429c      	cmp	r4, r3
 800bd46:	bf08      	it	eq
 800bd48:	68f4      	ldreq	r4, [r6, #12]
 800bd4a:	e79d      	b.n	800bc88 <_vfiprintf_r+0x20>
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f7ff fc6c 	bl	800b62c <__swsetup_r>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d09d      	beq.n	800bc94 <_vfiprintf_r+0x2c>
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	b01d      	add	sp, #116	; 0x74
 800bd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd62:	46a8      	mov	r8, r5
 800bd64:	e7a2      	b.n	800bcac <_vfiprintf_r+0x44>
 800bd66:	4a44      	ldr	r2, [pc, #272]	; (800be78 <_vfiprintf_r+0x210>)
 800bd68:	1a80      	subs	r0, r0, r2
 800bd6a:	fa0b f000 	lsl.w	r0, fp, r0
 800bd6e:	4318      	orrs	r0, r3
 800bd70:	9004      	str	r0, [sp, #16]
 800bd72:	4645      	mov	r5, r8
 800bd74:	e7be      	b.n	800bcf4 <_vfiprintf_r+0x8c>
 800bd76:	9a03      	ldr	r2, [sp, #12]
 800bd78:	1d11      	adds	r1, r2, #4
 800bd7a:	6812      	ldr	r2, [r2, #0]
 800bd7c:	9103      	str	r1, [sp, #12]
 800bd7e:	2a00      	cmp	r2, #0
 800bd80:	db01      	blt.n	800bd86 <_vfiprintf_r+0x11e>
 800bd82:	9207      	str	r2, [sp, #28]
 800bd84:	e004      	b.n	800bd90 <_vfiprintf_r+0x128>
 800bd86:	4252      	negs	r2, r2
 800bd88:	f043 0302 	orr.w	r3, r3, #2
 800bd8c:	9207      	str	r2, [sp, #28]
 800bd8e:	9304      	str	r3, [sp, #16]
 800bd90:	f898 3000 	ldrb.w	r3, [r8]
 800bd94:	2b2e      	cmp	r3, #46	; 0x2e
 800bd96:	d10e      	bne.n	800bdb6 <_vfiprintf_r+0x14e>
 800bd98:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bd9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd9e:	d138      	bne.n	800be12 <_vfiprintf_r+0x1aa>
 800bda0:	9b03      	ldr	r3, [sp, #12]
 800bda2:	1d1a      	adds	r2, r3, #4
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	9203      	str	r2, [sp, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bfb8      	it	lt
 800bdac:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdb0:	f108 0802 	add.w	r8, r8, #2
 800bdb4:	9305      	str	r3, [sp, #20]
 800bdb6:	4d33      	ldr	r5, [pc, #204]	; (800be84 <_vfiprintf_r+0x21c>)
 800bdb8:	f898 1000 	ldrb.w	r1, [r8]
 800bdbc:	2203      	movs	r2, #3
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f7f4 fa1e 	bl	8000200 <memchr>
 800bdc4:	b140      	cbz	r0, 800bdd8 <_vfiprintf_r+0x170>
 800bdc6:	2340      	movs	r3, #64	; 0x40
 800bdc8:	1b40      	subs	r0, r0, r5
 800bdca:	fa03 f000 	lsl.w	r0, r3, r0
 800bdce:	9b04      	ldr	r3, [sp, #16]
 800bdd0:	4303      	orrs	r3, r0
 800bdd2:	f108 0801 	add.w	r8, r8, #1
 800bdd6:	9304      	str	r3, [sp, #16]
 800bdd8:	f898 1000 	ldrb.w	r1, [r8]
 800bddc:	482a      	ldr	r0, [pc, #168]	; (800be88 <_vfiprintf_r+0x220>)
 800bdde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bde2:	2206      	movs	r2, #6
 800bde4:	f108 0701 	add.w	r7, r8, #1
 800bde8:	f7f4 fa0a 	bl	8000200 <memchr>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d037      	beq.n	800be60 <_vfiprintf_r+0x1f8>
 800bdf0:	4b26      	ldr	r3, [pc, #152]	; (800be8c <_vfiprintf_r+0x224>)
 800bdf2:	bb1b      	cbnz	r3, 800be3c <_vfiprintf_r+0x1d4>
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	3307      	adds	r3, #7
 800bdf8:	f023 0307 	bic.w	r3, r3, #7
 800bdfc:	3308      	adds	r3, #8
 800bdfe:	9303      	str	r3, [sp, #12]
 800be00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be02:	444b      	add	r3, r9
 800be04:	9309      	str	r3, [sp, #36]	; 0x24
 800be06:	e750      	b.n	800bcaa <_vfiprintf_r+0x42>
 800be08:	fb05 3202 	mla	r2, r5, r2, r3
 800be0c:	2001      	movs	r0, #1
 800be0e:	4688      	mov	r8, r1
 800be10:	e78a      	b.n	800bd28 <_vfiprintf_r+0xc0>
 800be12:	2300      	movs	r3, #0
 800be14:	f108 0801 	add.w	r8, r8, #1
 800be18:	9305      	str	r3, [sp, #20]
 800be1a:	4619      	mov	r1, r3
 800be1c:	250a      	movs	r5, #10
 800be1e:	4640      	mov	r0, r8
 800be20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be24:	3a30      	subs	r2, #48	; 0x30
 800be26:	2a09      	cmp	r2, #9
 800be28:	d903      	bls.n	800be32 <_vfiprintf_r+0x1ca>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d0c3      	beq.n	800bdb6 <_vfiprintf_r+0x14e>
 800be2e:	9105      	str	r1, [sp, #20]
 800be30:	e7c1      	b.n	800bdb6 <_vfiprintf_r+0x14e>
 800be32:	fb05 2101 	mla	r1, r5, r1, r2
 800be36:	2301      	movs	r3, #1
 800be38:	4680      	mov	r8, r0
 800be3a:	e7f0      	b.n	800be1e <_vfiprintf_r+0x1b6>
 800be3c:	ab03      	add	r3, sp, #12
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	4622      	mov	r2, r4
 800be42:	4b13      	ldr	r3, [pc, #76]	; (800be90 <_vfiprintf_r+0x228>)
 800be44:	a904      	add	r1, sp, #16
 800be46:	4630      	mov	r0, r6
 800be48:	f3af 8000 	nop.w
 800be4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800be50:	4681      	mov	r9, r0
 800be52:	d1d5      	bne.n	800be00 <_vfiprintf_r+0x198>
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	065b      	lsls	r3, r3, #25
 800be58:	f53f af7e 	bmi.w	800bd58 <_vfiprintf_r+0xf0>
 800be5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be5e:	e77d      	b.n	800bd5c <_vfiprintf_r+0xf4>
 800be60:	ab03      	add	r3, sp, #12
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	4622      	mov	r2, r4
 800be66:	4b0a      	ldr	r3, [pc, #40]	; (800be90 <_vfiprintf_r+0x228>)
 800be68:	a904      	add	r1, sp, #16
 800be6a:	4630      	mov	r0, r6
 800be6c:	f000 f888 	bl	800bf80 <_printf_i>
 800be70:	e7ec      	b.n	800be4c <_vfiprintf_r+0x1e4>
 800be72:	bf00      	nop
 800be74:	0800c74c 	.word	0x0800c74c
 800be78:	0800c78c 	.word	0x0800c78c
 800be7c:	0800c76c 	.word	0x0800c76c
 800be80:	0800c72c 	.word	0x0800c72c
 800be84:	0800c792 	.word	0x0800c792
 800be88:	0800c796 	.word	0x0800c796
 800be8c:	00000000 	.word	0x00000000
 800be90:	0800bc43 	.word	0x0800bc43

0800be94 <_printf_common>:
 800be94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be98:	4691      	mov	r9, r2
 800be9a:	461f      	mov	r7, r3
 800be9c:	688a      	ldr	r2, [r1, #8]
 800be9e:	690b      	ldr	r3, [r1, #16]
 800bea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bea4:	4293      	cmp	r3, r2
 800bea6:	bfb8      	it	lt
 800bea8:	4613      	movlt	r3, r2
 800beaa:	f8c9 3000 	str.w	r3, [r9]
 800beae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800beb2:	4606      	mov	r6, r0
 800beb4:	460c      	mov	r4, r1
 800beb6:	b112      	cbz	r2, 800bebe <_printf_common+0x2a>
 800beb8:	3301      	adds	r3, #1
 800beba:	f8c9 3000 	str.w	r3, [r9]
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	0699      	lsls	r1, r3, #26
 800bec2:	bf42      	ittt	mi
 800bec4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bec8:	3302      	addmi	r3, #2
 800beca:	f8c9 3000 	strmi.w	r3, [r9]
 800bece:	6825      	ldr	r5, [r4, #0]
 800bed0:	f015 0506 	ands.w	r5, r5, #6
 800bed4:	d107      	bne.n	800bee6 <_printf_common+0x52>
 800bed6:	f104 0a19 	add.w	sl, r4, #25
 800beda:	68e3      	ldr	r3, [r4, #12]
 800bedc:	f8d9 2000 	ldr.w	r2, [r9]
 800bee0:	1a9b      	subs	r3, r3, r2
 800bee2:	42ab      	cmp	r3, r5
 800bee4:	dc28      	bgt.n	800bf38 <_printf_common+0xa4>
 800bee6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800beea:	6822      	ldr	r2, [r4, #0]
 800beec:	3300      	adds	r3, #0
 800beee:	bf18      	it	ne
 800bef0:	2301      	movne	r3, #1
 800bef2:	0692      	lsls	r2, r2, #26
 800bef4:	d42d      	bmi.n	800bf52 <_printf_common+0xbe>
 800bef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800befa:	4639      	mov	r1, r7
 800befc:	4630      	mov	r0, r6
 800befe:	47c0      	blx	r8
 800bf00:	3001      	adds	r0, #1
 800bf02:	d020      	beq.n	800bf46 <_printf_common+0xb2>
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	68e5      	ldr	r5, [r4, #12]
 800bf08:	f8d9 2000 	ldr.w	r2, [r9]
 800bf0c:	f003 0306 	and.w	r3, r3, #6
 800bf10:	2b04      	cmp	r3, #4
 800bf12:	bf08      	it	eq
 800bf14:	1aad      	subeq	r5, r5, r2
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	6922      	ldr	r2, [r4, #16]
 800bf1a:	bf0c      	ite	eq
 800bf1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf20:	2500      	movne	r5, #0
 800bf22:	4293      	cmp	r3, r2
 800bf24:	bfc4      	itt	gt
 800bf26:	1a9b      	subgt	r3, r3, r2
 800bf28:	18ed      	addgt	r5, r5, r3
 800bf2a:	f04f 0900 	mov.w	r9, #0
 800bf2e:	341a      	adds	r4, #26
 800bf30:	454d      	cmp	r5, r9
 800bf32:	d11a      	bne.n	800bf6a <_printf_common+0xd6>
 800bf34:	2000      	movs	r0, #0
 800bf36:	e008      	b.n	800bf4a <_printf_common+0xb6>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	4652      	mov	r2, sl
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	4630      	mov	r0, r6
 800bf40:	47c0      	blx	r8
 800bf42:	3001      	adds	r0, #1
 800bf44:	d103      	bne.n	800bf4e <_printf_common+0xba>
 800bf46:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4e:	3501      	adds	r5, #1
 800bf50:	e7c3      	b.n	800beda <_printf_common+0x46>
 800bf52:	18e1      	adds	r1, r4, r3
 800bf54:	1c5a      	adds	r2, r3, #1
 800bf56:	2030      	movs	r0, #48	; 0x30
 800bf58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf5c:	4422      	add	r2, r4
 800bf5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf66:	3302      	adds	r3, #2
 800bf68:	e7c5      	b.n	800bef6 <_printf_common+0x62>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4622      	mov	r2, r4
 800bf6e:	4639      	mov	r1, r7
 800bf70:	4630      	mov	r0, r6
 800bf72:	47c0      	blx	r8
 800bf74:	3001      	adds	r0, #1
 800bf76:	d0e6      	beq.n	800bf46 <_printf_common+0xb2>
 800bf78:	f109 0901 	add.w	r9, r9, #1
 800bf7c:	e7d8      	b.n	800bf30 <_printf_common+0x9c>
	...

0800bf80 <_printf_i>:
 800bf80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bf88:	460c      	mov	r4, r1
 800bf8a:	7e09      	ldrb	r1, [r1, #24]
 800bf8c:	b085      	sub	sp, #20
 800bf8e:	296e      	cmp	r1, #110	; 0x6e
 800bf90:	4617      	mov	r7, r2
 800bf92:	4606      	mov	r6, r0
 800bf94:	4698      	mov	r8, r3
 800bf96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf98:	f000 80b3 	beq.w	800c102 <_printf_i+0x182>
 800bf9c:	d822      	bhi.n	800bfe4 <_printf_i+0x64>
 800bf9e:	2963      	cmp	r1, #99	; 0x63
 800bfa0:	d036      	beq.n	800c010 <_printf_i+0x90>
 800bfa2:	d80a      	bhi.n	800bfba <_printf_i+0x3a>
 800bfa4:	2900      	cmp	r1, #0
 800bfa6:	f000 80b9 	beq.w	800c11c <_printf_i+0x19c>
 800bfaa:	2958      	cmp	r1, #88	; 0x58
 800bfac:	f000 8083 	beq.w	800c0b6 <_printf_i+0x136>
 800bfb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bfb8:	e032      	b.n	800c020 <_printf_i+0xa0>
 800bfba:	2964      	cmp	r1, #100	; 0x64
 800bfbc:	d001      	beq.n	800bfc2 <_printf_i+0x42>
 800bfbe:	2969      	cmp	r1, #105	; 0x69
 800bfc0:	d1f6      	bne.n	800bfb0 <_printf_i+0x30>
 800bfc2:	6820      	ldr	r0, [r4, #0]
 800bfc4:	6813      	ldr	r3, [r2, #0]
 800bfc6:	0605      	lsls	r5, r0, #24
 800bfc8:	f103 0104 	add.w	r1, r3, #4
 800bfcc:	d52a      	bpl.n	800c024 <_printf_i+0xa4>
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6011      	str	r1, [r2, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	da03      	bge.n	800bfde <_printf_i+0x5e>
 800bfd6:	222d      	movs	r2, #45	; 0x2d
 800bfd8:	425b      	negs	r3, r3
 800bfda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bfde:	486f      	ldr	r0, [pc, #444]	; (800c19c <_printf_i+0x21c>)
 800bfe0:	220a      	movs	r2, #10
 800bfe2:	e039      	b.n	800c058 <_printf_i+0xd8>
 800bfe4:	2973      	cmp	r1, #115	; 0x73
 800bfe6:	f000 809d 	beq.w	800c124 <_printf_i+0x1a4>
 800bfea:	d808      	bhi.n	800bffe <_printf_i+0x7e>
 800bfec:	296f      	cmp	r1, #111	; 0x6f
 800bfee:	d020      	beq.n	800c032 <_printf_i+0xb2>
 800bff0:	2970      	cmp	r1, #112	; 0x70
 800bff2:	d1dd      	bne.n	800bfb0 <_printf_i+0x30>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	f043 0320 	orr.w	r3, r3, #32
 800bffa:	6023      	str	r3, [r4, #0]
 800bffc:	e003      	b.n	800c006 <_printf_i+0x86>
 800bffe:	2975      	cmp	r1, #117	; 0x75
 800c000:	d017      	beq.n	800c032 <_printf_i+0xb2>
 800c002:	2978      	cmp	r1, #120	; 0x78
 800c004:	d1d4      	bne.n	800bfb0 <_printf_i+0x30>
 800c006:	2378      	movs	r3, #120	; 0x78
 800c008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c00c:	4864      	ldr	r0, [pc, #400]	; (800c1a0 <_printf_i+0x220>)
 800c00e:	e055      	b.n	800c0bc <_printf_i+0x13c>
 800c010:	6813      	ldr	r3, [r2, #0]
 800c012:	1d19      	adds	r1, r3, #4
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6011      	str	r1, [r2, #0]
 800c018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c01c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c020:	2301      	movs	r3, #1
 800c022:	e08c      	b.n	800c13e <_printf_i+0x1be>
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6011      	str	r1, [r2, #0]
 800c028:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c02c:	bf18      	it	ne
 800c02e:	b21b      	sxthne	r3, r3
 800c030:	e7cf      	b.n	800bfd2 <_printf_i+0x52>
 800c032:	6813      	ldr	r3, [r2, #0]
 800c034:	6825      	ldr	r5, [r4, #0]
 800c036:	1d18      	adds	r0, r3, #4
 800c038:	6010      	str	r0, [r2, #0]
 800c03a:	0628      	lsls	r0, r5, #24
 800c03c:	d501      	bpl.n	800c042 <_printf_i+0xc2>
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	e002      	b.n	800c048 <_printf_i+0xc8>
 800c042:	0668      	lsls	r0, r5, #25
 800c044:	d5fb      	bpl.n	800c03e <_printf_i+0xbe>
 800c046:	881b      	ldrh	r3, [r3, #0]
 800c048:	4854      	ldr	r0, [pc, #336]	; (800c19c <_printf_i+0x21c>)
 800c04a:	296f      	cmp	r1, #111	; 0x6f
 800c04c:	bf14      	ite	ne
 800c04e:	220a      	movne	r2, #10
 800c050:	2208      	moveq	r2, #8
 800c052:	2100      	movs	r1, #0
 800c054:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c058:	6865      	ldr	r5, [r4, #4]
 800c05a:	60a5      	str	r5, [r4, #8]
 800c05c:	2d00      	cmp	r5, #0
 800c05e:	f2c0 8095 	blt.w	800c18c <_printf_i+0x20c>
 800c062:	6821      	ldr	r1, [r4, #0]
 800c064:	f021 0104 	bic.w	r1, r1, #4
 800c068:	6021      	str	r1, [r4, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d13d      	bne.n	800c0ea <_printf_i+0x16a>
 800c06e:	2d00      	cmp	r5, #0
 800c070:	f040 808e 	bne.w	800c190 <_printf_i+0x210>
 800c074:	4665      	mov	r5, ip
 800c076:	2a08      	cmp	r2, #8
 800c078:	d10b      	bne.n	800c092 <_printf_i+0x112>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	07db      	lsls	r3, r3, #31
 800c07e:	d508      	bpl.n	800c092 <_printf_i+0x112>
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	6862      	ldr	r2, [r4, #4]
 800c084:	429a      	cmp	r2, r3
 800c086:	bfde      	ittt	le
 800c088:	2330      	movle	r3, #48	; 0x30
 800c08a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c08e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c092:	ebac 0305 	sub.w	r3, ip, r5
 800c096:	6123      	str	r3, [r4, #16]
 800c098:	f8cd 8000 	str.w	r8, [sp]
 800c09c:	463b      	mov	r3, r7
 800c09e:	aa03      	add	r2, sp, #12
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	f7ff fef6 	bl	800be94 <_printf_common>
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	d14d      	bne.n	800c148 <_printf_i+0x1c8>
 800c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b0:	b005      	add	sp, #20
 800c0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0b6:	4839      	ldr	r0, [pc, #228]	; (800c19c <_printf_i+0x21c>)
 800c0b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c0bc:	6813      	ldr	r3, [r2, #0]
 800c0be:	6821      	ldr	r1, [r4, #0]
 800c0c0:	1d1d      	adds	r5, r3, #4
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6015      	str	r5, [r2, #0]
 800c0c6:	060a      	lsls	r2, r1, #24
 800c0c8:	d50b      	bpl.n	800c0e2 <_printf_i+0x162>
 800c0ca:	07ca      	lsls	r2, r1, #31
 800c0cc:	bf44      	itt	mi
 800c0ce:	f041 0120 	orrmi.w	r1, r1, #32
 800c0d2:	6021      	strmi	r1, [r4, #0]
 800c0d4:	b91b      	cbnz	r3, 800c0de <_printf_i+0x15e>
 800c0d6:	6822      	ldr	r2, [r4, #0]
 800c0d8:	f022 0220 	bic.w	r2, r2, #32
 800c0dc:	6022      	str	r2, [r4, #0]
 800c0de:	2210      	movs	r2, #16
 800c0e0:	e7b7      	b.n	800c052 <_printf_i+0xd2>
 800c0e2:	064d      	lsls	r5, r1, #25
 800c0e4:	bf48      	it	mi
 800c0e6:	b29b      	uxthmi	r3, r3
 800c0e8:	e7ef      	b.n	800c0ca <_printf_i+0x14a>
 800c0ea:	4665      	mov	r5, ip
 800c0ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0f0:	fb02 3311 	mls	r3, r2, r1, r3
 800c0f4:	5cc3      	ldrb	r3, [r0, r3]
 800c0f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	d1f5      	bne.n	800c0ec <_printf_i+0x16c>
 800c100:	e7b9      	b.n	800c076 <_printf_i+0xf6>
 800c102:	6813      	ldr	r3, [r2, #0]
 800c104:	6825      	ldr	r5, [r4, #0]
 800c106:	6961      	ldr	r1, [r4, #20]
 800c108:	1d18      	adds	r0, r3, #4
 800c10a:	6010      	str	r0, [r2, #0]
 800c10c:	0628      	lsls	r0, r5, #24
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	d501      	bpl.n	800c116 <_printf_i+0x196>
 800c112:	6019      	str	r1, [r3, #0]
 800c114:	e002      	b.n	800c11c <_printf_i+0x19c>
 800c116:	066a      	lsls	r2, r5, #25
 800c118:	d5fb      	bpl.n	800c112 <_printf_i+0x192>
 800c11a:	8019      	strh	r1, [r3, #0]
 800c11c:	2300      	movs	r3, #0
 800c11e:	6123      	str	r3, [r4, #16]
 800c120:	4665      	mov	r5, ip
 800c122:	e7b9      	b.n	800c098 <_printf_i+0x118>
 800c124:	6813      	ldr	r3, [r2, #0]
 800c126:	1d19      	adds	r1, r3, #4
 800c128:	6011      	str	r1, [r2, #0]
 800c12a:	681d      	ldr	r5, [r3, #0]
 800c12c:	6862      	ldr	r2, [r4, #4]
 800c12e:	2100      	movs	r1, #0
 800c130:	4628      	mov	r0, r5
 800c132:	f7f4 f865 	bl	8000200 <memchr>
 800c136:	b108      	cbz	r0, 800c13c <_printf_i+0x1bc>
 800c138:	1b40      	subs	r0, r0, r5
 800c13a:	6060      	str	r0, [r4, #4]
 800c13c:	6863      	ldr	r3, [r4, #4]
 800c13e:	6123      	str	r3, [r4, #16]
 800c140:	2300      	movs	r3, #0
 800c142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c146:	e7a7      	b.n	800c098 <_printf_i+0x118>
 800c148:	6923      	ldr	r3, [r4, #16]
 800c14a:	462a      	mov	r2, r5
 800c14c:	4639      	mov	r1, r7
 800c14e:	4630      	mov	r0, r6
 800c150:	47c0      	blx	r8
 800c152:	3001      	adds	r0, #1
 800c154:	d0aa      	beq.n	800c0ac <_printf_i+0x12c>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	079b      	lsls	r3, r3, #30
 800c15a:	d413      	bmi.n	800c184 <_printf_i+0x204>
 800c15c:	68e0      	ldr	r0, [r4, #12]
 800c15e:	9b03      	ldr	r3, [sp, #12]
 800c160:	4298      	cmp	r0, r3
 800c162:	bfb8      	it	lt
 800c164:	4618      	movlt	r0, r3
 800c166:	e7a3      	b.n	800c0b0 <_printf_i+0x130>
 800c168:	2301      	movs	r3, #1
 800c16a:	464a      	mov	r2, r9
 800c16c:	4639      	mov	r1, r7
 800c16e:	4630      	mov	r0, r6
 800c170:	47c0      	blx	r8
 800c172:	3001      	adds	r0, #1
 800c174:	d09a      	beq.n	800c0ac <_printf_i+0x12c>
 800c176:	3501      	adds	r5, #1
 800c178:	68e3      	ldr	r3, [r4, #12]
 800c17a:	9a03      	ldr	r2, [sp, #12]
 800c17c:	1a9b      	subs	r3, r3, r2
 800c17e:	42ab      	cmp	r3, r5
 800c180:	dcf2      	bgt.n	800c168 <_printf_i+0x1e8>
 800c182:	e7eb      	b.n	800c15c <_printf_i+0x1dc>
 800c184:	2500      	movs	r5, #0
 800c186:	f104 0919 	add.w	r9, r4, #25
 800c18a:	e7f5      	b.n	800c178 <_printf_i+0x1f8>
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1ac      	bne.n	800c0ea <_printf_i+0x16a>
 800c190:	7803      	ldrb	r3, [r0, #0]
 800c192:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c196:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c19a:	e76c      	b.n	800c076 <_printf_i+0xf6>
 800c19c:	0800c79d 	.word	0x0800c79d
 800c1a0:	0800c7ae 	.word	0x0800c7ae

0800c1a4 <_sbrk_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4c06      	ldr	r4, [pc, #24]	; (800c1c0 <_sbrk_r+0x1c>)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	4608      	mov	r0, r1
 800c1ae:	6023      	str	r3, [r4, #0]
 800c1b0:	f7f5 f8be 	bl	8001330 <_sbrk>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_sbrk_r+0x1a>
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_sbrk_r+0x1a>
 800c1bc:	602b      	str	r3, [r5, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	20004ff4 	.word	0x20004ff4

0800c1c4 <__sread>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1cc:	f000 f896 	bl	800c2fc <_read_r>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	bfab      	itete	ge
 800c1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c1d8:	181b      	addge	r3, r3, r0
 800c1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1de:	bfac      	ite	ge
 800c1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1e2:	81a3      	strhlt	r3, [r4, #12]
 800c1e4:	bd10      	pop	{r4, pc}

0800c1e6 <__swrite>:
 800c1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ea:	461f      	mov	r7, r3
 800c1ec:	898b      	ldrh	r3, [r1, #12]
 800c1ee:	05db      	lsls	r3, r3, #23
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	4616      	mov	r6, r2
 800c1f6:	d505      	bpl.n	800c204 <__swrite+0x1e>
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	f000 f868 	bl	800c2d4 <_lseek_r>
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c20a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c20e:	81a3      	strh	r3, [r4, #12]
 800c210:	4632      	mov	r2, r6
 800c212:	463b      	mov	r3, r7
 800c214:	4628      	mov	r0, r5
 800c216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c21a:	f000 b817 	b.w	800c24c <_write_r>

0800c21e <__sseek>:
 800c21e:	b510      	push	{r4, lr}
 800c220:	460c      	mov	r4, r1
 800c222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c226:	f000 f855 	bl	800c2d4 <_lseek_r>
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	bf15      	itete	ne
 800c230:	6560      	strne	r0, [r4, #84]	; 0x54
 800c232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c23a:	81a3      	strheq	r3, [r4, #12]
 800c23c:	bf18      	it	ne
 800c23e:	81a3      	strhne	r3, [r4, #12]
 800c240:	bd10      	pop	{r4, pc}

0800c242 <__sclose>:
 800c242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c246:	f000 b813 	b.w	800c270 <_close_r>
	...

0800c24c <_write_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4c07      	ldr	r4, [pc, #28]	; (800c26c <_write_r+0x20>)
 800c250:	4605      	mov	r5, r0
 800c252:	4608      	mov	r0, r1
 800c254:	4611      	mov	r1, r2
 800c256:	2200      	movs	r2, #0
 800c258:	6022      	str	r2, [r4, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	f7f5 f817 	bl	800128e <_write>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_write_r+0x1e>
 800c264:	6823      	ldr	r3, [r4, #0]
 800c266:	b103      	cbz	r3, 800c26a <_write_r+0x1e>
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	20004ff4 	.word	0x20004ff4

0800c270 <_close_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4c06      	ldr	r4, [pc, #24]	; (800c28c <_close_r+0x1c>)
 800c274:	2300      	movs	r3, #0
 800c276:	4605      	mov	r5, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	6023      	str	r3, [r4, #0]
 800c27c:	f7f5 f823 	bl	80012c6 <_close>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	d102      	bne.n	800c28a <_close_r+0x1a>
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	b103      	cbz	r3, 800c28a <_close_r+0x1a>
 800c288:	602b      	str	r3, [r5, #0]
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
 800c28c:	20004ff4 	.word	0x20004ff4

0800c290 <_fstat_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4c07      	ldr	r4, [pc, #28]	; (800c2b0 <_fstat_r+0x20>)
 800c294:	2300      	movs	r3, #0
 800c296:	4605      	mov	r5, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	4611      	mov	r1, r2
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	f7f5 f81e 	bl	80012de <_fstat>
 800c2a2:	1c43      	adds	r3, r0, #1
 800c2a4:	d102      	bne.n	800c2ac <_fstat_r+0x1c>
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	b103      	cbz	r3, 800c2ac <_fstat_r+0x1c>
 800c2aa:	602b      	str	r3, [r5, #0]
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20004ff4 	.word	0x20004ff4

0800c2b4 <_isatty_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4c06      	ldr	r4, [pc, #24]	; (800c2d0 <_isatty_r+0x1c>)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	f7f5 f81d 	bl	80012fe <_isatty>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_isatty_r+0x1a>
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_isatty_r+0x1a>
 800c2cc:	602b      	str	r3, [r5, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	20004ff4 	.word	0x20004ff4

0800c2d4 <_lseek_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4c07      	ldr	r4, [pc, #28]	; (800c2f4 <_lseek_r+0x20>)
 800c2d8:	4605      	mov	r5, r0
 800c2da:	4608      	mov	r0, r1
 800c2dc:	4611      	mov	r1, r2
 800c2de:	2200      	movs	r2, #0
 800c2e0:	6022      	str	r2, [r4, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f7f5 f816 	bl	8001314 <_lseek>
 800c2e8:	1c43      	adds	r3, r0, #1
 800c2ea:	d102      	bne.n	800c2f2 <_lseek_r+0x1e>
 800c2ec:	6823      	ldr	r3, [r4, #0]
 800c2ee:	b103      	cbz	r3, 800c2f2 <_lseek_r+0x1e>
 800c2f0:	602b      	str	r3, [r5, #0]
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
 800c2f4:	20004ff4 	.word	0x20004ff4

0800c2f8 <__malloc_lock>:
 800c2f8:	4770      	bx	lr

0800c2fa <__malloc_unlock>:
 800c2fa:	4770      	bx	lr

0800c2fc <_read_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4c07      	ldr	r4, [pc, #28]	; (800c31c <_read_r+0x20>)
 800c300:	4605      	mov	r5, r0
 800c302:	4608      	mov	r0, r1
 800c304:	4611      	mov	r1, r2
 800c306:	2200      	movs	r2, #0
 800c308:	6022      	str	r2, [r4, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	f7f4 ffa2 	bl	8001254 <_read>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_read_r+0x1e>
 800c314:	6823      	ldr	r3, [r4, #0]
 800c316:	b103      	cbz	r3, 800c31a <_read_r+0x1e>
 800c318:	602b      	str	r3, [r5, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	20004ff4 	.word	0x20004ff4

0800c320 <_init>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	bf00      	nop
 800c324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c326:	bc08      	pop	{r3}
 800c328:	469e      	mov	lr, r3
 800c32a:	4770      	bx	lr

0800c32c <_fini>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr

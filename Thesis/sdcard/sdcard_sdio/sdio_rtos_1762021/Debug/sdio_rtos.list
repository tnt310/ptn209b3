
sdio_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc8  08009fc8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009fc8  08009fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fd0  08009fd0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd0  08009fd0  00019fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fd4  08009fd4  00019fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d5c  20000010  08009fe8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d6c  08009fe8  00024d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a46d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a84  00000000  00000000  0003a4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001678  00000000  00000000  0003df38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  0003f5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002496b  00000000  00000000  00040a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000135d7  00000000  00000000  000653cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7801  00000000  00000000  000789a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001501a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cd4  00000000  00000000  00150220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e4c 	.word	0x08009e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009e4c 	.word	0x08009e4c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ee:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fb5f 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f821 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8d1 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000516:	f000 f8a7 	bl	8000668 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800051a:	f000 f885 	bl	8000628 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800051e:	f004 f8ef 	bl	8004700 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <main+0x48>)
 8000524:	1d3c      	adds	r4, r7, #4
 8000526:	461d      	mov	r5, r3
 8000528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f006 fe43 	bl	80071c4 <osThreadCreate>
 800053e:	4602      	mov	r2, r0
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <main+0x4c>)
 8000542:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f006 fe1b 	bl	800717e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x44>
 800054a:	bf00      	nop
 800054c:	08009e8c 	.word	0x08009e8c
 8000550:	20004264 	.word	0x20004264

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f009 fc69 	bl	8009e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c8:	23a8      	movs	r3, #168	; 0xa8
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f973 	bl	80018c4 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e4:	f000 f8f6 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2105      	movs	r1, #5
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fbcc 	bl	8001da4 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000612:	f000 f8df 	bl	80007d4 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_SDIO_SD_Init+0x38>)
 800062e:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <MX_SDIO_SD_Init+0x3c>)
 8000630:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_SDIO_SD_Init+0x38>)
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_SDIO_SD_Init+0x38>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_SDIO_SD_Init+0x38>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_SDIO_SD_Init+0x38>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MX_SDIO_SD_Init+0x38>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <MX_SDIO_SD_Init+0x38>)
 8000652:	2204      	movs	r2, #4
 8000654:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	200045c4 	.word	0x200045c4
 8000664:	40012c00 	.word	0x40012c00

08000668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000678:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2105      	movs	r1, #5
 800068e:	203b      	movs	r0, #59	; 0x3b
 8000690:	f000 fbb8 	bl	8000e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000694:	203b      	movs	r0, #59	; 0x3b
 8000696:	f000 fbd1 	bl	8000e3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2105      	movs	r1, #5
 800069e:	2045      	movs	r0, #69	; 0x45
 80006a0:	f000 fbb0 	bl	8000e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006a4:	2045      	movs	r0, #69	; 0x45
 80006a6:	f000 fbc9 	bl	8000e3c <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_GPIO_Init+0x84>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a1d      	ldr	r2, [pc, #116]	; (800073c <MX_GPIO_Init+0x84>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_GPIO_Init+0x84>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_GPIO_Init+0x84>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <MX_GPIO_Init+0x84>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_GPIO_Init+0x84>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_GPIO_Init+0x84>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MX_GPIO_Init+0x84>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_GPIO_Init+0x84>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_GPIO_Init+0x84>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <MX_GPIO_Init+0x84>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_GPIO_Init+0x84>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 // MX_FATFS_Init();
	  if (BSP_SD_Init() == MSD_OK)
 8000748:	f003 fff4 	bl	8004734 <BSP_SD_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d11d      	bne.n	800078e <StartDefaultTask+0x4e>
	  {
		  fresult = f_mount(&fs, "", 1);
 8000752:	2201      	movs	r2, #1
 8000754:	4910      	ldr	r1, [pc, #64]	; (8000798 <StartDefaultTask+0x58>)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <StartDefaultTask+0x5c>)
 8000758:	f005 ffb8 	bl	80066cc <f_mount>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <StartDefaultTask+0x60>)
 8000762:	701a      	strb	r2, [r3, #0]
		  fresult = f_open(&fil, "sdio.txt", FA_READ|FA_WRITE);
 8000764:	2203      	movs	r2, #3
 8000766:	490f      	ldr	r1, [pc, #60]	; (80007a4 <StartDefaultTask+0x64>)
 8000768:	480f      	ldr	r0, [pc, #60]	; (80007a8 <StartDefaultTask+0x68>)
 800076a:	f006 f813 	bl	8006794 <f_open>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <StartDefaultTask+0x60>)
 8000774:	701a      	strb	r2, [r3, #0]
		  f_gets((char*)SDbuffer, sizeof(SDbuffer), &fil);
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <StartDefaultTask+0x68>)
 8000778:	21c8      	movs	r1, #200	; 0xc8
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <StartDefaultTask+0x6c>)
 800077c:	f006 fbf5 	bl	8006f6a <f_gets>
		  //f_puts(str, &fil);
		  fresult = f_close(&fil);
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <StartDefaultTask+0x68>)
 8000782:	f006 fbc3 	bl	8006f0c <f_close>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <StartDefaultTask+0x60>)
 800078c:	701a      	strb	r2, [r3, #0]
	  }
  /* Infinite loop */
  for(;;)
  {
	  osDelay(500);
 800078e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000792:	f006 fd63 	bl	800725c <osDelay>
 8000796:	e7fa      	b.n	800078e <StartDefaultTask+0x4e>
 8000798:	08009ea8 	.word	0x08009ea8
 800079c:	20004268 	.word	0x20004268
 80007a0:	20004648 	.word	0x20004648
 80007a4:	08009eac 	.word	0x08009eac
 80007a8:	2000464c 	.word	0x2000464c
 80007ac:	2000449c 	.word	0x2000449c

080007b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d101      	bne.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c2:	f000 fa25 	bl	8000c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40010000 	.word	0x40010000

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a68      	ldr	r2, [pc, #416]	; (80009f4 <HAL_SD_MspInit+0x1c0>)
 8000852:	4293      	cmp	r3, r2
 8000854:	f040 80c9 	bne.w	80009ea <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	4b66      	ldr	r3, [pc, #408]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000860:	4a65      	ldr	r2, [pc, #404]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 8000862:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000866:	6453      	str	r3, [r2, #68]	; 0x44
 8000868:	4b63      	ldr	r3, [pc, #396]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 800086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4b5f      	ldr	r3, [pc, #380]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a5e      	ldr	r2, [pc, #376]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	4b58      	ldr	r3, [pc, #352]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a57      	ldr	r2, [pc, #348]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <HAL_SD_MspInit+0x1c4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008ac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008be:	230c      	movs	r3, #12
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	484c      	ldr	r0, [pc, #304]	; (80009fc <HAL_SD_MspInit+0x1c8>)
 80008ca:	f000 fe61 	bl	8001590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ce:	2304      	movs	r3, #4
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008de:	230c      	movs	r3, #12
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <HAL_SD_MspInit+0x1cc>)
 80008ea:	f000 fe51 	bl	8001590 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80008ee:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 80008f0:	4a45      	ldr	r2, [pc, #276]	; (8000a08 <HAL_SD_MspInit+0x1d4>)
 80008f2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80008f4:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 80008f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008fc:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 80008fe:	2240      	movs	r2, #64	; 0x40
 8000900:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000908:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 800090a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000910:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 8000912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000916:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000918:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 800091a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 8000922:	2220      	movs	r2, #32
 8000924:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000926:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800092c:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 800092e:	2204      	movs	r2, #4
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 8000934:	2203      	movs	r2, #3
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 800093a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000940:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 8000942:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000948:	482e      	ldr	r0, [pc, #184]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 800094a:	f000 fa85 	bl	8000e58 <HAL_DMA_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000954:	f7ff ff3e 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a2a      	ldr	r2, [pc, #168]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 800095c:	63da      	str	r2, [r3, #60]	; 0x3c
 800095e:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <HAL_SD_MspInit+0x1d0>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 8000966:	4a2a      	ldr	r2, [pc, #168]	; (8000a10 <HAL_SD_MspInit+0x1dc>)
 8000968:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 800096c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000970:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 8000980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000984:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 8000988:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800098c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 8000990:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000994:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 8000998:	2220      	movs	r2, #32
 800099a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 80009aa:	2203      	movs	r2, #3
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 80009b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 80009b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 80009c0:	f000 fa4a 	bl	8000e58 <HAL_DMA_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80009ca:	f7ff ff03 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 80009d2:	641a      	str	r2, [r3, #64]	; 0x40
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <HAL_SD_MspInit+0x1d8>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2105      	movs	r1, #5
 80009de:	2031      	movs	r0, #49	; 0x31
 80009e0:	f000 fa10 	bl	8000e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80009e4:	2031      	movs	r0, #49	; 0x31
 80009e6:	f000 fa29 	bl	8000e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	20004564 	.word	0x20004564
 8000a08:	40026458 	.word	0x40026458
 8000a0c:	20004204 	.word	0x20004204
 8000a10:	400264a0 	.word	0x400264a0

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	2019      	movs	r0, #25
 8000a2a:	f000 f9eb 	bl	8000e04 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a2e:	2019      	movs	r0, #25
 8000a30:	f000 fa04 	bl	8000e3c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6453      	str	r3, [r2, #68]	; 0x44
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a50:	f107 0210 	add.w	r2, r7, #16
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fb7e 	bl	800215c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a60:	f001 fb68 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8000a64:	4603      	mov	r3, r0
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <HAL_InitTick+0xa8>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	0c9b      	lsrs	r3, r3, #18
 8000a74:	3b01      	subs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <HAL_InitTick+0xb0>)
 8000a7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a9a:	f002 fe8f 	bl	80037bc <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d104      	bne.n	8000aae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aa4:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <HAL_InitTick+0xac>)
 8000aa6:	f002 febe 	bl	8003826 <HAL_TIM_Base_Start_IT>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	2000487c 	.word	0x2000487c
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b02:	f002 feb4 	bl	800386e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000487c 	.word	0x2000487c

08000b10 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <SDIO_IRQHandler+0x10>)
 8000b16:	f001 fdbd 	bl	8002694 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200045c4 	.word	0x200045c4

08000b24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <DMA2_Stream3_IRQHandler+0x10>)
 8000b2a:	f000 fabd 	bl	80010a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20004564 	.word	0x20004564

08000b38 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <DMA2_Stream6_IRQHandler+0x10>)
 8000b3e:	f000 fab3 	bl	80010a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20004204 	.word	0x20004204

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <SystemInit+0x28>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <SystemInit+0x28>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x28>)
 8000b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b66:	609a      	str	r2, [r3, #8]
#endif
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b7e:	e003      	b.n	8000b88 <LoopCopyDataInit>

08000b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b86:	3104      	adds	r1, #4

08000b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b90:	d3f6      	bcc.n	8000b80 <CopyDataInit>
  ldr  r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b94:	e002      	b.n	8000b9c <LoopFillZerobss>

08000b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b98:	f842 3b04 	str.w	r3, [r2], #4

08000b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ba0:	d3f9      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd3 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f009 f919 	bl	8009ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fcab 	bl	8000504 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bb4:	08009fd8 	.word	0x08009fd8
  ldr  r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bbc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000bc0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000bc4:	20004d6c 	.word	0x20004d6c

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f8fa 	bl	8000dee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff ff0a 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fdf0 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200048bc 	.word	0x200048bc

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200048bc 	.word	0x200048bc

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff ffee 	bl	8000c38 <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_Delay+0x40>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c76:	bf00      	nop
 8000c78:	f7ff ffde 	bl	8000c38 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff4c 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e16:	f7ff ff61 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	6978      	ldr	r0, [r7, #20]
 8000e22:	f7ff ffb1 	bl	8000d88 <NVIC_EncodePriority>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff80 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff54 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fee8 	bl	8000c38 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e099      	b.n	8000fa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e94:	e00f      	b.n	8000eb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e96:	f7ff fecf 	bl	8000c38 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d908      	bls.n	8000eb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e078      	b.n	8000fa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e8      	bne.n	8000e96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <HAL_DMA_Init+0x158>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d107      	bne.n	8000f20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f023 0307 	bic.w	r3, r3, #7
 8000f36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d117      	bne.n	8000f7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00e      	beq.n	8000f7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fa9d 	bl	800149c <DMA_CheckFifoParam>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d008      	beq.n	8000f7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f76:	2301      	movs	r3, #1
 8000f78:	e016      	b.n	8000fa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fa54 	bl	8001430 <DMA_CalcBaseAndBitshift>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	223f      	movs	r2, #63	; 0x3f
 8000f92:	409a      	lsls	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	f010803f 	.word	0xf010803f

08000fb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <HAL_DMA_Start_IT+0x26>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e040      	b.n	800105c <HAL_DMA_Start_IT+0xa8>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d12f      	bne.n	800104e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f000 f9e6 	bl	80013d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100c:	223f      	movs	r2, #63	; 0x3f
 800100e:	409a      	lsls	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0216 	orr.w	r2, r2, #22
 8001022:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	2b00      	cmp	r3, #0
 800102a:	d007      	beq.n	800103c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0208 	orr.w	r2, r2, #8
 800103a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e005      	b.n	800105a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001056:	2302      	movs	r3, #2
 8001058:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800105a:	7dfb      	ldrb	r3, [r7, #23]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d004      	beq.n	8001082 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00c      	b.n	800109c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2205      	movs	r2, #5
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010b4:	4b92      	ldr	r3, [pc, #584]	; (8001300 <HAL_DMA_IRQHandler+0x258>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a92      	ldr	r2, [pc, #584]	; (8001304 <HAL_DMA_IRQHandler+0x25c>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	0a9b      	lsrs	r3, r3, #10
 80010c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d2:	2208      	movs	r2, #8
 80010d4:	409a      	lsls	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d01a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0204 	bic.w	r2, r2, #4
 80010fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001100:	2208      	movs	r2, #8
 8001102:	409a      	lsls	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	f043 0201 	orr.w	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	2201      	movs	r2, #1
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d012      	beq.n	800114a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2201      	movs	r2, #1
 8001138:	409a      	lsls	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001142:	f043 0202 	orr.w	r2, r3, #2
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114e:	2204      	movs	r2, #4
 8001150:	409a      	lsls	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d012      	beq.n	8001180 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00b      	beq.n	8001180 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116c:	2204      	movs	r2, #4
 800116e:	409a      	lsls	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001178:	f043 0204 	orr.w	r2, r3, #4
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	2210      	movs	r2, #16
 8001186:	409a      	lsls	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d043      	beq.n	8001218 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d03c      	beq.n	8001218 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a2:	2210      	movs	r2, #16
 80011a4:	409a      	lsls	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d018      	beq.n	80011ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d108      	bne.n	80011d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d024      	beq.n	8001218 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	4798      	blx	r3
 80011d6:	e01f      	b.n	8001218 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01b      	beq.n	8001218 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	4798      	blx	r3
 80011e8:	e016      	b.n	8001218 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d107      	bne.n	8001208 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0208 	bic.w	r2, r2, #8
 8001206:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121c:	2220      	movs	r2, #32
 800121e:	409a      	lsls	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 808e 	beq.w	8001346 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 8086 	beq.w	8001346 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123e:	2220      	movs	r2, #32
 8001240:	409a      	lsls	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b05      	cmp	r3, #5
 8001250:	d136      	bne.n	80012c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0216 	bic.w	r2, r2, #22
 8001260:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695a      	ldr	r2, [r3, #20]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001270:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <HAL_DMA_IRQHandler+0x1da>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0208 	bic.w	r2, r2, #8
 8001290:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001296:	223f      	movs	r2, #63	; 0x3f
 8001298:	409a      	lsls	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d07d      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	4798      	blx	r3
        }
        return;
 80012be:	e078      	b.n	80013b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01c      	beq.n	8001308 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d108      	bne.n	80012ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d030      	beq.n	8001346 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4798      	blx	r3
 80012ec:	e02b      	b.n	8001346 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d027      	beq.n	8001346 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4798      	blx	r3
 80012fe:	e022      	b.n	8001346 <HAL_DMA_IRQHandler+0x29e>
 8001300:	20000000 	.word	0x20000000
 8001304:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0210 	bic.w	r2, r2, #16
 8001324:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134a:	2b00      	cmp	r3, #0
 800134c:	d032      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d022      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3301      	adds	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	429a      	cmp	r2, r3
 800137c:	d307      	bcc.n	800138e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f2      	bne.n	8001372 <HAL_DMA_IRQHandler+0x2ca>
 800138c:	e000      	b.n	8001390 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800138e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
 80013b0:	e000      	b.n	80013b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80013b2:	bf00      	nop
    }
  }
}
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop

080013bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b40      	cmp	r3, #64	; 0x40
 8001400:	d108      	bne.n	8001414 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001412:	e007      	b.n	8001424 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	60da      	str	r2, [r3, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	3b10      	subs	r3, #16
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <DMA_CalcBaseAndBitshift+0x64>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <DMA_CalcBaseAndBitshift+0x68>)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d909      	bls.n	8001472 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	1d1a      	adds	r2, r3, #4
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	659a      	str	r2, [r3, #88]	; 0x58
 8001470:	e007      	b.n	8001482 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800147a:	f023 0303 	bic.w	r3, r3, #3
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	aaaaaaab 	.word	0xaaaaaaab
 8001498:	08009f2c 	.word	0x08009f2c

0800149c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d11f      	bne.n	80014f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d855      	bhi.n	8001568 <DMA_CheckFifoParam+0xcc>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <DMA_CheckFifoParam+0x28>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014e7 	.word	0x080014e7
 80014cc:	080014d5 	.word	0x080014d5
 80014d0:	08001569 	.word	0x08001569
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d045      	beq.n	800156c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e4:	e042      	b.n	800156c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014ee:	d13f      	bne.n	8001570 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f4:	e03c      	b.n	8001570 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014fe:	d121      	bne.n	8001544 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d836      	bhi.n	8001574 <DMA_CheckFifoParam+0xd8>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <DMA_CheckFifoParam+0x70>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800151d 	.word	0x0800151d
 8001510:	08001523 	.word	0x08001523
 8001514:	0800151d 	.word	0x0800151d
 8001518:	08001535 	.word	0x08001535
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
      break;
 8001520:	e02f      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d024      	beq.n	8001578 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001532:	e021      	b.n	8001578 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800153c:	d11e      	bne.n	800157c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001542:	e01b      	b.n	800157c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d902      	bls.n	8001550 <DMA_CheckFifoParam+0xb4>
 800154a:	2b03      	cmp	r3, #3
 800154c:	d003      	beq.n	8001556 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800154e:	e018      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
      break;
 8001554:	e015      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00e      	beq.n	8001580 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
      break;
 8001566:	e00b      	b.n	8001580 <DMA_CheckFifoParam+0xe4>
      break;
 8001568:	bf00      	nop
 800156a:	e00a      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
      break;
 800156c:	bf00      	nop
 800156e:	e008      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
      break;
 8001570:	bf00      	nop
 8001572:	e006      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
      break;
 8001574:	bf00      	nop
 8001576:	e004      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
      break;
 8001578:	bf00      	nop
 800157a:	e002      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
      break;   
 800157c:	bf00      	nop
 800157e:	e000      	b.n	8001582 <DMA_CheckFifoParam+0xe6>
      break;
 8001580:	bf00      	nop
    }
  } 
  
  return status; 
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	e16b      	b.n	8001884 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 815a 	bne.w	800187e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d00b      	beq.n	80015ea <HAL_GPIO_Init+0x5a>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015de:	2b11      	cmp	r3, #17
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b12      	cmp	r3, #18
 80015e8:	d130      	bne.n	800164c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0xfc>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b12      	cmp	r3, #18
 800168a:	d123      	bne.n	80016d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	69b9      	ldr	r1, [r7, #24]
 80016d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0203 	and.w	r2, r3, #3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80b4 	beq.w	800187e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_GPIO_Init+0x308>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <HAL_GPIO_Init+0x308>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <HAL_GPIO_Init+0x308>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001732:	4a5a      	ldr	r2, [pc, #360]	; (800189c <HAL_GPIO_Init+0x30c>)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a51      	ldr	r2, [pc, #324]	; (80018a0 <HAL_GPIO_Init+0x310>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d02b      	beq.n	80017b6 <HAL_GPIO_Init+0x226>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a50      	ldr	r2, [pc, #320]	; (80018a4 <HAL_GPIO_Init+0x314>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x222>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4f      	ldr	r2, [pc, #316]	; (80018a8 <HAL_GPIO_Init+0x318>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x21e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4e      	ldr	r2, [pc, #312]	; (80018ac <HAL_GPIO_Init+0x31c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x21a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <HAL_GPIO_Init+0x320>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x216>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4c      	ldr	r2, [pc, #304]	; (80018b4 <HAL_GPIO_Init+0x324>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x212>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4b      	ldr	r2, [pc, #300]	; (80018b8 <HAL_GPIO_Init+0x328>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x20e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <HAL_GPIO_Init+0x32c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x20a>
 8001796:	2307      	movs	r3, #7
 8001798:	e00e      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 800179a:	2308      	movs	r3, #8
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c8:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_GPIO_Init+0x30c>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d6:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <HAL_GPIO_Init+0x330>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017fa:	4a31      	ldr	r2, [pc, #196]	; (80018c0 <HAL_GPIO_Init+0x330>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001800:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001824:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_GPIO_Init+0x330>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184e:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001878:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <HAL_GPIO_Init+0x330>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f ae90 	bls.w	80015ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	3724      	adds	r7, #36	; 0x24
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021c00 	.word	0x40021c00
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e25b      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d075      	beq.n	80019ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018e2:	4ba3      	ldr	r3, [pc, #652]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d00c      	beq.n	8001908 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4ba0      	ldr	r3, [pc, #640]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	4b9d      	ldr	r3, [pc, #628]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001906:	d10b      	bne.n	8001920 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	4b99      	ldr	r3, [pc, #612]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d05b      	beq.n	80019cc <HAL_RCC_OscConfig+0x108>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d157      	bne.n	80019cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e236      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d106      	bne.n	8001938 <HAL_RCC_OscConfig+0x74>
 800192a:	4b91      	ldr	r3, [pc, #580]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a90      	ldr	r2, [pc, #576]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01d      	b.n	8001974 <HAL_RCC_OscConfig+0xb0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x98>
 8001942:	4b8b      	ldr	r3, [pc, #556]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a8a      	ldr	r2, [pc, #552]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b88      	ldr	r3, [pc, #544]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a87      	ldr	r2, [pc, #540]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0xb0>
 800195c:	4b84      	ldr	r3, [pc, #528]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a83      	ldr	r2, [pc, #524]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a80      	ldr	r2, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff f95c 	bl	8000c38 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff f958 	bl	8000c38 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1fb      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b76      	ldr	r3, [pc, #472]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0xc0>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff f948 	bl	8000c38 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff f944 	bl	8000c38 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1e7      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0xe8>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019da:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d11c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d116      	bne.n	8001a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x152>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1bb      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4952      	ldr	r1, [pc, #328]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	e03a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <HAL_RCC_OscConfig+0x2b0>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f8fd 	bl	8000c38 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a42:	f7ff f8f9 	bl	8000c38 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e19c      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4940      	ldr	r1, [pc, #256]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_RCC_OscConfig+0x2b0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f8dc 	bl	8000c38 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff f8d8 	bl	8000c38 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e17b      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d030      	beq.n	8001b10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d016      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_RCC_OscConfig+0x2b4>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff f8bc 	bl	8000c38 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f8b8 	bl	8000c38 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e15b      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x200>
 8001ae2:	e015      	b.n	8001b10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x2b4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff f8a5 	bl	8000c38 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af2:	f7ff f8a1 	bl	8000c38 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e144      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a0 	beq.w	8001c5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCC_OscConfig+0x2b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_RCC_OscConfig+0x2b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_RCC_OscConfig+0x2b8>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7ff f867 	bl	8000c38 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e011      	b.n	8001b92 <HAL_RCC_OscConfig+0x2ce>
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	42470000 	.word	0x42470000
 8001b78:	42470e80 	.word	0x42470e80
 8001b7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b80:	f7ff f85a 	bl	8000c38 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0fd      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b81      	ldr	r3, [pc, #516]	; (8001d98 <HAL_RCC_OscConfig+0x4d4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d106      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
 8001ba6:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a7c      	ldr	r2, [pc, #496]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb2:	e01c      	b.n	8001bee <HAL_RCC_OscConfig+0x32a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d10c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x312>
 8001bbc:	4b77      	ldr	r3, [pc, #476]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	4a76      	ldr	r2, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc8:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a73      	ldr	r2, [pc, #460]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	e00b      	b.n	8001bee <HAL_RCC_OscConfig+0x32a>
 8001bd6:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a70      	ldr	r2, [pc, #448]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a6d      	ldr	r2, [pc, #436]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d015      	beq.n	8001c22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f81f 	bl	8000c38 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff f81b 	bl	8000c38 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0bc      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ee      	beq.n	8001bfe <HAL_RCC_OscConfig+0x33a>
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f809 	bl	8000c38 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f805 	bl	8000c38 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0a6      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ee      	bne.n	8001c2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8092 	beq.w	8001d8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c68:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d05c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d141      	bne.n	8001d00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_RCC_OscConfig+0x4dc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe ffd9 	bl	8000c38 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7fe ffd5 	bl	8000c38 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e078      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	019b      	lsls	r3, r3, #6
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	061b      	lsls	r3, r3, #24
 8001ccc:	4933      	ldr	r1, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd2:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <HAL_RCC_OscConfig+0x4dc>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe ffae 	bl	8000c38 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7fe ffaa 	bl	8000c38 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e04d      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x41c>
 8001cfe:	e045      	b.n	8001d8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HAL_RCC_OscConfig+0x4dc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe ff97 	bl	8000c38 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7fe ff93 	bl	8000c38 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e036      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x44a>
 8001d2c:	e02e      	b.n	8001d8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e029      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_RCC_OscConfig+0x4d8>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d11c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d115      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10d      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	42470060 	.word	0x42470060

08001da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0cc      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b68      	ldr	r3, [pc, #416]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d90c      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0b8      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4a58      	ldr	r2, [pc, #352]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a52      	ldr	r2, [pc, #328]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	494d      	ldr	r1, [pc, #308]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d044      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d119      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e07f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e067      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e82:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 0203 	bic.w	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4934      	ldr	r1, [pc, #208]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e94:	f7fe fed0 	bl	8000c38 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7fe fecc 	bl	8000c38 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e04f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 020c 	and.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1eb      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d20c      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e032      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4916      	ldr	r1, [pc, #88]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2a:	f000 f821 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f2e:	4601      	mov	r1, r0
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fd62 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08009f14 	.word	0x08009f14
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f86:	4b63      	ldr	r3, [pc, #396]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d007      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x32>
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d008      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x38>
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 80b4 	bne.w	8002104 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f9e:	60bb      	str	r3, [r7, #8]
       break;
 8001fa0:	e0b3      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fa4:	60bb      	str	r3, [r7, #8]
      break;
 8001fa6:	e0b0      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb2:	4b58      	ldr	r3, [pc, #352]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d04a      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbe:	4b55      	ldr	r3, [pc, #340]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	f04f 0400 	mov.w	r4, #0
 8001fc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	ea03 0501 	and.w	r5, r3, r1
 8001fd4:	ea04 0602 	and.w	r6, r4, r2
 8001fd8:	4629      	mov	r1, r5
 8001fda:	4632      	mov	r2, r6
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	f04f 0400 	mov.w	r4, #0
 8001fe4:	0154      	lsls	r4, r2, #5
 8001fe6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fea:	014b      	lsls	r3, r1, #5
 8001fec:	4619      	mov	r1, r3
 8001fee:	4622      	mov	r2, r4
 8001ff0:	1b49      	subs	r1, r1, r5
 8001ff2:	eb62 0206 	sbc.w	r2, r2, r6
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	f04f 0400 	mov.w	r4, #0
 8001ffe:	0194      	lsls	r4, r2, #6
 8002000:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002004:	018b      	lsls	r3, r1, #6
 8002006:	1a5b      	subs	r3, r3, r1
 8002008:	eb64 0402 	sbc.w	r4, r4, r2
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	00e2      	lsls	r2, r4, #3
 8002016:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800201a:	00d9      	lsls	r1, r3, #3
 800201c:	460b      	mov	r3, r1
 800201e:	4614      	mov	r4, r2
 8002020:	195b      	adds	r3, r3, r5
 8002022:	eb44 0406 	adc.w	r4, r4, r6
 8002026:	f04f 0100 	mov.w	r1, #0
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	02a2      	lsls	r2, r4, #10
 8002030:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002034:	0299      	lsls	r1, r3, #10
 8002036:	460b      	mov	r3, r1
 8002038:	4614      	mov	r4, r2
 800203a:	4618      	mov	r0, r3
 800203c:	4621      	mov	r1, r4
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f04f 0400 	mov.w	r4, #0
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	f7fe f8c2 	bl	80001d0 <__aeabi_uldivmod>
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e049      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	f04f 0400 	mov.w	r4, #0
 800205e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	ea03 0501 	and.w	r5, r3, r1
 800206a:	ea04 0602 	and.w	r6, r4, r2
 800206e:	4629      	mov	r1, r5
 8002070:	4632      	mov	r2, r6
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	f04f 0400 	mov.w	r4, #0
 800207a:	0154      	lsls	r4, r2, #5
 800207c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002080:	014b      	lsls	r3, r1, #5
 8002082:	4619      	mov	r1, r3
 8002084:	4622      	mov	r2, r4
 8002086:	1b49      	subs	r1, r1, r5
 8002088:	eb62 0206 	sbc.w	r2, r2, r6
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	f04f 0400 	mov.w	r4, #0
 8002094:	0194      	lsls	r4, r2, #6
 8002096:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800209a:	018b      	lsls	r3, r1, #6
 800209c:	1a5b      	subs	r3, r3, r1
 800209e:	eb64 0402 	sbc.w	r4, r4, r2
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	00e2      	lsls	r2, r4, #3
 80020ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020b0:	00d9      	lsls	r1, r3, #3
 80020b2:	460b      	mov	r3, r1
 80020b4:	4614      	mov	r4, r2
 80020b6:	195b      	adds	r3, r3, r5
 80020b8:	eb44 0406 	adc.w	r4, r4, r6
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	02a2      	lsls	r2, r4, #10
 80020c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020ca:	0299      	lsls	r1, r3, #10
 80020cc:	460b      	mov	r3, r1
 80020ce:	4614      	mov	r4, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	4621      	mov	r1, r4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f04f 0400 	mov.w	r4, #0
 80020da:	461a      	mov	r2, r3
 80020dc:	4623      	mov	r3, r4
 80020de:	f7fe f877 	bl	80001d0 <__aeabi_uldivmod>
 80020e2:	4603      	mov	r3, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	0c1b      	lsrs	r3, r3, #16
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	60bb      	str	r3, [r7, #8]
      break;
 8002102:	e002      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002106:	60bb      	str	r3, [r7, #8]
      break;
 8002108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210a:	68bb      	ldr	r3, [r7, #8]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	00f42400 	.word	0x00f42400

0800211c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCC_GetHCLKFreq+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002138:	f7ff fff0 	bl	800211c <HAL_RCC_GetHCLKFreq>
 800213c:	4601      	mov	r1, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0b5b      	lsrs	r3, r3, #13
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800
 8002158:	08009f24 	.word	0x08009f24

0800215c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	220f      	movs	r2, #15
 800216a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_GetClockConfig+0x5c>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0203 	and.w	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_RCC_GetClockConfig+0x5c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_RCC_GetClockConfig+0x60>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 020f 	and.w	r2, r3, #15
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e022      	b.n	8002218 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7fe fb25 	bl	8000834 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2203      	movs	r2, #3
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f814 	bl	8002220 <HAL_SD_InitCard>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00a      	b.n	8002218 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b08e      	sub	sp, #56	; 0x38
 8002224:	af04      	add	r7, sp, #16
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800223c:	2376      	movs	r3, #118	; 0x76
 800223e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681d      	ldr	r5, [r3, #0]
 8002244:	466c      	mov	r4, sp
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800224e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	4628      	mov	r0, r5
 800225a:	f001 fced 	bl	8003c38 <SDIO_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e031      	b.n	80022d4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_SD_InitCard+0xbc>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fd25 	bl	8003cca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_SD_InitCard+0xbc>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 ffdc 	bl	8003244 <SD_PowerON>
 800228c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e013      	b.n	80022d4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fefb 	bl	80030a8 <SD_InitCard>
 80022b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3728      	adds	r7, #40	; 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bdb0      	pop	{r4, r5, r7, pc}
 80022dc:	422580a0 	.word	0x422580a0

080022e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	; 0x30
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0c9      	b.n	800249c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 80c2 	bne.w	800249a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800231c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	441a      	add	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	429a      	cmp	r2, r3
 8002328:	d907      	bls.n	800233a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0b0      	b.n	800249c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2203      	movs	r2, #3
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2200      	movs	r2, #0
 8002348:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a50      	ldr	r2, [pc, #320]	; (80024a4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800236c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2200      	movs	r2, #0
 8002374:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3380      	adds	r3, #128	; 0x80
 8002380:	4619      	mov	r1, r3
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	025b      	lsls	r3, r3, #9
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	f7fe fe13 	bl	8000fb4 <HAL_DMA_Start_IT>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d017      	beq.n	80023c4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a40      	ldr	r2, [pc, #256]	; (80024ac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80023aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e06b      	b.n	800249c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d002      	beq.n	80023d8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	025b      	lsls	r3, r3, #9
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 fd05 	bl	8003df0 <SDMMC_CmdBlockLength>
 80023e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00f      	beq.n	800240e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2e      	ldr	r2, [pc, #184]	; (80024ac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e046      	b.n	800249c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	025b      	lsls	r3, r3, #9
 8002418:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800241a:	2390      	movs	r3, #144	; 0x90
 800241c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800241e:	2302      	movs	r3, #2
 8002420:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002426:	2301      	movs	r3, #1
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f107 0210 	add.w	r2, r7, #16
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fcaf 	bl	8003d98 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d90a      	bls.n	8002456 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2282      	movs	r2, #130	; 0x82
 8002444:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800244c:	4618      	mov	r0, r3
 800244e:	f001 fd13 	bl	8003e78 <SDMMC_CmdReadMultiBlock>
 8002452:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002454:	e009      	b.n	800246a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2281      	movs	r2, #129	; 0x81
 800245a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002462:	4618      	mov	r0, r3
 8002464:	f001 fce6 	bl	8003e34 <SDMMC_CmdReadSingleBlock>
 8002468:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	431a      	orrs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e002      	b.n	800249c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800249a:	2302      	movs	r3, #2
  }
}
 800249c:	4618      	mov	r0, r3
 800249e:	3730      	adds	r7, #48	; 0x30
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	08002eb7 	.word	0x08002eb7
 80024a8:	08002f29 	.word	0x08002f29
 80024ac:	004005ff 	.word	0x004005ff
 80024b0:	4225858c 	.word	0x4225858c

080024b4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0ce      	b.n	800267a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	f040 80c7 	bne.w	8002678 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80024f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	441a      	add	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d907      	bls.n	800250e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0b5      	b.n	800267a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2203      	movs	r2, #3
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	4a53      	ldr	r2, [pc, #332]	; (8002684 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	4a52      	ldr	r2, [pc, #328]	; (8002688 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8002540:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2200      	movs	r2, #0
 8002548:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	2b01      	cmp	r3, #1
 8002550:	d002      	beq.n	8002558 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	025b      	lsls	r3, r3, #9
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002560:	4618      	mov	r0, r3
 8002562:	f001 fc45 	bl	8003df0 <SDMMC_CmdBlockLength>
 8002566:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00f      	beq.n	800258e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	431a      	orrs	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e075      	b.n	800267a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d90a      	bls.n	80025aa <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	22a0      	movs	r2, #160	; 0xa0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fcad 	bl	8003f00 <SDMMC_CmdWriteMultiBlock>
 80025a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80025a8:	e009      	b.n	80025be <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2290      	movs	r2, #144	; 0x90
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 fc80 	bl	8003ebc <SDMMC_CmdWriteSingleBlock>
 80025bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d012      	beq.n	80025ea <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a30      	ldr	r2, [pc, #192]	; (800268c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e047      	b.n	800267a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3380      	adds	r3, #128	; 0x80
 80025fc:	461a      	mov	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	025b      	lsls	r3, r3, #9
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	f7fe fcd6 	bl	8000fb4 <HAL_DMA_Start_IT>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01c      	beq.n	8002648 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800261c:	f023 0302 	bic.w	r3, r3, #2
 8002620:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002628:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e018      	b.n	800267a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
 800264c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	025b      	lsls	r3, r3, #9
 8002652:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002654:	2390      	movs	r3, #144	; 0x90
 8002656:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002660:	2301      	movs	r3, #1
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f107 0210 	add.w	r2, r7, #16
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f001 fb92 	bl	8003d98 <SDIO_ConfigData>

      return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3730      	adds	r7, #48	; 0x30
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	08002e8d 	.word	0x08002e8d
 8002688:	08002f29 	.word	0x08002f29
 800268c:	004005ff 	.word	0x004005ff
 8002690:	4225858c 	.word	0x4225858c

08002694 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_SD_IRQHandler+0x2e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 ffd8 	bl	8003670 <SD_Read_IT>
 80026c0:	e165      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 808f 	beq.w	80027f0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026da:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80026ea:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80026ee:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d039      	beq.n	800277e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d104      	bne.n	800271e <HAL_SD_IRQHandler+0x8a>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d011      	beq.n	8002742 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f001 fc0e 	bl	8003f44 <SDMMC_CmdStopTransfer>
 8002728:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f92f 	bl	80029a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f240 523a 	movw	r2, #1338	; 0x53a
 800274a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d104      	bne.n	800276e <HAL_SD_IRQHandler+0xda>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f002 f86c 	bl	800484c <HAL_SD_RxCpltCallback>
 8002774:	e10b      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f002 f85e 	bl	8004838 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800277c:	e107      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8102 	beq.w	800298e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d011      	beq.n	80027b8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f001 fbd3 	bl	8003f44 <SDMMC_CmdStopTransfer>
 800279e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8f4 	bl	80029a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80e5 	bne.w	800298e <HAL_SD_IRQHandler+0x2fa>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 80df 	bne.w	800298e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0208 	bic.w	r2, r2, #8
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f002 f825 	bl	8004838 <HAL_SD_TxCpltCallback>
}
 80027ee:	e0ce      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_SD_IRQHandler+0x17c>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 ff82 	bl	8003712 <SD_Write_IT>
 800280e:	e0be      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002816:	f240 233a 	movw	r3, #570	; 0x23a
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80b6 	beq.w	800298e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	f043 0202 	orr.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	f043 0208 	orr.w	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	f043 0208 	orr.w	r2, r3, #8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f240 723a 	movw	r2, #1850	; 0x73a
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80028bc:	f023 0302 	bic.w	r3, r3, #2
 80028c0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 fb3c 	bl	8003f44 <SDMMC_CmdStopTransfer>
 80028cc:	4602      	mov	r2, r0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f855 	bl	80029a0 <HAL_SD_ErrorCallback>
}
 80028f6:	e04a      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d045      	beq.n	800298e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <HAL_SD_IRQHandler+0x282>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d011      	beq.n	800293a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_SD_IRQHandler+0x304>)
 800291c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fb9e 	bl	8001064 <HAL_DMA_Abort_IT>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d02f      	beq.n	800298e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fb4a 	bl	8002fcc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002938:	e029      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <HAL_SD_IRQHandler+0x2ba>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d011      	beq.n	8002972 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <HAL_SD_IRQHandler+0x308>)
 8002954:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fb82 	bl	8001064 <HAL_DMA_Abort_IT>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d013      	beq.n	800298e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fb65 	bl	800303a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002970:	e00d      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f001 ff4c 	bl	8004824 <HAL_SD_AbortCallback>
}
 800298c:	e7ff      	b.n	800298e <HAL_SD_IRQHandler+0x2fa>
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	08002fcd 	.word	0x08002fcd
 800299c:	0800303b 	.word	0x0800303b

080029a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c2:	0f9b      	lsrs	r3, r3, #30
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ce:	0e9b      	lsrs	r3, r3, #26
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e0:	0e1b      	lsrs	r3, r3, #24
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f2:	0c1b      	lsrs	r3, r3, #16
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a14:	0d1b      	lsrs	r3, r3, #20
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a32:	0bdb      	lsrs	r3, r3, #15
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a44:	0b9b      	lsrs	r3, r3, #14
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a68:	0b1b      	lsrs	r3, r3, #12
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d163      	bne.n	8002b4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a88:	009a      	lsls	r2, r3, #2
 8002a8a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a8e:	4013      	ands	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002a94:	0f92      	lsrs	r2, r2, #30
 8002a96:	431a      	orrs	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa0:	0edb      	lsrs	r3, r3, #27
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab2:	0e1b      	lsrs	r3, r3, #24
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac4:	0d5b      	lsrs	r3, r3, #21
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad6:	0c9b      	lsrs	r3, r3, #18
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae8:	0bdb      	lsrs	r3, r3, #15
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	7e1b      	ldrb	r3, [r3, #24]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b16:	fb02 f203 	mul.w	r2, r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	7a1b      	ldrb	r3, [r3, #8]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b38:	0a52      	lsrs	r2, r2, #9
 8002b3a:	fb02 f203 	mul.w	r2, r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b48:	661a      	str	r2, [r3, #96]	; 0x60
 8002b4a:	e031      	b.n	8002bb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d11d      	bne.n	8002b90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	029a      	lsls	r2, r3, #10
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b84:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	661a      	str	r2, [r3, #96]	; 0x60
 8002b8e:	e00f      	b.n	8002bb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a58      	ldr	r2, [pc, #352]	; (8002cf8 <HAL_SD_GetCardCSD+0x344>)
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e09d      	b.n	8002cec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb4:	0b9b      	lsrs	r3, r3, #14
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc6:	09db      	lsrs	r3, r3, #7
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	0fdb      	lsrs	r3, r3, #31
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	0f5b      	lsrs	r3, r3, #29
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	0d9b      	lsrs	r3, r3, #22
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	0d5b      	lsrs	r3, r3, #21
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	0c1b      	lsrs	r3, r3, #16
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	0bdb      	lsrs	r3, r3, #15
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	0b9b      	lsrs	r3, r3, #14
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	0b5b      	lsrs	r3, r3, #13
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	0b1b      	lsrs	r3, r3, #12
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	0a9b      	lsrs	r3, r3, #10
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	004005ff 	.word	0x004005ff

08002cfc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af04      	add	r7, sp, #16
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2203      	movs	r2, #3
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d02e      	beq.n	8002dcc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d74:	d106      	bne.n	8002d84 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
 8002d82:	e029      	b.n	8002dd8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d8a:	d10a      	bne.n	8002da2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fb0f 	bl	80033b0 <SD_WideBus_Enable>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8002da0:	e01a      	b.n	8002dd8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fb4c 	bl	8003446 <SD_WideBus_Disable>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
 8002dbc:	e00c      	b.n	8002dd8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dca:	e005      	b.n	8002dd8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e024      	b.n	8002e3e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681d      	ldr	r5, [r3, #0]
 8002e1a:	466c      	mov	r4, sp
 8002e1c:	f107 0318 	add.w	r3, r7, #24
 8002e20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f000 ff02 	bl	8003c38 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bdb0      	pop	{r4, r5, r7, pc}
 8002e46:	bf00      	nop
 8002e48:	004005ff 	.word	0x004005ff

08002e4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fa7e 	bl	8003360 <SD_SendStatus>
 8002e64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	0a5b      	lsrs	r3, r3, #9
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002e82:	693b      	ldr	r3, [r7, #16]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	2b82      	cmp	r3, #130	; 0x82
 8002eca:	d111      	bne.n	8002ef0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 f837 	bl	8003f44 <SDMMC_CmdStopTransfer>
 8002ed6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff fd58 	bl	80029a0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0208 	bic.w	r2, r2, #8
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f001 fc97 	bl	800484c <HAL_SD_RxCpltCallback>
#endif
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fa40 	bl	80013bc <HAL_DMA_GetError>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d03e      	beq.n	8002fc0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d002      	beq.n	8002f5e <SD_DMAError+0x36>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d12d      	bne.n	8002fba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <SD_DMAError+0xa0>)
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002f74:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff62 	bl	8002e4c <HAL_SD_GetCardState>
 8002f88:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d002      	beq.n	8002f96 <SD_DMAError+0x6e>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d10a      	bne.n	8002fac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 ffd2 	bl	8003f44 <SDMMC_CmdStopTransfer>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7ff fcf0 	bl	80029a0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	004005ff 	.word	0x004005ff

08002fcc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f240 523a 	movw	r2, #1338	; 0x53a
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff ff31 	bl	8002e4c <HAL_SD_GetCardState>
 8002fea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d002      	beq.n	8003006 <SD_DMATxAbort+0x3a>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d10a      	bne.n	800301c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 ff9a 	bl	8003f44 <SDMMC_CmdStopTransfer>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	431a      	orrs	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f001 fbfd 	bl	8004824 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800302a:	e002      	b.n	8003032 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fcb7 	bl	80029a0 <HAL_SD_ErrorCallback>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003050:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff fefa 	bl	8002e4c <HAL_SD_GetCardState>
 8003058:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b06      	cmp	r3, #6
 800306c:	d002      	beq.n	8003074 <SD_DMARxAbort+0x3a>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d10a      	bne.n	800308a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 ff63 	bl	8003f44 <SDMMC_CmdStopTransfer>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f001 fbc6 	bl	8004824 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003098:	e002      	b.n	80030a0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fc80 	bl	80029a0 <HAL_SD_ErrorCallback>
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b094      	sub	sp, #80	; 0x50
 80030ac:	af04      	add	r7, sp, #16
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80030b0:	2301      	movs	r3, #1
 80030b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fe15 	bl	8003ce8 <SDIO_GetPowerState>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80030c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030c8:	e0b7      	b.n	800323a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d02f      	beq.n	8003132 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f83e 	bl	8004158 <SDMMC_CmdSendCID>
 80030dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80030de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80030e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e6:	e0a8      	b.n	800323a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fe3f 	bl	8003d72 <SDIO_GetResponse>
 80030f4:	4602      	mov	r2, r0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2104      	movs	r1, #4
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fe36 	bl	8003d72 <SDIO_GetResponse>
 8003106:	4602      	mov	r2, r0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2108      	movs	r1, #8
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fe2d 	bl	8003d72 <SDIO_GetResponse>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	210c      	movs	r1, #12
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fe24 	bl	8003d72 <SDIO_GetResponse>
 800312a:	4602      	mov	r2, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	2b03      	cmp	r3, #3
 8003138:	d00d      	beq.n	8003156 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f107 020e 	add.w	r2, r7, #14
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f001 f844 	bl	80041d2 <SDMMC_CmdSetRelAdd>
 800314a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800314c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <SD_InitCard+0xae>
    {
      return errorstate;
 8003152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003154:	e071      	b.n	800323a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	2b03      	cmp	r3, #3
 800315c:	d036      	beq.n	80031cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800315e:	89fb      	ldrh	r3, [r7, #14]
 8003160:	461a      	mov	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f001 f80e 	bl	8004194 <SDMMC_CmdSendCSD>
 8003178:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003182:	e05a      	b.n	800323a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fdf1 	bl	8003d72 <SDIO_GetResponse>
 8003190:	4602      	mov	r2, r0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2104      	movs	r1, #4
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fde8 	bl	8003d72 <SDIO_GetResponse>
 80031a2:	4602      	mov	r2, r0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2108      	movs	r1, #8
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fddf 	bl	8003d72 <SDIO_GetResponse>
 80031b4:	4602      	mov	r2, r0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	210c      	movs	r1, #12
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fdd6 	bl	8003d72 <SDIO_GetResponse>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2104      	movs	r1, #4
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fdcd 	bl	8003d72 <SDIO_GetResponse>
 80031d8:	4603      	mov	r3, r0
 80031da:	0d1a      	lsrs	r2, r3, #20
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff fbe4 	bl	80029b4 <HAL_SD_GetCardCSD>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031f6:	e020      	b.n	800323a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	f04f 0400 	mov.w	r4, #0
 8003206:	461a      	mov	r2, r3
 8003208:	4623      	mov	r3, r4
 800320a:	4608      	mov	r0, r1
 800320c:	f000 febc 	bl	8003f88 <SDMMC_CmdSelDesel>
 8003210:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <SD_InitCard+0x174>
  {
    return errorstate;
 8003218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321a:	e00e      	b.n	800323a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681d      	ldr	r5, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	466c      	mov	r4, sp
 8003224:	f103 0210 	add.w	r2, r3, #16
 8003228:	ca07      	ldmia	r2, {r0, r1, r2}
 800322a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800322e:	3304      	adds	r3, #4
 8003230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003232:	4628      	mov	r0, r5
 8003234:	f000 fd00 	bl	8003c38 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3740      	adds	r7, #64	; 0x40
 800323e:	46bd      	mov	sp, r7
 8003240:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003244 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 feb6 	bl	8003fce <SDMMC_CmdGoIdleState>
 8003262:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <SD_PowerON+0x2a>
  {
    return errorstate;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	e072      	b.n	8003354 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fec9 	bl	800400a <SDMMC_CmdOperCond>
 8003278:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fe9f 	bl	8003fce <SDMMC_CmdGoIdleState>
 8003290:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	e05b      	b.n	8003354 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d137      	bne.n	800331a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fec9 	bl	8004048 <SDMMC_CmdAppCommand>
 80032b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d02d      	beq.n	800331a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032c2:	e047      	b.n	8003354 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 febc 	bl	8004048 <SDMMC_CmdAppCommand>
 80032d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <SD_PowerON+0x98>
    {
      return errorstate;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	e03b      	b.n	8003354 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	491e      	ldr	r1, [pc, #120]	; (800335c <SD_PowerON+0x118>)
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fed2 	bl	800408c <SDMMC_CmdAppOperCommand>
 80032e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032f4:	e02e      	b.n	8003354 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fd38 	bl	8003d72 <SDIO_GetResponse>
 8003302:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	0fdb      	lsrs	r3, r3, #31
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <SD_PowerON+0xcc>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <SD_PowerON+0xce>
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]

    count++;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3301      	adds	r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003320:	4293      	cmp	r3, r2
 8003322:	d802      	bhi.n	800332a <SD_PowerON+0xe6>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0cc      	beq.n	80032c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003330:	4293      	cmp	r3, r2
 8003332:	d902      	bls.n	800333a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003338:	e00c      	b.n	8003354 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
 800334a:	e002      	b.n	8003352 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	c1100000 	.word	0xc1100000

08003360 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003370:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003374:	e018      	b.n	80033a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f000 ff46 	bl	8004214 <SDMMC_CmdSendStatus>
 8003388:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	e009      	b.n	80033a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fce9 	bl	8003d72 <SDIO_GetResponse>
 80033a0:	4602      	mov	r2, r0
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fcd3 	bl	8003d72 <SDIO_GetResponse>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033d6:	d102      	bne.n	80033de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80033d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033dc:	e02f      	b.n	800343e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f879 	bl	80034dc <SD_FindSCR>
 80033ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	e023      	b.n	800343e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01c      	beq.n	800343a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f000 fe1b 	bl	8004048 <SDMMC_CmdAppCommand>
 8003412:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e00f      	b.n	800343e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2102      	movs	r1, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fe54 	bl	80040d2 <SDMMC_CmdBusWidth>
 800342a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	e003      	b.n	800343e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003436:	2300      	movs	r3, #0
 8003438:	e001      	b.n	800343e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800343a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fc88 	bl	8003d72 <SDIO_GetResponse>
 8003462:	4603      	mov	r3, r0
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800346c:	d102      	bne.n	8003474 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800346e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003472:	e02f      	b.n	80034d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f82e 	bl	80034dc <SD_FindSCR>
 8003480:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	e023      	b.n	80034d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01c      	beq.n	80034d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f000 fdd0 	bl	8004048 <SDMMC_CmdAppCommand>
 80034a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	e00f      	b.n	80034d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fe09 	bl	80040d2 <SDMMC_CmdBusWidth>
 80034c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	e003      	b.n	80034d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e001      	b.n	80034d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b08f      	sub	sp, #60	; 0x3c
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80034e6:	f7fd fba7 	bl	8000c38 <HAL_GetTick>
 80034ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2108      	movs	r1, #8
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fc74 	bl	8003df0 <SDMMC_CmdBlockLength>
 8003508:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	e0a9      	b.n	8003668 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f000 fd91 	bl	8004048 <SDMMC_CmdAppCommand>
 8003526:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <SD_FindSCR+0x56>
  {
    return errorstate;
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	e09a      	b.n	8003668 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003538:	2308      	movs	r3, #8
 800353a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800353c:	2330      	movs	r3, #48	; 0x30
 800353e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003540:	2302      	movs	r3, #2
 8003542:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003544:	2300      	movs	r3, #0
 8003546:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f107 0210 	add.w	r2, r7, #16
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fc1e 	bl	8003d98 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fdd8 	bl	8004116 <SDMMC_CmdSendSCR>
 8003566:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d022      	beq.n	80035b4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	e07a      	b.n	8003668 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	f107 0208 	add.w	r2, r7, #8
 800358c:	18d4      	adds	r4, r2, r3
 800358e:	4608      	mov	r0, r1
 8003590:	f000 fb7d 	bl	8003c8e <SDIO_ReadFIFO>
 8003594:	4603      	mov	r3, r0
 8003596:	6023      	str	r3, [r4, #0]
      index++;
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	3301      	adds	r3, #1
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800359e:	f7fd fb4b 	bl	8000c38 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d102      	bne.n	80035b4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80035ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035b2:	e059      	b.n	8003668 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	f240 432a 	movw	r3, #1066	; 0x42a
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0d6      	beq.n	8003572 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2208      	movs	r2, #8
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80035da:	2308      	movs	r3, #8
 80035dc:	e044      	b.n	8003668 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2202      	movs	r2, #2
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80035f4:	2302      	movs	r3, #2
 80035f6:	e037      	b.n	8003668 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2220      	movs	r2, #32
 800360c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800360e:	2320      	movs	r3, #32
 8003610:	e02a      	b.n	8003668 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f240 523a 	movw	r2, #1338	; 0x53a
 800361a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	061a      	lsls	r2, r3, #24
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003628:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003632:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	0e1b      	lsrs	r3, r3, #24
 8003638:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	601a      	str	r2, [r3, #0]
    scr++;
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	3304      	adds	r3, #4
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	061a      	lsls	r2, r3, #24
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003650:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800365a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	0e1b      	lsrs	r3, r3, #24
 8003660:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	373c      	adds	r7, #60	; 0x3c
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}

08003670 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d03f      	beq.n	800370a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e033      	b.n	80036f8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fafa 	bl	8003c8e <SDIO_ReadFIFO>
 800369a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3301      	adds	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3b01      	subs	r3, #1
 80036da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	0e1b      	lsrs	r3, r3, #24
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d9c8      	bls.n	8003690 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800370a:	bf00      	nop
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d043      	beq.n	80037b4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e037      	b.n	80037a2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	3b01      	subs	r3, #1
 8003742:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	021a      	lsls	r2, r3, #8
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3301      	adds	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3b01      	subs	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	041a      	lsls	r2, r3, #16
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4313      	orrs	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3b01      	subs	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	061a      	lsls	r2, r3, #24
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4313      	orrs	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	3b01      	subs	r3, #1
 800378a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f107 0208 	add.w	r2, r7, #8
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fa86 	bl	8003ca8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3301      	adds	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b07      	cmp	r3, #7
 80037a6:	d9c4      	bls.n	8003732 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e01d      	b.n	800380a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f815 	bl	8003812 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f000 f968 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b06      	cmp	r3, #6
 800384e:	d007      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b02      	cmp	r3, #2
 8003882:	d122      	bne.n	80038ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11b      	bne.n	80038ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0202 	mvn.w	r2, #2
 800389a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f8ee 	bl	8003a92 <HAL_TIM_IC_CaptureCallback>
 80038b6:	e005      	b.n	80038c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8e0 	bl	8003a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8f1 	bl	8003aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d122      	bne.n	800391e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d11b      	bne.n	800391e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0204 	mvn.w	r2, #4
 80038ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8c4 	bl	8003a92 <HAL_TIM_IC_CaptureCallback>
 800390a:	e005      	b.n	8003918 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8b6 	bl	8003a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8c7 	bl	8003aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d122      	bne.n	8003972 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11b      	bne.n	8003972 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f06f 0208 	mvn.w	r2, #8
 8003942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2204      	movs	r2, #4
 8003948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f89a 	bl	8003a92 <HAL_TIM_IC_CaptureCallback>
 800395e:	e005      	b.n	800396c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f88c 	bl	8003a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f89d 	bl	8003aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d122      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d11b      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0210 	mvn.w	r2, #16
 8003996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2208      	movs	r2, #8
 800399c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f870 	bl	8003a92 <HAL_TIM_IC_CaptureCallback>
 80039b2:	e005      	b.n	80039c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f862 	bl	8003a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f873 	bl	8003aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d10e      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0201 	mvn.w	r2, #1
 80039ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fc fedf 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d10e      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b80      	cmp	r3, #128	; 0x80
 8003a0c:	d107      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f903 	bl	8003c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d10e      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f838 	bl	8003aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d10e      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d107      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0220 	mvn.w	r2, #32
 8003a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f8cd 	bl	8003c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a40      	ldr	r2, [pc, #256]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d00f      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <TIM_Base_SetConfig+0x118>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <TIM_Base_SetConfig+0x11c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <TIM_Base_SetConfig+0x120>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3a      	ldr	r2, [pc, #232]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d108      	bne.n	8003b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2f      	ldr	r2, [pc, #188]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d02b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d027      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <TIM_Base_SetConfig+0x118>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d023      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <TIM_Base_SetConfig+0x11c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01f      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <TIM_Base_SetConfig+0x120>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d017      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <TIM_Base_SetConfig+0x128>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <TIM_Base_SetConfig+0x12c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00f      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <TIM_Base_SetConfig+0x130>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <TIM_Base_SetConfig+0x134>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <TIM_Base_SetConfig+0x138>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <TIM_Base_SetConfig+0x13c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d108      	bne.n	8003b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0xf8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d103      	bne.n	8003bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40010400 	.word	0x40010400
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800
 8003c04:	40001800 	.word	0x40001800
 8003c08:	40001c00 	.word	0x40001c00
 8003c0c:	40002000 	.word	0x40002000

08003c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003c38:	b084      	sub	sp, #16
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	f107 001c 	add.w	r0, r7, #28
 8003c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003c4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003c50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003c52:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003c56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003c5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003c5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003c62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003c72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	b004      	add	sp, #16
 8003c8c:	4770      	bx	lr

08003c8e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f7fc ffb9 	bl	8000c50 <HAL_Delay>
  
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003d28:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003d2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d3e:	f023 030f 	bic.w	r3, r3, #15
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	b2db      	uxtb	r3, r3
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	461a      	mov	r2, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
}  
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003dbe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003dc4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003dca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0

}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003dfe:	2310      	movs	r3, #16
 8003e00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e02:	2340      	movs	r3, #64	; 0x40
 8003e04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e10:	f107 0308 	add.w	r3, r7, #8
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ff74 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	2110      	movs	r1, #16
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fa40 	bl	80042a8 <SDMMC_GetCmdResp1>
 8003e28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003e42:	2311      	movs	r3, #17
 8003e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e46:	2340      	movs	r3, #64	; 0x40
 8003e48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff52 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	2111      	movs	r1, #17
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa1e 	bl	80042a8 <SDMMC_GetCmdResp1>
 8003e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e86:	2312      	movs	r3, #18
 8003e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e8a:	2340      	movs	r3, #64	; 0x40
 8003e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e98:	f107 0308 	add.w	r3, r7, #8
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ff30 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	2112      	movs	r1, #18
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f9fc 	bl	80042a8 <SDMMC_GetCmdResp1>
 8003eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003eca:	2318      	movs	r3, #24
 8003ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ece:	2340      	movs	r3, #64	; 0x40
 8003ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003edc:	f107 0308 	add.w	r3, r7, #8
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff ff0e 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	2118      	movs	r1, #24
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f9da 	bl	80042a8 <SDMMC_GetCmdResp1>
 8003ef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003f0e:	2319      	movs	r3, #25
 8003f10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f12:	2340      	movs	r3, #64	; 0x40
 8003f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f20:	f107 0308 	add.w	r3, r7, #8
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff feec 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	2119      	movs	r1, #25
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9b8 	bl	80042a8 <SDMMC_GetCmdResp1>
 8003f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003f50:	230c      	movs	r3, #12
 8003f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f54:	2340      	movs	r3, #64	; 0x40
 8003f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f62:	f107 0308 	add.w	r3, r7, #8
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fecb 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003f6e:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <SDMMC_CmdStopTransfer+0x40>)
 8003f70:	210c      	movs	r1, #12
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f998 	bl	80042a8 <SDMMC_GetCmdResp1>
 8003f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	05f5e100 	.word	0x05f5e100

08003f88 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f98:	2307      	movs	r3, #7
 8003f9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f9c:	2340      	movs	r3, #64	; 0x40
 8003f9e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003faa:	f107 0310 	add.w	r3, r7, #16
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fea7 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	2107      	movs	r1, #7
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f973 	bl	80042a8 <SDMMC_GetCmdResp1>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3728      	adds	r7, #40	; 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b088      	sub	sp, #32
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fec:	f107 0308 	add.w	r3, r7, #8
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fe86 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f92d 	bl	8004258 <SDMMC_GetCmdError>
 8003ffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004000:	69fb      	ldr	r3, [r7, #28]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b088      	sub	sp, #32
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004012:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004018:	2308      	movs	r3, #8
 800401a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004028:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fe67 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fb16 	bl	8004668 <SDMMC_GetCmdResp7>
 800403c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800403e:	69fb      	ldr	r3, [r7, #28]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004056:	2337      	movs	r3, #55	; 0x37
 8004058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800405a:	2340      	movs	r3, #64	; 0x40
 800405c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004066:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fe48 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004074:	f241 3288 	movw	r2, #5000	; 0x1388
 8004078:	2137      	movs	r1, #55	; 0x37
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f914 	bl	80042a8 <SDMMC_GetCmdResp1>
 8004080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004082:	69fb      	ldr	r3, [r7, #28]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800409c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80040a2:	2329      	movs	r3, #41	; 0x29
 80040a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040a6:	2340      	movs	r3, #64	; 0x40
 80040a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fe22 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fa23 	bl	800450c <SDMMC_GetCmdResp3>
 80040c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040c8:	69fb      	ldr	r3, [r7, #28]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b088      	sub	sp, #32
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80040e0:	2306      	movs	r3, #6
 80040e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040e4:	2340      	movs	r3, #64	; 0x40
 80040e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040f2:	f107 0308 	add.w	r3, r7, #8
 80040f6:	4619      	mov	r1, r3
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fe03 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	2106      	movs	r1, #6
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f8cf 	bl	80042a8 <SDMMC_GetCmdResp1>
 800410a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800410c:	69fb      	ldr	r3, [r7, #28]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b088      	sub	sp, #32
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004122:	2333      	movs	r3, #51	; 0x33
 8004124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004126:	2340      	movs	r3, #64	; 0x40
 8004128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800412e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004132:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004134:	f107 0308 	add.w	r3, r7, #8
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fde2 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	2133      	movs	r1, #51	; 0x33
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8ae 	bl	80042a8 <SDMMC_GetCmdResp1>
 800414c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800414e:	69fb      	ldr	r3, [r7, #28]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004164:	2302      	movs	r3, #2
 8004166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004168:	23c0      	movs	r3, #192	; 0xc0
 800416a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fdc1 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f97c 	bl	8004480 <SDMMC_GetCmdResp2>
 8004188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800418a:	69fb      	ldr	r3, [r7, #28]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3720      	adds	r7, #32
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80041a2:	2309      	movs	r3, #9
 80041a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80041a6:	23c0      	movs	r3, #192	; 0xc0
 80041a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041b4:	f107 0308 	add.w	r3, r7, #8
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fda2 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f95d 	bl	8004480 <SDMMC_GetCmdResp2>
 80041c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041c8:	69fb      	ldr	r3, [r7, #28]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b088      	sub	sp, #32
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80041e0:	2303      	movs	r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041e4:	2340      	movs	r3, #64	; 0x40
 80041e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041f2:	f107 0308 	add.w	r3, r7, #8
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fd83 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	2103      	movs	r1, #3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f9bc 	bl	8004580 <SDMMC_GetCmdResp6>
 8004208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800420a:	69fb      	ldr	r3, [r7, #28]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004222:	230d      	movs	r3, #13
 8004224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004226:	2340      	movs	r3, #64	; 0x40
 8004228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800422e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004232:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004234:	f107 0308 	add.w	r3, r7, #8
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fd62 	bl	8003d04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	210d      	movs	r1, #13
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f82e 	bl	80042a8 <SDMMC_GetCmdResp1>
 800424c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800424e:	69fb      	ldr	r3, [r7, #28]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004258:	b490      	push	{r4, r7}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <SDMMC_GetCmdError+0x48>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0f      	ldr	r2, [pc, #60]	; (80042a4 <SDMMC_GetCmdError+0x4c>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0a5b      	lsrs	r3, r3, #9
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004274:	4623      	mov	r3, r4
 8004276:	1e5c      	subs	r4, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800427c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004280:	e009      	b.n	8004296 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f2      	beq.n	8004274 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	22c5      	movs	r2, #197	; 0xc5
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bc90      	pop	{r4, r7}
 800429e:	4770      	bx	lr
 80042a0:	20000000 	.word	0x20000000
 80042a4:	10624dd3 	.word	0x10624dd3

080042a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	460b      	mov	r3, r1
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80042b6:	4b6f      	ldr	r3, [pc, #444]	; (8004474 <SDMMC_GetCmdResp1+0x1cc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a6f      	ldr	r2, [pc, #444]	; (8004478 <SDMMC_GetCmdResp1+0x1d0>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	0a5b      	lsrs	r3, r3, #9
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80042c8:	4623      	mov	r3, r4
 80042ca:	1e5c      	subs	r4, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042d4:	e0c9      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <SDMMC_GetCmdResp1+0x20>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1eb      	bne.n	80042c8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d004      	beq.n	8004306 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2204      	movs	r2, #4
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004302:	2304      	movs	r3, #4
 8004304:	e0b1      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004318:	2301      	movs	r3, #1
 800431a:	e0a6      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	22c5      	movs	r2, #197	; 0xc5
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fd18 	bl	8003d58 <SDIO_GetCommandResponse>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	7afb      	ldrb	r3, [r7, #11]
 800432e:	4293      	cmp	r3, r2
 8004330:	d001      	beq.n	8004336 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004332:	2301      	movs	r3, #1
 8004334:	e099      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004336:	2100      	movs	r1, #0
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff fd1a 	bl	8003d72 <SDIO_GetResponse>
 800433e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4b4e      	ldr	r3, [pc, #312]	; (800447c <SDMMC_GetCmdResp1+0x1d4>)
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800434a:	2300      	movs	r3, #0
 800434c:	e08d      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da02      	bge.n	800435a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004358:	e087      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	e080      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	e079      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004384:	e071      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004394:	e069      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80043a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043a4:	e061      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80043b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043b4:	e059      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80043c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c4:	e051      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80043d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043d4:	e049      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80043e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043e4:	e041      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80043f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f4:	e039      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004404:	e031      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004410:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004414:	e029      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004420:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004424:	e021      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004430:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004434:	e019      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004444:	e011      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004454:	e009      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004460:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004464:	e001      	b.n	800446a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd90      	pop	{r4, r7, pc}
 8004472:	bf00      	nop
 8004474:	20000000 	.word	0x20000000
 8004478:	10624dd3 	.word	0x10624dd3
 800447c:	fdffe008 	.word	0xfdffe008

08004480 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004480:	b490      	push	{r4, r7}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <SDMMC_GetCmdResp2+0x84>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <SDMMC_GetCmdResp2+0x88>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	0a5b      	lsrs	r3, r3, #9
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800449c:	4623      	mov	r3, r4
 800449e:	1e5c      	subs	r4, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044a8:	e026      	b.n	80044f8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <SDMMC_GetCmdResp2+0x1c>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1eb      	bne.n	800449c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2204      	movs	r2, #4
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044d6:	2304      	movs	r3, #4
 80044d8:	e00e      	b.n	80044f8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e003      	b.n	80044f8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	22c5      	movs	r2, #197	; 0xc5
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc90      	pop	{r4, r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000000 	.word	0x20000000
 8004508:	10624dd3 	.word	0x10624dd3

0800450c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800450c:	b490      	push	{r4, r7}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004514:	4b18      	ldr	r3, [pc, #96]	; (8004578 <SDMMC_GetCmdResp3+0x6c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a18      	ldr	r2, [pc, #96]	; (800457c <SDMMC_GetCmdResp3+0x70>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	0a5b      	lsrs	r3, r3, #9
 8004520:	f241 3288 	movw	r2, #5000	; 0x1388
 8004524:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004528:	4623      	mov	r3, r4
 800452a:	1e5c      	subs	r4, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004534:	e01b      	b.n	800456e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <SDMMC_GetCmdResp3+0x1c>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1eb      	bne.n	8004528 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2204      	movs	r2, #4
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004562:	2304      	movs	r3, #4
 8004564:	e003      	b.n	800456e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	22c5      	movs	r2, #197	; 0xc5
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bc90      	pop	{r4, r7}
 8004576:	4770      	bx	lr
 8004578:	20000000 	.word	0x20000000
 800457c:	10624dd3 	.word	0x10624dd3

08004580 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	460b      	mov	r3, r1
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800458e:	4b34      	ldr	r3, [pc, #208]	; (8004660 <SDMMC_GetCmdResp6+0xe0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a34      	ldr	r2, [pc, #208]	; (8004664 <SDMMC_GetCmdResp6+0xe4>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	0a5b      	lsrs	r3, r3, #9
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80045a2:	4623      	mov	r3, r4
 80045a4:	1e5c      	subs	r4, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045ae:	e052      	b.n	8004656 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <SDMMC_GetCmdResp6+0x22>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1eb      	bne.n	80045a2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2204      	movs	r2, #4
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045dc:	2304      	movs	r3, #4
 80045de:	e03a      	b.n	8004656 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e02f      	b.n	8004656 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fbae 	bl	8003d58 <SDIO_GetCommandResponse>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	7afb      	ldrb	r3, [r7, #11]
 8004602:	4293      	cmp	r3, r2
 8004604:	d001      	beq.n	800460a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004606:	2301      	movs	r3, #1
 8004608:	e025      	b.n	8004656 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	22c5      	movs	r2, #197	; 0xc5
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004610:	2100      	movs	r1, #0
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fbad 	bl	8003d72 <SDIO_GetResponse>
 8004618:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800462e:	2300      	movs	r3, #0
 8004630:	e011      	b.n	8004656 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800463c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004640:	e009      	b.n	8004656 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800464c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004650:	e001      	b.n	8004656 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd90      	pop	{r4, r7, pc}
 800465e:	bf00      	nop
 8004660:	20000000 	.word	0x20000000
 8004664:	10624dd3 	.word	0x10624dd3

08004668 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004668:	b490      	push	{r4, r7}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004670:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <SDMMC_GetCmdResp7+0x90>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a21      	ldr	r2, [pc, #132]	; (80046fc <SDMMC_GetCmdResp7+0x94>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	0a5b      	lsrs	r3, r3, #9
 800467c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004680:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004684:	4623      	mov	r3, r4
 8004686:	1e5c      	subs	r4, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800468c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004690:	e02c      	b.n	80046ec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <SDMMC_GetCmdResp7+0x1c>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1eb      	bne.n	8004684 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2204      	movs	r2, #4
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80046be:	2304      	movs	r3, #4
 80046c0:	e014      	b.n	80046ec <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e009      	b.n	80046ec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2240      	movs	r2, #64	; 0x40
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80046ea:	2300      	movs	r3, #0
  
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc90      	pop	{r4, r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000000 	.word	0x20000000
 80046fc:	10624dd3 	.word	0x10624dd3

08004700 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004704:	4904      	ldr	r1, [pc, #16]	; (8004718 <MX_FATFS_Init+0x18>)
 8004706:	4805      	ldr	r0, [pc, #20]	; (800471c <MX_FATFS_Init+0x1c>)
 8004708:	f002 fcb4 	bl	8007074 <FATFS_LinkDriver>
 800470c:	4603      	mov	r3, r0
 800470e:	461a      	mov	r2, r3
 8004710:	4b03      	ldr	r3, [pc, #12]	; (8004720 <MX_FATFS_Init+0x20>)
 8004712:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}
 8004718:	200048c4 	.word	0x200048c4
 800471c:	08009f34 	.word	0x08009f34
 8004720:	200048c0 	.word	0x200048c0

08004724 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004728:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800473e:	f000 f896 	bl	800486e <BSP_SD_IsDetected>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e012      	b.n	8004772 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800474c:	480b      	ldr	r0, [pc, #44]	; (800477c <BSP_SD_Init+0x48>)
 800474e:	f7fd fd37 	bl	80021c0 <HAL_SD_Init>
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800475c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004760:	4806      	ldr	r0, [pc, #24]	; (800477c <BSP_SD_Init+0x48>)
 8004762:	f7fe faf7 	bl	8002d54 <HAL_SD_ConfigWideBusOperation>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004770:	79fb      	ldrb	r3, [r7, #7]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200045c4 	.word	0x200045c4

08004780 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	4806      	ldr	r0, [pc, #24]	; (80047b0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004798:	f7fd fda2 	bl	80022e0 <HAL_SD_ReadBlocks_DMA>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200045c4 	.word	0x200045c4

080047b4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	4806      	ldr	r0, [pc, #24]	; (80047e4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80047cc:	f7fd fe72 	bl	80024b4 <HAL_SD_WriteBlocks_DMA>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	200045c4 	.word	0x200045c4

080047e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80047ec:	4805      	ldr	r0, [pc, #20]	; (8004804 <BSP_SD_GetCardState+0x1c>)
 80047ee:	f7fe fb2d 	bl	8002e4c <HAL_SD_GetCardState>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
}
 80047fe:	4618      	mov	r0, r3
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200045c4 	.word	0x200045c4

08004808 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4803      	ldr	r0, [pc, #12]	; (8004820 <BSP_SD_GetCardInfo+0x18>)
 8004814:	f7fe fa72 	bl	8002cfc <HAL_SD_GetCardInfo>
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	200045c4 	.word	0x200045c4

08004824 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800482c:	f000 f818 	bl	8004860 <BSP_SD_AbortCallback>
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004840:	f000 f9a8 	bl	8004b94 <BSP_SD_WriteCpltCallback>
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004854:	f000 f9ac 	bl	8004bb0 <BSP_SD_ReadCpltCallback>
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0

}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004874:	2301      	movs	r3, #1
 8004876:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	b2db      	uxtb	r3, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8004890:	f002 fc88 	bl	80071a4 <osKernelSysTick>
 8004894:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8004896:	e006      	b.n	80048a6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004898:	f7ff ffa6 	bl	80047e8 <BSP_SD_GetCardState>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e009      	b.n	80048ba <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80048a6:	f002 fc7d 	bl	80071a4 <osKernelSysTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d8f0      	bhi.n	8004898 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80048ce:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <SD_CheckStatus+0x38>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80048d4:	f7ff ff88 	bl	80047e8 <BSP_SD_GetCardState>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <SD_CheckStatus+0x38>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	4b04      	ldr	r3, [pc, #16]	; (80048fc <SD_CheckStatus+0x38>)
 80048ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80048ee:	4b03      	ldr	r3, [pc, #12]	; (80048fc <SD_CheckStatus+0x38>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	b2db      	uxtb	r3, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000009 	.word	0x20000009

08004900 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <SD_initialize+0x8c>)
 800490c:	2201      	movs	r2, #1
 800490e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8004910:	f002 fc3c 	bl	800718c <osKernelRunning>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d030      	beq.n	800497c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800491a:	f7ff ff0b 	bl	8004734 <BSP_SD_Init>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d107      	bne.n	8004934 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff ffcc 	bl	80048c4 <SD_CheckStatus>
 800492c:	4603      	mov	r3, r0
 800492e:	461a      	mov	r2, r3
 8004930:	4b16      	ldr	r3, [pc, #88]	; (800498c <SD_initialize+0x8c>)
 8004932:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8004934:	4b15      	ldr	r3, [pc, #84]	; (800498c <SD_initialize+0x8c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b01      	cmp	r3, #1
 800493c:	d01e      	beq.n	800497c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800493e:	4b14      	ldr	r3, [pc, #80]	; (8004990 <SD_initialize+0x90>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10e      	bne.n	8004964 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <SD_initialize+0x94>)
 8004948:	f107 0408 	add.w	r4, r7, #8
 800494c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800494e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8004952:	f107 0308 	add.w	r3, r7, #8
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f002 fd5e 	bl	800741a <osMessageCreate>
 800495e:	4602      	mov	r2, r0
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <SD_initialize+0x90>)
 8004962:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <SD_initialize+0x90>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d107      	bne.n	800497c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800496c:	4b07      	ldr	r3, [pc, #28]	; (800498c <SD_initialize+0x8c>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <SD_initialize+0x8c>)
 800497a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <SD_initialize+0x8c>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
}
 8004982:	4618      	mov	r0, r3
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	bd90      	pop	{r4, r7, pc}
 800498a:	bf00      	nop
 800498c:	20000009 	.word	0x20000009
 8004990:	20000480 	.word	0x20000480
 8004994:	08009eb8 	.word	0x08009eb8

08004998 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff ff8d 	bl	80048c4 <SD_CheckStatus>
 80049aa:	4603      	mov	r3, r0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80049ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80049ce:	f7ff ff5b 	bl	8004888 <SD_CheckStatusWithTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	da02      	bge.n	80049de <SD_read+0x2a>
  {
    return res;
 80049d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049dc:	e032      	b.n	8004a44 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	68b8      	ldr	r0, [r7, #8]
 80049e4:	f7ff fecc 	bl	8004780 <BSP_SD_ReadBlocks_DMA>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80049ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d124      	bne.n	8004a40 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <SD_read+0x98>)
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	f107 0314 	add.w	r3, r7, #20
 80049fe:	f247 5230 	movw	r2, #30000	; 0x7530
 8004a02:	4618      	mov	r0, r3
 8004a04:	f002 fd72 	bl	80074ec <osMessageGet>

    if (event.status == osEventMessage)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d118      	bne.n	8004a40 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d115      	bne.n	8004a40 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8004a14:	f002 fbc6 	bl	80071a4 <osKernelSysTick>
 8004a18:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8004a1a:	e008      	b.n	8004a2e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004a1c:	f7ff fee4 	bl	80047e8 <BSP_SD_GetCardState>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <SD_read+0x7a>
              {
                res = RES_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8004a2c:	e008      	b.n	8004a40 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8004a2e:	f002 fbb9 	bl	80071a4 <osKernelSysTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d9ed      	bls.n	8004a1c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8004a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3728      	adds	r7, #40	; 0x28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20000480 	.word	0x20000480

08004a50 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	; 0x28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004a66:	f247 5030 	movw	r0, #30000	; 0x7530
 8004a6a:	f7ff ff0d 	bl	8004888 <SD_CheckStatusWithTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da02      	bge.n	8004a7a <SD_write+0x2a>
  {
    return res;
 8004a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a78:	e02e      	b.n	8004ad8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	68b8      	ldr	r0, [r7, #8]
 8004a80:	f7ff fe98 	bl	80047b4 <BSP_SD_WriteBlocks_DMA>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d124      	bne.n	8004ad4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <SD_write+0x90>)
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	f247 5230 	movw	r2, #30000	; 0x7530
 8004a96:	4618      	mov	r0, r3
 8004a98:	f002 fd28 	bl	80074ec <osMessageGet>

    if (event.status == osEventMessage)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d118      	bne.n	8004ad4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d115      	bne.n	8004ad4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8004aa8:	f002 fb7c 	bl	80071a4 <osKernelSysTick>
 8004aac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8004aae:	e008      	b.n	8004ac2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004ab0:	f7ff fe9a 	bl	80047e8 <BSP_SD_GetCardState>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <SD_write+0x72>
          {
            res = RES_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8004ac0:	e008      	b.n	8004ad4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8004ac2:	f002 fb6f 	bl	80071a4 <osKernelSysTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f247 522f 	movw	r2, #29999	; 0x752f
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d9ed      	bls.n	8004ab0 <SD_write+0x60>
    }

  }
#endif

  return res;
 8004ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000480 	.word	0x20000480

08004ae4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	; 0x30
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	603a      	str	r2, [r7, #0]
 8004aee:	71fb      	strb	r3, [r7, #7]
 8004af0:	460b      	mov	r3, r1
 8004af2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004afa:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <SD_ioctl+0xac>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <SD_ioctl+0x28>
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e03c      	b.n	8004b86 <SD_ioctl+0xa2>

  switch (cmd)
 8004b0c:	79bb      	ldrb	r3, [r7, #6]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d834      	bhi.n	8004b7c <SD_ioctl+0x98>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <SD_ioctl+0x34>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b31 	.word	0x08004b31
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b63 	.word	0x08004b63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b2e:	e028      	b.n	8004b82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fe67 	bl	8004808 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b46:	e01c      	b.n	8004b82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004b48:	f107 030c 	add.w	r3, r7, #12
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fe5b 	bl	8004808 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b60:	e00f      	b.n	8004b82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004b62:	f107 030c 	add.w	r3, r7, #12
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fe4e 	bl	8004808 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	0a5a      	lsrs	r2, r3, #9
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b7a:	e002      	b.n	8004b82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3730      	adds	r7, #48	; 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000009 	.word	0x20000009

08004b94 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <BSP_SD_WriteCpltCallback+0x18>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2102      	movs	r1, #2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f002 fc63 	bl	800746c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000480 	.word	0x20000480

08004bb0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <BSP_SD_ReadCpltCallback+0x18>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 fc55 	bl	800746c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000480 	.word	0x20000480

08004bcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <disk_status+0x30>)
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	79fa      	ldrb	r2, [r7, #7]
 8004be4:	4905      	ldr	r1, [pc, #20]	; (8004bfc <disk_status+0x30>)
 8004be6:	440a      	add	r2, r1
 8004be8:	7a12      	ldrb	r2, [r2, #8]
 8004bea:	4610      	mov	r0, r2
 8004bec:	4798      	blx	r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	200004ac 	.word	0x200004ac

08004c00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	4a0d      	ldr	r2, [pc, #52]	; (8004c48 <disk_initialize+0x48>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d111      	bne.n	8004c3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <disk_initialize+0x48>)
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <disk_initialize+0x48>)
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	79fa      	ldrb	r2, [r7, #7]
 8004c2e:	4906      	ldr	r1, [pc, #24]	; (8004c48 <disk_initialize+0x48>)
 8004c30:	440a      	add	r2, r1
 8004c32:	7a12      	ldrb	r2, [r2, #8]
 8004c34:	4610      	mov	r0, r2
 8004c36:	4798      	blx	r3
 8004c38:	4603      	mov	r3, r0
 8004c3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200004ac 	.word	0x200004ac

08004c4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <disk_read+0x3c>)
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	689c      	ldr	r4, [r3, #8]
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <disk_read+0x3c>)
 8004c6c:	4413      	add	r3, r2
 8004c6e:	7a18      	ldrb	r0, [r3, #8]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	47a0      	blx	r4
 8004c78:	4603      	mov	r3, r0
 8004c7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd90      	pop	{r4, r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200004ac 	.word	0x200004ac

08004c8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <disk_write+0x3c>)
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68dc      	ldr	r4, [r3, #12]
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	4a07      	ldr	r2, [pc, #28]	; (8004cc8 <disk_write+0x3c>)
 8004cac:	4413      	add	r3, r2
 8004cae:	7a18      	ldrb	r0, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	47a0      	blx	r4
 8004cb8:	4603      	mov	r3, r0
 8004cba:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd90      	pop	{r4, r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200004ac 	.word	0x200004ac

08004ccc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	603a      	str	r2, [r7, #0]
 8004cd6:	71fb      	strb	r3, [r7, #7]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <disk_ioctl+0x38>)
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	79fa      	ldrb	r2, [r7, #7]
 8004cea:	4906      	ldr	r1, [pc, #24]	; (8004d04 <disk_ioctl+0x38>)
 8004cec:	440a      	add	r2, r1
 8004cee:	7a10      	ldrb	r0, [r2, #8]
 8004cf0:	79b9      	ldrb	r1, [r7, #6]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4798      	blx	r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	73fb      	strb	r3, [r7, #15]
  return res;
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	200004ac 	.word	0x200004ac

08004d08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3301      	adds	r3, #1
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004d18:	89fb      	ldrh	r3, [r7, #14]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	b21a      	sxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	b21b      	sxth	r3, r3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	b21b      	sxth	r3, r3
 8004d28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3303      	adds	r3, #3
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	3202      	adds	r2, #2
 8004d50:	7812      	ldrb	r2, [r2, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	3201      	adds	r2, #1
 8004d5e:	7812      	ldrb	r2, [r2, #0]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004d70:	68fb      	ldr	r3, [r7, #12]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	887a      	ldrh	r2, [r7, #2]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	887b      	ldrh	r3, [r7, #2]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	1c53      	adds	r3, r2, #1
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	6179      	str	r1, [r7, #20]
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f1      	bne.n	8004e26 <mem_cpy+0x1a>
	}
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004e4e:	b480      	push	{r7}
 8004e50:	b087      	sub	sp, #28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	617a      	str	r2, [r7, #20]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f3      	bne.n	8004e5e <mem_set+0x10>
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004e82:	b480      	push	{r7}
 8004e84:	b089      	sub	sp, #36	; 0x24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	61fa      	str	r2, [r7, #28]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	61ba      	str	r2, [r7, #24]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	1acb      	subs	r3, r1, r3
 8004eae:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <mem_cmp+0x40>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0eb      	beq.n	8004e9a <mem_cmp+0x18>

	return r;
 8004ec2:	697b      	ldr	r3, [r7, #20]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3724      	adds	r7, #36	; 0x24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004eda:	e002      	b.n	8004ee2 <chk_chr+0x12>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <chk_chr+0x26>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d1f2      	bne.n	8004edc <chk_chr+0xc>
	return *str;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <lock_fs+0x22>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f002 f8e6 	bl	80070ea <ff_req_grant>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <lock_fs+0x22>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <lock_fs+0x24>
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00d      	beq.n	8004f60 <unlock_fs+0x2e>
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	2b0c      	cmp	r3, #12
 8004f48:	d00a      	beq.n	8004f60 <unlock_fs+0x2e>
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	2b0b      	cmp	r3, #11
 8004f4e:	d007      	beq.n	8004f60 <unlock_fs+0x2e>
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b0f      	cmp	r3, #15
 8004f54:	d004      	beq.n	8004f60 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 f8da 	bl	8007114 <ff_rel_grant>
	}
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e029      	b.n	8004fd0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <chk_lock+0xb4>)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	4413      	add	r3, r2
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01d      	beq.n	8004fc6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f8a:	4a24      	ldr	r2, [pc, #144]	; (800501c <chk_lock+0xb4>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	4413      	add	r3, r2
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d116      	bne.n	8004fca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004f9c:	4a1f      	ldr	r2, [pc, #124]	; (800501c <chk_lock+0xb4>)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d10c      	bne.n	8004fca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	; (800501c <chk_lock+0xb4>)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3308      	adds	r3, #8
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d102      	bne.n	8004fca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fc4:	e007      	b.n	8004fd6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d9d2      	bls.n	8004f7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d109      	bne.n	8004ff0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <chk_lock+0x80>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d101      	bne.n	8004fec <chk_lock+0x84>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e010      	b.n	800500e <chk_lock+0xa6>
 8004fec:	2312      	movs	r3, #18
 8004fee:	e00e      	b.n	800500e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <chk_lock+0xa0>
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <chk_lock+0xb4>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	4413      	add	r3, r2
 8004ffe:	330c      	adds	r3, #12
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005006:	d101      	bne.n	800500c <chk_lock+0xa4>
 8005008:	2310      	movs	r3, #16
 800500a:	e000      	b.n	800500e <chk_lock+0xa6>
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	2000048c 	.word	0x2000048c

08005020 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	e002      	b.n	8005032 <enq_lock+0x12>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3301      	adds	r3, #1
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d806      	bhi.n	8005046 <enq_lock+0x26>
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <enq_lock+0x40>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	4413      	add	r3, r2
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f2      	bne.n	800502c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b02      	cmp	r3, #2
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	2000048c 	.word	0x2000048c

08005064 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e01f      	b.n	80050b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005074:	4a41      	ldr	r2, [pc, #260]	; (800517c <inc_lock+0x118>)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	4413      	add	r3, r2
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d113      	bne.n	80050ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005086:	4a3d      	ldr	r2, [pc, #244]	; (800517c <inc_lock+0x118>)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	4413      	add	r3, r2
 800508e:	3304      	adds	r3, #4
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005096:	429a      	cmp	r2, r3
 8005098:	d109      	bne.n	80050ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800509a:	4a38      	ldr	r2, [pc, #224]	; (800517c <inc_lock+0x118>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	4413      	add	r3, r2
 80050a2:	3308      	adds	r3, #8
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d006      	beq.n	80050bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d9dc      	bls.n	8005074 <inc_lock+0x10>
 80050ba:	e000      	b.n	80050be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80050bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d132      	bne.n	800512a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e002      	b.n	80050d0 <inc_lock+0x6c>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d806      	bhi.n	80050e4 <inc_lock+0x80>
 80050d6:	4a29      	ldr	r2, [pc, #164]	; (800517c <inc_lock+0x118>)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	4413      	add	r3, r2
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f2      	bne.n	80050ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d101      	bne.n	80050ee <inc_lock+0x8a>
 80050ea:	2300      	movs	r3, #0
 80050ec:	e040      	b.n	8005170 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4922      	ldr	r1, [pc, #136]	; (800517c <inc_lock+0x118>)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	440b      	add	r3, r1
 80050fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	491e      	ldr	r1, [pc, #120]	; (800517c <inc_lock+0x118>)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	440b      	add	r3, r1
 8005108:	3304      	adds	r3, #4
 800510a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	491a      	ldr	r1, [pc, #104]	; (800517c <inc_lock+0x118>)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	440b      	add	r3, r1
 8005118:	3308      	adds	r3, #8
 800511a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800511c:	4a17      	ldr	r2, [pc, #92]	; (800517c <inc_lock+0x118>)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	4413      	add	r3, r2
 8005124:	330c      	adds	r3, #12
 8005126:	2200      	movs	r2, #0
 8005128:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <inc_lock+0xe0>
 8005130:	4a12      	ldr	r2, [pc, #72]	; (800517c <inc_lock+0x118>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	4413      	add	r3, r2
 8005138:	330c      	adds	r3, #12
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <inc_lock+0xe0>
 8005140:	2300      	movs	r3, #0
 8005142:	e015      	b.n	8005170 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d108      	bne.n	800515c <inc_lock+0xf8>
 800514a:	4a0c      	ldr	r2, [pc, #48]	; (800517c <inc_lock+0x118>)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	330c      	adds	r3, #12
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	e001      	b.n	8005160 <inc_lock+0xfc>
 800515c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005160:	4906      	ldr	r1, [pc, #24]	; (800517c <inc_lock+0x118>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	440b      	add	r3, r1
 8005168:	330c      	adds	r3, #12
 800516a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	2000048c 	.word	0x2000048c

08005180 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3b01      	subs	r3, #1
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d825      	bhi.n	80051e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005194:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <dec_lock+0x74>)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	4413      	add	r3, r2
 800519c:	330c      	adds	r3, #12
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	d101      	bne.n	80051ae <dec_lock+0x2e>
 80051aa:	2300      	movs	r3, #0
 80051ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80051ae:	89fb      	ldrh	r3, [r7, #14]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <dec_lock+0x3a>
 80051b4:	89fb      	ldrh	r3, [r7, #14]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80051ba:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <dec_lock+0x74>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	4413      	add	r3, r2
 80051c2:	330c      	adds	r3, #12
 80051c4:	89fa      	ldrh	r2, [r7, #14]
 80051c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80051c8:	89fb      	ldrh	r3, [r7, #14]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d105      	bne.n	80051da <dec_lock+0x5a>
 80051ce:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <dec_lock+0x74>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	4413      	add	r3, r2
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	737b      	strb	r3, [r7, #13]
 80051de:	e001      	b.n	80051e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051e0:	2302      	movs	r3, #2
 80051e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80051e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	2000048c 	.word	0x2000048c

080051f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e010      	b.n	8005228 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005206:	4a0d      	ldr	r2, [pc, #52]	; (800523c <clear_lock+0x44>)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	4413      	add	r3, r2
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d105      	bne.n	8005222 <clear_lock+0x2a>
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <clear_lock+0x44>)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	4413      	add	r3, r2
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d9eb      	bls.n	8005206 <clear_lock+0xe>
	}
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	2000048c 	.word	0x2000048c

08005240 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	78db      	ldrb	r3, [r3, #3]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d034      	beq.n	80052be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7858      	ldrb	r0, [r3, #1]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005264:	2301      	movs	r3, #1
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	f7ff fd10 	bl	8004c8c <disk_write>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e022      	b.n	80052be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	1ad2      	subs	r2, r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	429a      	cmp	r2, r3
 800528c:	d217      	bcs.n	80052be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	789b      	ldrb	r3, [r3, #2]
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	e010      	b.n	80052b8 <sync_window+0x78>
					wsect += fs->fsize;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	7858      	ldrb	r0, [r3, #1]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052aa:	2301      	movs	r3, #1
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	f7ff fced 	bl	8004c8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d8eb      	bhi.n	8005296 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d01b      	beq.n	8005318 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ffad 	bl	8005240 <sync_window>
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7858      	ldrb	r0, [r3, #1]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052fa:	2301      	movs	r3, #1
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	f7ff fca5 	bl	8004c4c <disk_read>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005308:	f04f 33ff 	mov.w	r3, #4294967295
 800530c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ff87 	bl	8005240 <sync_window>
 8005332:	4603      	mov	r3, r0
 8005334:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d158      	bne.n	80053ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d148      	bne.n	80053d6 <sync_fs+0xb2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	791b      	ldrb	r3, [r3, #4]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d144      	bne.n	80053d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3334      	adds	r3, #52	; 0x34
 8005350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fd79 	bl	8004e4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3334      	adds	r3, #52	; 0x34
 8005360:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005364:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fd08 	bl	8004d7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3334      	adds	r3, #52	; 0x34
 8005372:	4921      	ldr	r1, [pc, #132]	; (80053f8 <sync_fs+0xd4>)
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fd1d 	bl	8004db4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3334      	adds	r3, #52	; 0x34
 800537e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005382:	491e      	ldr	r1, [pc, #120]	; (80053fc <sync_fs+0xd8>)
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fd15 	bl	8004db4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3334      	adds	r3, #52	; 0x34
 800538e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f7ff fd0b 	bl	8004db4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3334      	adds	r3, #52	; 0x34
 80053a2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7ff fd01 	bl	8004db4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	7858      	ldrb	r0, [r3, #1]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ca:	2301      	movs	r3, #1
 80053cc:	f7ff fc5e 	bl	8004c8c <disk_write>
			fs->fsi_flag = 0;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2200      	movs	r2, #0
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fc74 	bl	8004ccc <disk_ioctl>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <sync_fs+0xca>
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	41615252 	.word	0x41615252
 80053fc:	61417272 	.word	0x61417272

08005400 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	3b02      	subs	r3, #2
 800540e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	3b02      	subs	r3, #2
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d301      	bcc.n	8005420 <clust2sect+0x20>
 800541c:	2300      	movs	r3, #0
 800541e:	e008      	b.n	8005432 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	895b      	ldrh	r3, [r3, #10]
 8005424:	461a      	mov	r2, r3
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	fb03 f202 	mul.w	r2, r3, r2
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	4413      	add	r3, r2
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b086      	sub	sp, #24
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d904      	bls.n	800545e <get_fat+0x20>
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <get_fat+0x26>
		val = 1;	/* Internal error */
 800545e:	2301      	movs	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	e08c      	b.n	800557e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005464:	f04f 33ff 	mov.w	r3, #4294967295
 8005468:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d045      	beq.n	80054fe <get_fat+0xc0>
 8005472:	2b03      	cmp	r3, #3
 8005474:	d05d      	beq.n	8005532 <get_fat+0xf4>
 8005476:	2b01      	cmp	r3, #1
 8005478:	d177      	bne.n	800556a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	0a5b      	lsrs	r3, r3, #9
 8005490:	4413      	add	r3, r2
 8005492:	4619      	mov	r1, r3
 8005494:	6938      	ldr	r0, [r7, #16]
 8005496:	f7ff ff17 	bl	80052c8 <move_window>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d167      	bne.n	8005570 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	60fa      	str	r2, [r7, #12]
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4413      	add	r3, r2
 80054ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054b2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	0a5b      	lsrs	r3, r3, #9
 80054bc:	4413      	add	r3, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	6938      	ldr	r0, [r7, #16]
 80054c2:	f7ff ff01 	bl	80052c8 <move_window>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d153      	bne.n	8005574 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4413      	add	r3, r2
 80054d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	461a      	mov	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <get_fat+0xb6>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	e002      	b.n	80054fa <get_fat+0xbc>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fa:	617b      	str	r3, [r7, #20]
			break;
 80054fc:	e03f      	b.n	800557e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	4413      	add	r3, r2
 8005508:	4619      	mov	r1, r3
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f7ff fedc 	bl	80052c8 <move_window>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d130      	bne.n	8005578 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005524:	4413      	add	r3, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fbee 	bl	8004d08 <ld_word>
 800552c:	4603      	mov	r3, r0
 800552e:	617b      	str	r3, [r7, #20]
			break;
 8005530:	e025      	b.n	800557e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	09db      	lsrs	r3, r3, #7
 800553a:	4413      	add	r3, r2
 800553c:	4619      	mov	r1, r3
 800553e:	6938      	ldr	r0, [r7, #16]
 8005540:	f7ff fec2 	bl	80052c8 <move_window>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d118      	bne.n	800557c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005558:	4413      	add	r3, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fbec 	bl	8004d38 <ld_dword>
 8005560:	4603      	mov	r3, r0
 8005562:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005566:	617b      	str	r3, [r7, #20]
			break;
 8005568:	e009      	b.n	800557e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800556a:	2301      	movs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e006      	b.n	800557e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005570:	bf00      	nop
 8005572:	e004      	b.n	800557e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005574:	bf00      	nop
 8005576:	e002      	b.n	800557e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005578:	bf00      	nop
 800557a:	e000      	b.n	800557e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800557c:	bf00      	nop
		}
	}

	return val;
 800557e:	697b      	ldr	r3, [r7, #20]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005594:	2302      	movs	r3, #2
 8005596:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b01      	cmp	r3, #1
 800559c:	f240 80d6 	bls.w	800574c <put_fat+0x1c4>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	f080 80d0 	bcs.w	800574c <put_fat+0x1c4>
		switch (fs->fs_type) {
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d073      	beq.n	800569c <put_fat+0x114>
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	f000 8091 	beq.w	80056dc <put_fat+0x154>
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	f040 80c6 	bne.w	800574c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4413      	add	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	0a5b      	lsrs	r3, r3, #9
 80055d6:	4413      	add	r3, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff fe74 	bl	80052c8 <move_window>
 80055e0:	4603      	mov	r3, r0
 80055e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055e4:	7ffb      	ldrb	r3, [r7, #31]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f040 80a9 	bne.w	800573e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	61b9      	str	r1, [r7, #24]
 80055f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fc:	4413      	add	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <put_fat+0x9e>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b25b      	sxtb	r3, r3
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	b25a      	sxtb	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	b25b      	sxtb	r3, r3
 800561e:	4313      	orrs	r3, r2
 8005620:	b25b      	sxtb	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	e001      	b.n	800562a <put_fat+0xa2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	0a5b      	lsrs	r3, r3, #9
 800563c:	4413      	add	r3, r2
 800563e:	4619      	mov	r1, r3
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fe41 	bl	80052c8 <move_window>
 8005646:	4603      	mov	r3, r0
 8005648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800564a:	7ffb      	ldrb	r3, [r7, #31]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d178      	bne.n	8005742 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565c:	4413      	add	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <put_fat+0xea>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	b2db      	uxtb	r3, r3
 8005670:	e00e      	b.n	8005690 <put_fat+0x108>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b25b      	sxtb	r3, r3
 8005678:	f023 030f 	bic.w	r3, r3, #15
 800567c:	b25a      	sxtb	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	b25b      	sxtb	r3, r3
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	b25b      	sxtb	r3, r3
 800568a:	4313      	orrs	r3, r2
 800568c:	b25b      	sxtb	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	70da      	strb	r2, [r3, #3]
			break;
 800569a:	e057      	b.n	800574c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	4413      	add	r3, r2
 80056a6:	4619      	mov	r1, r3
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fe0d 	bl	80052c8 <move_window>
 80056ae:	4603      	mov	r3, r0
 80056b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056b2:	7ffb      	ldrb	r3, [r7, #31]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d146      	bne.n	8005746 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80056c6:	4413      	add	r3, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	b292      	uxth	r2, r2
 80056cc:	4611      	mov	r1, r2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fb55 	bl	8004d7e <st_word>
			fs->wflag = 1;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	70da      	strb	r2, [r3, #3]
			break;
 80056da:	e037      	b.n	800574c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	09db      	lsrs	r3, r3, #7
 80056e4:	4413      	add	r3, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff fded 	bl	80052c8 <move_window>
 80056ee:	4603      	mov	r3, r0
 80056f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056f2:	7ffb      	ldrb	r3, [r7, #31]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d128      	bne.n	800574a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800570c:	4413      	add	r3, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fb12 	bl	8004d38 <ld_dword>
 8005714:	4603      	mov	r3, r0
 8005716:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800571a:	4323      	orrs	r3, r4
 800571c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800572c:	4413      	add	r3, r2
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fb3f 	bl	8004db4 <st_dword>
			fs->wflag = 1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	70da      	strb	r2, [r3, #3]
			break;
 800573c:	e006      	b.n	800574c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800573e:	bf00      	nop
 8005740:	e004      	b.n	800574c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005742:	bf00      	nop
 8005744:	e002      	b.n	800574c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005746:	bf00      	nop
 8005748:	e000      	b.n	800574c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800574a:	bf00      	nop
		}
	}
	return res;
 800574c:	7ffb      	ldrb	r3, [r7, #31]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3724      	adds	r7, #36	; 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd90      	pop	{r4, r7, pc}

08005756 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d904      	bls.n	800577c <remove_chain+0x26>
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d301      	bcc.n	8005780 <remove_chain+0x2a>
 800577c:	2302      	movs	r3, #2
 800577e:	e04b      	b.n	8005818 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00c      	beq.n	80057a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	69b8      	ldr	r0, [r7, #24]
 800578e:	f7ff fefb 	bl	8005588 <put_fat>
 8005792:	4603      	mov	r3, r0
 8005794:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005796:	7ffb      	ldrb	r3, [r7, #31]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <remove_chain+0x4a>
 800579c:	7ffb      	ldrb	r3, [r7, #31]
 800579e:	e03b      	b.n	8005818 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff fe4b 	bl	800543e <get_fat>
 80057a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d031      	beq.n	8005814 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <remove_chain+0x64>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e02e      	b.n	8005818 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d101      	bne.n	80057c6 <remove_chain+0x70>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e028      	b.n	8005818 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80057c6:	2200      	movs	r2, #0
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	69b8      	ldr	r0, [r7, #24]
 80057cc:	f7ff fedc 	bl	8005588 <put_fat>
 80057d0:	4603      	mov	r3, r0
 80057d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80057d4:	7ffb      	ldrb	r3, [r7, #31]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <remove_chain+0x88>
 80057da:	7ffb      	ldrb	r3, [r7, #31]
 80057dc:	e01c      	b.n	8005818 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	695a      	ldr	r2, [r3, #20]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	3b02      	subs	r3, #2
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d20b      	bcs.n	8005804 <remove_chain+0xae>
			fs->free_clst++;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	791b      	ldrb	r3, [r3, #4]
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	429a      	cmp	r2, r3
 8005810:	d3c6      	bcc.n	80057a0 <remove_chain+0x4a>
 8005812:	e000      	b.n	8005816 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005814:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10d      	bne.n	8005852 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <create_chain+0x2c>
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	d31b      	bcc.n	8005884 <create_chain+0x64>
 800584c:	2301      	movs	r3, #1
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e018      	b.n	8005884 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fdf2 	bl	800543e <get_fat>
 800585a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d801      	bhi.n	8005866 <create_chain+0x46>
 8005862:	2301      	movs	r3, #1
 8005864:	e070      	b.n	8005948 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d101      	bne.n	8005872 <create_chain+0x52>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	e06a      	b.n	8005948 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	429a      	cmp	r2, r3
 800587a:	d201      	bcs.n	8005880 <create_chain+0x60>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	e063      	b.n	8005948 <create_chain+0x128>
		scl = clst;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3301      	adds	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	429a      	cmp	r2, r3
 8005896:	d307      	bcc.n	80058a8 <create_chain+0x88>
				ncl = 2;
 8005898:	2302      	movs	r3, #2
 800589a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d901      	bls.n	80058a8 <create_chain+0x88>
 80058a4:	2300      	movs	r3, #0
 80058a6:	e04f      	b.n	8005948 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80058a8:	69f9      	ldr	r1, [r7, #28]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fdc7 	bl	800543e <get_fat>
 80058b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00e      	beq.n	80058d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d003      	beq.n	80058c6 <create_chain+0xa6>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d101      	bne.n	80058ca <create_chain+0xaa>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	e03e      	b.n	8005948 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d1da      	bne.n	8005888 <create_chain+0x68>
 80058d2:	2300      	movs	r3, #0
 80058d4:	e038      	b.n	8005948 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80058d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	6938      	ldr	r0, [r7, #16]
 80058e0:	f7ff fe52 	bl	8005588 <put_fat>
 80058e4:	4603      	mov	r3, r0
 80058e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <create_chain+0xe2>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d006      	beq.n	8005902 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6938      	ldr	r0, [r7, #16]
 80058fa:	f7ff fe45 	bl	8005588 <put_fat>
 80058fe:	4603      	mov	r3, r0
 8005900:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d116      	bne.n	8005936 <create_chain+0x116>
		fs->last_clst = ncl;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	3b02      	subs	r3, #2
 8005918:	429a      	cmp	r2, r3
 800591a:	d804      	bhi.n	8005926 <create_chain+0x106>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	b2da      	uxtb	r2, r3
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	711a      	strb	r2, [r3, #4]
 8005934:	e007      	b.n	8005946 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d102      	bne.n	8005942 <create_chain+0x122>
 800593c:	f04f 33ff 	mov.w	r3, #4294967295
 8005940:	e000      	b.n	8005944 <create_chain+0x124>
 8005942:	2301      	movs	r3, #1
 8005944:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005946:	69fb      	ldr	r3, [r7, #28]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	3304      	adds	r3, #4
 8005966:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	0a5b      	lsrs	r3, r3, #9
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	8952      	ldrh	r2, [r2, #10]
 8005970:	fbb3 f3f2 	udiv	r3, r3, r2
 8005974:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1d1a      	adds	r2, r3, #4
 800597a:	613a      	str	r2, [r7, #16]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <clmt_clust+0x3a>
 8005986:	2300      	movs	r3, #0
 8005988:	e010      	b.n	80059ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	429a      	cmp	r2, r3
 8005990:	d307      	bcc.n	80059a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3304      	adds	r3, #4
 800599e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059a0:	e7e9      	b.n	8005976 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80059a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	4413      	add	r3, r2
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ce:	d204      	bcs.n	80059da <dir_sdi+0x22>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <dir_sdi+0x26>
		return FR_INT_ERR;
 80059da:	2302      	movs	r3, #2
 80059dc:	e063      	b.n	8005aa6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d106      	bne.n	80059fe <dir_sdi+0x46>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d902      	bls.n	80059fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10c      	bne.n	8005a1e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	8912      	ldrh	r2, [r2, #8]
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d301      	bcc.n	8005a14 <dir_sdi+0x5c>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e048      	b.n	8005aa6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	61da      	str	r2, [r3, #28]
 8005a1c:	e029      	b.n	8005a72 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	895b      	ldrh	r3, [r3, #10]
 8005a22:	025b      	lsls	r3, r3, #9
 8005a24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a26:	e019      	b.n	8005a5c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6979      	ldr	r1, [r7, #20]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fd06 	bl	800543e <get_fat>
 8005a32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d101      	bne.n	8005a40 <dir_sdi+0x88>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e032      	b.n	8005aa6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d904      	bls.n	8005a50 <dir_sdi+0x98>
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d301      	bcc.n	8005a54 <dir_sdi+0x9c>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e028      	b.n	8005aa6 <dir_sdi+0xee>
			ofs -= csz;
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d2e1      	bcs.n	8005a28 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005a64:	6979      	ldr	r1, [r7, #20]
 8005a66:	6938      	ldr	r0, [r7, #16]
 8005a68:	f7ff fcca 	bl	8005400 <clust2sect>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <dir_sdi+0xcc>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e010      	b.n	8005aa6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	0a5b      	lsrs	r3, r3, #9
 8005a8c:	441a      	add	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9e:	441a      	add	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	3320      	adds	r3, #32
 8005ac4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <dir_next+0x28>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad4:	d301      	bcc.n	8005ada <dir_next+0x2c>
 8005ad6:	2304      	movs	r3, #4
 8005ad8:	e0aa      	b.n	8005c30 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f040 8098 	bne.w	8005c16 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	8912      	ldrh	r2, [r2, #8]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	f0c0 8088 	bcc.w	8005c16 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	61da      	str	r2, [r3, #28]
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	e08f      	b.n	8005c30 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	0a5b      	lsrs	r3, r3, #9
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	8952      	ldrh	r2, [r2, #10]
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d17a      	bne.n	8005c16 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f7ff fc88 	bl	800543e <get_fat>
 8005b2e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d801      	bhi.n	8005b3a <dir_next+0x8c>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e07a      	b.n	8005c30 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d101      	bne.n	8005b46 <dir_next+0x98>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e074      	b.n	8005c30 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d358      	bcc.n	8005c02 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	61da      	str	r2, [r3, #28]
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	e067      	b.n	8005c30 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f7ff fe59 	bl	8005820 <create_chain>
 8005b6e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <dir_next+0xcc>
 8005b76:	2307      	movs	r3, #7
 8005b78:	e05a      	b.n	8005c30 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <dir_next+0xd6>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e055      	b.n	8005c30 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d101      	bne.n	8005b90 <dir_next+0xe2>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e04f      	b.n	8005c30 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff fb55 	bl	8005240 <sync_window>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <dir_next+0xf2>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e047      	b.n	8005c30 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3334      	adds	r3, #52	; 0x34
 8005ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff f94f 	bl	8004e4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	6979      	ldr	r1, [r7, #20]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff fc22 	bl	8005400 <clust2sect>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8005bc2:	e012      	b.n	8005bea <dir_next+0x13c>
						fs->wflag = 1;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff fb38 	bl	8005240 <sync_window>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <dir_next+0x12c>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e02a      	b.n	8005c30 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	895b      	ldrh	r3, [r3, #10]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d3e6      	bcc.n	8005bc4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad2      	subs	r2, r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005c08:	6979      	ldr	r1, [r7, #20]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff fbf8 	bl	8005400 <clust2sect>
 8005c10:	4602      	mov	r2, r0
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005c48:	2100      	movs	r1, #0
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff feb4 	bl	80059b8 <dir_sdi>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d12b      	bne.n	8005cb2 <dir_alloc+0x7a>
		n = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	4619      	mov	r1, r3
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff fb2f 	bl	80052c8 <move_window>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11d      	bne.n	8005cb0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2be5      	cmp	r3, #229	; 0xe5
 8005c7c:	d004      	beq.n	8005c88 <dir_alloc+0x50>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d107      	bne.n	8005c98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	613b      	str	r3, [r7, #16]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d102      	bne.n	8005c9c <dir_alloc+0x64>
 8005c96:	e00c      	b.n	8005cb2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff05 	bl	8005aae <dir_next>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0d7      	beq.n	8005c5e <dir_alloc+0x26>
 8005cae:	e000      	b.n	8005cb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005cb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d101      	bne.n	8005cbc <dir_alloc+0x84>
 8005cb8:	2307      	movs	r3, #7
 8005cba:	75fb      	strb	r3, [r7, #23]
	return res;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	331a      	adds	r3, #26
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff f817 	bl	8004d08 <ld_word>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d109      	bne.n	8005cfa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	3314      	adds	r3, #20
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff f80c 	bl	8004d08 <ld_word>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	331a      	adds	r3, #26
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	b292      	uxth	r2, r2
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff f82f 	bl	8004d7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d109      	bne.n	8005d3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f103 0214 	add.w	r2, r3, #20
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7ff f821 	bl	8004d7e <st_word>
	}
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d52:	2100      	movs	r1, #0
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff fe2f 	bl	80059b8 <dir_sdi>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <dir_find+0x24>
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	e03e      	b.n	8005de6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6938      	ldr	r0, [r7, #16]
 8005d70:	f7ff faaa 	bl	80052c8 <move_window>
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d12f      	bne.n	8005dde <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <dir_find+0x4e>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	75fb      	strb	r3, [r7, #23]
 8005d90:	e028      	b.n	8005de4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	330b      	adds	r3, #11
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	330b      	adds	r3, #11
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <dir_find+0x86>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a18      	ldr	r0, [r3, #32]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3324      	adds	r3, #36	; 0x24
 8005dbc:	220b      	movs	r2, #11
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	f7ff f85f 	bl	8004e82 <mem_cmp>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005dca:	2100      	movs	r1, #0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff fe6e 	bl	8005aae <dir_next>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0c5      	beq.n	8005d68 <dir_find+0x24>
 8005ddc:	e002      	b.n	8005de4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005dde:	bf00      	nop
 8005de0:	e000      	b.n	8005de4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005de2:	bf00      	nop

	return res;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff1a 	bl	8005c38 <dir_alloc>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d11c      	bne.n	8005e48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	4619      	mov	r1, r3
 8005e14:	68b8      	ldr	r0, [r7, #8]
 8005e16:	f7ff fa57 	bl	80052c8 <move_window>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d111      	bne.n	8005e48 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff f80e 	bl	8004e4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a18      	ldr	r0, [r3, #32]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3324      	adds	r3, #36	; 0x24
 8005e3a:	220b      	movs	r2, #11
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fe ffe5 	bl	8004e0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2201      	movs	r2, #1
 8005e46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3324      	adds	r3, #36	; 0x24
 8005e68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005e6a:	220b      	movs	r2, #11
 8005e6c:	2120      	movs	r1, #32
 8005e6e:	68b8      	ldr	r0, [r7, #8]
 8005e70:	f7fe ffed 	bl	8004e4e <mem_set>
	si = i = 0; ni = 8;
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	617a      	str	r2, [r7, #20]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e8e:	7ffb      	ldrb	r3, [r7, #31]
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d94e      	bls.n	8005f32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005e94:	7ffb      	ldrb	r3, [r7, #31]
 8005e96:	2b2f      	cmp	r3, #47	; 0x2f
 8005e98:	d006      	beq.n	8005ea8 <create_name+0x54>
 8005e9a:	7ffb      	ldrb	r3, [r7, #31]
 8005e9c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e9e:	d110      	bne.n	8005ec2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005ea0:	e002      	b.n	8005ea8 <create_name+0x54>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4413      	add	r3, r2
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8005eb2:	d0f6      	beq.n	8005ea2 <create_name+0x4e>
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	4413      	add	r3, r2
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b5c      	cmp	r3, #92	; 0x5c
 8005ebe:	d0f0      	beq.n	8005ea2 <create_name+0x4e>
			break;
 8005ec0:	e038      	b.n	8005f34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
 8005ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ec6:	d003      	beq.n	8005ed0 <create_name+0x7c>
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d30c      	bcc.n	8005eea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b0b      	cmp	r3, #11
 8005ed4:	d002      	beq.n	8005edc <create_name+0x88>
 8005ed6:	7ffb      	ldrb	r3, [r7, #31]
 8005ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eda:	d001      	beq.n	8005ee0 <create_name+0x8c>
 8005edc:	2306      	movs	r3, #6
 8005ede:	e044      	b.n	8005f6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	230b      	movs	r3, #11
 8005ee6:	61bb      	str	r3, [r7, #24]
			continue;
 8005ee8:	e022      	b.n	8005f30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005eea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da04      	bge.n	8005efc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ef2:	7ffb      	ldrb	r3, [r7, #31]
 8005ef4:	3b80      	subs	r3, #128	; 0x80
 8005ef6:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <create_name+0x120>)
 8005ef8:	5cd3      	ldrb	r3, [r2, r3]
 8005efa:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005efc:	7ffb      	ldrb	r3, [r7, #31]
 8005efe:	4619      	mov	r1, r3
 8005f00:	481d      	ldr	r0, [pc, #116]	; (8005f78 <create_name+0x124>)
 8005f02:	f7fe ffe5 	bl	8004ed0 <chk_chr>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <create_name+0xbc>
 8005f0c:	2306      	movs	r3, #6
 8005f0e:	e02c      	b.n	8005f6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005f10:	7ffb      	ldrb	r3, [r7, #31]
 8005f12:	2b60      	cmp	r3, #96	; 0x60
 8005f14:	d905      	bls.n	8005f22 <create_name+0xce>
 8005f16:	7ffb      	ldrb	r3, [r7, #31]
 8005f18:	2b7a      	cmp	r3, #122	; 0x7a
 8005f1a:	d802      	bhi.n	8005f22 <create_name+0xce>
 8005f1c:	7ffb      	ldrb	r3, [r7, #31]
 8005f1e:	3b20      	subs	r3, #32
 8005f20:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	613a      	str	r2, [r7, #16]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	7ffa      	ldrb	r2, [r7, #31]
 8005f2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005f30:	e7a6      	b.n	8005e80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	441a      	add	r2, r3
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <create_name+0xf4>
 8005f44:	2306      	movs	r3, #6
 8005f46:	e010      	b.n	8005f6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2be5      	cmp	r3, #229	; 0xe5
 8005f4e:	d102      	bne.n	8005f56 <create_name+0x102>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2205      	movs	r2, #5
 8005f54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d801      	bhi.n	8005f60 <create_name+0x10c>
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	e000      	b.n	8005f62 <create_name+0x10e>
 8005f60:	2200      	movs	r2, #0
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	330b      	adds	r3, #11
 8005f66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3720      	adds	r7, #32
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	08009f48 	.word	0x08009f48
 8005f78:	08009ec8 	.word	0x08009ec8

08005f7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f90:	e002      	b.n	8005f98 <follow_path+0x1c>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f9e:	d0f8      	beq.n	8005f92 <follow_path+0x16>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b5c      	cmp	r3, #92	; 0x5c
 8005fa6:	d0f4      	beq.n	8005f92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2200      	movs	r2, #0
 8005fac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b1f      	cmp	r3, #31
 8005fb4:	d80a      	bhi.n	8005fcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2280      	movs	r2, #128	; 0x80
 8005fba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fcf9 	bl	80059b8 <dir_sdi>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]
 8005fca:	e043      	b.n	8006054 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fcc:	463b      	mov	r3, r7
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff3f 	bl	8005e54 <create_name>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d134      	bne.n	800604a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff feaf 	bl	8005d44 <dir_find>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005ff0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d127      	bne.n	800604e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d122      	bne.n	800604e <follow_path+0xd2>
 8006008:	2305      	movs	r3, #5
 800600a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800600c:	e01f      	b.n	800604e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d11c      	bne.n	8006052 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	799b      	ldrb	r3, [r3, #6]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006024:	2305      	movs	r3, #5
 8006026:	75fb      	strb	r3, [r7, #23]
 8006028:	e014      	b.n	8006054 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006038:	4413      	add	r3, r2
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff fe42 	bl	8005cc6 <ld_clust>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006048:	e7c0      	b.n	8005fcc <follow_path+0x50>
			if (res != FR_OK) break;
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <follow_path+0xd8>
				break;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006052:	bf00      	nop
			}
		}
	}

	return res;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295
 800606a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d031      	beq.n	80060d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e002      	b.n	8006082 <get_ldnumber+0x24>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	3301      	adds	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b20      	cmp	r3, #32
 8006088:	d903      	bls.n	8006092 <get_ldnumber+0x34>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b3a      	cmp	r3, #58	; 0x3a
 8006090:	d1f4      	bne.n	800607c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b3a      	cmp	r3, #58	; 0x3a
 8006098:	d11c      	bne.n	80060d4 <get_ldnumber+0x76>
			tp = *path;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	60fa      	str	r2, [r7, #12]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	3b30      	subs	r3, #48	; 0x30
 80060aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b09      	cmp	r3, #9
 80060b0:	d80e      	bhi.n	80060d0 <get_ldnumber+0x72>
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d10a      	bne.n	80060d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d107      	bne.n	80060d0 <get_ldnumber+0x72>
					vol = (int)i;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	3301      	adds	r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	e002      	b.n	80060da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060d8:	693b      	ldr	r3, [r7, #16]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	70da      	strb	r2, [r3, #3]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f04f 32ff 	mov.w	r2, #4294967295
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff f8e0 	bl	80052c8 <move_window>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <check_fs+0x2a>
 800610e:	2304      	movs	r3, #4
 8006110:	e038      	b.n	8006184 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3334      	adds	r3, #52	; 0x34
 8006116:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe fdf4 	bl	8004d08 <ld_word>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006128:	429a      	cmp	r2, r3
 800612a:	d001      	beq.n	8006130 <check_fs+0x48>
 800612c:	2303      	movs	r3, #3
 800612e:	e029      	b.n	8006184 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006136:	2be9      	cmp	r3, #233	; 0xe9
 8006138:	d009      	beq.n	800614e <check_fs+0x66>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006140:	2beb      	cmp	r3, #235	; 0xeb
 8006142:	d11e      	bne.n	8006182 <check_fs+0x9a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800614a:	2b90      	cmp	r3, #144	; 0x90
 800614c:	d119      	bne.n	8006182 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3334      	adds	r3, #52	; 0x34
 8006152:	3336      	adds	r3, #54	; 0x36
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe fdef 	bl	8004d38 <ld_dword>
 800615a:	4603      	mov	r3, r0
 800615c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006160:	4a0a      	ldr	r2, [pc, #40]	; (800618c <check_fs+0xa4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d101      	bne.n	800616a <check_fs+0x82>
 8006166:	2300      	movs	r3, #0
 8006168:	e00c      	b.n	8006184 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3334      	adds	r3, #52	; 0x34
 800616e:	3352      	adds	r3, #82	; 0x52
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe fde1 	bl	8004d38 <ld_dword>
 8006176:	4602      	mov	r2, r0
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <check_fs+0xa8>)
 800617a:	429a      	cmp	r2, r3
 800617c:	d101      	bne.n	8006182 <check_fs+0x9a>
 800617e:	2300      	movs	r3, #0
 8006180:	e000      	b.n	8006184 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006182:	2302      	movs	r3, #2
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	00544146 	.word	0x00544146
 8006190:	33544146 	.word	0x33544146

08006194 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b096      	sub	sp, #88	; 0x58
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff ff58 	bl	800605e <get_ldnumber>
 80061ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80061b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da01      	bge.n	80061ba <find_volume+0x26>
 80061b6:	230b      	movs	r3, #11
 80061b8:	e236      	b.n	8006628 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80061ba:	4aac      	ldr	r2, [pc, #688]	; (800646c <find_volume+0x2d8>)
 80061bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <find_volume+0x3a>
 80061ca:	230c      	movs	r3, #12
 80061cc:	e22c      	b.n	8006628 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80061ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061d0:	f7fe fe99 	bl	8004f06 <lock_fs>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <find_volume+0x4a>
 80061da:	230f      	movs	r3, #15
 80061dc:	e224      	b.n	8006628 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01a      	beq.n	800622a <find_volume+0x96>
		stat = disk_status(fs->drv);
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fce7 	bl	8004bcc <disk_status>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006204:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <find_volume+0x92>
 8006216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006222:	230a      	movs	r3, #10
 8006224:	e200      	b.n	8006628 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8006226:	2300      	movs	r3, #0
 8006228:	e1fe      	b.n	8006628 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006232:	b2da      	uxtb	r2, r3
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe fcdf 	bl	8004c00 <disk_initialize>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006248:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006254:	2303      	movs	r3, #3
 8006256:	e1e7      	b.n	8006628 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <find_volume+0xda>
 800625e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800626a:	230a      	movs	r3, #10
 800626c:	e1dc      	b.n	8006628 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006272:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006274:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006276:	f7ff ff37 	bl	80060e8 <check_fs>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006284:	2b02      	cmp	r3, #2
 8006286:	d14b      	bne.n	8006320 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006288:	2300      	movs	r3, #0
 800628a:	643b      	str	r3, [r7, #64]	; 0x40
 800628c:	e01f      	b.n	80062ce <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800629c:	4413      	add	r3, r2
 800629e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	3304      	adds	r3, #4
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d006      	beq.n	80062b8 <find_volume+0x124>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	3308      	adds	r3, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fd42 	bl	8004d38 <ld_dword>
 80062b4:	4602      	mov	r2, r0
 80062b6:	e000      	b.n	80062ba <find_volume+0x126>
 80062b8:	2200      	movs	r2, #0
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80062c2:	440b      	add	r3, r1
 80062c4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	3301      	adds	r3, #1
 80062cc:	643b      	str	r3, [r7, #64]	; 0x40
 80062ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d9dc      	bls.n	800628e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80062d4:	2300      	movs	r3, #0
 80062d6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80062d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <find_volume+0x150>
 80062de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e0:	3b01      	subs	r3, #1
 80062e2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80062e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062ec:	4413      	add	r3, r2
 80062ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80062f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <find_volume+0x172>
 80062fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062fe:	f7ff fef3 	bl	80060e8 <check_fs>
 8006302:	4603      	mov	r3, r0
 8006304:	e000      	b.n	8006308 <find_volume+0x174>
 8006306:	2303      	movs	r3, #3
 8006308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800630c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006310:	2b01      	cmp	r3, #1
 8006312:	d905      	bls.n	8006320 <find_volume+0x18c>
 8006314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006316:	3301      	adds	r3, #1
 8006318:	643b      	str	r3, [r7, #64]	; 0x40
 800631a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631c:	2b03      	cmp	r3, #3
 800631e:	d9e1      	bls.n	80062e4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006324:	2b04      	cmp	r3, #4
 8006326:	d101      	bne.n	800632c <find_volume+0x198>
 8006328:	2301      	movs	r3, #1
 800632a:	e17d      	b.n	8006628 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800632c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006330:	2b01      	cmp	r3, #1
 8006332:	d901      	bls.n	8006338 <find_volume+0x1a4>
 8006334:	230d      	movs	r3, #13
 8006336:	e177      	b.n	8006628 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	3334      	adds	r3, #52	; 0x34
 800633c:	330b      	adds	r3, #11
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fce2 	bl	8004d08 <ld_word>
 8006344:	4603      	mov	r3, r0
 8006346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800634a:	d001      	beq.n	8006350 <find_volume+0x1bc>
 800634c:	230d      	movs	r3, #13
 800634e:	e16b      	b.n	8006628 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	3334      	adds	r3, #52	; 0x34
 8006354:	3316      	adds	r3, #22
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fcd6 	bl	8004d08 <ld_word>
 800635c:	4603      	mov	r3, r0
 800635e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <find_volume+0x1e0>
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	3334      	adds	r3, #52	; 0x34
 800636a:	3324      	adds	r3, #36	; 0x24
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fce3 	bl	8004d38 <ld_dword>
 8006372:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006378:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	789b      	ldrb	r3, [r3, #2]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d005      	beq.n	8006398 <find_volume+0x204>
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	789b      	ldrb	r3, [r3, #2]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d001      	beq.n	8006398 <find_volume+0x204>
 8006394:	230d      	movs	r3, #13
 8006396:	e147      	b.n	8006628 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	789b      	ldrb	r3, [r3, #2]
 800639c:	461a      	mov	r2, r3
 800639e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a0:	fb02 f303 	mul.w	r3, r2, r3
 80063a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	895b      	ldrh	r3, [r3, #10]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <find_volume+0x238>
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	895b      	ldrh	r3, [r3, #10]
 80063be:	461a      	mov	r2, r3
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	895b      	ldrh	r3, [r3, #10]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <find_volume+0x23c>
 80063cc:	230d      	movs	r3, #13
 80063ce:	e12b      	b.n	8006628 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	3334      	adds	r3, #52	; 0x34
 80063d4:	3311      	adds	r3, #17
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fc96 	bl	8004d08 <ld_word>
 80063dc:	4603      	mov	r3, r0
 80063de:	461a      	mov	r2, r3
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	891b      	ldrh	r3, [r3, #8]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <find_volume+0x262>
 80063f2:	230d      	movs	r3, #13
 80063f4:	e118      	b.n	8006628 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	3334      	adds	r3, #52	; 0x34
 80063fa:	3313      	adds	r3, #19
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe fc83 	bl	8004d08 <ld_word>
 8006402:	4603      	mov	r3, r0
 8006404:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006408:	2b00      	cmp	r3, #0
 800640a:	d106      	bne.n	800641a <find_volume+0x286>
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	3334      	adds	r3, #52	; 0x34
 8006410:	3320      	adds	r3, #32
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fc90 	bl	8004d38 <ld_dword>
 8006418:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	3334      	adds	r3, #52	; 0x34
 800641e:	330e      	adds	r3, #14
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe fc71 	bl	8004d08 <ld_word>
 8006426:	4603      	mov	r3, r0
 8006428:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800642a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <find_volume+0x2a0>
 8006430:	230d      	movs	r3, #13
 8006432:	e0f9      	b.n	8006628 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006434:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006438:	4413      	add	r3, r2
 800643a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800643c:	8912      	ldrh	r2, [r2, #8]
 800643e:	0912      	lsrs	r2, r2, #4
 8006440:	b292      	uxth	r2, r2
 8006442:	4413      	add	r3, r2
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	429a      	cmp	r2, r3
 800644c:	d201      	bcs.n	8006452 <find_volume+0x2be>
 800644e:	230d      	movs	r3, #13
 8006450:	e0ea      	b.n	8006628 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800645a:	8952      	ldrh	r2, [r2, #10]
 800645c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <find_volume+0x2dc>
 8006468:	230d      	movs	r3, #13
 800646a:	e0dd      	b.n	8006628 <find_volume+0x494>
 800646c:	20000484 	.word	0x20000484
		fmt = FS_FAT32;
 8006470:	2303      	movs	r3, #3
 8006472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800647c:	4293      	cmp	r3, r2
 800647e:	d802      	bhi.n	8006486 <find_volume+0x2f2>
 8006480:	2302      	movs	r3, #2
 8006482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	f640 72f5 	movw	r2, #4085	; 0xff5
 800648c:	4293      	cmp	r3, r2
 800648e:	d802      	bhi.n	8006496 <find_volume+0x302>
 8006490:	2301      	movs	r3, #1
 8006492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	1c9a      	adds	r2, r3, #2
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064a2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80064a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80064a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a8:	441a      	add	r2, r3
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80064ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	441a      	add	r2, r3
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80064b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d11e      	bne.n	80064fe <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	3334      	adds	r3, #52	; 0x34
 80064c4:	332a      	adds	r3, #42	; 0x2a
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fc1e 	bl	8004d08 <ld_word>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <find_volume+0x342>
 80064d2:	230d      	movs	r3, #13
 80064d4:	e0a8      	b.n	8006628 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	891b      	ldrh	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <find_volume+0x34e>
 80064de:	230d      	movs	r3, #13
 80064e0:	e0a2      	b.n	8006628 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	3334      	adds	r3, #52	; 0x34
 80064e6:	332c      	adds	r3, #44	; 0x2c
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fc25 	bl	8004d38 <ld_dword>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	647b      	str	r3, [r7, #68]	; 0x44
 80064fc:	e01f      	b.n	800653e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	891b      	ldrh	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <find_volume+0x376>
 8006506:	230d      	movs	r3, #13
 8006508:	e08e      	b.n	8006628 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800650e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006510:	441a      	add	r2, r3
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800651a:	2b02      	cmp	r3, #2
 800651c:	d103      	bne.n	8006526 <find_volume+0x392>
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	e00a      	b.n	800653c <find_volume+0x3a8>
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	4613      	mov	r3, r2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	4413      	add	r3, r2
 8006530:	085a      	lsrs	r2, r3, #1
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800653c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006544:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006548:	0a5b      	lsrs	r3, r3, #9
 800654a:	429a      	cmp	r2, r3
 800654c:	d201      	bcs.n	8006552 <find_volume+0x3be>
 800654e:	230d      	movs	r3, #13
 8006550:	e06a      	b.n	8006628 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	f04f 32ff 	mov.w	r2, #4294967295
 8006558:	615a      	str	r2, [r3, #20]
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	2280      	movs	r2, #128	; 0x80
 8006566:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800656c:	2b03      	cmp	r3, #3
 800656e:	d149      	bne.n	8006604 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	3334      	adds	r3, #52	; 0x34
 8006574:	3330      	adds	r3, #48	; 0x30
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fbc6 	bl	8004d08 <ld_word>
 800657c:	4603      	mov	r3, r0
 800657e:	2b01      	cmp	r3, #1
 8006580:	d140      	bne.n	8006604 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006584:	3301      	adds	r3, #1
 8006586:	4619      	mov	r1, r3
 8006588:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800658a:	f7fe fe9d 	bl	80052c8 <move_window>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d137      	bne.n	8006604 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	2200      	movs	r2, #0
 8006598:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	3334      	adds	r3, #52	; 0x34
 800659e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fbb0 	bl	8004d08 <ld_word>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d127      	bne.n	8006604 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	3334      	adds	r3, #52	; 0x34
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe fbbd 	bl	8004d38 <ld_dword>
 80065be:	4602      	mov	r2, r0
 80065c0:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <find_volume+0x49c>)
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d11e      	bne.n	8006604 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	3334      	adds	r3, #52	; 0x34
 80065ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fbb2 	bl	8004d38 <ld_dword>
 80065d4:	4602      	mov	r2, r0
 80065d6:	4b17      	ldr	r3, [pc, #92]	; (8006634 <find_volume+0x4a0>)
 80065d8:	429a      	cmp	r2, r3
 80065da:	d113      	bne.n	8006604 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	3334      	adds	r3, #52	; 0x34
 80065e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fba7 	bl	8004d38 <ld_dword>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	3334      	adds	r3, #52	; 0x34
 80065f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fb9d 	bl	8004d38 <ld_dword>
 80065fe:	4602      	mov	r2, r0
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800660a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <find_volume+0x4a4>)
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	4b08      	ldr	r3, [pc, #32]	; (8006638 <find_volume+0x4a4>)
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <find_volume+0x4a4>)
 800661a:	881a      	ldrh	r2, [r3, #0]
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006622:	f7fe fde9 	bl	80051f8 <clear_lock>
#endif
	return FR_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3758      	adds	r7, #88	; 0x58
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	41615252 	.word	0x41615252
 8006634:	61417272 	.word	0x61417272
 8006638:	20000488 	.word	0x20000488

0800663c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006646:	2309      	movs	r3, #9
 8006648:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02e      	beq.n	80066ae <validate+0x72>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d02a      	beq.n	80066ae <validate+0x72>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d025      	beq.n	80066ae <validate+0x72>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	889a      	ldrh	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	88db      	ldrh	r3, [r3, #6]
 800666c:	429a      	cmp	r2, r3
 800666e:	d11e      	bne.n	80066ae <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe fc46 	bl	8004f06 <lock_fs>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d014      	beq.n	80066aa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe faa0 	bl	8004bcc <disk_status>
 800668c:	4603      	mov	r3, r0
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d102      	bne.n	800669c <validate+0x60>
				res = FR_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
 800669a:	e008      	b.n	80066ae <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fc45 	bl	8004f32 <unlock_fs>
 80066a8:	e001      	b.n	80066ae <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80066aa:	230f      	movs	r3, #15
 80066ac:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <validate+0x7e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	e000      	b.n	80066bc <validate+0x80>
 80066ba:	2300      	movs	r3, #0
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	6013      	str	r3, [r2, #0]
	return res;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	4613      	mov	r3, r2
 80066d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80066de:	f107 0310 	add.w	r3, r7, #16
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fcbb 	bl	800605e <get_ldnumber>
 80066e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da01      	bge.n	80066f4 <f_mount+0x28>
 80066f0:	230b      	movs	r3, #11
 80066f2:	e048      	b.n	8006786 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80066f4:	4a26      	ldr	r2, [pc, #152]	; (8006790 <f_mount+0xc4>)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00f      	beq.n	8006724 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006704:	69b8      	ldr	r0, [r7, #24]
 8006706:	f7fe fd77 	bl	80051f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fcdf 	bl	80070d2 <ff_del_syncobj>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <f_mount+0x52>
 800671a:	2302      	movs	r3, #2
 800671c:	e033      	b.n	8006786 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00f      	beq.n	800674a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	330c      	adds	r3, #12
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f000 fca9 	bl	8007092 <ff_cre_syncobj>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <f_mount+0x7e>
 8006746:	2302      	movs	r3, #2
 8006748:	e01d      	b.n	8006786 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4910      	ldr	r1, [pc, #64]	; (8006790 <f_mount+0xc4>)
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <f_mount+0x94>
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d001      	beq.n	8006764 <f_mount+0x98>
 8006760:	2300      	movs	r3, #0
 8006762:	e010      	b.n	8006786 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006764:	f107 010c 	add.w	r1, r7, #12
 8006768:	f107 0308 	add.w	r3, r7, #8
 800676c:	2200      	movs	r2, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fd10 	bl	8006194 <find_volume>
 8006774:	4603      	mov	r3, r0
 8006776:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	7dfa      	ldrb	r2, [r7, #23]
 800677c:	4611      	mov	r1, r2
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fbd7 	bl	8004f32 <unlock_fs>
 8006784:	7dfb      	ldrb	r3, [r7, #23]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3720      	adds	r7, #32
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000484 	.word	0x20000484

08006794 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b098      	sub	sp, #96	; 0x60
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <f_open+0x18>
 80067a8:	2309      	movs	r3, #9
 80067aa:	e1b4      	b.n	8006b16 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80067b4:	79fa      	ldrb	r2, [r7, #7]
 80067b6:	f107 0110 	add.w	r1, r7, #16
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff fce8 	bl	8006194 <find_volume>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80067ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 8191 	bne.w	8006af6 <f_open+0x362>
		dj.obj.fs = fs;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	f107 0314 	add.w	r3, r7, #20
 80067de:	4611      	mov	r1, r2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fbcb 	bl	8005f7c <follow_path>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80067ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d11a      	bne.n	800682a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80067f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067f8:	b25b      	sxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da03      	bge.n	8006806 <f_open+0x72>
				res = FR_INVALID_NAME;
 80067fe:	2306      	movs	r3, #6
 8006800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006804:	e011      	b.n	800682a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf14      	ite	ne
 8006810:	2301      	movne	r3, #1
 8006812:	2300      	moveq	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	461a      	mov	r2, r3
 8006818:	f107 0314 	add.w	r3, r7, #20
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fba2 	bl	8004f68 <chk_lock>
 8006824:	4603      	mov	r3, r0
 8006826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	f003 031c 	and.w	r3, r3, #28
 8006830:	2b00      	cmp	r3, #0
 8006832:	d07f      	beq.n	8006934 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006838:	2b00      	cmp	r3, #0
 800683a:	d017      	beq.n	800686c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800683c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006840:	2b04      	cmp	r3, #4
 8006842:	d10e      	bne.n	8006862 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006844:	f7fe fbec 	bl	8005020 <enq_lock>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d006      	beq.n	800685c <f_open+0xc8>
 800684e:	f107 0314 	add.w	r3, r7, #20
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff facb 	bl	8005dee <dir_register>
 8006858:	4603      	mov	r3, r0
 800685a:	e000      	b.n	800685e <f_open+0xca>
 800685c:	2312      	movs	r3, #18
 800685e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	f043 0308 	orr.w	r3, r3, #8
 8006868:	71fb      	strb	r3, [r7, #7]
 800686a:	e010      	b.n	800688e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800686c:	7ebb      	ldrb	r3, [r7, #26]
 800686e:	f003 0311 	and.w	r3, r3, #17
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <f_open+0xea>
					res = FR_DENIED;
 8006876:	2307      	movs	r3, #7
 8006878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800687c:	e007      	b.n	800688e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <f_open+0xfa>
 8006888:	2308      	movs	r3, #8
 800688a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800688e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006892:	2b00      	cmp	r3, #0
 8006894:	d168      	bne.n	8006968 <f_open+0x1d4>
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d063      	beq.n	8006968 <f_open+0x1d4>
				dw = GET_FATTIME();
 80068a0:	f7fd ff40 	bl	8004724 <get_fattime>
 80068a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	330e      	adds	r3, #14
 80068aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe fa81 	bl	8004db4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b4:	3316      	adds	r3, #22
 80068b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fa7b 	bl	8004db4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80068be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c0:	330b      	adds	r3, #11
 80068c2:	2220      	movs	r2, #32
 80068c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff f9fa 	bl	8005cc6 <ld_clust>
 80068d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068d8:	2200      	movs	r2, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff fa12 	bl	8005d04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80068e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e2:	331c      	adds	r3, #28
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fa64 	bl	8004db4 <st_dword>
					fs->wflag = 1;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2201      	movs	r2, #1
 80068f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80068f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d037      	beq.n	8006968 <f_open+0x1d4>
						dw = fs->winsect;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80068fe:	f107 0314 	add.w	r3, r7, #20
 8006902:	2200      	movs	r2, #0
 8006904:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe ff25 	bl	8005756 <remove_chain>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006916:	2b00      	cmp	r3, #0
 8006918:	d126      	bne.n	8006968 <f_open+0x1d4>
							res = move_window(fs, dw);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fcd2 	bl	80052c8 <move_window>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800692e:	3a01      	subs	r2, #1
 8006930:	611a      	str	r2, [r3, #16]
 8006932:	e019      	b.n	8006968 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006938:	2b00      	cmp	r3, #0
 800693a:	d115      	bne.n	8006968 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800693c:	7ebb      	ldrb	r3, [r7, #26]
 800693e:	f003 0310 	and.w	r3, r3, #16
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006946:	2304      	movs	r3, #4
 8006948:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800694c:	e00c      	b.n	8006968 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <f_open+0x1d4>
 8006958:	7ebb      	ldrb	r3, [r7, #26]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <f_open+0x1d4>
						res = FR_DENIED;
 8006962:	2307      	movs	r3, #7
 8006964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800696c:	2b00      	cmp	r3, #0
 800696e:	d128      	bne.n	80069c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006980:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800698a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	bf14      	ite	ne
 800699a:	2301      	movne	r3, #1
 800699c:	2300      	moveq	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	f107 0314 	add.w	r3, r7, #20
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fb5b 	bl	8005064 <inc_lock>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <f_open+0x22e>
 80069bc:	2302      	movs	r3, #2
 80069be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80069c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 8095 	bne.w	8006af6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff f977 	bl	8005cc6 <ld_clust>
 80069d8:	4602      	mov	r2, r0
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	331c      	adds	r3, #28
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe f9a8 	bl	8004d38 <ld_dword>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	88da      	ldrh	r2, [r3, #6]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	79fa      	ldrb	r2, [r7, #7]
 8006a06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3330      	adds	r3, #48	; 0x30
 8006a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe fa12 	bl	8004e4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d060      	beq.n	8006af6 <f_open+0x362>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d05c      	beq.n	8006af6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	895b      	ldrh	r3, [r3, #10]
 8006a48:	025b      	lsls	r3, r3, #9
 8006a4a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	657b      	str	r3, [r7, #84]	; 0x54
 8006a58:	e016      	b.n	8006a88 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fced 	bl	800543e <get_fat>
 8006a64:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d802      	bhi.n	8006a72 <f_open+0x2de>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d102      	bne.n	8006a80 <f_open+0x2ec>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	657b      	str	r3, [r7, #84]	; 0x54
 8006a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d103      	bne.n	8006a98 <f_open+0x304>
 8006a90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d8e0      	bhi.n	8006a5a <f_open+0x2c6>
				}
				fp->clust = clst;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d127      	bne.n	8006af6 <f_open+0x362>
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d022      	beq.n	8006af6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe fca3 	bl	8005400 <clust2sect>
 8006aba:	6478      	str	r0, [r7, #68]	; 0x44
 8006abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <f_open+0x336>
						res = FR_INT_ERR;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ac8:	e015      	b.n	8006af6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006acc:	0a5a      	lsrs	r2, r3, #9
 8006ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad0:	441a      	add	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	7858      	ldrb	r0, [r3, #1]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a1a      	ldr	r2, [r3, #32]
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f7fe f8b1 	bl	8004c4c <disk_read>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <f_open+0x362>
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <f_open+0x370>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe fa10 	bl	8004f32 <unlock_fs>
 8006b12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3760      	adds	r7, #96	; 0x60
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b08e      	sub	sp, #56	; 0x38
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
 8006b2a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f107 0214 	add.w	r2, r7, #20
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff fd7c 	bl	800663c <validate>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d107      	bne.n	8006b62 <f_read+0x44>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	7d5b      	ldrb	r3, [r3, #21]
 8006b56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006b5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <f_read+0x58>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe f9e1 	bl	8004f32 <unlock_fs>
 8006b70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b74:	e13d      	b.n	8006df2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	7d1b      	ldrb	r3, [r3, #20]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <f_read+0x72>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2107      	movs	r1, #7
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe f9d3 	bl	8004f32 <unlock_fs>
 8006b8c:	2307      	movs	r3, #7
 8006b8e:	e130      	b.n	8006df2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	f240 811c 	bls.w	8006dde <f_read+0x2c0>
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006baa:	e118      	b.n	8006dde <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 80e4 	bne.w	8006d82 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	0a5b      	lsrs	r3, r3, #9
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	8952      	ldrh	r2, [r2, #10]
 8006bc4:	3a01      	subs	r2, #1
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d139      	bne.n	8006c44 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8006bde:	e013      	b.n	8006c08 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	4619      	mov	r1, r3
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7fe feae 	bl	8005950 <clmt_clust>
 8006bf4:	6338      	str	r0, [r7, #48]	; 0x30
 8006bf6:	e007      	b.n	8006c08 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f7fe fc1c 	bl	800543e <get_fat>
 8006c06:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d809      	bhi.n	8006c22 <f_read+0x104>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2202      	movs	r2, #2
 8006c12:	755a      	strb	r2, [r3, #21]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2102      	movs	r1, #2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe f98a 	bl	8004f32 <unlock_fs>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e0e7      	b.n	8006df2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d109      	bne.n	8006c3e <f_read+0x120>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	755a      	strb	r2, [r3, #21]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2101      	movs	r1, #1
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe f97c 	bl	8004f32 <unlock_fs>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e0d9      	b.n	8006df2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe fbd7 	bl	8005400 <clust2sect>
 8006c52:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <f_read+0x150>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	755a      	strb	r2, [r3, #21]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2102      	movs	r1, #2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe f964 	bl	8004f32 <unlock_fs>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e0c1      	b.n	8006df2 <f_read+0x2d4>
			sect += csect;
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	0a5b      	lsrs	r3, r3, #9
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d03e      	beq.n	8006d00 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	4413      	add	r3, r2
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	8952      	ldrh	r2, [r2, #10]
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d905      	bls.n	8006c9c <f_read+0x17e>
					cc = fs->csize - csect;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	895b      	ldrh	r3, [r3, #10]
 8006c94:	461a      	mov	r2, r3
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	7858      	ldrb	r0, [r3, #1]
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ca6:	f7fd ffd1 	bl	8004c4c <disk_read>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <f_read+0x1a6>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	755a      	strb	r2, [r3, #21]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2101      	movs	r1, #1
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe f939 	bl	8004f32 <unlock_fs>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e096      	b.n	8006df2 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	7d1b      	ldrb	r3, [r3, #20]
 8006cc8:	b25b      	sxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da14      	bge.n	8006cf8 <f_read+0x1da>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d90d      	bls.n	8006cf8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a1a      	ldr	r2, [r3, #32]
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	025b      	lsls	r3, r3, #9
 8006ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce8:	18d0      	adds	r0, r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3330      	adds	r3, #48	; 0x30
 8006cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f7fe f88a 	bl	8004e0c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	025b      	lsls	r3, r3, #9
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006cfe:	e05a      	b.n	8006db6 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d038      	beq.n	8006d7c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	7d1b      	ldrb	r3, [r3, #20]
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	da1d      	bge.n	8006d50 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	7858      	ldrb	r0, [r3, #1]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a1a      	ldr	r2, [r3, #32]
 8006d22:	2301      	movs	r3, #1
 8006d24:	f7fd ffb2 	bl	8004c8c <disk_write>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <f_read+0x224>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	755a      	strb	r2, [r3, #21]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2101      	movs	r1, #1
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe f8fa 	bl	8004f32 <unlock_fs>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e057      	b.n	8006df2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	7d1b      	ldrb	r3, [r3, #20]
 8006d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	7858      	ldrb	r0, [r3, #1]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	f7fd ff75 	bl	8004c4c <disk_read>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <f_read+0x25e>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	755a      	strb	r2, [r3, #21]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe f8dd 	bl	8004f32 <unlock_fs>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e03a      	b.n	8006df2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d901      	bls.n	8006d9c <f_read+0x27e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	4413      	add	r3, r2
 8006dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dae:	4619      	mov	r1, r3
 8006db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006db2:	f7fe f82b 	bl	8004e0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	4413      	add	r3, r2
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	441a      	add	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	619a      	str	r2, [r3, #24]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd0:	441a      	add	r2, r3
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f47f aee3 	bne.w	8006bac <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fe f8a1 	bl	8004f32 <unlock_fs>
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3738      	adds	r7, #56	; 0x38
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f107 0208 	add.w	r2, r7, #8
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff fc16 	bl	800663c <validate>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d16d      	bne.n	8006ef6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7d1b      	ldrb	r3, [r3, #20]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d067      	beq.n	8006ef6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7d1b      	ldrb	r3, [r3, #20]
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da1a      	bge.n	8006e66 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	7858      	ldrb	r0, [r3, #1]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f7fd ff24 	bl	8004c8c <disk_write>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <f_sync+0x5e>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe f86f 	bl	8004f32 <unlock_fs>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e055      	b.n	8006f04 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7d1b      	ldrb	r3, [r3, #20]
 8006e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006e66:	f7fd fc5d 	bl	8004724 <get_fattime>
 8006e6a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f7fe fa27 	bl	80052c8 <move_window>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d138      	bne.n	8006ef6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	330b      	adds	r3, #11
 8006e8e:	781a      	ldrb	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	330b      	adds	r3, #11
 8006e94:	f042 0220 	orr.w	r2, r2, #32
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	f7fe ff2c 	bl	8005d04 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f103 021c 	add.w	r2, r3, #28
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f7fd ff7b 	bl	8004db4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3316      	adds	r3, #22
 8006ec2:	6939      	ldr	r1, [r7, #16]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fd ff75 	bl	8004db4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3312      	adds	r3, #18
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fd ff54 	bl	8004d7e <st_word>
					fs->wflag = 1;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fa20 	bl	8005324 <sync_fs>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	7d1b      	ldrb	r3, [r3, #20]
 8006eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	7dfa      	ldrb	r2, [r7, #23]
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe f818 	bl	8004f32 <unlock_fs>
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ff70 	bl	8006dfa <f_sync>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11d      	bne.n	8006f60 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f107 0208 	add.w	r2, r7, #8
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff fb85 	bl	800663c <validate>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d111      	bne.n	8006f60 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe f91d 	bl	8005180 <dec_lock>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fd ffe9 	bl	8004f32 <unlock_fs>
#endif
		}
	}
	return res;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b088      	sub	sp, #32
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006f7e:	e017      	b.n	8006fb0 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006f80:	f107 0310 	add.w	r3, r7, #16
 8006f84:	f107 0114 	add.w	r1, r7, #20
 8006f88:	2201      	movs	r2, #1
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fdc7 	bl	8006b1e <f_read>
		if (rc != 1) break;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d112      	bne.n	8006fbc <f_gets+0x52>
		c = s[0];
 8006f96:	7d3b      	ldrb	r3, [r7, #20]
 8006f98:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	61ba      	str	r2, [r7, #24]
 8006fa0:	7dfa      	ldrb	r2, [r7, #23]
 8006fa2:	701a      	strb	r2, [r3, #0]
		n++;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	2b0a      	cmp	r3, #10
 8006fae:	d007      	beq.n	8006fc0 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	dbe2      	blt.n	8006f80 <f_gets+0x16>
 8006fba:	e002      	b.n	8006fc2 <f_gets+0x58>
		if (rc != 1) break;
 8006fbc:	bf00      	nop
 8006fbe:	e000      	b.n	8006fc2 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8006fc0:	bf00      	nop
	}
	*p = 0;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <f_gets+0x68>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	e000      	b.n	8006fd4 <f_gets+0x6a>
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006fea:	2301      	movs	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006ff2:	4b1f      	ldr	r3, [pc, #124]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 8006ff4:	7a5b      	ldrb	r3, [r3, #9]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d131      	bne.n	8007060 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006ffc:	4b1c      	ldr	r3, [pc, #112]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 8006ffe:	7a5b      	ldrb	r3, [r3, #9]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 8007006:	2100      	movs	r1, #0
 8007008:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800700a:	4b19      	ldr	r3, [pc, #100]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 800700c:	7a5b      	ldrb	r3, [r3, #9]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	4a17      	ldr	r2, [pc, #92]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800701a:	4b15      	ldr	r3, [pc, #84]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 800701c:	7a5b      	ldrb	r3, [r3, #9]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	4b13      	ldr	r3, [pc, #76]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 8007024:	4413      	add	r3, r2
 8007026:	79fa      	ldrb	r2, [r7, #7]
 8007028:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800702a:	4b11      	ldr	r3, [pc, #68]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 800702c:	7a5b      	ldrb	r3, [r3, #9]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	b2d1      	uxtb	r1, r2
 8007034:	4a0e      	ldr	r2, [pc, #56]	; (8007070 <FATFS_LinkDriverEx+0x94>)
 8007036:	7251      	strb	r1, [r2, #9]
 8007038:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800703a:	7dbb      	ldrb	r3, [r7, #22]
 800703c:	3330      	adds	r3, #48	; 0x30
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	3301      	adds	r3, #1
 8007048:	223a      	movs	r2, #58	; 0x3a
 800704a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3302      	adds	r3, #2
 8007050:	222f      	movs	r2, #47	; 0x2f
 8007052:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3303      	adds	r3, #3
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
}
 8007062:	4618      	mov	r0, r3
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	200004ac 	.word	0x200004ac

08007074 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800707e:	2200      	movs	r2, #0
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ffaa 	bl	8006fdc <FATFS_LinkDriverEx>
 8007088:	4603      	mov	r3, r0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b086      	sub	sp, #24
 8007096:	af00      	add	r7, sp, #0
 8007098:	4603      	mov	r3, r0
 800709a:	6039      	str	r1, [r7, #0]
 800709c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	2300      	movs	r3, #0
 80070a4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80070a6:	f107 030c 	add.w	r3, r7, #12
 80070aa:	2101      	movs	r1, #1
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 f8e9 	bl	8007284 <osSemaphoreCreate>
 80070b2:	4602      	mov	r2, r0
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf14      	ite	ne
 80070c0:	2301      	movne	r3, #1
 80070c2:	2300      	moveq	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	617b      	str	r3, [r7, #20]

    return ret;
 80070c8:	697b      	ldr	r3, [r7, #20]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f98a 	bl	80073f4 <osSemaphoreDelete>
#endif
    return 1;
 80070e0:	2301      	movs	r3, #1
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80070f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f8f6 	bl	80072ec <osSemaphoreWait>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8007106:	2301      	movs	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800710a:	68fb      	ldr	r3, [r7, #12]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f933 	bl	8007388 <osSemaphoreRelease>
#endif
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	4603      	mov	r3, r0
 8007132:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800713c:	2b84      	cmp	r3, #132	; 0x84
 800713e:	d005      	beq.n	800714c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007140:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	3303      	adds	r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800714c:	68fb      	ldr	r3, [r7, #12]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007160:	f3ef 8305 	mrs	r3, IPSR
 8007164:	607b      	str	r3, [r7, #4]
  return(result);
 8007166:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007168:	2b00      	cmp	r3, #0
 800716a:	bf14      	ite	ne
 800716c:	2301      	movne	r3, #1
 800716e:	2300      	moveq	r3, #0
 8007170:	b2db      	uxtb	r3, r3
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007182:	f001 fbc7 	bl	8008914 <vTaskStartScheduler>
  
  return osOK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}

0800718c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8007190:	f001 ffd6 	bl	8009140 <xTaskGetSchedulerState>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <osKernelRunning+0x12>
    return 0;
 800719a:	2300      	movs	r3, #0
 800719c:	e000      	b.n	80071a0 <osKernelRunning+0x14>
  else
    return 1;
 800719e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80071a8:	f7ff ffd7 	bl	800715a <inHandlerMode>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80071b2:	f001 fcc7 	bl	8008b44 <xTaskGetTickCountFromISR>
 80071b6:	4603      	mov	r3, r0
 80071b8:	e002      	b.n	80071c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80071ba:	f001 fcb3 	bl	8008b24 <xTaskGetTickCount>
 80071be:	4603      	mov	r3, r0
  }
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80071c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c6:	b089      	sub	sp, #36	; 0x24
 80071c8:	af04      	add	r7, sp, #16
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d020      	beq.n	8007218 <osThreadCreate+0x54>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01c      	beq.n	8007218 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685c      	ldr	r4, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681d      	ldr	r5, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691e      	ldr	r6, [r3, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff ff9a 	bl	800712a <makeFreeRtosPriority>
 80071f6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007200:	9202      	str	r2, [sp, #8]
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	9100      	str	r1, [sp, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	4632      	mov	r2, r6
 800720a:	4629      	mov	r1, r5
 800720c:	4620      	mov	r0, r4
 800720e:	f001 f9bd 	bl	800858c <xTaskCreateStatic>
 8007212:	4603      	mov	r3, r0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e01c      	b.n	8007252 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685c      	ldr	r4, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007224:	b29e      	uxth	r6, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff ff7c 	bl	800712a <makeFreeRtosPriority>
 8007232:	4602      	mov	r2, r0
 8007234:	f107 030c 	add.w	r3, r7, #12
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	9200      	str	r2, [sp, #0]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	4632      	mov	r2, r6
 8007240:	4629      	mov	r1, r5
 8007242:	4620      	mov	r0, r4
 8007244:	f001 f9fc 	bl	8008640 <xTaskCreate>
 8007248:	4603      	mov	r3, r0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d001      	beq.n	8007252 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	e000      	b.n	8007254 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007252:	68fb      	ldr	r3, [r7, #12]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800725c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <osDelay+0x16>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	e000      	b.n	8007274 <osDelay+0x18>
 8007272:	2301      	movs	r3, #1
 8007274:	4618      	mov	r0, r3
 8007276:	f001 fb19 	bl	80088ac <vTaskDelay>
  
  return osOK;
 800727a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af02      	add	r7, sp, #8
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d010      	beq.n	80072b8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d10b      	bne.n	80072b4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	2303      	movs	r3, #3
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4613      	mov	r3, r2
 80072a6:	2200      	movs	r2, #0
 80072a8:	2100      	movs	r1, #0
 80072aa:	2001      	movs	r0, #1
 80072ac:	f000 faae 	bl	800780c <xQueueGenericCreateStatic>
 80072b0:	4603      	mov	r3, r0
 80072b2:	e016      	b.n	80072e2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	e014      	b.n	80072e2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d110      	bne.n	80072e0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80072be:	2203      	movs	r2, #3
 80072c0:	2100      	movs	r1, #0
 80072c2:	2001      	movs	r0, #1
 80072c4:	f000 fb15 	bl	80078f2 <xQueueGenericCreate>
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <osSemaphoreCreate+0x58>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fb6a 	bl	80079b0 <xQueueGenericSend>
      return sema;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	e000      	b.n	80072e2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80072e0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	e03a      	b.n	800737a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d103      	bne.n	8007318 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007310:	f04f 33ff 	mov.w	r3, #4294967295
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e009      	b.n	800732c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d006      	beq.n	800732c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <osSemaphoreWait+0x40>
      ticks = 1;
 8007328:	2301      	movs	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800732c:	f7ff ff15 	bl	800715a <inHandlerMode>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007336:	f107 0308 	add.w	r3, r7, #8
 800733a:	461a      	mov	r2, r3
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 ff32 	bl	80081a8 <xQueueReceiveFromISR>
 8007344:	4603      	mov	r3, r0
 8007346:	2b01      	cmp	r3, #1
 8007348:	d001      	beq.n	800734e <osSemaphoreWait+0x62>
      return osErrorOS;
 800734a:	23ff      	movs	r3, #255	; 0xff
 800734c:	e015      	b.n	800737a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d011      	beq.n	8007378 <osSemaphoreWait+0x8c>
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <osSemaphoreWait+0x98>)
 8007356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	e008      	b.n	8007378 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fe15 	bl	8007f98 <xQueueSemaphoreTake>
 800736e:	4603      	mov	r3, r0
 8007370:	2b01      	cmp	r3, #1
 8007372:	d001      	beq.n	8007378 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007374:	23ff      	movs	r3, #255	; 0xff
 8007376:	e000      	b.n	800737a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007398:	f7ff fedf 	bl	800715a <inHandlerMode>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d016      	beq.n	80073d0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80073a2:	f107 0308 	add.w	r3, r7, #8
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc8f 	bl	8007ccc <xQueueGiveFromISR>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d001      	beq.n	80073b8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80073b4:	23ff      	movs	r3, #255	; 0xff
 80073b6:	e017      	b.n	80073e8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d013      	beq.n	80073e6 <osSemaphoreRelease+0x5e>
 80073be:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <osSemaphoreRelease+0x68>)
 80073c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	e00a      	b.n	80073e6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80073d0:	2300      	movs	r3, #0
 80073d2:	2200      	movs	r2, #0
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 faea 	bl	80079b0 <xQueueGenericSend>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d001      	beq.n	80073e6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80073e2:	23ff      	movs	r3, #255	; 0xff
 80073e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80073e6:	68fb      	ldr	r3, [r7, #12]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80073fc:	f7ff fead 	bl	800715a <inHandlerMode>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007406:	2382      	movs	r3, #130	; 0x82
 8007408:	e003      	b.n	8007412 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 ff49 	bl	80082a2 <vQueueDelete>

  return osOK; 
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800741a:	b590      	push	{r4, r7, lr}
 800741c:	b085      	sub	sp, #20
 800741e:	af02      	add	r7, sp, #8
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d012      	beq.n	8007452 <osMessageCreate+0x38>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00e      	beq.n	8007452 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6859      	ldr	r1, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68dc      	ldr	r4, [r3, #12]
 8007444:	2300      	movs	r3, #0
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	4623      	mov	r3, r4
 800744a:	f000 f9df 	bl	800780c <xQueueGenericCreateStatic>
 800744e:	4603      	mov	r3, r0
 8007450:	e008      	b.n	8007464 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	4619      	mov	r1, r3
 800745e:	f000 fa48 	bl	80078f2 <xQueueGenericCreate>
 8007462:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}

0800746c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007478:	2300      	movs	r3, #0
 800747a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <osMessagePut+0x1e>
    ticks = 1;
 8007486:	2301      	movs	r3, #1
 8007488:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800748a:	f7ff fe66 	bl	800715a <inHandlerMode>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d018      	beq.n	80074c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007494:	f107 0210 	add.w	r2, r7, #16
 8007498:	f107 0108 	add.w	r1, r7, #8
 800749c:	2300      	movs	r3, #0
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fb80 	bl	8007ba4 <xQueueGenericSendFromISR>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d001      	beq.n	80074ae <osMessagePut+0x42>
      return osErrorOS;
 80074aa:	23ff      	movs	r3, #255	; 0xff
 80074ac:	e018      	b.n	80074e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d014      	beq.n	80074de <osMessagePut+0x72>
 80074b4:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <osMessagePut+0x7c>)
 80074b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	e00b      	b.n	80074de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80074c6:	f107 0108 	add.w	r1, r7, #8
 80074ca:	2300      	movs	r3, #0
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fa6e 	bl	80079b0 <xQueueGenericSend>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d001      	beq.n	80074de <osMessagePut+0x72>
      return osErrorOS;
 80074da:	23ff      	movs	r3, #255	; 0xff
 80074dc:	e000      	b.n	80074e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b08b      	sub	sp, #44	; 0x2c
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007506:	2380      	movs	r3, #128	; 0x80
 8007508:	617b      	str	r3, [r7, #20]
    return event;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	461c      	mov	r4, r3
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800751a:	e054      	b.n	80075c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800751c:	2300      	movs	r3, #0
 800751e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752a:	d103      	bne.n	8007534 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800752c:	f04f 33ff 	mov.w	r3, #4294967295
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
 8007532:	e009      	b.n	8007548 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d006      	beq.n	8007548 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <osMessageGet+0x5c>
      ticks = 1;
 8007544:	2301      	movs	r3, #1
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007548:	f7ff fe07 	bl	800715a <inHandlerMode>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01c      	beq.n	800758c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007552:	f107 0220 	add.w	r2, r7, #32
 8007556:	f107 0314 	add.w	r3, r7, #20
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	68b8      	ldr	r0, [r7, #8]
 8007560:	f000 fe22 	bl	80081a8 <xQueueReceiveFromISR>
 8007564:	4603      	mov	r3, r0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d102      	bne.n	8007570 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800756a:	2310      	movs	r3, #16
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	e001      	b.n	8007574 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01d      	beq.n	80075b6 <osMessageGet+0xca>
 800757a:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <osMessageGet+0xe4>)
 800757c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	e014      	b.n	80075b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800758c:	f107 0314 	add.w	r3, r7, #20
 8007590:	3304      	adds	r3, #4
 8007592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007594:	4619      	mov	r1, r3
 8007596:	68b8      	ldr	r0, [r7, #8]
 8007598:	f000 fc22 	bl	8007de0 <xQueueReceive>
 800759c:	4603      	mov	r3, r0
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d102      	bne.n	80075a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80075a2:	2310      	movs	r3, #16
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e006      	b.n	80075b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <osMessageGet+0xc6>
 80075ae:	2300      	movs	r3, #0
 80075b0:	e000      	b.n	80075b4 <osMessageGet+0xc8>
 80075b2:	2340      	movs	r3, #64	; 0x40
 80075b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	461c      	mov	r4, r3
 80075ba:	f107 0314 	add.w	r3, r7, #20
 80075be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	372c      	adds	r7, #44	; 0x2c
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd90      	pop	{r4, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f103 0208 	add.w	r2, r3, #8
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f04f 32ff 	mov.w	r2, #4294967295
 80075ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f103 0208 	add.w	r2, r3, #8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f103 0208 	add.w	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	601a      	str	r2, [r3, #0]
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d103      	bne.n	8007696 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e00c      	b.n	80076b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3308      	adds	r3, #8
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	e002      	b.n	80076a4 <vListInsert+0x2e>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d2f6      	bcs.n	800769e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	601a      	str	r2, [r3, #0]
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	6892      	ldr	r2, [r2, #8]
 80076fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6852      	ldr	r2, [r2, #4]
 8007708:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d103      	bne.n	800771c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	1e5a      	subs	r2, r3, #1
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	e7fe      	b.n	8007762 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007764:	f002 f84a 	bl	80097fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	68f9      	ldr	r1, [r7, #12]
 8007772:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	441a      	add	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007794:	3b01      	subs	r3, #1
 8007796:	68f9      	ldr	r1, [r7, #12]
 8007798:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	441a      	add	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	22ff      	movs	r2, #255	; 0xff
 80077a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	22ff      	movs	r2, #255	; 0xff
 80077b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d114      	bne.n	80077e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3310      	adds	r3, #16
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 fb04 	bl	8008dd4 <xTaskRemoveFromEventList>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d012      	beq.n	80077f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077d2:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <xQueueGenericReset+0xcc>)
 80077d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	e009      	b.n	80077f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3310      	adds	r3, #16
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7ff fef3 	bl	80075d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3324      	adds	r3, #36	; 0x24
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff feee 	bl	80075d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077f8:	f002 f82e 	bl	8009858 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077fc:	2301      	movs	r3, #1
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08e      	sub	sp, #56	; 0x38
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d109      	bne.n	8007834 <xQueueGenericCreateStatic+0x28>
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
 8007832:	e7fe      	b.n	8007832 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <xQueueGenericCreateStatic+0x42>
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	e7fe      	b.n	800784c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <xQueueGenericCreateStatic+0x4e>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <xQueueGenericCreateStatic+0x52>
 800785a:	2301      	movs	r3, #1
 800785c:	e000      	b.n	8007860 <xQueueGenericCreateStatic+0x54>
 800785e:	2300      	movs	r3, #0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d109      	bne.n	8007878 <xQueueGenericCreateStatic+0x6c>
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	623b      	str	r3, [r7, #32]
 8007876:	e7fe      	b.n	8007876 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <xQueueGenericCreateStatic+0x78>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <xQueueGenericCreateStatic+0x7c>
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <xQueueGenericCreateStatic+0x7e>
 8007888:	2300      	movs	r3, #0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <xQueueGenericCreateStatic+0x96>
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	e7fe      	b.n	80078a0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80078a2:	2348      	movs	r3, #72	; 0x48
 80078a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b48      	cmp	r3, #72	; 0x48
 80078aa:	d009      	beq.n	80078c0 <xQueueGenericCreateStatic+0xb4>
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	61bb      	str	r3, [r7, #24]
 80078be:	e7fe      	b.n	80078be <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00d      	beq.n	80078e8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f844 	bl	8007970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3730      	adds	r7, #48	; 0x30
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b08a      	sub	sp, #40	; 0x28
 80078f6:	af02      	add	r7, sp, #8
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	4613      	mov	r3, r2
 80078fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <xQueueGenericCreate+0x28>
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	e7fe      	b.n	8007918 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d102      	bne.n	8007926 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	e004      	b.n	8007930 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	fb02 f303 	mul.w	r3, r2, r3
 800792e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	3348      	adds	r3, #72	; 0x48
 8007934:	4618      	mov	r0, r3
 8007936:	f002 f87b 	bl	8009a30 <pvPortMalloc>
 800793a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d011      	beq.n	8007966 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	3348      	adds	r3, #72	; 0x48
 800794a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007954:	79fa      	ldrb	r2, [r7, #7]
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	4613      	mov	r3, r2
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f805 	bl	8007970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007966:	69bb      	ldr	r3, [r7, #24]
	}
 8007968:	4618      	mov	r0, r3
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	e002      	b.n	8007992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800799e:	2101      	movs	r1, #1
 80079a0:	69b8      	ldr	r0, [r7, #24]
 80079a2:	f7ff fecb 	bl	800773c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08e      	sub	sp, #56	; 0x38
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079be:	2300      	movs	r3, #0
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d109      	bne.n	80079e0 <xQueueGenericSend+0x30>
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079de:	e7fe      	b.n	80079de <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d103      	bne.n	80079ee <xQueueGenericSend+0x3e>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <xQueueGenericSend+0x42>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e000      	b.n	80079f4 <xQueueGenericSend+0x44>
 80079f2:	2300      	movs	r3, #0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d109      	bne.n	8007a0c <xQueueGenericSend+0x5c>
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
 8007a0a:	e7fe      	b.n	8007a0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d103      	bne.n	8007a1a <xQueueGenericSend+0x6a>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <xQueueGenericSend+0x6e>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <xQueueGenericSend+0x70>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <xQueueGenericSend+0x88>
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	623b      	str	r3, [r7, #32]
 8007a36:	e7fe      	b.n	8007a36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a38:	f001 fb82 	bl	8009140 <xTaskGetSchedulerState>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d102      	bne.n	8007a48 <xQueueGenericSend+0x98>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <xQueueGenericSend+0x9c>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e000      	b.n	8007a4e <xQueueGenericSend+0x9e>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <xQueueGenericSend+0xb6>
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	e7fe      	b.n	8007a64 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a66:	f001 fec9 	bl	80097fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <xQueueGenericSend+0xcc>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d129      	bne.n	8007ad0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a82:	f000 fc48 	bl	8008316 <prvCopyDataToQueue>
 8007a86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d010      	beq.n	8007ab2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	3324      	adds	r3, #36	; 0x24
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 f99d 	bl	8008dd4 <xTaskRemoveFromEventList>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d013      	beq.n	8007ac8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007aa0:	4b3f      	ldr	r3, [pc, #252]	; (8007ba0 <xQueueGenericSend+0x1f0>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	e00a      	b.n	8007ac8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ab8:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <xQueueGenericSend+0x1f0>)
 8007aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ac8:	f001 fec6 	bl	8009858 <vPortExitCritical>
				return pdPASS;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e063      	b.n	8007b98 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ad6:	f001 febf 	bl	8009858 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e05c      	b.n	8007b98 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d106      	bne.n	8007af2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ae4:	f107 0314 	add.w	r3, r7, #20
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f001 f9d5 	bl	8008e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007af2:	f001 feb1 	bl	8009858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007af6:	f000 ff6b 	bl	80089d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007afa:	f001 fe7f 	bl	80097fc <vPortEnterCritical>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b04:	b25b      	sxtb	r3, r3
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	d103      	bne.n	8007b14 <xQueueGenericSend+0x164>
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b1a:	b25b      	sxtb	r3, r3
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d103      	bne.n	8007b2a <xQueueGenericSend+0x17a>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b2a:	f001 fe95 	bl	8009858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b2e:	1d3a      	adds	r2, r7, #4
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f001 f9c4 	bl	8008ec4 <xTaskCheckForTimeOut>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d124      	bne.n	8007b8c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b44:	f000 fcdf 	bl	8008506 <prvIsQueueFull>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d018      	beq.n	8007b80 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	3310      	adds	r3, #16
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 f918 	bl	8008d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b5e:	f000 fc6a 	bl	8008436 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b62:	f000 ff43 	bl	80089ec <xTaskResumeAll>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f47f af7c 	bne.w	8007a66 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <xQueueGenericSend+0x1f0>)
 8007b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	e772      	b.n	8007a66 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b82:	f000 fc58 	bl	8008436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b86:	f000 ff31 	bl	80089ec <xTaskResumeAll>
 8007b8a:	e76c      	b.n	8007a66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b8e:	f000 fc52 	bl	8008436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b92:	f000 ff2b 	bl	80089ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3738      	adds	r7, #56	; 0x38
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08e      	sub	sp, #56	; 0x38
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d109      	bne.n	8007bd0 <xQueueGenericSendFromISR+0x2c>
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bce:	e7fe      	b.n	8007bce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <xQueueGenericSendFromISR+0x3a>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <xQueueGenericSendFromISR+0x3e>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <xQueueGenericSendFromISR+0x40>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <xQueueGenericSendFromISR+0x58>
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	623b      	str	r3, [r7, #32]
 8007bfa:	e7fe      	b.n	8007bfa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d103      	bne.n	8007c0a <xQueueGenericSendFromISR+0x66>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <xQueueGenericSendFromISR+0x6a>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <xQueueGenericSendFromISR+0x6c>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <xQueueGenericSendFromISR+0x84>
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	e7fe      	b.n	8007c26 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c28:	f001 fec4 	bl	80099b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c2c:	f3ef 8211 	mrs	r2, BASEPRI
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	61ba      	str	r2, [r7, #24]
 8007c42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d302      	bcc.n	8007c5a <xQueueGenericSendFromISR+0xb6>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d12c      	bne.n	8007cb4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c6a:	f000 fb54 	bl	8008316 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d112      	bne.n	8007c9e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d016      	beq.n	8007cae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	3324      	adds	r3, #36	; 0x24
 8007c84:	4618      	mov	r0, r3
 8007c86:	f001 f8a5 	bl	8008dd4 <xTaskRemoveFromEventList>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00e      	beq.n	8007cae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	e007      	b.n	8007cae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	b25a      	sxtb	r2, r3
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007cb2:	e001      	b.n	8007cb8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3738      	adds	r7, #56	; 0x38
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08e      	sub	sp, #56	; 0x38
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	623b      	str	r3, [r7, #32]
 8007cf2:	e7fe      	b.n	8007cf2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <xQueueGiveFromISR+0x44>
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	e7fe      	b.n	8007d0e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <xQueueGiveFromISR+0x54>
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <xQueueGiveFromISR+0x58>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e000      	b.n	8007d26 <xQueueGiveFromISR+0x5a>
 8007d24:	2300      	movs	r3, #0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <xQueueGiveFromISR+0x72>
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	e7fe      	b.n	8007d3c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d3e:	f001 fe39 	bl	80099b4 <vPortValidateInterruptPriority>
	__asm volatile
 8007d42:	f3ef 8211 	mrs	r2, BASEPRI
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	617a      	str	r2, [r7, #20]
 8007d58:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007d5a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d22b      	bcs.n	8007dc6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d112      	bne.n	8007db0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d016      	beq.n	8007dc0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	3324      	adds	r3, #36	; 0x24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 f81c 	bl	8008dd4 <xTaskRemoveFromEventList>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00e      	beq.n	8007dc0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2201      	movs	r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e007      	b.n	8007dc0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db4:	3301      	adds	r3, #1
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	b25a      	sxtb	r2, r3
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc4:	e001      	b.n	8007dca <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3738      	adds	r7, #56	; 0x38
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08c      	sub	sp, #48	; 0x30
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <xQueueReceive+0x2e>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	623b      	str	r3, [r7, #32]
 8007e0c:	e7fe      	b.n	8007e0c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d103      	bne.n	8007e1c <xQueueReceive+0x3c>
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <xQueueReceive+0x40>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <xQueueReceive+0x42>
 8007e20:	2300      	movs	r3, #0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <xQueueReceive+0x5a>
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	e7fe      	b.n	8007e38 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e3a:	f001 f981 	bl	8009140 <xTaskGetSchedulerState>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <xQueueReceive+0x6a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <xQueueReceive+0x6e>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <xQueueReceive+0x70>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d109      	bne.n	8007e68 <xQueueReceive+0x88>
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	61bb      	str	r3, [r7, #24]
 8007e66:	e7fe      	b.n	8007e66 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e68:	f001 fcc8 	bl	80097fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01f      	beq.n	8007eb8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7c:	f000 fab5 	bl	80083ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	1e5a      	subs	r2, r3, #1
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00f      	beq.n	8007eb0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	3310      	adds	r3, #16
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 ff9d 	bl	8008dd4 <xTaskRemoveFromEventList>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ea0:	4b3c      	ldr	r3, [pc, #240]	; (8007f94 <xQueueReceive+0x1b4>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007eb0:	f001 fcd2 	bl	8009858 <vPortExitCritical>
				return pdPASS;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e069      	b.n	8007f8c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d103      	bne.n	8007ec6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ebe:	f001 fccb 	bl	8009858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e062      	b.n	8007f8c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d106      	bne.n	8007eda <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ecc:	f107 0310 	add.w	r3, r7, #16
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 ffe1 	bl	8008e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eda:	f001 fcbd 	bl	8009858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ede:	f000 fd77 	bl	80089d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ee2:	f001 fc8b 	bl	80097fc <vPortEnterCritical>
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eec:	b25b      	sxtb	r3, r3
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d103      	bne.n	8007efc <xQueueReceive+0x11c>
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f02:	b25b      	sxtb	r3, r3
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f08:	d103      	bne.n	8007f12 <xQueueReceive+0x132>
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f12:	f001 fca1 	bl	8009858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f16:	1d3a      	adds	r2, r7, #4
 8007f18:	f107 0310 	add.w	r3, r7, #16
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 ffd0 	bl	8008ec4 <xTaskCheckForTimeOut>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d123      	bne.n	8007f72 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f2c:	f000 fad5 	bl	80084da <prvIsQueueEmpty>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d017      	beq.n	8007f66 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	3324      	adds	r3, #36	; 0x24
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 ff24 	bl	8008d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f46:	f000 fa76 	bl	8008436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f4a:	f000 fd4f 	bl	80089ec <xTaskResumeAll>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d189      	bne.n	8007e68 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007f54:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <xQueueReceive+0x1b4>)
 8007f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	e780      	b.n	8007e68 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f68:	f000 fa65 	bl	8008436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f6c:	f000 fd3e 	bl	80089ec <xTaskResumeAll>
 8007f70:	e77a      	b.n	8007e68 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f74:	f000 fa5f 	bl	8008436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f78:	f000 fd38 	bl	80089ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7e:	f000 faac 	bl	80084da <prvIsQueueEmpty>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f43f af6f 	beq.w	8007e68 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f8a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3730      	adds	r7, #48	; 0x30
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08e      	sub	sp, #56	; 0x38
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d109      	bne.n	8007fc8 <xQueueSemaphoreTake+0x30>
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	623b      	str	r3, [r7, #32]
 8007fc6:	e7fe      	b.n	8007fc6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d009      	beq.n	8007fe4 <xQueueSemaphoreTake+0x4c>
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	e7fe      	b.n	8007fe2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fe4:	f001 f8ac 	bl	8009140 <xTaskGetSchedulerState>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <xQueueSemaphoreTake+0x5c>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <xQueueSemaphoreTake+0x60>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <xQueueSemaphoreTake+0x62>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d109      	bne.n	8008012 <xQueueSemaphoreTake+0x7a>
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	e7fe      	b.n	8008010 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008012:	f001 fbf3 	bl	80097fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d024      	beq.n	800806c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	1e5a      	subs	r2, r3, #1
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d104      	bne.n	800803c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008032:	f001 fa3f 	bl	80094b4 <pvTaskIncrementMutexHeldCount>
 8008036:	4602      	mov	r2, r0
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00f      	beq.n	8008064 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	3310      	adds	r3, #16
 8008048:	4618      	mov	r0, r3
 800804a:	f000 fec3 	bl	8008dd4 <xTaskRemoveFromEventList>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008054:	4b53      	ldr	r3, [pc, #332]	; (80081a4 <xQueueSemaphoreTake+0x20c>)
 8008056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008064:	f001 fbf8 	bl	8009858 <vPortExitCritical>
				return pdPASS;
 8008068:	2301      	movs	r3, #1
 800806a:	e096      	b.n	800819a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d110      	bne.n	8008094 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <xQueueSemaphoreTake+0xf4>
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	e7fe      	b.n	800808a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800808c:	f001 fbe4 	bl	8009858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008090:	2300      	movs	r3, #0
 8008092:	e082      	b.n	800819a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800809a:	f107 030c 	add.w	r3, r7, #12
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fefa 	bl	8008e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080a8:	f001 fbd6 	bl	8009858 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ac:	f000 fc90 	bl	80089d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080b0:	f001 fba4 	bl	80097fc <vPortEnterCritical>
 80080b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ba:	b25b      	sxtb	r3, r3
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c0:	d103      	bne.n	80080ca <xQueueSemaphoreTake+0x132>
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d6:	d103      	bne.n	80080e0 <xQueueSemaphoreTake+0x148>
 80080d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080e0:	f001 fbba 	bl	8009858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080e4:	463a      	mov	r2, r7
 80080e6:	f107 030c 	add.w	r3, r7, #12
 80080ea:	4611      	mov	r1, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fee9 	bl	8008ec4 <xTaskCheckForTimeOut>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d132      	bne.n	800815e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080fa:	f000 f9ee 	bl	80084da <prvIsQueueEmpty>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d026      	beq.n	8008152 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d109      	bne.n	8008120 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800810c:	f001 fb76 	bl	80097fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f001 f831 	bl	800917c <xTaskPriorityInherit>
 800811a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800811c:	f001 fb9c 	bl	8009858 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	3324      	adds	r3, #36	; 0x24
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	4611      	mov	r1, r2
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fe2f 	bl	8008d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800812e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008130:	f000 f981 	bl	8008436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008134:	f000 fc5a 	bl	80089ec <xTaskResumeAll>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	f47f af69 	bne.w	8008012 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008140:	4b18      	ldr	r3, [pc, #96]	; (80081a4 <xQueueSemaphoreTake+0x20c>)
 8008142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	e75f      	b.n	8008012 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008154:	f000 f96f 	bl	8008436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008158:	f000 fc48 	bl	80089ec <xTaskResumeAll>
 800815c:	e759      	b.n	8008012 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800815e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008160:	f000 f969 	bl	8008436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008164:	f000 fc42 	bl	80089ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800816a:	f000 f9b6 	bl	80084da <prvIsQueueEmpty>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	f43f af4e 	beq.w	8008012 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00d      	beq.n	8008198 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800817c:	f001 fb3e 	bl	80097fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008182:	f000 f8b0 	bl	80082e6 <prvGetDisinheritPriorityAfterTimeout>
 8008186:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800818e:	4618      	mov	r0, r3
 8008190:	f001 f8f8 	bl	8009384 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008194:	f001 fb60 	bl	8009858 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008198:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800819a:	4618      	mov	r0, r3
 800819c:	3738      	adds	r7, #56	; 0x38
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08e      	sub	sp, #56	; 0x38
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d109      	bne.n	80081d2 <xQueueReceiveFromISR+0x2a>
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	623b      	str	r3, [r7, #32]
 80081d0:	e7fe      	b.n	80081d0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d103      	bne.n	80081e0 <xQueueReceiveFromISR+0x38>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <xQueueReceiveFromISR+0x3c>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e000      	b.n	80081e6 <xQueueReceiveFromISR+0x3e>
 80081e4:	2300      	movs	r3, #0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d109      	bne.n	80081fe <xQueueReceiveFromISR+0x56>
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	61fb      	str	r3, [r7, #28]
 80081fc:	e7fe      	b.n	80081fc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081fe:	f001 fbd9 	bl	80099b4 <vPortValidateInterruptPriority>
	__asm volatile
 8008202:	f3ef 8211 	mrs	r2, BASEPRI
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	61ba      	str	r2, [r7, #24]
 8008218:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800821a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800821c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d02f      	beq.n	800828a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008238:	f000 f8d7 	bl	80083ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	1e5a      	subs	r2, r3, #1
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d112      	bne.n	8008274 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d016      	beq.n	8008284 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	3310      	adds	r3, #16
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fdba 	bl	8008dd4 <xTaskRemoveFromEventList>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00e      	beq.n	8008284 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	e007      	b.n	8008284 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008278:	3301      	adds	r3, #1
 800827a:	b2db      	uxtb	r3, r3
 800827c:	b25a      	sxtb	r2, r3
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008284:	2301      	movs	r3, #1
 8008286:	637b      	str	r3, [r7, #52]	; 0x34
 8008288:	e001      	b.n	800828e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800828a:	2300      	movs	r3, #0
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800829a:	4618      	mov	r0, r3
 800829c:	3738      	adds	r7, #56	; 0x38
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d109      	bne.n	80082c8 <vQueueDelete+0x26>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	60bb      	str	r3, [r7, #8]
 80082c6:	e7fe      	b.n	80082c6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f935 	bl	8008538 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f001 fc6b 	bl	8009bb4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d006      	beq.n	8008304 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f1c3 0307 	rsb	r3, r3, #7
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e001      	b.n	8008308 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008308:	68fb      	ldr	r3, [r7, #12]
	}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b086      	sub	sp, #24
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10d      	bne.n	8008350 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d14d      	bne.n	80083d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	4618      	mov	r0, r3
 8008342:	f000 ff9b 	bl	800927c <xTaskPriorityDisinherit>
 8008346:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	609a      	str	r2, [r3, #8]
 800834e:	e043      	b.n	80083d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d119      	bne.n	800838a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6858      	ldr	r0, [r3, #4]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	461a      	mov	r2, r3
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	f001 fd5f 	bl	8009e24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	441a      	add	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	429a      	cmp	r2, r3
 800837e:	d32b      	bcc.n	80083d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	e026      	b.n	80083d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	68d8      	ldr	r0, [r3, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	461a      	mov	r2, r3
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	f001 fd45 	bl	8009e24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	425b      	negs	r3, r3
 80083a4:	441a      	add	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d207      	bcs.n	80083c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	425b      	negs	r3, r3
 80083c0:	441a      	add	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d105      	bne.n	80083d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083e0:	697b      	ldr	r3, [r7, #20]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d018      	beq.n	800842e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	441a      	add	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	429a      	cmp	r2, r3
 8008414:	d303      	bcc.n	800841e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68d9      	ldr	r1, [r3, #12]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	461a      	mov	r2, r3
 8008428:	6838      	ldr	r0, [r7, #0]
 800842a:	f001 fcfb 	bl	8009e24 <memcpy>
	}
}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800843e:	f001 f9dd 	bl	80097fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008448:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800844a:	e011      	b.n	8008470 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d012      	beq.n	800847a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3324      	adds	r3, #36	; 0x24
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fcbb 	bl	8008dd4 <xTaskRemoveFromEventList>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008464:	f000 fd8e 	bl	8008f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	3b01      	subs	r3, #1
 800846c:	b2db      	uxtb	r3, r3
 800846e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008474:	2b00      	cmp	r3, #0
 8008476:	dce9      	bgt.n	800844c <prvUnlockQueue+0x16>
 8008478:	e000      	b.n	800847c <prvUnlockQueue+0x46>
					break;
 800847a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	22ff      	movs	r2, #255	; 0xff
 8008480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008484:	f001 f9e8 	bl	8009858 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008488:	f001 f9b8 	bl	80097fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008492:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008494:	e011      	b.n	80084ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d012      	beq.n	80084c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3310      	adds	r3, #16
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fc96 	bl	8008dd4 <xTaskRemoveFromEventList>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084ae:	f000 fd69 	bl	8008f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	dce9      	bgt.n	8008496 <prvUnlockQueue+0x60>
 80084c2:	e000      	b.n	80084c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	22ff      	movs	r2, #255	; 0xff
 80084ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80084ce:	f001 f9c3 	bl	8009858 <vPortExitCritical>
}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084e2:	f001 f98b 	bl	80097fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084ee:	2301      	movs	r3, #1
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	e001      	b.n	80084f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084f8:	f001 f9ae 	bl	8009858 <vPortExitCritical>

	return xReturn;
 80084fc:	68fb      	ldr	r3, [r7, #12]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800850e:	f001 f975 	bl	80097fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	429a      	cmp	r2, r3
 800851c:	d102      	bne.n	8008524 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800851e:	2301      	movs	r3, #1
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e001      	b.n	8008528 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008528:	f001 f996 	bl	8009858 <vPortExitCritical>

	return xReturn;
 800852c:	68fb      	ldr	r3, [r7, #12]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e016      	b.n	8008574 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008546:	4a10      	ldr	r2, [pc, #64]	; (8008588 <vQueueUnregisterQueue+0x50>)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4413      	add	r3, r2
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d10b      	bne.n	800856e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008556:	4a0c      	ldr	r2, [pc, #48]	; (8008588 <vQueueUnregisterQueue+0x50>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2100      	movs	r1, #0
 800855c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008560:	4a09      	ldr	r2, [pc, #36]	; (8008588 <vQueueUnregisterQueue+0x50>)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	4413      	add	r3, r2
 8008568:	2200      	movs	r2, #0
 800856a:	605a      	str	r2, [r3, #4]
				break;
 800856c:	e005      	b.n	800857a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b07      	cmp	r3, #7
 8008578:	d9e5      	bls.n	8008546 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20004d2c 	.word	0x20004d2c

0800858c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af04      	add	r7, sp, #16
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800859a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	d109      	bne.n	80085b4 <xTaskCreateStatic+0x28>
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	623b      	str	r3, [r7, #32]
 80085b2:	e7fe      	b.n	80085b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <xTaskCreateStatic+0x42>
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	e7fe      	b.n	80085cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085ce:	2354      	movs	r3, #84	; 0x54
 80085d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b54      	cmp	r3, #84	; 0x54
 80085d6:	d009      	beq.n	80085ec <xTaskCreateStatic+0x60>
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e7fe      	b.n	80085ea <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01e      	beq.n	8008632 <xTaskCreateStatic+0xa6>
 80085f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d01b      	beq.n	8008632 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008602:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	2202      	movs	r2, #2
 8008608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800860c:	2300      	movs	r3, #0
 800860e:	9303      	str	r3, [sp, #12]
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	f107 0314 	add.w	r3, r7, #20
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f850 	bl	80086ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800862a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800862c:	f000 f8d4 	bl	80087d8 <prvAddNewTaskToReadyList>
 8008630:	e001      	b.n	8008636 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008636:	697b      	ldr	r3, [r7, #20]
	}
 8008638:	4618      	mov	r0, r3
 800863a:	3728      	adds	r7, #40	; 0x28
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08c      	sub	sp, #48	; 0x30
 8008644:	af04      	add	r7, sp, #16
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4618      	mov	r0, r3
 8008656:	f001 f9eb 	bl	8009a30 <pvPortMalloc>
 800865a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00e      	beq.n	8008680 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008662:	2054      	movs	r0, #84	; 0x54
 8008664:	f001 f9e4 	bl	8009a30 <pvPortMalloc>
 8008668:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	631a      	str	r2, [r3, #48]	; 0x30
 8008676:	e005      	b.n	8008684 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008678:	6978      	ldr	r0, [r7, #20]
 800867a:	f001 fa9b 	bl	8009bb4 <vPortFree>
 800867e:	e001      	b.n	8008684 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d017      	beq.n	80086ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008692:	88fa      	ldrh	r2, [r7, #6]
 8008694:	2300      	movs	r3, #0
 8008696:	9303      	str	r3, [sp, #12]
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	9302      	str	r3, [sp, #8]
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 f80e 	bl	80086ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086ae:	69f8      	ldr	r0, [r7, #28]
 80086b0:	f000 f892 	bl	80087d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086b4:	2301      	movs	r3, #1
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	e002      	b.n	80086c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086ba:	f04f 33ff 	mov.w	r3, #4294967295
 80086be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086c0:	69bb      	ldr	r3, [r7, #24]
	}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3720      	adds	r7, #32
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b088      	sub	sp, #32
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086e2:	3b01      	subs	r3, #1
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	f023 0307 	bic.w	r3, r3, #7
 80086f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	f003 0307 	and.w	r3, r3, #7
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <prvInitialiseNewTask+0x46>
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	e7fe      	b.n	800870e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d01f      	beq.n	8008756 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	e012      	b.n	8008742 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	7819      	ldrb	r1, [r3, #0]
 8008724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	4413      	add	r3, r2
 800872a:	3334      	adds	r3, #52	; 0x34
 800872c:	460a      	mov	r2, r1
 800872e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	4413      	add	r3, r2
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d006      	beq.n	800874a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	3301      	adds	r3, #1
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	2b0f      	cmp	r3, #15
 8008746:	d9e9      	bls.n	800871c <prvInitialiseNewTask+0x52>
 8008748:	e000      	b.n	800874c <prvInitialiseNewTask+0x82>
			{
				break;
 800874a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008754:	e003      	b.n	800875e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	2b06      	cmp	r3, #6
 8008762:	d901      	bls.n	8008768 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008764:	2306      	movs	r3, #6
 8008766:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800876c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008772:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	2200      	movs	r2, #0
 8008778:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	3304      	adds	r3, #4
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe ff48 	bl	8007614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	3318      	adds	r3, #24
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe ff43 	bl	8007614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008792:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f1c3 0207 	rsb	r2, r3, #7
 800879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	2200      	movs	r2, #0
 80087a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	68f9      	ldr	r1, [r7, #12]
 80087b6:	69b8      	ldr	r0, [r7, #24]
 80087b8:	f000 fef6 	bl	80095a8 <pxPortInitialiseStack>
 80087bc:	4602      	mov	r2, r0
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ce:	bf00      	nop
 80087d0:	3720      	adds	r7, #32
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087e0:	f001 f80c 	bl	80097fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087e4:	4b2a      	ldr	r3, [pc, #168]	; (8008890 <prvAddNewTaskToReadyList+0xb8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	4a29      	ldr	r2, [pc, #164]	; (8008890 <prvAddNewTaskToReadyList+0xb8>)
 80087ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087ee:	4b29      	ldr	r3, [pc, #164]	; (8008894 <prvAddNewTaskToReadyList+0xbc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087f6:	4a27      	ldr	r2, [pc, #156]	; (8008894 <prvAddNewTaskToReadyList+0xbc>)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087fc:	4b24      	ldr	r3, [pc, #144]	; (8008890 <prvAddNewTaskToReadyList+0xb8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d110      	bne.n	8008826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008804:	f000 fbe2 	bl	8008fcc <prvInitialiseTaskLists>
 8008808:	e00d      	b.n	8008826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800880a:	4b23      	ldr	r3, [pc, #140]	; (8008898 <prvAddNewTaskToReadyList+0xc0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d109      	bne.n	8008826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008812:	4b20      	ldr	r3, [pc, #128]	; (8008894 <prvAddNewTaskToReadyList+0xbc>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	429a      	cmp	r2, r3
 800881e:	d802      	bhi.n	8008826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008820:	4a1c      	ldr	r2, [pc, #112]	; (8008894 <prvAddNewTaskToReadyList+0xbc>)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008826:	4b1d      	ldr	r3, [pc, #116]	; (800889c <prvAddNewTaskToReadyList+0xc4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3301      	adds	r3, #1
 800882c:	4a1b      	ldr	r2, [pc, #108]	; (800889c <prvAddNewTaskToReadyList+0xc4>)
 800882e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	2201      	movs	r2, #1
 8008836:	409a      	lsls	r2, r3
 8008838:	4b19      	ldr	r3, [pc, #100]	; (80088a0 <prvAddNewTaskToReadyList+0xc8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4313      	orrs	r3, r2
 800883e:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <prvAddNewTaskToReadyList+0xc8>)
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <prvAddNewTaskToReadyList+0xcc>)
 8008850:	441a      	add	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3304      	adds	r3, #4
 8008856:	4619      	mov	r1, r3
 8008858:	4610      	mov	r0, r2
 800885a:	f7fe fee8 	bl	800762e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800885e:	f000 fffb 	bl	8009858 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <prvAddNewTaskToReadyList+0xc0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00e      	beq.n	8008888 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800886a:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <prvAddNewTaskToReadyList+0xbc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	429a      	cmp	r2, r3
 8008876:	d207      	bcs.n	8008888 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008878:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <prvAddNewTaskToReadyList+0xd0>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	200005b8 	.word	0x200005b8
 8008894:	200004b8 	.word	0x200004b8
 8008898:	200005c4 	.word	0x200005c4
 800889c:	200005d4 	.word	0x200005d4
 80088a0:	200005c0 	.word	0x200005c0
 80088a4:	200004bc 	.word	0x200004bc
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d016      	beq.n	80088ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088be:	4b13      	ldr	r3, [pc, #76]	; (800890c <vTaskDelay+0x60>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <vTaskDelay+0x2e>
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	60bb      	str	r3, [r7, #8]
 80088d8:	e7fe      	b.n	80088d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80088da:	f000 f879 	bl	80089d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088de:	2100      	movs	r1, #0
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fdfb 	bl	80094dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088e6:	f000 f881 	bl	80089ec <xTaskResumeAll>
 80088ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d107      	bne.n	8008902 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80088f2:	4b07      	ldr	r3, [pc, #28]	; (8008910 <vTaskDelay+0x64>)
 80088f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008902:	bf00      	nop
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	200005e0 	.word	0x200005e0
 8008910:	e000ed04 	.word	0xe000ed04

08008914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	; 0x28
 8008918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008922:	463a      	mov	r2, r7
 8008924:	1d39      	adds	r1, r7, #4
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	4618      	mov	r0, r3
 800892c:	f7f7 fdd0 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	9202      	str	r2, [sp, #8]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	2300      	movs	r3, #0
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	460a      	mov	r2, r1
 8008942:	491d      	ldr	r1, [pc, #116]	; (80089b8 <vTaskStartScheduler+0xa4>)
 8008944:	481d      	ldr	r0, [pc, #116]	; (80089bc <vTaskStartScheduler+0xa8>)
 8008946:	f7ff fe21 	bl	800858c <xTaskCreateStatic>
 800894a:	4602      	mov	r2, r0
 800894c:	4b1c      	ldr	r3, [pc, #112]	; (80089c0 <vTaskStartScheduler+0xac>)
 800894e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008950:	4b1b      	ldr	r3, [pc, #108]	; (80089c0 <vTaskStartScheduler+0xac>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008958:	2301      	movs	r3, #1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e001      	b.n	8008962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d115      	bne.n	8008994 <vTaskStartScheduler+0x80>
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800897a:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <vTaskStartScheduler+0xb0>)
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008982:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <vTaskStartScheduler+0xb4>)
 8008984:	2201      	movs	r2, #1
 8008986:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008988:	4b10      	ldr	r3, [pc, #64]	; (80089cc <vTaskStartScheduler+0xb8>)
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800898e:	f000 fe97 	bl	80096c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008992:	e00d      	b.n	80089b0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899a:	d109      	bne.n	80089b0 <vTaskStartScheduler+0x9c>
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	e7fe      	b.n	80089ae <vTaskStartScheduler+0x9a>
}
 80089b0:	bf00      	nop
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	08009f0c 	.word	0x08009f0c
 80089bc:	08008f9d 	.word	0x08008f9d
 80089c0:	200005dc 	.word	0x200005dc
 80089c4:	200005d8 	.word	0x200005d8
 80089c8:	200005c4 	.word	0x200005c4
 80089cc:	200005bc 	.word	0x200005bc

080089d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089d0:	b480      	push	{r7}
 80089d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <vTaskSuspendAll+0x18>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	4a03      	ldr	r2, [pc, #12]	; (80089e8 <vTaskSuspendAll+0x18>)
 80089dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80089de:	bf00      	nop
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	200005e0 	.word	0x200005e0

080089ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089f6:	2300      	movs	r3, #0
 80089f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089fa:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <xTaskResumeAll+0x114>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <xTaskResumeAll+0x2a>
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	e7fe      	b.n	8008a14 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a16:	f000 fef1 	bl	80097fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a1a:	4b39      	ldr	r3, [pc, #228]	; (8008b00 <xTaskResumeAll+0x114>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	4a37      	ldr	r2, [pc, #220]	; (8008b00 <xTaskResumeAll+0x114>)
 8008a22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a24:	4b36      	ldr	r3, [pc, #216]	; (8008b00 <xTaskResumeAll+0x114>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d161      	bne.n	8008af0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a2c:	4b35      	ldr	r3, [pc, #212]	; (8008b04 <xTaskResumeAll+0x118>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d05d      	beq.n	8008af0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a34:	e02e      	b.n	8008a94 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a36:	4b34      	ldr	r3, [pc, #208]	; (8008b08 <xTaskResumeAll+0x11c>)
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3318      	adds	r3, #24
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe fe50 	bl	80076e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fe fe4b 	bl	80076e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a56:	2201      	movs	r2, #1
 8008a58:	409a      	lsls	r2, r3
 8008a5a:	4b2c      	ldr	r3, [pc, #176]	; (8008b0c <xTaskResumeAll+0x120>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	4a2a      	ldr	r2, [pc, #168]	; (8008b0c <xTaskResumeAll+0x120>)
 8008a62:	6013      	str	r3, [r2, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4a27      	ldr	r2, [pc, #156]	; (8008b10 <xTaskResumeAll+0x124>)
 8008a72:	441a      	add	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3304      	adds	r3, #4
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	f7fe fdd7 	bl	800762e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a84:	4b23      	ldr	r3, [pc, #140]	; (8008b14 <xTaskResumeAll+0x128>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d302      	bcc.n	8008a94 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008a8e:	4b22      	ldr	r3, [pc, #136]	; (8008b18 <xTaskResumeAll+0x12c>)
 8008a90:	2201      	movs	r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a94:	4b1c      	ldr	r3, [pc, #112]	; (8008b08 <xTaskResumeAll+0x11c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1cc      	bne.n	8008a36 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008aa2:	f000 fb2d 	bl	8009100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008aa6:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <xTaskResumeAll+0x130>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d010      	beq.n	8008ad4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ab2:	f000 f859 	bl	8008b68 <xTaskIncrementTick>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008abc:	4b16      	ldr	r3, [pc, #88]	; (8008b18 <xTaskResumeAll+0x12c>)
 8008abe:	2201      	movs	r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f1      	bne.n	8008ab2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008ace:	4b13      	ldr	r3, [pc, #76]	; (8008b1c <xTaskResumeAll+0x130>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ad4:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <xTaskResumeAll+0x12c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d009      	beq.n	8008af0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ae0:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <xTaskResumeAll+0x134>)
 8008ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008af0:	f000 feb2 	bl	8009858 <vPortExitCritical>

	return xAlreadyYielded;
 8008af4:	68bb      	ldr	r3, [r7, #8]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	200005e0 	.word	0x200005e0
 8008b04:	200005b8 	.word	0x200005b8
 8008b08:	20000578 	.word	0x20000578
 8008b0c:	200005c0 	.word	0x200005c0
 8008b10:	200004bc 	.word	0x200004bc
 8008b14:	200004b8 	.word	0x200004b8
 8008b18:	200005cc 	.word	0x200005cc
 8008b1c:	200005c8 	.word	0x200005c8
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <xTaskGetTickCount+0x1c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b30:	687b      	ldr	r3, [r7, #4]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	200005bc 	.word	0x200005bc

08008b44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b4a:	f000 ff33 	bl	80099b4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008b52:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <xTaskGetTickCountFromISR+0x20>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b58:	683b      	ldr	r3, [r7, #0]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	200005bc 	.word	0x200005bc

08008b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b72:	4b4e      	ldr	r3, [pc, #312]	; (8008cac <xTaskIncrementTick+0x144>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f040 8087 	bne.w	8008c8a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b7c:	4b4c      	ldr	r3, [pc, #304]	; (8008cb0 <xTaskIncrementTick+0x148>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3301      	adds	r3, #1
 8008b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b84:	4a4a      	ldr	r2, [pc, #296]	; (8008cb0 <xTaskIncrementTick+0x148>)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d11f      	bne.n	8008bd0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b90:	4b48      	ldr	r3, [pc, #288]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d009      	beq.n	8008bae <xTaskIncrementTick+0x46>
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	e7fe      	b.n	8008bac <xTaskIncrementTick+0x44>
 8008bae:	4b41      	ldr	r3, [pc, #260]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	4b40      	ldr	r3, [pc, #256]	; (8008cb8 <xTaskIncrementTick+0x150>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a3e      	ldr	r2, [pc, #248]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	4a3e      	ldr	r2, [pc, #248]	; (8008cb8 <xTaskIncrementTick+0x150>)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6013      	str	r3, [r2, #0]
 8008bc2:	4b3e      	ldr	r3, [pc, #248]	; (8008cbc <xTaskIncrementTick+0x154>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a3c      	ldr	r2, [pc, #240]	; (8008cbc <xTaskIncrementTick+0x154>)
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	f000 fa98 	bl	8009100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bd0:	4b3b      	ldr	r3, [pc, #236]	; (8008cc0 <xTaskIncrementTick+0x158>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d348      	bcc.n	8008c6c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bda:	4b36      	ldr	r3, [pc, #216]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be4:	4b36      	ldr	r3, [pc, #216]	; (8008cc0 <xTaskIncrementTick+0x158>)
 8008be6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bea:	601a      	str	r2, [r3, #0]
					break;
 8008bec:	e03e      	b.n	8008c6c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bee:	4b31      	ldr	r3, [pc, #196]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d203      	bcs.n	8008c0e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c06:	4a2e      	ldr	r2, [pc, #184]	; (8008cc0 <xTaskIncrementTick+0x158>)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c0c:	e02e      	b.n	8008c6c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fd68 	bl	80076e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d004      	beq.n	8008c2a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	3318      	adds	r3, #24
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fe fd5f 	bl	80076e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	2201      	movs	r2, #1
 8008c30:	409a      	lsls	r2, r3
 8008c32:	4b24      	ldr	r3, [pc, #144]	; (8008cc4 <xTaskIncrementTick+0x15c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	4a22      	ldr	r2, [pc, #136]	; (8008cc4 <xTaskIncrementTick+0x15c>)
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4a1f      	ldr	r2, [pc, #124]	; (8008cc8 <xTaskIncrementTick+0x160>)
 8008c4a:	441a      	add	r2, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7fe fceb 	bl	800762e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5c:	4b1b      	ldr	r3, [pc, #108]	; (8008ccc <xTaskIncrementTick+0x164>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d3b9      	bcc.n	8008bda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008c66:	2301      	movs	r3, #1
 8008c68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c6a:	e7b6      	b.n	8008bda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c6c:	4b17      	ldr	r3, [pc, #92]	; (8008ccc <xTaskIncrementTick+0x164>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c72:	4915      	ldr	r1, [pc, #84]	; (8008cc8 <xTaskIncrementTick+0x160>)
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d907      	bls.n	8008c94 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e004      	b.n	8008c94 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008c8a:	4b11      	ldr	r3, [pc, #68]	; (8008cd0 <xTaskIncrementTick+0x168>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	4a0f      	ldr	r2, [pc, #60]	; (8008cd0 <xTaskIncrementTick+0x168>)
 8008c92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008c94:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <xTaskIncrementTick+0x16c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008ca0:	697b      	ldr	r3, [r7, #20]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	200005e0 	.word	0x200005e0
 8008cb0:	200005bc 	.word	0x200005bc
 8008cb4:	20000570 	.word	0x20000570
 8008cb8:	20000574 	.word	0x20000574
 8008cbc:	200005d0 	.word	0x200005d0
 8008cc0:	200005d8 	.word	0x200005d8
 8008cc4:	200005c0 	.word	0x200005c0
 8008cc8:	200004bc 	.word	0x200004bc
 8008ccc:	200004b8 	.word	0x200004b8
 8008cd0:	200005c8 	.word	0x200005c8
 8008cd4:	200005cc 	.word	0x200005cc

08008cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cde:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <vTaskSwitchContext+0xa0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ce6:	4b25      	ldr	r3, [pc, #148]	; (8008d7c <vTaskSwitchContext+0xa4>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cec:	e03e      	b.n	8008d6c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008cee:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <vTaskSwitchContext+0xa4>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf4:	4b22      	ldr	r3, [pc, #136]	; (8008d80 <vTaskSwitchContext+0xa8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	fab3 f383 	clz	r3, r3
 8008d00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d02:	7afb      	ldrb	r3, [r7, #11]
 8008d04:	f1c3 031f 	rsb	r3, r3, #31
 8008d08:	617b      	str	r3, [r7, #20]
 8008d0a:	491e      	ldr	r1, [pc, #120]	; (8008d84 <vTaskSwitchContext+0xac>)
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d109      	bne.n	8008d32 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	607b      	str	r3, [r7, #4]
 8008d30:	e7fe      	b.n	8008d30 <vTaskSwitchContext+0x58>
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a11      	ldr	r2, [pc, #68]	; (8008d84 <vTaskSwitchContext+0xac>)
 8008d3e:	4413      	add	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	605a      	str	r2, [r3, #4]
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	3308      	adds	r3, #8
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d104      	bne.n	8008d62 <vTaskSwitchContext+0x8a>
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	4a07      	ldr	r2, [pc, #28]	; (8008d88 <vTaskSwitchContext+0xb0>)
 8008d6a:	6013      	str	r3, [r2, #0]
}
 8008d6c:	bf00      	nop
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	200005e0 	.word	0x200005e0
 8008d7c:	200005cc 	.word	0x200005cc
 8008d80:	200005c0 	.word	0x200005c0
 8008d84:	200004bc 	.word	0x200004bc
 8008d88:	200004b8 	.word	0x200004b8

08008d8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d109      	bne.n	8008db0 <vTaskPlaceOnEventList+0x24>
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	60fb      	str	r3, [r7, #12]
 8008dae:	e7fe      	b.n	8008dae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <vTaskPlaceOnEventList+0x44>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3318      	adds	r3, #24
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7fe fc5c 	bl	8007676 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	6838      	ldr	r0, [r7, #0]
 8008dc2:	f000 fb8b 	bl	80094dc <prvAddCurrentTaskToDelayedList>
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	200004b8 	.word	0x200004b8

08008dd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d109      	bne.n	8008dfe <xTaskRemoveFromEventList+0x2a>
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	e7fe      	b.n	8008dfc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3318      	adds	r3, #24
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe fc70 	bl	80076e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e08:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <xTaskRemoveFromEventList+0xac>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d11c      	bne.n	8008e4a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fc67 	bl	80076e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	2201      	movs	r2, #1
 8008e20:	409a      	lsls	r2, r3
 8008e22:	4b18      	ldr	r3, [pc, #96]	; (8008e84 <xTaskRemoveFromEventList+0xb0>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	4a16      	ldr	r2, [pc, #88]	; (8008e84 <xTaskRemoveFromEventList+0xb0>)
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4a13      	ldr	r2, [pc, #76]	; (8008e88 <xTaskRemoveFromEventList+0xb4>)
 8008e3a:	441a      	add	r2, r3
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f7fe fbf3 	bl	800762e <vListInsertEnd>
 8008e48:	e005      	b.n	8008e56 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	4619      	mov	r1, r3
 8008e50:	480e      	ldr	r0, [pc, #56]	; (8008e8c <xTaskRemoveFromEventList+0xb8>)
 8008e52:	f7fe fbec 	bl	800762e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <xTaskRemoveFromEventList+0xbc>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d905      	bls.n	8008e70 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <xTaskRemoveFromEventList+0xc0>)
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e001      	b.n	8008e74 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e74:	697b      	ldr	r3, [r7, #20]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	200005e0 	.word	0x200005e0
 8008e84:	200005c0 	.word	0x200005c0
 8008e88:	200004bc 	.word	0x200004bc
 8008e8c:	20000578 	.word	0x20000578
 8008e90:	200004b8 	.word	0x200004b8
 8008e94:	200005cc 	.word	0x200005cc

08008e98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ea0:	4b06      	ldr	r3, [pc, #24]	; (8008ebc <vTaskInternalSetTimeOutState+0x24>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ea8:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <vTaskInternalSetTimeOutState+0x28>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	605a      	str	r2, [r3, #4]
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	200005d0 	.word	0x200005d0
 8008ec0:	200005bc 	.word	0x200005bc

08008ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d109      	bne.n	8008ee8 <xTaskCheckForTimeOut+0x24>
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	613b      	str	r3, [r7, #16]
 8008ee6:	e7fe      	b.n	8008ee6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d109      	bne.n	8008f02 <xTaskCheckForTimeOut+0x3e>
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	e7fe      	b.n	8008f00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008f02:	f000 fc7b 	bl	80097fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f06:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <xTaskCheckForTimeOut+0xb8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d102      	bne.n	8008f26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	e023      	b.n	8008f6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <xTaskCheckForTimeOut+0xbc>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d007      	beq.n	8008f42 <xTaskCheckForTimeOut+0x7e>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d302      	bcc.n	8008f42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e015      	b.n	8008f6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d20b      	bcs.n	8008f64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	1ad2      	subs	r2, r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff ff9d 	bl	8008e98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	e004      	b.n	8008f6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f6e:	f000 fc73 	bl	8009858 <vPortExitCritical>

	return xReturn;
 8008f72:	69fb      	ldr	r3, [r7, #28]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3720      	adds	r7, #32
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200005bc 	.word	0x200005bc
 8008f80:	200005d0 	.word	0x200005d0

08008f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f88:	4b03      	ldr	r3, [pc, #12]	; (8008f98 <vTaskMissedYield+0x14>)
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	601a      	str	r2, [r3, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	200005cc 	.word	0x200005cc

08008f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fa4:	f000 f852 	bl	800904c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fa8:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <prvIdleTask+0x28>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d9f9      	bls.n	8008fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fb0:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <prvIdleTask+0x2c>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fc0:	e7f0      	b.n	8008fa4 <prvIdleTask+0x8>
 8008fc2:	bf00      	nop
 8008fc4:	200004bc 	.word	0x200004bc
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	607b      	str	r3, [r7, #4]
 8008fd6:	e00c      	b.n	8008ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4a12      	ldr	r2, [pc, #72]	; (800902c <prvInitialiseTaskLists+0x60>)
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe faf4 	bl	80075d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	607b      	str	r3, [r7, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b06      	cmp	r3, #6
 8008ff6:	d9ef      	bls.n	8008fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ff8:	480d      	ldr	r0, [pc, #52]	; (8009030 <prvInitialiseTaskLists+0x64>)
 8008ffa:	f7fe faeb 	bl	80075d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ffe:	480d      	ldr	r0, [pc, #52]	; (8009034 <prvInitialiseTaskLists+0x68>)
 8009000:	f7fe fae8 	bl	80075d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009004:	480c      	ldr	r0, [pc, #48]	; (8009038 <prvInitialiseTaskLists+0x6c>)
 8009006:	f7fe fae5 	bl	80075d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800900a:	480c      	ldr	r0, [pc, #48]	; (800903c <prvInitialiseTaskLists+0x70>)
 800900c:	f7fe fae2 	bl	80075d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009010:	480b      	ldr	r0, [pc, #44]	; (8009040 <prvInitialiseTaskLists+0x74>)
 8009012:	f7fe fadf 	bl	80075d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009016:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <prvInitialiseTaskLists+0x78>)
 8009018:	4a05      	ldr	r2, [pc, #20]	; (8009030 <prvInitialiseTaskLists+0x64>)
 800901a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800901c:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <prvInitialiseTaskLists+0x7c>)
 800901e:	4a05      	ldr	r2, [pc, #20]	; (8009034 <prvInitialiseTaskLists+0x68>)
 8009020:	601a      	str	r2, [r3, #0]
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	200004bc 	.word	0x200004bc
 8009030:	20000548 	.word	0x20000548
 8009034:	2000055c 	.word	0x2000055c
 8009038:	20000578 	.word	0x20000578
 800903c:	2000058c 	.word	0x2000058c
 8009040:	200005a4 	.word	0x200005a4
 8009044:	20000570 	.word	0x20000570
 8009048:	20000574 	.word	0x20000574

0800904c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009052:	e019      	b.n	8009088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009054:	f000 fbd2 	bl	80097fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009058:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <prvCheckTasksWaitingTermination+0x4c>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3304      	adds	r3, #4
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fb3f 	bl	80076e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800906a:	4b0c      	ldr	r3, [pc, #48]	; (800909c <prvCheckTasksWaitingTermination+0x50>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3b01      	subs	r3, #1
 8009070:	4a0a      	ldr	r2, [pc, #40]	; (800909c <prvCheckTasksWaitingTermination+0x50>)
 8009072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009074:	4b0a      	ldr	r3, [pc, #40]	; (80090a0 <prvCheckTasksWaitingTermination+0x54>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3b01      	subs	r3, #1
 800907a:	4a09      	ldr	r2, [pc, #36]	; (80090a0 <prvCheckTasksWaitingTermination+0x54>)
 800907c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800907e:	f000 fbeb 	bl	8009858 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f80e 	bl	80090a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009088:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <prvCheckTasksWaitingTermination+0x54>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e1      	bne.n	8009054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	2000058c 	.word	0x2000058c
 800909c:	200005b8 	.word	0x200005b8
 80090a0:	200005a0 	.word	0x200005a0

080090a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d108      	bne.n	80090c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 fd7a 	bl	8009bb4 <vPortFree>
				vPortFree( pxTCB );
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fd77 	bl	8009bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090c6:	e017      	b.n	80090f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d103      	bne.n	80090da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fd6e 	bl	8009bb4 <vPortFree>
	}
 80090d8:	e00e      	b.n	80090f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d009      	beq.n	80090f8 <prvDeleteTCB+0x54>
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e7fe      	b.n	80090f6 <prvDeleteTCB+0x52>
	}
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvResetNextTaskUnblockTime+0x38>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009110:	4b0a      	ldr	r3, [pc, #40]	; (800913c <prvResetNextTaskUnblockTime+0x3c>)
 8009112:	f04f 32ff 	mov.w	r2, #4294967295
 8009116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009118:	e008      	b.n	800912c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <prvResetNextTaskUnblockTime+0x38>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	4a04      	ldr	r2, [pc, #16]	; (800913c <prvResetNextTaskUnblockTime+0x3c>)
 800912a:	6013      	str	r3, [r2, #0]
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	20000570 	.word	0x20000570
 800913c:	200005d8 	.word	0x200005d8

08009140 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <xTaskGetSchedulerState+0x34>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800914e:	2301      	movs	r3, #1
 8009150:	607b      	str	r3, [r7, #4]
 8009152:	e008      	b.n	8009166 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009154:	4b08      	ldr	r3, [pc, #32]	; (8009178 <xTaskGetSchedulerState+0x38>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800915c:	2302      	movs	r3, #2
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	e001      	b.n	8009166 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009162:	2300      	movs	r3, #0
 8009164:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009166:	687b      	ldr	r3, [r7, #4]
	}
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	200005c4 	.word	0x200005c4
 8009178:	200005e0 	.word	0x200005e0

0800917c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d069      	beq.n	8009266 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009196:	4b36      	ldr	r3, [pc, #216]	; (8009270 <xTaskPriorityInherit+0xf4>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	429a      	cmp	r2, r3
 800919e:	d259      	bcs.n	8009254 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	db06      	blt.n	80091b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a8:	4b31      	ldr	r3, [pc, #196]	; (8009270 <xTaskPriorityInherit+0xf4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	f1c3 0207 	rsb	r2, r3, #7
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6959      	ldr	r1, [r3, #20]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4a2b      	ldr	r2, [pc, #172]	; (8009274 <xTaskPriorityInherit+0xf8>)
 80091c8:	4413      	add	r3, r2
 80091ca:	4299      	cmp	r1, r3
 80091cc:	d13a      	bne.n	8009244 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fa88 	bl	80076e8 <uxListRemove>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d115      	bne.n	800920a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e2:	4924      	ldr	r1, [pc, #144]	; (8009274 <xTaskPriorityInherit+0xf8>)
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10a      	bne.n	800920a <xTaskPriorityInherit+0x8e>
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	2201      	movs	r2, #1
 80091fa:	fa02 f303 	lsl.w	r3, r2, r3
 80091fe:	43da      	mvns	r2, r3
 8009200:	4b1d      	ldr	r3, [pc, #116]	; (8009278 <xTaskPriorityInherit+0xfc>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4013      	ands	r3, r2
 8009206:	4a1c      	ldr	r2, [pc, #112]	; (8009278 <xTaskPriorityInherit+0xfc>)
 8009208:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800920a:	4b19      	ldr	r3, [pc, #100]	; (8009270 <xTaskPriorityInherit+0xf4>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	2201      	movs	r2, #1
 800921a:	409a      	lsls	r2, r3
 800921c:	4b16      	ldr	r3, [pc, #88]	; (8009278 <xTaskPriorityInherit+0xfc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4313      	orrs	r3, r2
 8009222:	4a15      	ldr	r2, [pc, #84]	; (8009278 <xTaskPriorityInherit+0xfc>)
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4a10      	ldr	r2, [pc, #64]	; (8009274 <xTaskPriorityInherit+0xf8>)
 8009234:	441a      	add	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	3304      	adds	r3, #4
 800923a:	4619      	mov	r1, r3
 800923c:	4610      	mov	r0, r2
 800923e:	f7fe f9f6 	bl	800762e <vListInsertEnd>
 8009242:	e004      	b.n	800924e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009244:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <xTaskPriorityInherit+0xf4>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800924e:	2301      	movs	r3, #1
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e008      	b.n	8009266 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <xTaskPriorityInherit+0xf4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925e:	429a      	cmp	r2, r3
 8009260:	d201      	bcs.n	8009266 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009262:	2301      	movs	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009266:	68fb      	ldr	r3, [r7, #12]
	}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	200004b8 	.word	0x200004b8
 8009274:	200004bc 	.word	0x200004bc
 8009278:	200005c0 	.word	0x200005c0

0800927c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009288:	2300      	movs	r3, #0
 800928a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d06c      	beq.n	800936c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009292:	4b39      	ldr	r3, [pc, #228]	; (8009378 <xTaskPriorityDisinherit+0xfc>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	429a      	cmp	r2, r3
 800929a:	d009      	beq.n	80092b0 <xTaskPriorityDisinherit+0x34>
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	e7fe      	b.n	80092ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d109      	bne.n	80092cc <xTaskPriorityDisinherit+0x50>
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	60bb      	str	r3, [r7, #8]
 80092ca:	e7fe      	b.n	80092ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092d0:	1e5a      	subs	r2, r3, #1
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092de:	429a      	cmp	r2, r3
 80092e0:	d044      	beq.n	800936c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d140      	bne.n	800936c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	3304      	adds	r3, #4
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fe f9fa 	bl	80076e8 <uxListRemove>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d115      	bne.n	8009326 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fe:	491f      	ldr	r1, [pc, #124]	; (800937c <xTaskPriorityDisinherit+0x100>)
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <xTaskPriorityDisinherit+0xaa>
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	2201      	movs	r2, #1
 8009316:	fa02 f303 	lsl.w	r3, r2, r3
 800931a:	43da      	mvns	r2, r3
 800931c:	4b18      	ldr	r3, [pc, #96]	; (8009380 <xTaskPriorityDisinherit+0x104>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4013      	ands	r3, r2
 8009322:	4a17      	ldr	r2, [pc, #92]	; (8009380 <xTaskPriorityDisinherit+0x104>)
 8009324:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009332:	f1c3 0207 	rsb	r2, r3, #7
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933e:	2201      	movs	r2, #1
 8009340:	409a      	lsls	r2, r3
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <xTaskPriorityDisinherit+0x104>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4313      	orrs	r3, r2
 8009348:	4a0d      	ldr	r2, [pc, #52]	; (8009380 <xTaskPriorityDisinherit+0x104>)
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4a08      	ldr	r2, [pc, #32]	; (800937c <xTaskPriorityDisinherit+0x100>)
 800935a:	441a      	add	r2, r3
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	3304      	adds	r3, #4
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	f7fe f963 	bl	800762e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009368:	2301      	movs	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800936c:	697b      	ldr	r3, [r7, #20]
	}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	200004b8 	.word	0x200004b8
 800937c:	200004bc 	.word	0x200004bc
 8009380:	200005c0 	.word	0x200005c0

08009384 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009392:	2301      	movs	r3, #1
 8009394:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8081 	beq.w	80094a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0x36>
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	e7fe      	b.n	80093b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d902      	bls.n	80093ca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	61fb      	str	r3, [r7, #28]
 80093c8:	e002      	b.n	80093d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d062      	beq.n	80094a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d15d      	bne.n	80094a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093e4:	4b30      	ldr	r3, [pc, #192]	; (80094a8 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d109      	bne.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	60bb      	str	r3, [r7, #8]
 8009400:	e7fe      	b.n	8009400 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	db04      	blt.n	8009420 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f1c3 0207 	rsb	r2, r3, #7
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	6959      	ldr	r1, [r3, #20]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a1f      	ldr	r2, [pc, #124]	; (80094ac <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009430:	4413      	add	r3, r2
 8009432:	4299      	cmp	r1, r3
 8009434:	d134      	bne.n	80094a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	3304      	adds	r3, #4
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe f954 	bl	80076e8 <uxListRemove>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d115      	bne.n	8009472 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944a:	4918      	ldr	r1, [pc, #96]	; (80094ac <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	440b      	add	r3, r1
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	2201      	movs	r2, #1
 8009462:	fa02 f303 	lsl.w	r3, r2, r3
 8009466:	43da      	mvns	r2, r3
 8009468:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4013      	ands	r3, r2
 800946e:	4a10      	ldr	r2, [pc, #64]	; (80094b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009470:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	2201      	movs	r2, #1
 8009478:	409a      	lsls	r2, r3
 800947a:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4313      	orrs	r3, r2
 8009480:	4a0b      	ldr	r2, [pc, #44]	; (80094b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4a06      	ldr	r2, [pc, #24]	; (80094ac <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009492:	441a      	add	r2, r3
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	3304      	adds	r3, #4
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f7fe f8c7 	bl	800762e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094a0:	bf00      	nop
 80094a2:	3720      	adds	r7, #32
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	200004b8 	.word	0x200004b8
 80094ac:	200004bc 	.word	0x200004bc
 80094b0:	200005c0 	.word	0x200005c0

080094b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80094b8:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80094c0:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094c6:	3201      	adds	r2, #1
 80094c8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80094ca:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80094cc:	681b      	ldr	r3, [r3, #0]
	}
 80094ce:	4618      	mov	r0, r3
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	200004b8 	.word	0x200004b8

080094dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094e6:	4b29      	ldr	r3, [pc, #164]	; (800958c <prvAddCurrentTaskToDelayedList+0xb0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ec:	4b28      	ldr	r3, [pc, #160]	; (8009590 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe f8f8 	bl	80076e8 <uxListRemove>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10b      	bne.n	8009516 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80094fe:	4b24      	ldr	r3, [pc, #144]	; (8009590 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	2201      	movs	r2, #1
 8009506:	fa02 f303 	lsl.w	r3, r2, r3
 800950a:	43da      	mvns	r2, r3
 800950c:	4b21      	ldr	r3, [pc, #132]	; (8009594 <prvAddCurrentTaskToDelayedList+0xb8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4013      	ands	r3, r2
 8009512:	4a20      	ldr	r2, [pc, #128]	; (8009594 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009514:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d10a      	bne.n	8009534 <prvAddCurrentTaskToDelayedList+0x58>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d007      	beq.n	8009534 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009524:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3304      	adds	r3, #4
 800952a:	4619      	mov	r1, r3
 800952c:	481a      	ldr	r0, [pc, #104]	; (8009598 <prvAddCurrentTaskToDelayedList+0xbc>)
 800952e:	f7fe f87e 	bl	800762e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009532:	e026      	b.n	8009582 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4413      	add	r3, r2
 800953a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800953c:	4b14      	ldr	r3, [pc, #80]	; (8009590 <prvAddCurrentTaskToDelayedList+0xb4>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	429a      	cmp	r2, r3
 800954a:	d209      	bcs.n	8009560 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800954c:	4b13      	ldr	r3, [pc, #76]	; (800959c <prvAddCurrentTaskToDelayedList+0xc0>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	4b0f      	ldr	r3, [pc, #60]	; (8009590 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3304      	adds	r3, #4
 8009556:	4619      	mov	r1, r3
 8009558:	4610      	mov	r0, r2
 800955a:	f7fe f88c 	bl	8007676 <vListInsert>
}
 800955e:	e010      	b.n	8009582 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009560:	4b0f      	ldr	r3, [pc, #60]	; (80095a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	4b0a      	ldr	r3, [pc, #40]	; (8009590 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3304      	adds	r3, #4
 800956a:	4619      	mov	r1, r3
 800956c:	4610      	mov	r0, r2
 800956e:	f7fe f882 	bl	8007676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009572:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	429a      	cmp	r2, r3
 800957a:	d202      	bcs.n	8009582 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800957c:	4a09      	ldr	r2, [pc, #36]	; (80095a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6013      	str	r3, [r2, #0]
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	200005bc 	.word	0x200005bc
 8009590:	200004b8 	.word	0x200004b8
 8009594:	200005c0 	.word	0x200005c0
 8009598:	200005a4 	.word	0x200005a4
 800959c:	20000574 	.word	0x20000574
 80095a0:	20000570 	.word	0x20000570
 80095a4:	200005d8 	.word	0x200005d8

080095a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3b04      	subs	r3, #4
 80095b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3b04      	subs	r3, #4
 80095c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f023 0201 	bic.w	r2, r3, #1
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3b04      	subs	r3, #4
 80095d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095d8:	4a0c      	ldr	r2, [pc, #48]	; (800960c <pxPortInitialiseStack+0x64>)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3b14      	subs	r3, #20
 80095e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3b04      	subs	r3, #4
 80095ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f06f 0202 	mvn.w	r2, #2
 80095f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3b20      	subs	r3, #32
 80095fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095fe:	68fb      	ldr	r3, [r7, #12]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	08009611 	.word	0x08009611

08009610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800961a:	4b11      	ldr	r3, [pc, #68]	; (8009660 <prvTaskExitError+0x50>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009622:	d009      	beq.n	8009638 <prvTaskExitError+0x28>
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	e7fe      	b.n	8009636 <prvTaskExitError+0x26>
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800964a:	bf00      	nop
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0fc      	beq.n	800964c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009652:	bf00      	nop
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	2000000c 	.word	0x2000000c
	...

08009670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <pxCurrentTCBConst2>)
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	6808      	ldr	r0, [r1, #0]
 8009676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	f380 8809 	msr	PSP, r0
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8811 	msr	BASEPRI, r0
 800968a:	4770      	bx	lr
 800968c:	f3af 8000 	nop.w

08009690 <pxCurrentTCBConst2>:
 8009690:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009698:	4808      	ldr	r0, [pc, #32]	; (80096bc <prvPortStartFirstTask+0x24>)
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	6800      	ldr	r0, [r0, #0]
 800969e:	f380 8808 	msr	MSP, r0
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8814 	msr	CONTROL, r0
 80096aa:	b662      	cpsie	i
 80096ac:	b661      	cpsie	f
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	df00      	svc	0
 80096b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ba:	bf00      	nop
 80096bc:	e000ed08 	.word	0xe000ed08

080096c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096c6:	4b44      	ldr	r3, [pc, #272]	; (80097d8 <xPortStartScheduler+0x118>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a44      	ldr	r2, [pc, #272]	; (80097dc <xPortStartScheduler+0x11c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d109      	bne.n	80096e4 <xPortStartScheduler+0x24>
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	e7fe      	b.n	80096e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096e4:	4b3c      	ldr	r3, [pc, #240]	; (80097d8 <xPortStartScheduler+0x118>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a3d      	ldr	r2, [pc, #244]	; (80097e0 <xPortStartScheduler+0x120>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d109      	bne.n	8009702 <xPortStartScheduler+0x42>
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e7fe      	b.n	8009700 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009702:	4b38      	ldr	r3, [pc, #224]	; (80097e4 <xPortStartScheduler+0x124>)
 8009704:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	22ff      	movs	r2, #255	; 0xff
 8009712:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009724:	b2da      	uxtb	r2, r3
 8009726:	4b30      	ldr	r3, [pc, #192]	; (80097e8 <xPortStartScheduler+0x128>)
 8009728:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800972a:	4b30      	ldr	r3, [pc, #192]	; (80097ec <xPortStartScheduler+0x12c>)
 800972c:	2207      	movs	r2, #7
 800972e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009730:	e009      	b.n	8009746 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009732:	4b2e      	ldr	r3, [pc, #184]	; (80097ec <xPortStartScheduler+0x12c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3b01      	subs	r3, #1
 8009738:	4a2c      	ldr	r2, [pc, #176]	; (80097ec <xPortStartScheduler+0x12c>)
 800973a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	b2db      	uxtb	r3, r3
 8009744:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974e:	2b80      	cmp	r3, #128	; 0x80
 8009750:	d0ef      	beq.n	8009732 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009752:	4b26      	ldr	r3, [pc, #152]	; (80097ec <xPortStartScheduler+0x12c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f1c3 0307 	rsb	r3, r3, #7
 800975a:	2b04      	cmp	r3, #4
 800975c:	d009      	beq.n	8009772 <xPortStartScheduler+0xb2>
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	60bb      	str	r3, [r7, #8]
 8009770:	e7fe      	b.n	8009770 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009772:	4b1e      	ldr	r3, [pc, #120]	; (80097ec <xPortStartScheduler+0x12c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	4a1c      	ldr	r2, [pc, #112]	; (80097ec <xPortStartScheduler+0x12c>)
 800977a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800977c:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <xPortStartScheduler+0x12c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009784:	4a19      	ldr	r2, [pc, #100]	; (80097ec <xPortStartScheduler+0x12c>)
 8009786:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	b2da      	uxtb	r2, r3
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009790:	4b17      	ldr	r3, [pc, #92]	; (80097f0 <xPortStartScheduler+0x130>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a16      	ldr	r2, [pc, #88]	; (80097f0 <xPortStartScheduler+0x130>)
 8009796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800979a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800979c:	4b14      	ldr	r3, [pc, #80]	; (80097f0 <xPortStartScheduler+0x130>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a13      	ldr	r2, [pc, #76]	; (80097f0 <xPortStartScheduler+0x130>)
 80097a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097a8:	f000 f8d6 	bl	8009958 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097ac:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <xPortStartScheduler+0x134>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097b2:	f000 f8f5 	bl	80099a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097b6:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <xPortStartScheduler+0x138>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a0f      	ldr	r2, [pc, #60]	; (80097f8 <xPortStartScheduler+0x138>)
 80097bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097c2:	f7ff ff69 	bl	8009698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097c6:	f7ff fa87 	bl	8008cd8 <vTaskSwitchContext>
	prvTaskExitError();
 80097ca:	f7ff ff21 	bl	8009610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	e000ed00 	.word	0xe000ed00
 80097dc:	410fc271 	.word	0x410fc271
 80097e0:	410fc270 	.word	0x410fc270
 80097e4:	e000e400 	.word	0xe000e400
 80097e8:	200005e4 	.word	0x200005e4
 80097ec:	200005e8 	.word	0x200005e8
 80097f0:	e000ed20 	.word	0xe000ed20
 80097f4:	2000000c 	.word	0x2000000c
 80097f8:	e000ef34 	.word	0xe000ef34

080097fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009814:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <vPortEnterCritical+0x54>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	4a0d      	ldr	r2, [pc, #52]	; (8009850 <vPortEnterCritical+0x54>)
 800981c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800981e:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <vPortEnterCritical+0x54>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d10e      	bne.n	8009844 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <vPortEnterCritical+0x58>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d009      	beq.n	8009844 <vPortEnterCritical+0x48>
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	603b      	str	r3, [r7, #0]
 8009842:	e7fe      	b.n	8009842 <vPortEnterCritical+0x46>
	}
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	2000000c 	.word	0x2000000c
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800985e:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <vPortExitCritical+0x4c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d109      	bne.n	800987a <vPortExitCritical+0x22>
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	607b      	str	r3, [r7, #4]
 8009878:	e7fe      	b.n	8009878 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800987a:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <vPortExitCritical+0x4c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3b01      	subs	r3, #1
 8009880:	4a08      	ldr	r2, [pc, #32]	; (80098a4 <vPortExitCritical+0x4c>)
 8009882:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009884:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <vPortExitCritical+0x4c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <vPortExitCritical+0x3e>
 800988c:	2300      	movs	r3, #0
 800988e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	2000000c 	.word	0x2000000c
	...

080098b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098b0:	f3ef 8009 	mrs	r0, PSP
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	4b15      	ldr	r3, [pc, #84]	; (8009910 <pxCurrentTCBConst>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	f01e 0f10 	tst.w	lr, #16
 80098c0:	bf08      	it	eq
 80098c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	6010      	str	r0, [r2, #0]
 80098cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098d4:	f380 8811 	msr	BASEPRI, r0
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f7ff f9fa 	bl	8008cd8 <vTaskSwitchContext>
 80098e4:	f04f 0000 	mov.w	r0, #0
 80098e8:	f380 8811 	msr	BASEPRI, r0
 80098ec:	bc09      	pop	{r0, r3}
 80098ee:	6819      	ldr	r1, [r3, #0]
 80098f0:	6808      	ldr	r0, [r1, #0]
 80098f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f6:	f01e 0f10 	tst.w	lr, #16
 80098fa:	bf08      	it	eq
 80098fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009900:	f380 8809 	msr	PSP, r0
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w

08009910 <pxCurrentTCBConst>:
 8009910:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop

08009918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009930:	f7ff f91a 	bl	8008b68 <xTaskIncrementTick>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800993a:	4b06      	ldr	r3, [pc, #24]	; (8009954 <SysTick_Handler+0x3c>)
 800993c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	2300      	movs	r3, #0
 8009944:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	e000ed04 	.word	0xe000ed04

08009958 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800995c:	4b0b      	ldr	r3, [pc, #44]	; (800998c <vPortSetupTimerInterrupt+0x34>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009962:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <vPortSetupTimerInterrupt+0x38>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009968:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <vPortSetupTimerInterrupt+0x3c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a0a      	ldr	r2, [pc, #40]	; (8009998 <vPortSetupTimerInterrupt+0x40>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	099b      	lsrs	r3, r3, #6
 8009974:	4a09      	ldr	r2, [pc, #36]	; (800999c <vPortSetupTimerInterrupt+0x44>)
 8009976:	3b01      	subs	r3, #1
 8009978:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800997a:	4b04      	ldr	r3, [pc, #16]	; (800998c <vPortSetupTimerInterrupt+0x34>)
 800997c:	2207      	movs	r2, #7
 800997e:	601a      	str	r2, [r3, #0]
}
 8009980:	bf00      	nop
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	e000e010 	.word	0xe000e010
 8009990:	e000e018 	.word	0xe000e018
 8009994:	20000000 	.word	0x20000000
 8009998:	10624dd3 	.word	0x10624dd3
 800999c:	e000e014 	.word	0xe000e014

080099a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099b0 <vPortEnableVFP+0x10>
 80099a4:	6801      	ldr	r1, [r0, #0]
 80099a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099aa:	6001      	str	r1, [r0, #0]
 80099ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099ae:	bf00      	nop
 80099b0:	e000ed88 	.word	0xe000ed88

080099b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099ba:	f3ef 8305 	mrs	r3, IPSR
 80099be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b0f      	cmp	r3, #15
 80099c4:	d913      	bls.n	80099ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099c6:	4a16      	ldr	r2, [pc, #88]	; (8009a20 <vPortValidateInterruptPriority+0x6c>)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099d0:	4b14      	ldr	r3, [pc, #80]	; (8009a24 <vPortValidateInterruptPriority+0x70>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	7afa      	ldrb	r2, [r7, #11]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d209      	bcs.n	80099ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	607b      	str	r3, [r7, #4]
 80099ec:	e7fe      	b.n	80099ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099ee:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <vPortValidateInterruptPriority+0x74>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099f6:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <vPortValidateInterruptPriority+0x78>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d909      	bls.n	8009a12 <vPortValidateInterruptPriority+0x5e>
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	e7fe      	b.n	8009a10 <vPortValidateInterruptPriority+0x5c>
	}
 8009a12:	bf00      	nop
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	e000e3f0 	.word	0xe000e3f0
 8009a24:	200005e4 	.word	0x200005e4
 8009a28:	e000ed0c 	.word	0xe000ed0c
 8009a2c:	200005e8 	.word	0x200005e8

08009a30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	; 0x28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a3c:	f7fe ffc8 	bl	80089d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a40:	4b57      	ldr	r3, [pc, #348]	; (8009ba0 <pvPortMalloc+0x170>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a48:	f000 f90c 	bl	8009c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a4c:	4b55      	ldr	r3, [pc, #340]	; (8009ba4 <pvPortMalloc+0x174>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 808c 	bne.w	8009b72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01c      	beq.n	8009a9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009a60:	2208      	movs	r2, #8
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4413      	add	r3, r2
 8009a66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d013      	beq.n	8009a9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f023 0307 	bic.w	r3, r3, #7
 8009a78:	3308      	adds	r3, #8
 8009a7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d009      	beq.n	8009a9a <pvPortMalloc+0x6a>
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e7fe      	b.n	8009a98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d068      	beq.n	8009b72 <pvPortMalloc+0x142>
 8009aa0:	4b41      	ldr	r3, [pc, #260]	; (8009ba8 <pvPortMalloc+0x178>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d863      	bhi.n	8009b72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009aaa:	4b40      	ldr	r3, [pc, #256]	; (8009bac <pvPortMalloc+0x17c>)
 8009aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009aae:	4b3f      	ldr	r3, [pc, #252]	; (8009bac <pvPortMalloc+0x17c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ab4:	e004      	b.n	8009ac0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d903      	bls.n	8009ad2 <pvPortMalloc+0xa2>
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1f1      	bne.n	8009ab6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ad2:	4b33      	ldr	r3, [pc, #204]	; (8009ba0 <pvPortMalloc+0x170>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d04a      	beq.n	8009b72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2208      	movs	r2, #8
 8009ae2:	4413      	add	r3, r2
 8009ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	1ad2      	subs	r2, r2, r3
 8009af6:	2308      	movs	r3, #8
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d91e      	bls.n	8009b3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d009      	beq.n	8009b24 <pvPortMalloc+0xf4>
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
 8009b22:	e7fe      	b.n	8009b22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	1ad2      	subs	r2, r2, r3
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b36:	69b8      	ldr	r0, [r7, #24]
 8009b38:	f000 f8f6 	bl	8009d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	4a18      	ldr	r2, [pc, #96]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b4a:	4b17      	ldr	r3, [pc, #92]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4b18      	ldr	r3, [pc, #96]	; (8009bb0 <pvPortMalloc+0x180>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d203      	bcs.n	8009b5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b56:	4b14      	ldr	r3, [pc, #80]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <pvPortMalloc+0x180>)
 8009b5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	4b10      	ldr	r3, [pc, #64]	; (8009ba4 <pvPortMalloc+0x174>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	431a      	orrs	r2, r3
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b72:	f7fe ff3b 	bl	80089ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d009      	beq.n	8009b94 <pvPortMalloc+0x164>
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	e7fe      	b.n	8009b92 <pvPortMalloc+0x162>
	return pvReturn;
 8009b94:	69fb      	ldr	r3, [r7, #28]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3728      	adds	r7, #40	; 0x28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	200041f4 	.word	0x200041f4
 8009ba4:	20004200 	.word	0x20004200
 8009ba8:	200041f8 	.word	0x200041f8
 8009bac:	200041ec 	.word	0x200041ec
 8009bb0:	200041fc 	.word	0x200041fc

08009bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d046      	beq.n	8009c54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	425b      	negs	r3, r3
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	4413      	add	r3, r2
 8009bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	4b20      	ldr	r3, [pc, #128]	; (8009c5c <vPortFree+0xa8>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <vPortFree+0x42>
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	e7fe      	b.n	8009bf4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d009      	beq.n	8009c12 <vPortFree+0x5e>
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	60bb      	str	r3, [r7, #8]
 8009c10:	e7fe      	b.n	8009c10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	685a      	ldr	r2, [r3, #4]
 8009c16:	4b11      	ldr	r3, [pc, #68]	; (8009c5c <vPortFree+0xa8>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d019      	beq.n	8009c54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d115      	bne.n	8009c54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <vPortFree+0xa8>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	43db      	mvns	r3, r3
 8009c32:	401a      	ands	r2, r3
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c38:	f7fe feca 	bl	80089d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <vPortFree+0xac>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4413      	add	r3, r2
 8009c46:	4a06      	ldr	r2, [pc, #24]	; (8009c60 <vPortFree+0xac>)
 8009c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c4a:	6938      	ldr	r0, [r7, #16]
 8009c4c:	f000 f86c 	bl	8009d28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c50:	f7fe fecc 	bl	80089ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c54:	bf00      	nop
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20004200 	.word	0x20004200
 8009c60:	200041f8 	.word	0x200041f8

08009c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c70:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <prvHeapInit+0xac>)
 8009c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00c      	beq.n	8009c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3307      	adds	r3, #7
 8009c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <prvHeapInit+0xac>)
 8009c94:	4413      	add	r3, r2
 8009c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c9c:	4a1d      	ldr	r2, [pc, #116]	; (8009d14 <prvHeapInit+0xb0>)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ca2:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <prvHeapInit+0xb0>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	4413      	add	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cb0:	2208      	movs	r2, #8
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	1a9b      	subs	r3, r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0307 	bic.w	r3, r3, #7
 8009cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <prvHeapInit+0xb4>)
 8009cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <prvHeapInit+0xb4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <prvHeapInit+0xb4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <prvHeapInit+0xb4>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <prvHeapInit+0xb8>)
 8009cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <prvHeapInit+0xbc>)
 8009cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <prvHeapInit+0xc0>)
 8009cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d02:	601a      	str	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	200005ec 	.word	0x200005ec
 8009d14:	200041ec 	.word	0x200041ec
 8009d18:	200041f4 	.word	0x200041f4
 8009d1c:	200041fc 	.word	0x200041fc
 8009d20:	200041f8 	.word	0x200041f8
 8009d24:	20004200 	.word	0x20004200

08009d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d30:	4b28      	ldr	r3, [pc, #160]	; (8009dd4 <prvInsertBlockIntoFreeList+0xac>)
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	e002      	b.n	8009d3c <prvInsertBlockIntoFreeList+0x14>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d8f7      	bhi.n	8009d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	4413      	add	r3, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d108      	bne.n	8009d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	441a      	add	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d118      	bne.n	8009db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d00d      	beq.n	8009da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	441a      	add	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	e008      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009da6:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e003      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d002      	beq.n	8009dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	200041ec 	.word	0x200041ec
 8009dd8:	200041f4 	.word	0x200041f4

08009ddc <__libc_init_array>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	4e0d      	ldr	r6, [pc, #52]	; (8009e14 <__libc_init_array+0x38>)
 8009de0:	4c0d      	ldr	r4, [pc, #52]	; (8009e18 <__libc_init_array+0x3c>)
 8009de2:	1ba4      	subs	r4, r4, r6
 8009de4:	10a4      	asrs	r4, r4, #2
 8009de6:	2500      	movs	r5, #0
 8009de8:	42a5      	cmp	r5, r4
 8009dea:	d109      	bne.n	8009e00 <__libc_init_array+0x24>
 8009dec:	4e0b      	ldr	r6, [pc, #44]	; (8009e1c <__libc_init_array+0x40>)
 8009dee:	4c0c      	ldr	r4, [pc, #48]	; (8009e20 <__libc_init_array+0x44>)
 8009df0:	f000 f82c 	bl	8009e4c <_init>
 8009df4:	1ba4      	subs	r4, r4, r6
 8009df6:	10a4      	asrs	r4, r4, #2
 8009df8:	2500      	movs	r5, #0
 8009dfa:	42a5      	cmp	r5, r4
 8009dfc:	d105      	bne.n	8009e0a <__libc_init_array+0x2e>
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}
 8009e00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e04:	4798      	blx	r3
 8009e06:	3501      	adds	r5, #1
 8009e08:	e7ee      	b.n	8009de8 <__libc_init_array+0xc>
 8009e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e0e:	4798      	blx	r3
 8009e10:	3501      	adds	r5, #1
 8009e12:	e7f2      	b.n	8009dfa <__libc_init_array+0x1e>
 8009e14:	08009fd0 	.word	0x08009fd0
 8009e18:	08009fd0 	.word	0x08009fd0
 8009e1c:	08009fd0 	.word	0x08009fd0
 8009e20:	08009fd4 	.word	0x08009fd4

08009e24 <memcpy>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	1e43      	subs	r3, r0, #1
 8009e28:	440a      	add	r2, r1
 8009e2a:	4291      	cmp	r1, r2
 8009e2c:	d100      	bne.n	8009e30 <memcpy+0xc>
 8009e2e:	bd10      	pop	{r4, pc}
 8009e30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e38:	e7f7      	b.n	8009e2a <memcpy+0x6>

08009e3a <memset>:
 8009e3a:	4402      	add	r2, r0
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d100      	bne.n	8009e44 <memset+0xa>
 8009e42:	4770      	bx	lr
 8009e44:	f803 1b01 	strb.w	r1, [r3], #1
 8009e48:	e7f9      	b.n	8009e3e <memset+0x4>
	...

08009e4c <_init>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr

08009e58 <_fini>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr

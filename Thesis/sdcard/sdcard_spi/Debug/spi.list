
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b35c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800b4ec  0800b4ec  0001b4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbc0  0800bbc0  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbc0  0800bbc0  0001bbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbc8  0800bbc8  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbcc  0800bbcc  0001bbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800bbd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c8c  20000228  0800bdf8  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004eb4  0800bdf8  00024eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226be  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000492b  00000000  00000000  00042916  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001990  00000000  00000000  00047248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  00048bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027265  00000000  00000000  0004a370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018bef  00000000  00000000  000715d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8973  00000000  00000000  0008a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162b37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000731c  00000000  00000000  00162bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b4d4 	.word	0x0800b4d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800b4d4 	.word	0x0800b4d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
int
CmdLineProcess(char *pcCmdLine)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 80005a8:	2301      	movs	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 80005b4:	e020      	b.n	80005f8 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b20      	cmp	r3, #32
 80005bc:	d105      	bne.n	80005ca <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e013      	b.n	80005f2 <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d010      	beq.n	80005f2 <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b09      	cmp	r3, #9
 80005d4:	d80a      	bhi.n	80005ec <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 80005d6:	491d      	ldr	r1, [pc, #116]	; (800064c <CmdLineProcess+0xac>)
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	3301      	adds	r3, #1
 80005e4:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e002      	b.n	80005f2 <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 80005ec:	f06f 0301 	mvn.w	r3, #1
 80005f0:	e028      	b.n	8000644 <CmdLineProcess+0xa4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1da      	bne.n	80005b6 <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d01c      	beq.n	8000640 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <CmdLineProcess+0xb0>)
 8000608:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 800060a:	e015      	b.n	8000638 <CmdLineProcess+0x98>
        {
            //
            // If this command entry command string matches argv[0], then call
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <CmdLineProcess+0xac>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4610      	mov	r0, r2
 8000618:	f7ff fdda 	bl	80001d0 <strcmp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <CmdLineProcess+0x92>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	4908      	ldr	r1, [pc, #32]	; (800064c <CmdLineProcess+0xac>)
 800062a:	4610      	mov	r0, r2
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	e008      	b.n	8000644 <CmdLineProcess+0xa4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	330c      	adds	r3, #12
 8000636:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1e5      	bne.n	800060c <CmdLineProcess+0x6c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000244 	.word	0x20000244
 8000650:	20000000 	.word	0x20000000

08000654 <UARTIntHandler>:
uint8_t commandBuffer[200];
uint32_t commandBufferIndex = 0;
uint32_t gotCommandFlag = 0;
uint8_t temp[100];

void UARTIntHandler(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint8_t receivedChar;
	char *EnterCMD = "\r\n>";
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <UARTIntHandler+0xa0>)
 800065c:	607b      	str	r3, [r7, #4]
	receivedChar = (uint8_t) ((huart6).Instance->DR & (uint8_t) 0x00FF);
 800065e:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <UARTIntHandler+0xa4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart6, &receivedChar, 1, 100);
 8000668:	1cf9      	adds	r1, r7, #3
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	4822      	ldr	r0, [pc, #136]	; (80006f8 <UARTIntHandler+0xa4>)
 8000670:	f004 fa07 	bl	8004a82 <HAL_UART_Transmit>
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <UARTIntHandler+0xa4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <UARTIntHandler+0xa4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f042 0220 	orr.w	r2, r2, #32
 8000682:	60da      	str	r2, [r3, #12]
	if (receivedChar != 13) {
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b0d      	cmp	r3, #13
 8000688:	d01a      	beq.n	80006c0 <UARTIntHandler+0x6c>
		if ((receivedChar == 8) || (receivedChar == 127)) {
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	2b08      	cmp	r3, #8
 800068e:	d002      	beq.n	8000696 <UARTIntHandler+0x42>
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b7f      	cmp	r3, #127	; 0x7f
 8000694:	d109      	bne.n	80006aa <UARTIntHandler+0x56>
			if (commandBufferIndex > 0)
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <UARTIntHandler+0xa8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d026      	beq.n	80006ec <UARTIntHandler+0x98>
				commandBufferIndex--;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <UARTIntHandler+0xa8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a15      	ldr	r2, [pc, #84]	; (80006fc <UARTIntHandler+0xa8>)
 80006a6:	6013      	str	r3, [r2, #0]
			if (commandBufferIndex > 0)
 80006a8:	e020      	b.n	80006ec <UARTIntHandler+0x98>
		} else {
			commandBuffer[commandBufferIndex] = receivedChar;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <UARTIntHandler+0xa8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	78f9      	ldrb	r1, [r7, #3]
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <UARTIntHandler+0xac>)
 80006b2:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex++;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <UARTIntHandler+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <UARTIntHandler+0xa8>)
 80006bc:	6013      	str	r3, [r2, #0]
			gotCommandFlag = 1;
		}
		HAL_UART_Transmit(&huart6, (uint8_t*)EnterCMD, 3, 100);
	}

}
 80006be:	e015      	b.n	80006ec <UARTIntHandler+0x98>
		if (commandBufferIndex != 0) {
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <UARTIntHandler+0xa8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00a      	beq.n	80006de <UARTIntHandler+0x8a>
			commandBuffer[commandBufferIndex] = 0;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <UARTIntHandler+0xa8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <UARTIntHandler+0xac>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	54d1      	strb	r1, [r2, r3]
			commandBufferIndex = 0;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <UARTIntHandler+0xa8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			gotCommandFlag = 1;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <UARTIntHandler+0xb0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, (uint8_t*)EnterCMD, 3, 100);
 80006de:	2364      	movs	r3, #100	; 0x64
 80006e0:	2203      	movs	r2, #3
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <UARTIntHandler+0xa4>)
 80006e6:	f004 f9cc 	bl	8004a82 <HAL_UART_Transmit>
}
 80006ea:	e7ff      	b.n	80006ec <UARTIntHandler+0x98>
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	0800b574 	.word	0x0800b574
 80006f8:	200046b4 	.word	0x200046b4
 80006fc:	20000278 	.word	0x20000278
 8000700:	20004288 	.word	0x20004288
 8000704:	2000027c 	.word	0x2000027c

08000708 <Cmd_read_all>:
	printf("------------------\r\n");
	SD_READ_LINE("DEVICE.txt");
	printf("%s",SDbuffer);
}
int Cmd_read_all(int argc, char *argv[])
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	printf("\nCmd_read_all\r\n");
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <Cmd_read_all+0x28>)
 8000714:	f009 ff6e 	bl	800a5f4 <puts>
	printf("------------------\r\n");
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <Cmd_read_all+0x2c>)
 800071a:	f009 ff6b 	bl	800a5f4 <puts>
	SD_READ_ALL("DEVICE.TXT");
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <Cmd_read_all+0x30>)
 8000720:	f002 f80a 	bl	8002738 <SD_READ_ALL>
}
 8000724:	bf00      	nop
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	0800b5d8 	.word	0x0800b5d8
 8000734:	0800b58c 	.word	0x0800b58c
 8000738:	0800b5e8 	.word	0x0800b5e8

0800073c <Cmd_load_all>:
int Cmd_load_all(int argc, char *argv[])
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	b08f      	sub	sp, #60	; 0x3c
 8000740:	af08      	add	r7, sp, #32
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
	printf("\nCmd_load_all\r\n");
 8000746:	4866      	ldr	r0, [pc, #408]	; (80008e0 <Cmd_load_all+0x1a4>)
 8000748:	f009 ff54 	bl	800a5f4 <puts>
	printf("------------------\r\n");
 800074c:	4865      	ldr	r0, [pc, #404]	; (80008e4 <Cmd_load_all+0x1a8>)
 800074e:	f009 ff51 	bl	800a5f4 <puts>
	fresult = f_mount(&fs, "", 1);
 8000752:	2201      	movs	r2, #1
 8000754:	4964      	ldr	r1, [pc, #400]	; (80008e8 <Cmd_load_all+0x1ac>)
 8000756:	4865      	ldr	r0, [pc, #404]	; (80008ec <Cmd_load_all+0x1b0>)
 8000758:	f006 fd5a 	bl	8007210 <f_mount>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b63      	ldr	r3, [pc, #396]	; (80008f0 <Cmd_load_all+0x1b4>)
 8000762:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil,"DEVICE.TXT", FA_READ|FA_WRITE);
 8000764:	2203      	movs	r2, #3
 8000766:	4963      	ldr	r1, [pc, #396]	; (80008f4 <Cmd_load_all+0x1b8>)
 8000768:	4863      	ldr	r0, [pc, #396]	; (80008f8 <Cmd_load_all+0x1bc>)
 800076a:	f006 fdb5 	bl	80072d8 <f_open>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b5f      	ldr	r3, [pc, #380]	; (80008f0 <Cmd_load_all+0x1b4>)
 8000774:	701a      	strb	r2, [r3, #0]
	for (line = 0; (f_eof(&fil) == 0); line++)
 8000776:	4b61      	ldr	r3, [pc, #388]	; (80008fc <Cmd_load_all+0x1c0>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e00a      	b.n	8000794 <Cmd_load_all+0x58>
	{
	   f_gets((char*)SDbuffer, sizeof(SDbuffer), &fil);
 800077e:	4a5e      	ldr	r2, [pc, #376]	; (80008f8 <Cmd_load_all+0x1bc>)
 8000780:	21c8      	movs	r1, #200	; 0xc8
 8000782:	485f      	ldr	r0, [pc, #380]	; (8000900 <Cmd_load_all+0x1c4>)
 8000784:	f007 f993 	bl	8007aae <f_gets>
	for (line = 0; (f_eof(&fil) == 0); line++)
 8000788:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <Cmd_load_all+0x1c0>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <Cmd_load_all+0x1c0>)
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	4b58      	ldr	r3, [pc, #352]	; (80008f8 <Cmd_load_all+0x1bc>)
 8000796:	699a      	ldr	r2, [r3, #24]
 8000798:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <Cmd_load_all+0x1bc>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d1ee      	bne.n	800077e <Cmd_load_all+0x42>
	}
	printf("\nNum of line: %d\r\n", line);
 80007a0:	4b56      	ldr	r3, [pc, #344]	; (80008fc <Cmd_load_all+0x1c0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4857      	ldr	r0, [pc, #348]	; (8000904 <Cmd_load_all+0x1c8>)
 80007a8:	f009 feb0 	bl	800a50c <iprintf>
	fresult = f_close(&fil);
 80007ac:	4852      	ldr	r0, [pc, #328]	; (80008f8 <Cmd_load_all+0x1bc>)
 80007ae:	f007 f94f 	bl	8007a50 <f_close>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b4e      	ldr	r3, [pc, #312]	; (80008f0 <Cmd_load_all+0x1b4>)
 80007b8:	701a      	strb	r2, [r3, #0]

		dynamic = (data1_t*)calloc(line, sizeof(data1_t));
 80007ba:	4b50      	ldr	r3, [pc, #320]	; (80008fc <Cmd_load_all+0x1c0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2118      	movs	r1, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f009 fdf5 	bl	800a3b0 <calloc>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <Cmd_load_all+0x1cc>)
 80007cc:	601a      	str	r2, [r3, #0]
		fresult = f_mount(&fs, "", 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	4945      	ldr	r1, [pc, #276]	; (80008e8 <Cmd_load_all+0x1ac>)
 80007d2:	4846      	ldr	r0, [pc, #280]	; (80008ec <Cmd_load_all+0x1b0>)
 80007d4:	f006 fd1c 	bl	8007210 <f_mount>
 80007d8:	4603      	mov	r3, r0
 80007da:	461a      	mov	r2, r3
 80007dc:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <Cmd_load_all+0x1b4>)
 80007de:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil,"DEVICE.TXT", FA_READ|FA_WRITE);
 80007e0:	2203      	movs	r2, #3
 80007e2:	4944      	ldr	r1, [pc, #272]	; (80008f4 <Cmd_load_all+0x1b8>)
 80007e4:	4844      	ldr	r0, [pc, #272]	; (80008f8 <Cmd_load_all+0x1bc>)
 80007e6:	f006 fd77 	bl	80072d8 <f_open>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <Cmd_load_all+0x1b4>)
 80007f0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; (f_eof(&fil) == 0); i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	75fb      	strb	r3, [r7, #23]
 80007f6:	e055      	b.n	80008a4 <Cmd_load_all+0x168>
		{
		   memset(SDbuffer,0, sizeof(SDbuffer));
 80007f8:	22c8      	movs	r2, #200	; 0xc8
 80007fa:	2100      	movs	r1, #0
 80007fc:	4840      	ldr	r0, [pc, #256]	; (8000900 <Cmd_load_all+0x1c4>)
 80007fe:	f009 fe14 	bl	800a42a <memset>
		   f_gets((char*)SDbuffer, sizeof(SDbuffer), &fil);
 8000802:	4a3d      	ldr	r2, [pc, #244]	; (80008f8 <Cmd_load_all+0x1bc>)
 8000804:	21c8      	movs	r1, #200	; 0xc8
 8000806:	483e      	ldr	r0, [pc, #248]	; (8000900 <Cmd_load_all+0x1c4>)
 8000808:	f007 f951 	bl	8007aae <f_gets>
		   ptr = parse_device(SDbuffer, strlen(SDbuffer));
 800080c:	483c      	ldr	r0, [pc, #240]	; (8000900 <Cmd_load_all+0x1c4>)
 800080e:	f7ff fce9 	bl	80001e4 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	b29b      	uxth	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	4839      	ldr	r0, [pc, #228]	; (8000900 <Cmd_load_all+0x1c4>)
 800081a:	f001 fced 	bl	80021f8 <parse_device>
 800081e:	4602      	mov	r2, r0
 8000820:	4b3a      	ldr	r3, [pc, #232]	; (800090c <Cmd_load_all+0x1d0>)
 8000822:	601a      	str	r2, [r3, #0]
		   addDevice((dynamic+i), ptr);
 8000824:	4b38      	ldr	r3, [pc, #224]	; (8000908 <Cmd_load_all+0x1cc>)
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	7dfa      	ldrb	r2, [r7, #23]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	18ca      	adds	r2, r1, r3
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <Cmd_load_all+0x1d0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	4610      	mov	r0, r2
 800083c:	f001 ff3a 	bl	80026b4 <addDevice>
		   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i ,(ptr)->channel,(ptr)->deviceID,(ptr)->func,
 8000840:	7dfc      	ldrb	r4, [r7, #23]
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <Cmd_load_all+0x1d0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	469c      	mov	ip, r3
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <Cmd_load_all+0x1d0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	785b      	ldrb	r3, [r3, #1]
 8000850:	469e      	mov	lr, r3
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <Cmd_load_all+0x1d0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	789b      	ldrb	r3, [r3, #2]
 8000858:	461d      	mov	r5, r3
				   (ptr)->deviceChannel,(ptr)->devicestatus,(ptr)->deviceType,(ptr)->deviceName,
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <Cmd_load_all+0x1d0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	889b      	ldrh	r3, [r3, #4]
		   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i ,(ptr)->channel,(ptr)->deviceID,(ptr)->func,
 8000860:	461e      	mov	r6, r3
				   (ptr)->deviceChannel,(ptr)->devicestatus,(ptr)->deviceType,(ptr)->deviceName,
 8000862:	4b2a      	ldr	r3, [pc, #168]	; (800090c <Cmd_load_all+0x1d0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	78db      	ldrb	r3, [r3, #3]
		   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i ,(ptr)->channel,(ptr)->deviceID,(ptr)->func,
 8000868:	607b      	str	r3, [r7, #4]
				   (ptr)->deviceChannel,(ptr)->devicestatus,(ptr)->deviceType,(ptr)->deviceName,
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <Cmd_load_all+0x1d0>)
 800086c:	681b      	ldr	r3, [r3, #0]
		   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i ,(ptr)->channel,(ptr)->deviceID,(ptr)->func,
 800086e:	689b      	ldr	r3, [r3, #8]
				   (ptr)->deviceChannel,(ptr)->devicestatus,(ptr)->deviceType,(ptr)->deviceName,
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <Cmd_load_all+0x1d0>)
 8000872:	6812      	ldr	r2, [r2, #0]
		   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i ,(ptr)->channel,(ptr)->deviceID,(ptr)->func,
 8000874:	68d2      	ldr	r2, [r2, #12]
		           (ptr)->channeltitle,(ptr)->valueType);
 8000876:	4925      	ldr	r1, [pc, #148]	; (800090c <Cmd_load_all+0x1d0>)
 8000878:	6809      	ldr	r1, [r1, #0]
		   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i ,(ptr)->channel,(ptr)->deviceID,(ptr)->func,
 800087a:	6909      	ldr	r1, [r1, #16]
		           (ptr)->channeltitle,(ptr)->valueType);
 800087c:	4823      	ldr	r0, [pc, #140]	; (800090c <Cmd_load_all+0x1d0>)
 800087e:	6800      	ldr	r0, [r0, #0]
		   printf("\r\nLine %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i ,(ptr)->channel,(ptr)->deviceID,(ptr)->func,
 8000880:	6940      	ldr	r0, [r0, #20]
 8000882:	9006      	str	r0, [sp, #24]
 8000884:	9105      	str	r1, [sp, #20]
 8000886:	9204      	str	r2, [sp, #16]
 8000888:	9303      	str	r3, [sp, #12]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	9601      	str	r6, [sp, #4]
 8000890:	9500      	str	r5, [sp, #0]
 8000892:	4673      	mov	r3, lr
 8000894:	4662      	mov	r2, ip
 8000896:	4621      	mov	r1, r4
 8000898:	481d      	ldr	r0, [pc, #116]	; (8000910 <Cmd_load_all+0x1d4>)
 800089a:	f009 fe37 	bl	800a50c <iprintf>
		for (uint8_t i = 0; (f_eof(&fil) == 0); i++)
 800089e:	7dfb      	ldrb	r3, [r7, #23]
 80008a0:	3301      	adds	r3, #1
 80008a2:	75fb      	strb	r3, [r7, #23]
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <Cmd_load_all+0x1bc>)
 80008a6:	699a      	ldr	r2, [r3, #24]
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <Cmd_load_all+0x1bc>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d1a3      	bne.n	80007f8 <Cmd_load_all+0xbc>
		}
		fresult = f_close(&fil);
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <Cmd_load_all+0x1bc>)
 80008b2:	f007 f8cd 	bl	8007a50 <f_close>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <Cmd_load_all+0x1b4>)
 80008bc:	701a      	strb	r2, [r3, #0]
		printf("\r\nALLOCATED DEVICE MEMORY--------------------------------------------------------\r\n");
 80008be:	4815      	ldr	r0, [pc, #84]	; (8000914 <Cmd_load_all+0x1d8>)
 80008c0:	f009 fe98 	bl	800a5f4 <puts>
//		{
//		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i,(dynamic+i)->channel,(dynamic+i)->deviceID,(dynamic+i)->func,
//				   (dynamic+i)->deviceChannel,(dynamic+i)->devicestatus,(dynamic+i)->deviceType,(dynamic+i)->deviceName,
//				   (dynamic+i)->channeltitle,(dynamic+i)->valueType);
//		}
		printf("\nNum of line: %d\r\n", line);
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <Cmd_load_all+0x1c0>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <Cmd_load_all+0x1c8>)
 80008cc:	f009 fe1e 	bl	800a50c <iprintf>
		printf("\r\nADDRESS--------------------------------------------------------\r\n");
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <Cmd_load_all+0x1dc>)
 80008d2:	f009 fe8f 	bl	800a5f4 <puts>
//		{
//			   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
//					   &(dynamic+i)->deviceChannel,&(dynamic+i)->devicestatus,&(dynamic+i)->deviceType,&(dynamic+i)->deviceName,
//					   &(dynamic+i)->channeltitle,&(dynamic+i)->valueType);
//		}
}
 80008d6:	bf00      	nop
 80008d8:	4618      	mov	r0, r3
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e0:	0800b5f4 	.word	0x0800b5f4
 80008e4:	0800b58c 	.word	0x0800b58c
 80008e8:	0800b604 	.word	0x0800b604
 80008ec:	20004350 	.word	0x20004350
 80008f0:	200046f8 	.word	0x200046f8
 80008f4:	0800b5e8 	.word	0x0800b5e8
 80008f8:	200046fc 	.word	0x200046fc
 80008fc:	20000274 	.word	0x20000274
 8000900:	200045ec 	.word	0x200045ec
 8000904:	0800b608 	.word	0x0800b608
 8000908:	20004584 	.word	0x20004584
 800090c:	20000270 	.word	0x20000270
 8000910:	0800b61c 	.word	0x0800b61c
 8000914:	0800b644 	.word	0x0800b644
 8000918:	0800b698 	.word	0x0800b698

0800091c <Cmd_allocate_device>:
int Cmd_allocate_device(int argc, char *argv[])
{
 800091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000920:	b090      	sub	sp, #64	; 0x40
 8000922:	af08      	add	r7, sp, #32
 8000924:	6178      	str	r0, [r7, #20]
 8000926:	6139      	str	r1, [r7, #16]
	printf("\nCmd_allocate_device\r\n");
 8000928:	4879      	ldr	r0, [pc, #484]	; (8000b10 <Cmd_allocate_device+0x1f4>)
 800092a:	f009 fe63 	bl	800a5f4 <puts>
	printf("------------------\r\n");
 800092e:	4879      	ldr	r0, [pc, #484]	; (8000b14 <Cmd_allocate_device+0x1f8>)
 8000930:	f009 fe60 	bl	800a5f4 <puts>
	printf("\r\nALLOCATED DEVICE MEMORY--------------------------------------------------------\r\n");
 8000934:	4878      	ldr	r0, [pc, #480]	; (8000b18 <Cmd_allocate_device+0x1fc>)
 8000936:	f009 fe5d 	bl	800a5f4 <puts>
	for (uint8_t i = 0; i < 28; i++)
 800093a:	2300      	movs	r3, #0
 800093c:	77fb      	strb	r3, [r7, #31]
 800093e:	e069      	b.n	8000a14 <Cmd_allocate_device+0xf8>
	{
	   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i,(dynamic+i)->channel,(dynamic+i)->deviceID,(dynamic+i)->func,
 8000940:	7ffe      	ldrb	r6, [r7, #31]
 8000942:	4b76      	ldr	r3, [pc, #472]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000944:	6819      	ldr	r1, [r3, #0]
 8000946:	7ffa      	ldrb	r2, [r7, #31]
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	440b      	add	r3, r1
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	469c      	mov	ip, r3
 8000956:	4b71      	ldr	r3, [pc, #452]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000958:	6819      	ldr	r1, [r3, #0]
 800095a:	7ffa      	ldrb	r2, [r7, #31]
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	440b      	add	r3, r1
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	469e      	mov	lr, r3
 800096a:	4b6c      	ldr	r3, [pc, #432]	; (8000b1c <Cmd_allocate_device+0x200>)
 800096c:	6819      	ldr	r1, [r3, #0]
 800096e:	7ffa      	ldrb	r2, [r7, #31]
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	60fb      	str	r3, [r7, #12]
			   (dynamic+i)->deviceChannel,(dynamic+i)->devicestatus,(dynamic+i)->deviceType,(dynamic+i)->deviceName,
 800097e:	4b67      	ldr	r3, [pc, #412]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000980:	6819      	ldr	r1, [r3, #0]
 8000982:	7ffa      	ldrb	r2, [r7, #31]
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	440b      	add	r3, r1
 800098e:	889b      	ldrh	r3, [r3, #4]
	   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i,(dynamic+i)->channel,(dynamic+i)->deviceID,(dynamic+i)->func,
 8000990:	60bb      	str	r3, [r7, #8]
			   (dynamic+i)->deviceChannel,(dynamic+i)->devicestatus,(dynamic+i)->deviceType,(dynamic+i)->deviceName,
 8000992:	4b62      	ldr	r3, [pc, #392]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000994:	6819      	ldr	r1, [r3, #0]
 8000996:	7ffa      	ldrb	r2, [r7, #31]
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	78db      	ldrb	r3, [r3, #3]
	   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i,(dynamic+i)->channel,(dynamic+i)->deviceID,(dynamic+i)->func,
 80009a4:	607b      	str	r3, [r7, #4]
			   (dynamic+i)->deviceChannel,(dynamic+i)->devicestatus,(dynamic+i)->deviceType,(dynamic+i)->deviceName,
 80009a6:	4b5d      	ldr	r3, [pc, #372]	; (8000b1c <Cmd_allocate_device+0x200>)
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	7ffa      	ldrb	r2, [r7, #31]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	440b      	add	r3, r1
	   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i,(dynamic+i)->channel,(dynamic+i)->deviceID,(dynamic+i)->func,
 80009b6:	6899      	ldr	r1, [r3, #8]
			   (dynamic+i)->deviceChannel,(dynamic+i)->devicestatus,(dynamic+i)->deviceType,(dynamic+i)->deviceName,
 80009b8:	4b58      	ldr	r3, [pc, #352]	; (8000b1c <Cmd_allocate_device+0x200>)
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	7ffa      	ldrb	r2, [r7, #31]
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	4403      	add	r3, r0
	   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i,(dynamic+i)->channel,(dynamic+i)->deviceID,(dynamic+i)->func,
 80009c8:	68d8      	ldr	r0, [r3, #12]
			   (dynamic+i)->channeltitle,(dynamic+i)->valueType);
 80009ca:	4b54      	ldr	r3, [pc, #336]	; (8000b1c <Cmd_allocate_device+0x200>)
 80009cc:	681c      	ldr	r4, [r3, #0]
 80009ce:	7ffa      	ldrb	r2, [r7, #31]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4423      	add	r3, r4
	   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i,(dynamic+i)->channel,(dynamic+i)->deviceID,(dynamic+i)->func,
 80009da:	691c      	ldr	r4, [r3, #16]
			   (dynamic+i)->channeltitle,(dynamic+i)->valueType);
 80009dc:	4b4f      	ldr	r3, [pc, #316]	; (8000b1c <Cmd_allocate_device+0x200>)
 80009de:	681d      	ldr	r5, [r3, #0]
 80009e0:	7ffa      	ldrb	r2, [r7, #31]
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	442b      	add	r3, r5
	   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%s\t%s\t%s\t%s",i,(dynamic+i)->channel,(dynamic+i)->deviceID,(dynamic+i)->func,
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	9306      	str	r3, [sp, #24]
 80009f0:	9405      	str	r4, [sp, #20]
 80009f2:	9004      	str	r0, [sp, #16]
 80009f4:	9103      	str	r1, [sp, #12]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	9202      	str	r2, [sp, #8]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	9201      	str	r2, [sp, #4]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4673      	mov	r3, lr
 8000a04:	4662      	mov	r2, ip
 8000a06:	4631      	mov	r1, r6
 8000a08:	4845      	ldr	r0, [pc, #276]	; (8000b20 <Cmd_allocate_device+0x204>)
 8000a0a:	f009 fd7f 	bl	800a50c <iprintf>
	for (uint8_t i = 0; i < 28; i++)
 8000a0e:	7ffb      	ldrb	r3, [r7, #31]
 8000a10:	3301      	adds	r3, #1
 8000a12:	77fb      	strb	r3, [r7, #31]
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b1b      	cmp	r3, #27
 8000a18:	d992      	bls.n	8000940 <Cmd_allocate_device+0x24>
	}
	printf("\r\nADDRESS--------------------------------------------------------\r\n");
 8000a1a:	4842      	ldr	r0, [pc, #264]	; (8000b24 <Cmd_allocate_device+0x208>)
 8000a1c:	f009 fdea 	bl	800a5f4 <puts>
	for (uint8_t i = 0; i < 28; i++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	77bb      	strb	r3, [r7, #30]
 8000a24:	e06b      	b.n	8000afe <Cmd_allocate_device+0x1e2>
	{
		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
 8000a26:	f897 c01e 	ldrb.w	ip, [r7, #30]
 8000a2a:	4b3c      	ldr	r3, [pc, #240]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	7fba      	ldrb	r2, [r7, #30]
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	4698      	mov	r8, r3
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	7fba      	ldrb	r2, [r7, #30]
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f103 0e01 	add.w	lr, r3, #1
 8000a50:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000a52:	6819      	ldr	r1, [r3, #0]
 8000a54:	7fba      	ldrb	r2, [r7, #30]
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	440b      	add	r3, r1
 8000a60:	1c99      	adds	r1, r3, #2
				   &(dynamic+i)->deviceChannel,&(dynamic+i)->devicestatus,&(dynamic+i)->deviceType,&(dynamic+i)->deviceName,
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	7fba      	ldrb	r2, [r7, #30]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4403      	add	r3, r0
		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
 8000a72:	1d18      	adds	r0, r3, #4
				   &(dynamic+i)->deviceChannel,&(dynamic+i)->devicestatus,&(dynamic+i)->deviceType,&(dynamic+i)->deviceName,
 8000a74:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000a76:	681c      	ldr	r4, [r3, #0]
 8000a78:	7fba      	ldrb	r2, [r7, #30]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	4423      	add	r3, r4
		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
 8000a84:	1cdc      	adds	r4, r3, #3
				   &(dynamic+i)->deviceChannel,&(dynamic+i)->devicestatus,&(dynamic+i)->deviceType,&(dynamic+i)->deviceName,
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000a88:	681d      	ldr	r5, [r3, #0]
 8000a8a:	7fba      	ldrb	r2, [r7, #30]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	442b      	add	r3, r5
		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
 8000a96:	f103 0508 	add.w	r5, r3, #8
				   &(dynamic+i)->deviceChannel,&(dynamic+i)->devicestatus,&(dynamic+i)->deviceType,&(dynamic+i)->deviceName,
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000a9c:	681e      	ldr	r6, [r3, #0]
 8000a9e:	7fba      	ldrb	r2, [r7, #30]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	4433      	add	r3, r6
		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
 8000aaa:	f103 060c 	add.w	r6, r3, #12
				   &(dynamic+i)->channeltitle,&(dynamic+i)->valueType);
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	7fba      	ldrb	r2, [r7, #30]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4413      	add	r3, r2
		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
 8000ac2:	3310      	adds	r3, #16
 8000ac4:	60fb      	str	r3, [r7, #12]
				   &(dynamic+i)->channeltitle,&(dynamic+i)->valueType);
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <Cmd_allocate_device+0x200>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	60ba      	str	r2, [r7, #8]
 8000acc:	7fba      	ldrb	r2, [r7, #30]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	4413      	add	r3, r2
		   printf("\r\nDevice %d: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",i,&(dynamic+i)->channel,&(dynamic+i)->deviceID,&(dynamic+i)->func,
 8000ada:	3314      	adds	r3, #20
 8000adc:	9306      	str	r3, [sp, #24]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	9305      	str	r3, [sp, #20]
 8000ae2:	9604      	str	r6, [sp, #16]
 8000ae4:	9503      	str	r5, [sp, #12]
 8000ae6:	9402      	str	r4, [sp, #8]
 8000ae8:	9001      	str	r0, [sp, #4]
 8000aea:	9100      	str	r1, [sp, #0]
 8000aec:	4673      	mov	r3, lr
 8000aee:	4642      	mov	r2, r8
 8000af0:	4661      	mov	r1, ip
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <Cmd_allocate_device+0x20c>)
 8000af4:	f009 fd0a 	bl	800a50c <iprintf>
	for (uint8_t i = 0; i < 28; i++)
 8000af8:	7fbb      	ldrb	r3, [r7, #30]
 8000afa:	3301      	adds	r3, #1
 8000afc:	77bb      	strb	r3, [r7, #30]
 8000afe:	7fbb      	ldrb	r3, [r7, #30]
 8000b00:	2b1b      	cmp	r3, #27
 8000b02:	d990      	bls.n	8000a26 <Cmd_allocate_device+0x10a>
	}
}
 8000b04:	bf00      	nop
 8000b06:	4618      	mov	r0, r3
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b10:	0800b6dc 	.word	0x0800b6dc
 8000b14:	0800b58c 	.word	0x0800b58c
 8000b18:	0800b644 	.word	0x0800b644
 8000b1c:	20004584 	.word	0x20004584
 8000b20:	0800b6f4 	.word	0x0800b6f4
 8000b24:	0800b698 	.word	0x0800b698
 8000b28:	0800b71c 	.word	0x0800b71c

08000b2c <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2101      	movs	r1, #1
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <SELECT+0x14>)
 8000b36:	f002 fbd9 	bl	80032ec <HAL_GPIO_WritePin>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40020400 	.word	0x40020400

08000b44 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <DESELECT+0x14>)
 8000b4e:	f002 fbcd 	bl	80032ec <HAL_GPIO_WritePin>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40020400 	.word	0x40020400

08000b5c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000b66:	bf00      	nop
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <SPI_TxByte+0x30>)
 8000b6a:	f003 fbb6 	bl	80042da <HAL_SPI_GetState>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d1f9      	bne.n	8000b68 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000b74:	1df9      	adds	r1, r7, #7
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <SPI_TxByte+0x30>)
 8000b7e:	f003 f8ce 	bl	8003d1e <HAL_SPI_Transmit>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000495c 	.word	0x2000495c

08000b90 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000b96:	23ff      	movs	r3, #255	; 0xff
 8000b98:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000b9e:	bf00      	nop
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <SPI_RxByte+0x38>)
 8000ba2:	f003 fb9a 	bl	80042da <HAL_SPI_GetState>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d1f9      	bne.n	8000ba0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000bac:	1dba      	adds	r2, r7, #6
 8000bae:	1df9      	adds	r1, r7, #7
 8000bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <SPI_RxByte+0x38>)
 8000bba:	f003 f9ec 	bl	8003f96 <HAL_SPI_TransmitReceive>

  return data;
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000495c 	.word	0x2000495c

08000bcc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000bd4:	f7ff ffdc 	bl	8000b90 <SPI_RxByte>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	701a      	strb	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <SD_ReadyWait+0x34>)
 8000bf0:	2232      	movs	r2, #50	; 0x32
 8000bf2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000bf4:	f7ff ffcc 	bl	8000b90 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000bf8:	f7ff ffca 	bl	8000b90 <SPI_RxByte>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2bff      	cmp	r3, #255	; 0xff
 8000c04:	d004      	beq.n	8000c10 <SD_ReadyWait+0x28>
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SD_ReadyWait+0x34>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f3      	bne.n	8000bf8 <SD_ReadyWait+0x10>

  return res;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200049fc 	.word	0x200049fc

08000c20 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c26:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c2a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000c2c:	f7ff ff8a 	bl	8000b44 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	e005      	b.n	8000c42 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	f7ff ff90 	bl	8000b5c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b09      	cmp	r3, #9
 8000c46:	ddf6      	ble.n	8000c36 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000c48:	f7ff ff70 	bl	8000b2c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000c60:	2395      	movs	r3, #149	; 0x95
 8000c62:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e009      	b.n	8000c7e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000c6a:	1d3a      	adds	r2, r7, #4
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff72 	bl	8000b5c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b05      	cmp	r3, #5
 8000c82:	ddf2      	ble.n	8000c6a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000c84:	e002      	b.n	8000c8c <SD_PowerOn+0x6c>
  {
    Count--;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000c8c:	f7ff ff80 	bl	8000b90 <SPI_RxByte>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d002      	beq.n	8000c9c <SD_PowerOn+0x7c>
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1f4      	bne.n	8000c86 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000c9c:	f7ff ff52 	bl	8000b44 <DESELECT>
  SPI_TxByte(0XFF);
 8000ca0:	20ff      	movs	r0, #255	; 0xff
 8000ca2:	f7ff ff5b 	bl	8000b5c <SPI_TxByte>

  PowerFlag = 1;
 8000ca6:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <SD_PowerOn+0x94>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000281 	.word	0x20000281

08000cb8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <SD_PowerOff+0x14>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20000281 	.word	0x20000281

08000cd0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <SD_CheckPower+0x14>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000281 	.word	0x20000281

08000ce8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <SD_RxDataBlock+0x68>)
 8000cf4:	220a      	movs	r2, #10
 8000cf6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000cf8:	f7ff ff4a 	bl	8000b90 <SPI_RxByte>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2bff      	cmp	r3, #255	; 0xff
 8000d04:	d104      	bne.n	8000d10 <SD_RxDataBlock+0x28>
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <SD_RxDataBlock+0x68>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f3      	bne.n	8000cf8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	2bfe      	cmp	r3, #254	; 0xfe
 8000d14:	d001      	beq.n	8000d1a <SD_RxDataBlock+0x32>
    return FALSE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e016      	b.n	8000d48 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff53 	bl	8000bcc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff4d 	bl	8000bcc <SPI_RxBytePtr>
  } while(btr -= 2);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	3b02      	subs	r3, #2
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1ed      	bne.n	8000d1a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000d3e:	f7ff ff27 	bl	8000b90 <SPI_RxByte>
  SPI_RxByte();
 8000d42:	f7ff ff25 	bl	8000b90 <SPI_RxByte>

  return TRUE;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200049fd 	.word	0x200049fd

08000d54 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000d64:	f7ff ff40 	bl	8000be8 <SD_ReadyWait>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2bff      	cmp	r3, #255	; 0xff
 8000d6c:	d001      	beq.n	8000d72 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e040      	b.n	8000df4 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fef1 	bl	8000b5c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	2bfd      	cmp	r3, #253	; 0xfd
 8000d7e:	d031      	beq.n	8000de4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fee5 	bl	8000b5c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fede 	bl	8000b5c <SPI_TxByte>
    } while (--wc);
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	73bb      	strb	r3, [r7, #14]
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1eb      	bne.n	8000d84 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000dac:	f7ff fef0 	bl	8000b90 <SPI_RxByte>
    SPI_RxByte();
 8000db0:	f7ff feee 	bl	8000b90 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000db4:	e00b      	b.n	8000dce <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000db6:	f7ff feeb 	bl	8000b90 <SPI_RxByte>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d006      	beq.n	8000dd6 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	2b40      	cmp	r3, #64	; 0x40
 8000dd2:	d9f0      	bls.n	8000db6 <SD_TxDataBlock+0x62>
 8000dd4:	e000      	b.n	8000dd8 <SD_TxDataBlock+0x84>
        break;
 8000dd6:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000dd8:	bf00      	nop
 8000dda:	f7ff fed9 	bl	8000b90 <SPI_RxByte>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0fa      	beq.n	8000dda <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f003 031f 	and.w	r3, r3, #31
 8000dea:	2b05      	cmp	r3, #5
 8000dec:	d101      	bne.n	8000df2 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e08:	f7ff feee 	bl	8000be8 <SD_ReadyWait>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2bff      	cmp	r3, #255	; 0xff
 8000e10:	d001      	beq.n	8000e16 <SD_SendCmd+0x1a>
    return 0xFF;
 8000e12:	23ff      	movs	r3, #255	; 0xff
 8000e14:	e040      	b.n	8000e98 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe9f 	bl	8000b5c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	0e1b      	lsrs	r3, r3, #24
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fe99 	bl	8000b5c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	0c1b      	lsrs	r3, r3, #16
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fe93 	bl	8000b5c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe8d 	bl	8000b5c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe88 	bl	8000b5c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b40      	cmp	r3, #64	; 0x40
 8000e54:	d101      	bne.n	8000e5a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000e56:	2395      	movs	r3, #149	; 0x95
 8000e58:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b48      	cmp	r3, #72	; 0x48
 8000e5e:	d101      	bne.n	8000e64 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000e60:	2387      	movs	r3, #135	; 0x87
 8000e62:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe78 	bl	8000b5c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b4c      	cmp	r3, #76	; 0x4c
 8000e70:	d101      	bne.n	8000e76 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000e72:	f7ff fe8d 	bl	8000b90 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000e76:	230a      	movs	r3, #10
 8000e78:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000e7a:	f7ff fe89 	bl	8000b90 <SPI_RxByte>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000e82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	da05      	bge.n	8000e96 <SD_SendCmd+0x9a>
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	73bb      	strb	r3, [r7, #14]
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f1      	bne.n	8000e7a <SD_SendCmd+0x7e>

  return res;
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e0d5      	b.n	8001060 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000eb4:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <SD_disk_initialize+0x1c8>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <SD_disk_initialize+0x2a>
    return Stat;
 8000ec2:	4b69      	ldr	r3, [pc, #420]	; (8001068 <SD_disk_initialize+0x1c8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	e0ca      	b.n	8001060 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000eca:	f7ff fea9 	bl	8000c20 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000ece:	f7ff fe2d 	bl	8000b2c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2040      	movs	r0, #64	; 0x40
 8000eda:	f7ff ff8f 	bl	8000dfc <SD_SendCmd>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	f040 80a5 	bne.w	8001030 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000ee6:	4b61      	ldr	r3, [pc, #388]	; (800106c <SD_disk_initialize+0x1cc>)
 8000ee8:	2264      	movs	r2, #100	; 0x64
 8000eea:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000eec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000ef0:	2048      	movs	r0, #72	; 0x48
 8000ef2:	f7ff ff83 	bl	8000dfc <SD_SendCmd>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d158      	bne.n	8000fae <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e00c      	b.n	8000f1c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f02:	7bfc      	ldrb	r4, [r7, #15]
 8000f04:	f7ff fe44 	bl	8000b90 <SPI_RxByte>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4423      	add	r3, r4
 8000f12:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d9ef      	bls.n	8000f02 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f22:	7abb      	ldrb	r3, [r7, #10]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	f040 8083 	bne.w	8001030 <SD_disk_initialize+0x190>
 8000f2a:	7afb      	ldrb	r3, [r7, #11]
 8000f2c:	2baa      	cmp	r3, #170	; 0xaa
 8000f2e:	d17f      	bne.n	8001030 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000f30:	2100      	movs	r1, #0
 8000f32:	2077      	movs	r0, #119	; 0x77
 8000f34:	f7ff ff62 	bl	8000dfc <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d807      	bhi.n	8000f4e <SD_disk_initialize+0xae>
 8000f3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f42:	2069      	movs	r0, #105	; 0x69
 8000f44:	f7ff ff5a 	bl	8000dfc <SD_SendCmd>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000f4e:	4b47      	ldr	r3, [pc, #284]	; (800106c <SD_disk_initialize+0x1cc>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1eb      	bne.n	8000f30 <SD_disk_initialize+0x90>
 8000f58:	e000      	b.n	8000f5c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000f5a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f5c:	4b43      	ldr	r3, [pc, #268]	; (800106c <SD_disk_initialize+0x1cc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d064      	beq.n	8001030 <SD_disk_initialize+0x190>
 8000f66:	2100      	movs	r1, #0
 8000f68:	207a      	movs	r0, #122	; 0x7a
 8000f6a:	f7ff ff47 	bl	8000dfc <SD_SendCmd>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d15d      	bne.n	8001030 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e00c      	b.n	8000f94 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000f7a:	7bfc      	ldrb	r4, [r7, #15]
 8000f7c:	f7ff fe08 	bl	8000b90 <SPI_RxByte>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4423      	add	r3, r4
 8000f8a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3301      	adds	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d9ef      	bls.n	8000f7a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000f9a:	7a3b      	ldrb	r3, [r7, #8]
 8000f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SD_disk_initialize+0x108>
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	e000      	b.n	8000faa <SD_disk_initialize+0x10a>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	73bb      	strb	r3, [r7, #14]
 8000fac:	e040      	b.n	8001030 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2077      	movs	r0, #119	; 0x77
 8000fb2:	f7ff ff23 	bl	8000dfc <SD_SendCmd>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d808      	bhi.n	8000fce <SD_disk_initialize+0x12e>
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2069      	movs	r0, #105	; 0x69
 8000fc0:	f7ff ff1c 	bl	8000dfc <SD_SendCmd>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d801      	bhi.n	8000fce <SD_disk_initialize+0x12e>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e000      	b.n	8000fd0 <SD_disk_initialize+0x130>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d10e      	bne.n	8000ff6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2077      	movs	r0, #119	; 0x77
 8000fdc:	f7ff ff0e 	bl	8000dfc <SD_SendCmd>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d80e      	bhi.n	8001004 <SD_disk_initialize+0x164>
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2069      	movs	r0, #105	; 0x69
 8000fea:	f7ff ff07 	bl	8000dfc <SD_SendCmd>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d107      	bne.n	8001004 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000ff4:	e00d      	b.n	8001012 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2041      	movs	r0, #65	; 0x41
 8000ffa:	f7ff feff 	bl	8000dfc <SD_SendCmd>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <SD_disk_initialize+0x1cc>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1e1      	bne.n	8000fd2 <SD_disk_initialize+0x132>
 800100e:	e000      	b.n	8001012 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001010:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <SD_disk_initialize+0x1cc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d007      	beq.n	800102c <SD_disk_initialize+0x18c>
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	2050      	movs	r0, #80	; 0x50
 8001022:	f7ff feeb 	bl	8000dfc <SD_SendCmd>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <SD_disk_initialize+0x1d0>)
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001036:	f7ff fd85 	bl	8000b44 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800103a:	f7ff fda9 	bl	8000b90 <SPI_RxByte>

  if (type)
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <SD_disk_initialize+0x1c8>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SD_disk_initialize+0x1c8>)
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e001      	b.n	800105a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001056:	f7ff fe2f 	bl	8000cb8 <SD_PowerOff>
  }

  return Stat;
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <SD_disk_initialize+0x1c8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	20000030 	.word	0x20000030
 800106c:	200049fd 	.word	0x200049fd
 8001070:	20000280 	.word	0x20000280

08001074 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001084:	2301      	movs	r3, #1
 8001086:	e002      	b.n	800108e <SD_disk_status+0x1a>

  return Stat;
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <SD_disk_status+0x28>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000030 	.word	0x20000030

080010a0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <SD_disk_read+0x1c>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <SD_disk_read+0x20>
    return RES_PARERR;
 80010bc:	2304      	movs	r3, #4
 80010be:	e051      	b.n	8001164 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <SD_disk_read+0xcc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e048      	b.n	8001164 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <SD_disk_read+0xd0>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	025b      	lsls	r3, r3, #9
 80010e2:	607b      	str	r3, [r7, #4]

  SELECT();
 80010e4:	f7ff fd22 	bl	8000b2c <SELECT>

  if (count == 1)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d111      	bne.n	8001112 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	2051      	movs	r0, #81	; 0x51
 80010f2:	f7ff fe83 	bl	8000dfc <SD_SendCmd>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d129      	bne.n	8001150 <SD_disk_read+0xb0>
 80010fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001100:	68b8      	ldr	r0, [r7, #8]
 8001102:	f7ff fdf1 	bl	8000ce8 <SD_RxDataBlock>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d021      	beq.n	8001150 <SD_disk_read+0xb0>
      count = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	e01e      	b.n	8001150 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	2052      	movs	r0, #82	; 0x52
 8001116:	f7ff fe71 	bl	8000dfc <SD_SendCmd>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d117      	bne.n	8001150 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f7ff fddf 	bl	8000ce8 <SD_RxDataBlock>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001136:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	3b01      	subs	r3, #1
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1ed      	bne.n	8001120 <SD_disk_read+0x80>
 8001144:	e000      	b.n	8001148 <SD_disk_read+0xa8>
          break;
 8001146:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001148:	2100      	movs	r1, #0
 800114a:	204c      	movs	r0, #76	; 0x4c
 800114c:	f7ff fe56 	bl	8000dfc <SD_SendCmd>
    }
  }

  DESELECT();
 8001150:	f7ff fcf8 	bl	8000b44 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001154:	f7ff fd1c 	bl	8000b90 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf14      	ite	ne
 800115e:	2301      	movne	r3, #1
 8001160:	2300      	moveq	r3, #0
 8001162:	b2db      	uxtb	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000030 	.word	0x20000030
 8001170:	20000280 	.word	0x20000280

08001174 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <SD_disk_write+0x1c>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <SD_disk_write+0x20>
    return RES_PARERR;
 8001190:	2304      	movs	r3, #4
 8001192:	e06b      	b.n	800126c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001194:	4b37      	ldr	r3, [pc, #220]	; (8001274 <SD_disk_write+0x100>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e062      	b.n	800126c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <SD_disk_write+0x100>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80011b4:	2302      	movs	r3, #2
 80011b6:	e059      	b.n	800126c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <SD_disk_write+0x104>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	025b      	lsls	r3, r3, #9
 80011c8:	607b      	str	r3, [r7, #4]

  SELECT();
 80011ca:	f7ff fcaf 	bl	8000b2c <SELECT>

  if (count == 1)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d110      	bne.n	80011f6 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	2058      	movs	r0, #88	; 0x58
 80011d8:	f7ff fe10 	bl	8000dfc <SD_SendCmd>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d13a      	bne.n	8001258 <SD_disk_write+0xe4>
 80011e2:	21fe      	movs	r1, #254	; 0xfe
 80011e4:	68b8      	ldr	r0, [r7, #8]
 80011e6:	f7ff fdb5 	bl	8000d54 <SD_TxDataBlock>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d033      	beq.n	8001258 <SD_disk_write+0xe4>
      count = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	e030      	b.n	8001258 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <SD_disk_write+0x104>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001202:	2100      	movs	r1, #0
 8001204:	2077      	movs	r0, #119	; 0x77
 8001206:	f7ff fdf9 	bl	8000dfc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	2057      	movs	r0, #87	; 0x57
 800120e:	f7ff fdf5 	bl	8000dfc <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2059      	movs	r0, #89	; 0x59
 8001216:	f7ff fdf1 	bl	8000dfc <SD_SendCmd>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d11b      	bne.n	8001258 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001220:	21fc      	movs	r1, #252	; 0xfc
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f7ff fd96 	bl	8000d54 <SD_TxDataBlock>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00a      	beq.n	8001244 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001234:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1ee      	bne.n	8001220 <SD_disk_write+0xac>
 8001242:	e000      	b.n	8001246 <SD_disk_write+0xd2>
          break;
 8001244:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001246:	21fd      	movs	r1, #253	; 0xfd
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fd83 	bl	8000d54 <SD_TxDataBlock>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <SD_disk_write+0xe4>
      {
        count = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001258:	f7ff fc74 	bl	8000b44 <DESELECT>
  SPI_RxByte();
 800125c:	f7ff fc98 	bl	8000b90 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000030 	.word	0x20000030
 8001278:	20000280 	.word	0x20000280

0800127c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b08b      	sub	sp, #44	; 0x2c
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	603a      	str	r2, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	460b      	mov	r3, r1
 800128a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001296:	2304      	movs	r3, #4
 8001298:	e117      	b.n	80014ca <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d126      	bne.n	80012f4 <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d00e      	beq.n	80012cc <SD_disk_ioctl+0x50>
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d012      	beq.n	80012d8 <SD_disk_ioctl+0x5c>
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d11a      	bne.n	80012ec <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80012b6:	f7ff fd0b 	bl	8000cd0 <SD_CheckPower>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80012c0:	f7ff fcfa 	bl	8000cb8 <SD_PowerOff>
      res = RES_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012ca:	e0fc      	b.n	80014c6 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80012cc:	f7ff fca8 	bl	8000c20 <SD_PowerOn>
      res = RES_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012d6:	e0f6      	b.n	80014c6 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	1c5c      	adds	r4, r3, #1
 80012dc:	f7ff fcf8 	bl	8000cd0 <SD_CheckPower>
 80012e0:	4603      	mov	r3, r0
 80012e2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012ea:	e0ec      	b.n	80014c6 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80012ec:	2304      	movs	r3, #4
 80012ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f2:	e0e8      	b.n	80014c6 <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80012f4:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <SD_disk_ioctl+0x258>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8001302:	2303      	movs	r3, #3
 8001304:	e0e1      	b.n	80014ca <SD_disk_ioctl+0x24e>

    SELECT();
 8001306:	f7ff fc11 	bl	8000b2c <SELECT>

    switch (ctrl)
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	2b0d      	cmp	r3, #13
 800130e:	f200 80cb 	bhi.w	80014a8 <SD_disk_ioctl+0x22c>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <SD_disk_ioctl+0x9c>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001413 	.word	0x08001413
 800131c:	08001351 	.word	0x08001351
 8001320:	08001403 	.word	0x08001403
 8001324:	080014a9 	.word	0x080014a9
 8001328:	080014a9 	.word	0x080014a9
 800132c:	080014a9 	.word	0x080014a9
 8001330:	080014a9 	.word	0x080014a9
 8001334:	080014a9 	.word	0x080014a9
 8001338:	080014a9 	.word	0x080014a9
 800133c:	080014a9 	.word	0x080014a9
 8001340:	080014a9 	.word	0x080014a9
 8001344:	08001425 	.word	0x08001425
 8001348:	08001449 	.word	0x08001449
 800134c:	0800146d 	.word	0x0800146d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001350:	2100      	movs	r1, #0
 8001352:	2049      	movs	r0, #73	; 0x49
 8001354:	f7ff fd52 	bl	8000dfc <SD_SendCmd>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 80a8 	bne.w	80014b0 <SD_disk_ioctl+0x234>
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2110      	movs	r1, #16
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fcbe 	bl	8000ce8 <SD_RxDataBlock>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 809e 	beq.w	80014b0 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	099b      	lsrs	r3, r3, #6
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d10e      	bne.n	800139c <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800137e:	7d7b      	ldrb	r3, [r7, #21]
 8001380:	b29a      	uxth	r2, r3
 8001382:	7d3b      	ldrb	r3, [r7, #20]
 8001384:	b29b      	uxth	r3, r3
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	3301      	adds	r3, #1
 8001390:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001392:	8bfb      	ldrh	r3, [r7, #30]
 8001394:	029a      	lsls	r2, r3, #10
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e02e      	b.n	80013fa <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800139c:	7c7b      	ldrb	r3, [r7, #17]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	09db      	lsrs	r3, r3, #7
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	7d7b      	ldrb	r3, [r7, #21]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f003 0306 	and.w	r3, r3, #6
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3302      	adds	r3, #2
 80013c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80013c4:	7d3b      	ldrb	r3, [r7, #20]
 80013c6:	099b      	lsrs	r3, r3, #6
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	7cfb      	ldrb	r3, [r7, #19]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	7cbb      	ldrb	r3, [r7, #18]
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3301      	adds	r3, #1
 80013ea:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80013ec:	8bfa      	ldrh	r2, [r7, #30]
 80013ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013f2:	3b09      	subs	r3, #9
 80013f4:	409a      	lsls	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001400:	e056      	b.n	80014b0 <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001410:	e055      	b.n	80014be <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001412:	f7ff fbe9 	bl	8000be8 <SD_ReadyWait>
 8001416:	4603      	mov	r3, r0
 8001418:	2bff      	cmp	r3, #255	; 0xff
 800141a:	d14b      	bne.n	80014b4 <SD_disk_ioctl+0x238>
        res = RES_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001422:	e047      	b.n	80014b4 <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001424:	2100      	movs	r1, #0
 8001426:	2049      	movs	r0, #73	; 0x49
 8001428:	f7ff fce8 	bl	8000dfc <SD_SendCmd>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d142      	bne.n	80014b8 <SD_disk_ioctl+0x23c>
 8001432:	2110      	movs	r1, #16
 8001434:	6a38      	ldr	r0, [r7, #32]
 8001436:	f7ff fc57 	bl	8000ce8 <SD_RxDataBlock>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d03b      	beq.n	80014b8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001446:	e037      	b.n	80014b8 <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001448:	2100      	movs	r1, #0
 800144a:	204a      	movs	r0, #74	; 0x4a
 800144c:	f7ff fcd6 	bl	8000dfc <SD_SendCmd>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d132      	bne.n	80014bc <SD_disk_ioctl+0x240>
 8001456:	2110      	movs	r1, #16
 8001458:	6a38      	ldr	r0, [r7, #32]
 800145a:	f7ff fc45 	bl	8000ce8 <SD_RxDataBlock>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d02b      	beq.n	80014bc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800146a:	e027      	b.n	80014bc <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 800146c:	2100      	movs	r1, #0
 800146e:	207a      	movs	r0, #122	; 0x7a
 8001470:	f7ff fcc4 	bl	8000dfc <SD_SendCmd>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001480:	e00b      	b.n	800149a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8001482:	6a3c      	ldr	r4, [r7, #32]
 8001484:	1c63      	adds	r3, r4, #1
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	f7ff fb82 	bl	8000b90 <SPI_RxByte>
 800148c:	4603      	mov	r3, r0
 800148e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001490:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001494:	3301      	adds	r3, #1
 8001496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800149a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d9ef      	bls.n	8001482 <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80014a8:	2304      	movs	r3, #4
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ae:	e006      	b.n	80014be <SD_disk_ioctl+0x242>
      break;
 80014b0:	bf00      	nop
 80014b2:	e004      	b.n	80014be <SD_disk_ioctl+0x242>
      break;
 80014b4:	bf00      	nop
 80014b6:	e002      	b.n	80014be <SD_disk_ioctl+0x242>
      break;
 80014b8:	bf00      	nop
 80014ba:	e000      	b.n	80014be <SD_disk_ioctl+0x242>
      break;
 80014bc:	bf00      	nop
    }

    DESELECT();
 80014be:	f7ff fb41 	bl	8000b44 <DESELECT>
    SPI_RxByte();
 80014c2:	f7ff fb65 	bl	8000b90 <SPI_RxByte>
  }

  return res;
 80014c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	372c      	adds	r7, #44	; 0x2c
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000030 	.word	0x20000030

080014d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <vApplicationGetIdleTaskMemory+0x2c>)
 80014e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <vApplicationGetIdleTaskMemory+0x30>)
 80014ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000284 	.word	0x20000284
 8001508:	200002d8 	.word	0x200002d8

0800150c <MX_FREERTOS_Init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MX_FREERTOS_Init(void) {
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b098      	sub	sp, #96	; 0x60
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */

	osMessageQDef(xQueueControl, 1, xQueueControl_t);
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <MX_FREERTOS_Init+0xbc>)
 8001514:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueControlHandle = osMessageCreate(osMessageQ(xQueueControl), NULL);
 800151e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f006 fcea 	bl	8007efe <osMessageCreate>
 800152a:	4602      	mov	r2, r0
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <MX_FREERTOS_Init+0xc0>)
 800152e:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueMessage, 1, uint8_t);
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MX_FREERTOS_Init+0xc4>)
 8001532:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueMessageHandle = osMessageCreate(osMessageQ(xQueueMessage), NULL);
 800153c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f006 fcdb 	bl	8007efe <osMessageCreate>
 8001548:	4602      	mov	r2, r0
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_FREERTOS_Init+0xc8>)
 800154c:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueDownlink, 1, xQueueMbMqtt_t);
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MX_FREERTOS_Init+0xcc>)
 8001550:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001554:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001556:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueDownlinkHandle = osMessageCreate(osMessageQ(xQueueDownlink), NULL);
 800155a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f006 fccc 	bl	8007efe <osMessageCreate>
 8001566:	4602      	mov	r2, r0
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_FREERTOS_Init+0xd0>)
 800156a:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueUplink, 1, xQueueMbMqtt_t);
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_FREERTOS_Init+0xcc>)
 800156e:	f107 0420 	add.w	r4, r7, #32
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueUplinkHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f006 fcbd 	bl	8007efe <osMessageCreate>
 8001584:	4602      	mov	r2, r0
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_FREERTOS_Init+0xd4>)
 8001588:	601a      	str	r2, [r3, #0]

	osMessageQDef(xQueueReset, 1, sizeof(uint32_t));
	xQueueResetHandle = osMessageCreate(osMessageQ(xQueueUplink), NULL);
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fcb4 	bl	8007efe <osMessageCreate>
 8001596:	4602      	mov	r2, r0
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_FREERTOS_Init+0xd8>)
 800159a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_FREERTOS_Init+0xdc>)
 800159e:	1d3c      	adds	r4, r7, #4
 80015a0:	461d      	mov	r5, r3
 80015a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 fb8c 	bl	8007cd0 <osThreadCreate>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_FREERTOS_Init+0xe0>)
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	3760      	adds	r7, #96	; 0x60
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bdb0      	pop	{r4, r5, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800b744 	.word	0x0800b744
 80015cc:	20004944 	.word	0x20004944
 80015d0:	0800b754 	.word	0x0800b754
 80015d4:	20004958 	.word	0x20004958
 80015d8:	0800b764 	.word	0x0800b764
 80015dc:	20004950 	.word	0x20004950
 80015e0:	20004954 	.word	0x20004954
 80015e4:	2000494c 	.word	0x2000494c
 80015e8:	0800b780 	.word	0x0800b780
 80015ec:	20004948 	.word	0x20004948

080015f0 <StartDefaultTask>:
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
 void StartDefaultTask(void const * argument)
  {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  	/*SIm serive*/

  	/*Controller*/
  	xQueueControl_t xQueueControl;
  	#define PORT_DEFAULT_DELAY	1000
  	uint8_t uiSysState = SYS_START;
 80015f8:	2300      	movs	r3, #0
 80015fa:	72fb      	strb	r3, [r7, #11]
  	uint8_t uiSysUpdate = FALSE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
  	BaseType_t sysError;
  	int ret;
  	char *Badcommand = "Bad Command\r\n>";
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <StartDefaultTask+0x9c>)
 8001602:	61bb      	str	r3, [r7, #24]
  	/* Infinite loop */
  	for (;;) {
  		switch (uiSysState) {
 8001604:	7afb      	ldrb	r3, [r7, #11]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d00d      	beq.n	8001626 <StartDefaultTask+0x36>
 800160a:	2b02      	cmp	r3, #2
 800160c:	d012      	beq.n	8001634 <StartDefaultTask+0x44>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d12a      	bne.n	8001668 <StartDefaultTask+0x78>
  		case SYS_START:
  			printf("\r\n Task Controller: Implementing...  \r\n");
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <StartDefaultTask+0xa0>)
 8001614:	f008 ffee 	bl	800a5f4 <puts>
  			uiSysUpdate = TRUE;
 8001618:	2301      	movs	r3, #1
 800161a:	77fb      	strb	r3, [r7, #31]
  			uiSysState++;
 800161c:	7afb      	ldrb	r3, [r7, #11]
 800161e:	3301      	adds	r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	72fb      	strb	r3, [r7, #11]
  			break;
 8001624:	e020      	b.n	8001668 <StartDefaultTask+0x78>
  		case SYS_DEVICE:
//  			Cmd_load_all(NULL, NULL);
//  			Cmd_allocate_device(NULL, NULL);
  			uiSysUpdate = TRUE;
 8001626:	2301      	movs	r3, #1
 8001628:	77fb      	strb	r3, [r7, #31]
  			uiSysState++;
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	3301      	adds	r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	72fb      	strb	r3, [r7, #11]
  			break;
 8001632:	e019      	b.n	8001668 <StartDefaultTask+0x78>
		case SYS_DEFAULT:
			if (gotCommandFlag == 1) {
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <StartDefaultTask+0xa4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d114      	bne.n	8001666 <StartDefaultTask+0x76>
				gotCommandFlag = 0;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <StartDefaultTask+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
				ret = CmdLineProcess(commandBuffer);
 8001642:	4815      	ldr	r0, [pc, #84]	; (8001698 <StartDefaultTask+0xa8>)
 8001644:	f7fe ffac 	bl	80005a0 <CmdLineProcess>
 8001648:	6178      	str	r0, [r7, #20]
				if (ret == CMDLINE_BAD_CMD){
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d109      	bne.n	8001666 <StartDefaultTask+0x76>
					HAL_UART_Transmit(&huart6, Badcommand, strlen(Badcommand),100);
 8001652:	69b8      	ldr	r0, [r7, #24]
 8001654:	f7fe fdc6 	bl	80001e4 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	480e      	ldr	r0, [pc, #56]	; (800169c <StartDefaultTask+0xac>)
 8001662:	f003 fa0e 	bl	8004a82 <HAL_UART_Transmit>
				}
			}
			//osDelay(10);
			break;
 8001666:	bf00      	nop
		}
		if ((uiSysUpdate == TRUE) && (uiSysState != SYS_DEFAULT)) {
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d1ca      	bne.n	8001604 <StartDefaultTask+0x14>
 800166e:	7afb      	ldrb	r3, [r7, #11]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d0c7      	beq.n	8001604 <StartDefaultTask+0x14>
			xQueueSend(xQueueMessageHandle, &uiSysState, 0);
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <StartDefaultTask+0xb0>)
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	f107 010b 	add.w	r1, r7, #11
 800167c:	2300      	movs	r3, #0
 800167e:	2200      	movs	r2, #0
 8001680:	f006 fe4e 	bl	8008320 <xQueueGenericSend>
			uiSysUpdate = FALSE;
 8001684:	2300      	movs	r3, #0
 8001686:	77fb      	strb	r3, [r7, #31]
  		switch (uiSysState) {
 8001688:	e7bc      	b.n	8001604 <StartDefaultTask+0x14>
 800168a:	bf00      	nop
 800168c:	0800b79c 	.word	0x0800b79c
 8001690:	0800b7ac 	.word	0x0800b7ac
 8001694:	2000027c 	.word	0x2000027c
 8001698:	20004288 	.word	0x20004288
 800169c:	200046b4 	.word	0x200046b4
 80016a0:	20004958 	.word	0x20004958

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80016a8:	f001 fad0 	bl	8002c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ac:	f000 f826 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //   fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b0:	f000 f8ee 	bl	8001890 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016b4:	f000 f88c 	bl	80017d0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80016b8:	f003 ffb2 	bl	8005620 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 80016bc:	f000 f8be 	bl	800183c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n ********* Access Controller Board **************** \r\n");
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <main+0x48>)
 80016c2:	f008 ff97 	bl	800a5f4 <puts>
	printf("\r\n NTT BK \r\n");
 80016c6:	480a      	ldr	r0, [pc, #40]	; (80016f0 <main+0x4c>)
 80016c8:	f008 ff94 	bl	800a5f4 <puts>
	printf("\r\n System  starting \r\n");
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <main+0x50>)
 80016ce:	f008 ff91 	bl	800a5f4 <puts>
 __HAL_UART_ENABLE_IT(&huart6,UART_IT_RXNE);
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <main+0x54>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <main+0x54>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0220 	orr.w	r2, r2, #32
 80016e0:	60da      	str	r2, [r3, #12]
  MX_FREERTOS_Init();
 80016e2:	f7ff ff13 	bl	800150c <MX_FREERTOS_Init>
//  Cmd_load_all(NULL, NULL);
//  Cmd_allocate_device(NULL, NULL);
  /* USER CODE END 2 */
  /* Start scheduler */
  osKernelStart();
 80016e6:	f006 faec 	bl	8007cc2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <main+0x46>
 80016ec:	0800b7d4 	.word	0x0800b7d4
 80016f0:	0800b80c 	.word	0x0800b80c
 80016f4:	0800b818 	.word	0x0800b818
 80016f8:	200046b4 	.word	0x200046b4

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b094      	sub	sp, #80	; 0x50
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	2230      	movs	r2, #48	; 0x30
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f008 fe8d 	bl	800a42a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <SystemClock_Config+0xcc>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a27      	ldr	r2, [pc, #156]	; (80017c8 <SystemClock_Config+0xcc>)
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <SystemClock_Config+0xcc>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <SystemClock_Config+0xd0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <SystemClock_Config+0xd0>)
 8001746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <SystemClock_Config+0xd0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175c:	2301      	movs	r3, #1
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001760:	2310      	movs	r3, #16
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001764:	2302      	movs	r3, #2
 8001766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001768:	2300      	movs	r3, #0
 800176a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800176c:	2308      	movs	r3, #8
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001770:	23a8      	movs	r3, #168	; 0xa8
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001774:	2302      	movs	r3, #2
 8001776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001778:	2304      	movs	r3, #4
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4618      	mov	r0, r3
 8001782:	f001 fdcd 	bl	8003320 <HAL_RCC_OscConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800178c:	f000 f90a 	bl	80019a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001790:	230f      	movs	r3, #15
 8001792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001794:	2302      	movs	r3, #2
 8001796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800179c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2105      	movs	r1, #5
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 f82e 	bl	8003810 <HAL_RCC_ClockConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ba:	f000 f8f3 	bl	80019a4 <Error_Handler>
  }
}
 80017be:	bf00      	nop
 80017c0:	3750      	adds	r7, #80	; 0x50
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi1.Instance = SPI1;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_SPI1_Init+0x64>)
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <MX_SPI1_Init+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_SPI1_Init+0x64>)
 80017dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_SPI1_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_SPI1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_SPI1_Init+0x64>)
 80017fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001800:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_SPI1_Init+0x64>)
 8001804:	2220      	movs	r2, #32
 8001806:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_SPI1_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_SPI1_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_SPI1_Init+0x64>)
 800181c:	220a      	movs	r2, #10
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(& hspi1) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_SPI1_Init+0x64>)
 8001822:	f002 f9f3 	bl	8003c0c <HAL_SPI_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800182c:	f000 f8ba 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000495c 	.word	0x2000495c
 8001838:	40013000 	.word	0x40013000

0800183c <MX_USART6_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart6.Instance = USART6;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART6_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800184c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001874:	f003 f8b8 	bl	80049e8 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f000 f891 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200046b4 	.word	0x200046b4
 800188c:	40011400 	.word	0x40011400

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a31      	ldr	r2, [pc, #196]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a23      	ldr	r2, [pc, #140]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <MX_GPIO_Init+0xe4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_GPIO_Init+0xe4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <MX_GPIO_Init+0xe4>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_GPIO_Init+0xe4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191c:	4816      	ldr	r0, [pc, #88]	; (8001978 <MX_GPIO_Init+0xe8>)
 800191e:	f001 fce5 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	480f      	ldr	r0, [pc, #60]	; (8001978 <MX_GPIO_Init+0xe8>)
 800193c:	f001 fb3c 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <MX_GPIO_Init+0xec>)
 8001948:	f001 fcd0 	bl	80032ec <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_GPIO_Init+0xe8>)
 8001966:	f001 fb27 	bl	8002fb8 <HAL_GPIO_Init>

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020c00 	.word	0x40020c00

08001980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001992:	f001 f97d 	bl	8002c90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40010000 	.word	0x40010000

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019aa:	e7fe      	b.n	80019aa <Error_Handler+0x6>

080019ac <__io_putchar>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
PUTCHAR_PROTOTYPE
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
//  USART_SendData(EVAL_COM1, (uint8_t) ch);
	HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 80019b4:	1d39      	adds	r1, r7, #4
 80019b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ba:	2201      	movs	r2, #1
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <__io_putchar+0x20>)
 80019be:	f003 f860 	bl	8004a82 <HAL_UART_Transmit>

  /* Loop until the end of transmission */
//  while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
//  {}

  return ch;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200046b4 	.word	0x200046b4

080019d0 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d801      	bhi.n	80019ea <jsmn_alloc_token+0x1a>
    return NULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e014      	b.n	8001a14 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	6051      	str	r1, [r2, #4]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8001a12:	697b      	ldr	r3, [r7, #20]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	7afa      	ldrb	r2, [r7, #11]
 8001a34:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	605a      	str	r2, [r3, #4]
  token->end = end;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001a68:	e034      	b.n	8001ad4 <jsmn_parse_primitive+0x80>
    switch (js[parser->pos]) {
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	4413      	add	r3, r2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d03a      	beq.n	8001aee <jsmn_parse_primitive+0x9a>
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	dc06      	bgt.n	8001a8a <jsmn_parse_primitive+0x36>
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	db0f      	blt.n	8001aa0 <jsmn_parse_primitive+0x4c>
 8001a80:	2b0a      	cmp	r3, #10
 8001a82:	dd34      	ble.n	8001aee <jsmn_parse_primitive+0x9a>
 8001a84:	2b0d      	cmp	r3, #13
 8001a86:	d032      	beq.n	8001aee <jsmn_parse_primitive+0x9a>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8001a88:	e00a      	b.n	8001aa0 <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8001a8a:	2b3a      	cmp	r3, #58	; 0x3a
 8001a8c:	d02f      	beq.n	8001aee <jsmn_parse_primitive+0x9a>
 8001a8e:	2b3a      	cmp	r3, #58	; 0x3a
 8001a90:	dc02      	bgt.n	8001a98 <jsmn_parse_primitive+0x44>
 8001a92:	2b2c      	cmp	r3, #44	; 0x2c
 8001a94:	d02b      	beq.n	8001aee <jsmn_parse_primitive+0x9a>
      break;
 8001a96:	e003      	b.n	8001aa0 <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8001a98:	2b5d      	cmp	r3, #93	; 0x5d
 8001a9a:	d028      	beq.n	8001aee <jsmn_parse_primitive+0x9a>
 8001a9c:	2b7d      	cmp	r3, #125	; 0x7d
 8001a9e:	d026      	beq.n	8001aee <jsmn_parse_primitive+0x9a>
      break;
 8001aa0:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b1f      	cmp	r3, #31
 8001aae:	d906      	bls.n	8001abe <jsmn_parse_primitive+0x6a>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b7e      	cmp	r3, #126	; 0x7e
 8001abc:	d905      	bls.n	8001aca <jsmn_parse_primitive+0x76>
      parser->pos = start;
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8001ac4:	f06f 0301 	mvn.w	r3, #1
 8001ac8:	e03a      	b.n	8001b40 <jsmn_parse_primitive+0xec>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d909      	bls.n	8001af2 <jsmn_parse_primitive+0x9e>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1be      	bne.n	8001a6a <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8001aec:	e001      	b.n	8001af2 <jsmn_parse_primitive+0x9e>
      goto found;
 8001aee:	bf00      	nop
 8001af0:	e000      	b.n	8001af4 <jsmn_parse_primitive+0xa0>
found:
 8001af2:	bf00      	nop
  if (tokens == NULL) {
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <jsmn_parse_primitive+0xb4>
    parser->pos--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
    return 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e01b      	b.n	8001b40 <jsmn_parse_primitive+0xec>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001b08:	6a3a      	ldr	r2, [r7, #32]
 8001b0a:	6839      	ldr	r1, [r7, #0]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ff5f 	bl	80019d0 <jsmn_alloc_token>
 8001b12:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <jsmn_parse_primitive+0xd2>
    parser->pos = start;
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
 8001b24:	e00c      	b.n	8001b40 <jsmn_parse_primitive+0xec>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	6938      	ldr	r0, [r7, #16]
 8001b30:	f7ff ff76 	bl	8001a20 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	601a      	str	r2, [r3, #0]
  return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	61bb      	str	r3, [r7, #24]

  parser->pos++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	601a      	str	r2, [r3, #0]

  /* Skip starting quote */
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001b66:	e14e      	b.n	8001e06 <jsmn_parse_string+0x2be>
    char c = js[parser->pos];
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b22      	cmp	r3, #34	; 0x22
 8001b78:	d11d      	bne.n	8001bb6 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <jsmn_parse_string+0x3c>
        return 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e152      	b.n	8001e2a <jsmn_parse_string+0x2e2>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff ff21 	bl	80019d0 <jsmn_alloc_token>
 8001b8e:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	e143      	b.n	8001e2a <jsmn_parse_string+0x2e2>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2103      	movs	r1, #3
 8001bac:	6938      	ldr	r0, [r7, #16]
 8001bae:	f7ff ff37 	bl	8001a20 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e139      	b.n	8001e2a <jsmn_parse_string+0x2e2>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b5c      	cmp	r3, #92	; 0x5c
 8001bba:	f040 811c 	bne.w	8001df6 <jsmn_parse_string+0x2ae>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	f240 8115 	bls.w	8001df6 <jsmn_parse_string+0x2ae>
      int i;
      parser->pos++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	3b22      	subs	r3, #34	; 0x22
 8001be2:	2b53      	cmp	r3, #83	; 0x53
 8001be4:	f200 8101 	bhi.w	8001dea <jsmn_parse_string+0x2a2>
 8001be8:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <jsmn_parse_string+0xa8>)
 8001bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bee:	bf00      	nop
 8001bf0:	08001dfb 	.word	0x08001dfb
 8001bf4:	08001deb 	.word	0x08001deb
 8001bf8:	08001deb 	.word	0x08001deb
 8001bfc:	08001deb 	.word	0x08001deb
 8001c00:	08001deb 	.word	0x08001deb
 8001c04:	08001deb 	.word	0x08001deb
 8001c08:	08001deb 	.word	0x08001deb
 8001c0c:	08001deb 	.word	0x08001deb
 8001c10:	08001deb 	.word	0x08001deb
 8001c14:	08001deb 	.word	0x08001deb
 8001c18:	08001deb 	.word	0x08001deb
 8001c1c:	08001deb 	.word	0x08001deb
 8001c20:	08001deb 	.word	0x08001deb
 8001c24:	08001dfb 	.word	0x08001dfb
 8001c28:	08001deb 	.word	0x08001deb
 8001c2c:	08001deb 	.word	0x08001deb
 8001c30:	08001deb 	.word	0x08001deb
 8001c34:	08001deb 	.word	0x08001deb
 8001c38:	08001deb 	.word	0x08001deb
 8001c3c:	08001deb 	.word	0x08001deb
 8001c40:	08001deb 	.word	0x08001deb
 8001c44:	08001deb 	.word	0x08001deb
 8001c48:	08001deb 	.word	0x08001deb
 8001c4c:	08001deb 	.word	0x08001deb
 8001c50:	08001deb 	.word	0x08001deb
 8001c54:	08001deb 	.word	0x08001deb
 8001c58:	08001deb 	.word	0x08001deb
 8001c5c:	08001deb 	.word	0x08001deb
 8001c60:	08001deb 	.word	0x08001deb
 8001c64:	08001deb 	.word	0x08001deb
 8001c68:	08001deb 	.word	0x08001deb
 8001c6c:	08001deb 	.word	0x08001deb
 8001c70:	08001deb 	.word	0x08001deb
 8001c74:	08001deb 	.word	0x08001deb
 8001c78:	08001deb 	.word	0x08001deb
 8001c7c:	08001deb 	.word	0x08001deb
 8001c80:	08001deb 	.word	0x08001deb
 8001c84:	08001deb 	.word	0x08001deb
 8001c88:	08001deb 	.word	0x08001deb
 8001c8c:	08001deb 	.word	0x08001deb
 8001c90:	08001deb 	.word	0x08001deb
 8001c94:	08001deb 	.word	0x08001deb
 8001c98:	08001deb 	.word	0x08001deb
 8001c9c:	08001deb 	.word	0x08001deb
 8001ca0:	08001deb 	.word	0x08001deb
 8001ca4:	08001deb 	.word	0x08001deb
 8001ca8:	08001deb 	.word	0x08001deb
 8001cac:	08001deb 	.word	0x08001deb
 8001cb0:	08001deb 	.word	0x08001deb
 8001cb4:	08001deb 	.word	0x08001deb
 8001cb8:	08001deb 	.word	0x08001deb
 8001cbc:	08001deb 	.word	0x08001deb
 8001cc0:	08001deb 	.word	0x08001deb
 8001cc4:	08001deb 	.word	0x08001deb
 8001cc8:	08001deb 	.word	0x08001deb
 8001ccc:	08001deb 	.word	0x08001deb
 8001cd0:	08001deb 	.word	0x08001deb
 8001cd4:	08001deb 	.word	0x08001deb
 8001cd8:	08001dfb 	.word	0x08001dfb
 8001cdc:	08001deb 	.word	0x08001deb
 8001ce0:	08001deb 	.word	0x08001deb
 8001ce4:	08001deb 	.word	0x08001deb
 8001ce8:	08001deb 	.word	0x08001deb
 8001cec:	08001deb 	.word	0x08001deb
 8001cf0:	08001dfb 	.word	0x08001dfb
 8001cf4:	08001deb 	.word	0x08001deb
 8001cf8:	08001deb 	.word	0x08001deb
 8001cfc:	08001deb 	.word	0x08001deb
 8001d00:	08001dfb 	.word	0x08001dfb
 8001d04:	08001deb 	.word	0x08001deb
 8001d08:	08001deb 	.word	0x08001deb
 8001d0c:	08001deb 	.word	0x08001deb
 8001d10:	08001deb 	.word	0x08001deb
 8001d14:	08001deb 	.word	0x08001deb
 8001d18:	08001deb 	.word	0x08001deb
 8001d1c:	08001deb 	.word	0x08001deb
 8001d20:	08001dfb 	.word	0x08001dfb
 8001d24:	08001deb 	.word	0x08001deb
 8001d28:	08001deb 	.word	0x08001deb
 8001d2c:	08001deb 	.word	0x08001deb
 8001d30:	08001dfb 	.word	0x08001dfb
 8001d34:	08001deb 	.word	0x08001deb
 8001d38:	08001dfb 	.word	0x08001dfb
 8001d3c:	08001d41 	.word	0x08001d41
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e037      	b.n	8001dc0 <jsmn_parse_string+0x278>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	4413      	add	r3, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b2f      	cmp	r3, #47	; 0x2f
 8001d5c:	d906      	bls.n	8001d6c <jsmn_parse_string+0x224>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b39      	cmp	r3, #57	; 0x39
 8001d6a:	d921      	bls.n	8001db0 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	4413      	add	r3, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001d76:	2b40      	cmp	r3, #64	; 0x40
 8001d78:	d906      	bls.n	8001d88 <jsmn_parse_string+0x240>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b46      	cmp	r3, #70	; 0x46
 8001d86:	d913      	bls.n	8001db0 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001d92:	2b60      	cmp	r3, #96	; 0x60
 8001d94:	d906      	bls.n	8001da4 <jsmn_parse_string+0x25c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b66      	cmp	r3, #102	; 0x66
 8001da2:	d905      	bls.n	8001db0 <jsmn_parse_string+0x268>
            parser->pos = start;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8001daa:	f06f 0301 	mvn.w	r3, #1
 8001dae:	e03c      	b.n	8001e2a <jsmn_parse_string+0x2e2>
          }
          parser->pos++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	601a      	str	r2, [r3, #0]
             i++) {
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	dc0b      	bgt.n	8001dde <jsmn_parse_string+0x296>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d906      	bls.n	8001dde <jsmn_parse_string+0x296>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1b8      	bne.n	8001d50 <jsmn_parse_string+0x208>
        }
        parser->pos--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	601a      	str	r2, [r3, #0]
        break;
 8001de8:	e008      	b.n	8001dfc <jsmn_parse_string+0x2b4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8001df0:	f06f 0301 	mvn.w	r3, #1
 8001df4:	e019      	b.n	8001e2a <jsmn_parse_string+0x2e2>
      }
    }
 8001df6:	bf00      	nop
 8001df8:	e000      	b.n	8001dfc <jsmn_parse_string+0x2b4>
        break;
 8001dfa:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d907      	bls.n	8001e20 <jsmn_parse_string+0x2d8>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f47f aea4 	bne.w	8001b68 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8001e26:	f06f 0302 	mvn.w	r3, #2
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop

08001e34 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001e48:	e15f      	b.n	800210a <jsmn_parse+0x2d6>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8001e56:	7ffb      	ldrb	r3, [r7, #31]
 8001e58:	2b2c      	cmp	r3, #44	; 0x2c
 8001e5a:	f000 80dd 	beq.w	8002018 <jsmn_parse+0x1e4>
 8001e5e:	2b2c      	cmp	r3, #44	; 0x2c
 8001e60:	dc10      	bgt.n	8001e84 <jsmn_parse+0x50>
 8001e62:	2b0d      	cmp	r3, #13
 8001e64:	f000 8141 	beq.w	80020ea <jsmn_parse+0x2b6>
 8001e68:	2b0d      	cmp	r3, #13
 8001e6a:	dc04      	bgt.n	8001e76 <jsmn_parse+0x42>
 8001e6c:	3b09      	subs	r3, #9
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	f200 8119 	bhi.w	80020a6 <jsmn_parse+0x272>
      break;
    case '\t':
    case '\r':
    case '\n':
    case ' ':
      break;
 8001e74:	e139      	b.n	80020ea <jsmn_parse+0x2b6>
    switch (c) {
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	f000 8137 	beq.w	80020ea <jsmn_parse+0x2b6>
 8001e7c:	2b22      	cmp	r3, #34	; 0x22
 8001e7e:	f000 80a1 	beq.w	8001fc4 <jsmn_parse+0x190>
 8001e82:	e110      	b.n	80020a6 <jsmn_parse+0x272>
 8001e84:	2b5d      	cmp	r3, #93	; 0x5d
 8001e86:	d043      	beq.n	8001f10 <jsmn_parse+0xdc>
 8001e88:	2b5d      	cmp	r3, #93	; 0x5d
 8001e8a:	dc05      	bgt.n	8001e98 <jsmn_parse+0x64>
 8001e8c:	2b3a      	cmp	r3, #58	; 0x3a
 8001e8e:	f000 80bc 	beq.w	800200a <jsmn_parse+0x1d6>
 8001e92:	2b5b      	cmp	r3, #91	; 0x5b
 8001e94:	d005      	beq.n	8001ea2 <jsmn_parse+0x6e>
 8001e96:	e106      	b.n	80020a6 <jsmn_parse+0x272>
 8001e98:	2b7b      	cmp	r3, #123	; 0x7b
 8001e9a:	d002      	beq.n	8001ea2 <jsmn_parse+0x6e>
 8001e9c:	2b7d      	cmp	r3, #125	; 0x7d
 8001e9e:	d037      	beq.n	8001f10 <jsmn_parse+0xdc>
 8001ea0:	e101      	b.n	80020a6 <jsmn_parse+0x272>
      count++;
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 811f 	beq.w	80020ee <jsmn_parse+0x2ba>
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb2:	6839      	ldr	r1, [r7, #0]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff fd8b 	bl	80019d0 <jsmn_alloc_token>
 8001eba:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <jsmn_parse+0x94>
        return JSMN_ERROR_NOMEM;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e14f      	b.n	8002168 <jsmn_parse+0x334>
      if (parser->toksuper != -1) {
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d00a      	beq.n	8001ee8 <jsmn_parse+0xb4>
        jsmntok_t *t = &tokens[parser->toksuper];
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
        t->size++;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	60da      	str	r2, [r3, #12]
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8001ee8:	7ffb      	ldrb	r3, [r7, #31]
 8001eea:	2b7b      	cmp	r3, #123	; 0x7b
 8001eec:	d101      	bne.n	8001ef2 <jsmn_parse+0xbe>
 8001eee:	2201      	movs	r2, #1
 8001ef0:	e000      	b.n	8001ef4 <jsmn_parse+0xc0>
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	609a      	str	r2, [r3, #8]
      break;
 8001f0e:	e0f7      	b.n	8002100 <jsmn_parse+0x2cc>
      if (tokens == NULL) {
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80ed 	beq.w	80020f2 <jsmn_parse+0x2be>
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8001f18:	7ffb      	ldrb	r3, [r7, #31]
 8001f1a:	2b7d      	cmp	r3, #125	; 0x7d
 8001f1c:	d101      	bne.n	8001f22 <jsmn_parse+0xee>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <jsmn_parse+0xf0>
 8001f22:	2302      	movs	r3, #2
 8001f24:	77bb      	strb	r3, [r7, #30]
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2e:	e024      	b.n	8001f7a <jsmn_parse+0x146>
        token = &tokens[i];
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f42:	d017      	beq.n	8001f74 <jsmn_parse+0x140>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d112      	bne.n	8001f74 <jsmn_parse+0x140>
          if (token->type != type) {
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	7fba      	ldrb	r2, [r7, #30]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d002      	beq.n	8001f5e <jsmn_parse+0x12a>
            return JSMN_ERROR_INVAL;
 8001f58:	f06f 0301 	mvn.w	r3, #1
 8001f5c:	e104      	b.n	8002168 <jsmn_parse+0x334>
          parser->toksuper = -1;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	609a      	str	r2, [r3, #8]
          break;
 8001f72:	e005      	b.n	8001f80 <jsmn_parse+0x14c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	3b01      	subs	r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	dad7      	bge.n	8001f30 <jsmn_parse+0xfc>
      if (i == -1) {
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d119      	bne.n	8001fbc <jsmn_parse+0x188>
        return JSMN_ERROR_INVAL;
 8001f88:	f06f 0301 	mvn.w	r3, #1
 8001f8c:	e0ec      	b.n	8002168 <jsmn_parse+0x334>
        token = &tokens[i];
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d009      	beq.n	8001fb6 <jsmn_parse+0x182>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d104      	bne.n	8001fb6 <jsmn_parse+0x182>
          parser->toksuper = i;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	609a      	str	r2, [r3, #8]
          break;
 8001fb2:	bf00      	nop
      break;
 8001fb4:	e0a4      	b.n	8002100 <jsmn_parse+0x2cc>
      for (; i >= 0; i--) {
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	dae5      	bge.n	8001f8e <jsmn_parse+0x15a>
      break;
 8001fc2:	e09d      	b.n	8002100 <jsmn_parse+0x2cc>
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7ff fdba 	bl	8001b48 <jsmn_parse_string>
 8001fd4:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da01      	bge.n	8001fe0 <jsmn_parse+0x1ac>
        return r;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	e0c3      	b.n	8002168 <jsmn_parse+0x334>
      count++;
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fee:	f000 8082 	beq.w	80020f6 <jsmn_parse+0x2c2>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d07e      	beq.n	80020f6 <jsmn_parse+0x2c2>
        tokens[parser->toksuper].size++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	3201      	adds	r2, #1
 8002006:	60da      	str	r2, [r3, #12]
      break;
 8002008:	e075      	b.n	80020f6 <jsmn_parse+0x2c2>
    case ':':
      parser->toksuper = parser->toknext - 1;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	461a      	mov	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	609a      	str	r2, [r3, #8]
      break;
 8002016:	e073      	b.n	8002100 <jsmn_parse+0x2cc>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d06d      	beq.n	80020fa <jsmn_parse+0x2c6>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d068      	beq.n	80020fa <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8002034:	2b02      	cmp	r3, #2
 8002036:	d060      	beq.n	80020fa <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002044:	2b01      	cmp	r3, #1
 8002046:	d058      	beq.n	80020fa <jsmn_parse+0x2c6>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	3b01      	subs	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	e025      	b.n	800209e <jsmn_parse+0x26a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d006      	beq.n	800206e <jsmn_parse+0x23a>
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d114      	bne.n	8002098 <jsmn_parse+0x264>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d00c      	beq.n	8002098 <jsmn_parse+0x264>
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	4413      	add	r3, r2
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d104      	bne.n	8002098 <jsmn_parse+0x264>
              parser->toksuper = i;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	609a      	str	r2, [r3, #8]
              break;
 8002094:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8002096:	e030      	b.n	80020fa <jsmn_parse+0x2c6>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	3b01      	subs	r3, #1
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dad6      	bge.n	8002052 <jsmn_parse+0x21e>
      break;
 80020a4:	e029      	b.n	80020fa <jsmn_parse+0x2c6>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fccf 	bl	8001a54 <jsmn_parse_primitive>
 80020b6:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	da01      	bge.n	80020c2 <jsmn_parse+0x28e>
        return r;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	e052      	b.n	8002168 <jsmn_parse+0x334>
      }
      count++;
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	3301      	adds	r3, #1
 80020c6:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d015      	beq.n	80020fe <jsmn_parse+0x2ca>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d012      	beq.n	80020fe <jsmn_parse+0x2ca>
        tokens[parser->toksuper].size++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	3201      	adds	r2, #1
 80020e6:	60da      	str	r2, [r3, #12]
      }
      break;
 80020e8:	e009      	b.n	80020fe <jsmn_parse+0x2ca>
      break;
 80020ea:	bf00      	nop
 80020ec:	e008      	b.n	8002100 <jsmn_parse+0x2cc>
        break;
 80020ee:	bf00      	nop
 80020f0:	e006      	b.n	8002100 <jsmn_parse+0x2cc>
        break;
 80020f2:	bf00      	nop
 80020f4:	e004      	b.n	8002100 <jsmn_parse+0x2cc>
      break;
 80020f6:	bf00      	nop
 80020f8:	e002      	b.n	8002100 <jsmn_parse+0x2cc>
      break;
 80020fa:	bf00      	nop
 80020fc:	e000      	b.n	8002100 <jsmn_parse+0x2cc>
      break;
 80020fe:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d907      	bls.n	8002124 <jsmn_parse+0x2f0>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	4413      	add	r3, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f47f ae93 	bne.w	8001e4a <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01d      	beq.n	8002166 <jsmn_parse+0x332>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	e015      	b.n	8002160 <jsmn_parse+0x32c>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002142:	d00a      	beq.n	800215a <jsmn_parse+0x326>
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d102      	bne.n	800215a <jsmn_parse+0x326>
        return JSMN_ERROR_PART;
 8002154:	f06f 0302 	mvn.w	r3, #2
 8002158:	e006      	b.n	8002168 <jsmn_parse+0x334>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	3b01      	subs	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2b00      	cmp	r3, #0
 8002164:	dae6      	bge.n	8002134 <jsmn_parse+0x300>
      }
    }
  }

  return count;
 8002166:	6a3b      	ldr	r3, [r7, #32]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f04f 32ff 	mov.w	r2, #4294967295
 800218a:	609a      	str	r2, [r3, #8]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <jsoneq>:
/* Private Variables -------------------------*/


/* Start implementation ---------------------- ---------------------- ---------------------- ---------------------- ----------------------*/

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int) strlen(s) == tok->end - tok->start
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d11e      	bne.n	80021ea <jsoneq+0x52>
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe f819 	bl	80001e4 <strlen>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4619      	mov	r1, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	4299      	cmp	r1, r3
 80021c2:	d112      	bne.n	80021ea <jsoneq+0x52>
			&& strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	461a      	mov	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1898      	adds	r0, r3, r2
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f008 fa3d 	bl	800a65a <strncmp>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <jsoneq+0x52>
		return 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e001      	b.n	80021ee <jsoneq+0x56>
	}
	return -1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <parse_device>:


data1_t *parse_device(char *Buffer, uint16_t BufferLen)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	f6ad 5d0c 	subw	sp, sp, #3340	; 0xd0c
 80021fe:	af02      	add	r7, sp, #8
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	6018      	str	r0, [r3, #0]
 8002204:	460a      	mov	r2, r1
 8002206:	1cbb      	adds	r3, r7, #2
 8002208:	801a      	strh	r2, [r3, #0]
	ptr = &test;
 800220a:	4bb9      	ldr	r3, [pc, #740]	; (80024f0 <parse_device+0x2f8>)
 800220c:	4ab9      	ldr	r2, [pc, #740]	; (80024f4 <parse_device+0x2fc>)
 800220e:	601a      	str	r2, [r3, #0]
	int i,r;
	jsmn_parser p;
	jsmntok_t t[JSON_MAX_LEN]; /* We expect no more than JSON_MAX_LEN tokens */
	jsmn_init(&p);
 8002210:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ffab 	bl	8002170 <jsmn_init>
	r = jsmn_parse(&p, Buffer,BufferLen, t,sizeof(t) / sizeof(t[0]));
 800221a:	1cbb      	adds	r3, r7, #2
 800221c:	881a      	ldrh	r2, [r3, #0]
 800221e:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8002222:	1d39      	adds	r1, r7, #4
 8002224:	f607 40ec 	addw	r0, r7, #3308	; 0xcec
 8002228:	23c8      	movs	r3, #200	; 0xc8
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4623      	mov	r3, r4
 800222e:	6809      	ldr	r1, [r1, #0]
 8002230:	f7ff fe00 	bl	8001e34 <jsmn_parse>
 8002234:	f8c7 0cf8 	str.w	r0, [r7, #3320]	; 0xcf8
	for (i = 1; i < r; i++) {
 8002238:	2301      	movs	r3, #1
 800223a:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800223e:	e222      	b.n	8002686 <parse_device+0x48e>
		if (jsoneq(Buffer, &t[i], "PORT") == 0) {
 8002240:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002244:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	18d1      	adds	r1, r2, r3
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4aaa      	ldr	r2, [pc, #680]	; (80024f8 <parse_device+0x300>)
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	f7ff ffa1 	bl	8002198 <jsoneq>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11a      	bne.n	8002292 <parse_device+0x9a>
			(ptr)->channel = atoi(Buffer + t[i + 1].start);
 800225c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002260:	3301      	adds	r3, #1
 8002262:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4413      	add	r3, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f008 f896 	bl	800a3a8 <atoi>
 800227c:	4602      	mov	r2, r0
 800227e:	4b9c      	ldr	r3, [pc, #624]	; (80024f0 <parse_device+0x2f8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]
			i++;
 8002286:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800228a:	3301      	adds	r3, #1
 800228c:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8002290:	e1f4      	b.n	800267c <parse_device+0x484>

		} else if (jsoneq(Buffer, &t[i], "ID") == 0) {
 8002292:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002296:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	18d1      	adds	r1, r2, r3
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	4a96      	ldr	r2, [pc, #600]	; (80024fc <parse_device+0x304>)
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	f7ff ff78 	bl	8002198 <jsoneq>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11a      	bne.n	80022e4 <parse_device+0xec>
			(ptr)->deviceID = atoi(Buffer + t[i + 1].start);
 80022ae:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80022b2:	3301      	adds	r3, #1
 80022b4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f008 f86d 	bl	800a3a8 <atoi>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b87      	ldr	r3, [pc, #540]	; (80024f0 <parse_device+0x2f8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	705a      	strb	r2, [r3, #1]
			i++;
 80022d8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80022dc:	3301      	adds	r3, #1
 80022de:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80022e2:	e1cb      	b.n	800267c <parse_device+0x484>
		} else if (jsoneq(Buffer, &t[i], "FC") == 0) {
 80022e4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80022e8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	18d1      	adds	r1, r2, r3
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	4a83      	ldr	r2, [pc, #524]	; (8002500 <parse_device+0x308>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	f7ff ff4f 	bl	8002198 <jsoneq>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11a      	bne.n	8002336 <parse_device+0x13e>
			(ptr)->func = atoi(Buffer + t[i + 1].start);
 8002300:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002304:	3301      	adds	r3, #1
 8002306:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4413      	add	r3, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f008 f844 	bl	800a3a8 <atoi>
 8002320:	4602      	mov	r2, r0
 8002322:	4b73      	ldr	r3, [pc, #460]	; (80024f0 <parse_device+0x2f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	709a      	strb	r2, [r3, #2]
			i++;
 800232a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800232e:	3301      	adds	r3, #1
 8002330:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8002334:	e1a2      	b.n	800267c <parse_device+0x484>

		} else if (jsoneq(Buffer, &t[i], "CHANNEL") == 0) {
 8002336:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800233a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	18d1      	adds	r1, r2, r3
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <parse_device+0x30c>)
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	f7ff ff26 	bl	8002198 <jsoneq>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d13f      	bne.n	80023d2 <parse_device+0x1da>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 8002352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002356:	2214      	movs	r2, #20
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f008 f865 	bl	800a42a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 8002360:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002364:	3301      	adds	r3, #1
 8002366:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	3304      	adds	r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1898      	adds	r0, r3, r2
 800237a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800237e:	3301      	adds	r3, #1
 8002380:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4413      	add	r3, r2
 8002388:	3308      	adds	r3, #8
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002390:	3301      	adds	r3, #1
 8002392:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	440b      	add	r3, r1
 800239a:	3304      	adds	r3, #4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023a6:	4601      	mov	r1, r0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f008 f968 	bl	800a67e <strncpy>
			(ptr)->deviceChannel = (uint16_t)strtol(temp, NULL, 0);
 80023ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f008 f9f2 	bl	800a7a0 <strtol>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <parse_device+0x2f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b292      	uxth	r2, r2
 80023c4:	809a      	strh	r2, [r3, #4]
			i++;
 80023c6:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80023d0:	e154      	b.n	800267c <parse_device+0x484>
		} else if (jsoneq(Buffer, &t[i], "DEVICETYPE") == 0) {
 80023d2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80023d6:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	18d1      	adds	r1, r2, r3
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	4a49      	ldr	r2, [pc, #292]	; (8002508 <parse_device+0x310>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f7ff fed8 	bl	8002198 <jsoneq>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d138      	bne.n	8002460 <parse_device+0x268>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 80023ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023f2:	2214      	movs	r2, #20
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f008 f817 	bl	800a42a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 80023fc:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002400:	3301      	adds	r3, #1
 8002402:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1898      	adds	r0, r3, r2
 8002416:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800241a:	3301      	adds	r3, #1
 800241c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	3308      	adds	r3, #8
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800242c:	3301      	adds	r3, #1
 800242e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	440b      	add	r3, r1
 8002436:	3304      	adds	r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	461a      	mov	r2, r3
 800243e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002442:	4601      	mov	r1, r0
 8002444:	4618      	mov	r0, r3
 8002446:	f008 f91a 	bl	800a67e <strncpy>
			(ptr)->deviceType = temp;
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <parse_device+0x2f8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002452:	609a      	str	r2, [r3, #8]
			i++;
 8002454:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002458:	3301      	adds	r3, #1
 800245a:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800245e:	e10d      	b.n	800267c <parse_device+0x484>
		} else if (jsoneq(Buffer, &t[i], "DEVICENAME") == 0) {
 8002460:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002464:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	18d1      	adds	r1, r2, r3
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4a27      	ldr	r2, [pc, #156]	; (800250c <parse_device+0x314>)
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f7ff fe91 	bl	8002198 <jsoneq>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d149      	bne.n	8002510 <parse_device+0x318>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 800247c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002480:	2214      	movs	r2, #20
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f007 ffd0 	bl	800a42a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 800248a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800248e:	3301      	adds	r3, #1
 8002490:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4413      	add	r3, r2
 8002498:	3304      	adds	r3, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	1898      	adds	r0, r3, r2
 80024a4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80024a8:	3301      	adds	r3, #1
 80024aa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	3308      	adds	r3, #8
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80024ba:	3301      	adds	r3, #1
 80024bc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	440b      	add	r3, r1
 80024c4:	3304      	adds	r3, #4
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d0:	4601      	mov	r1, r0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f008 f8d3 	bl	800a67e <strncpy>
			(ptr)->deviceName = temp;
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <parse_device+0x2f8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80024e0:	60da      	str	r2, [r3, #12]
			i++;
 80024e2:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80024e6:	3301      	adds	r3, #1
 80024e8:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80024ec:	e0c6      	b.n	800267c <parse_device+0x484>
 80024ee:	bf00      	nop
 80024f0:	200004d8 	.word	0x200004d8
 80024f4:	200004dc 	.word	0x200004dc
 80024f8:	0800b830 	.word	0x0800b830
 80024fc:	0800b838 	.word	0x0800b838
 8002500:	0800b83c 	.word	0x0800b83c
 8002504:	0800b840 	.word	0x0800b840
 8002508:	0800b848 	.word	0x0800b848
 800250c:	0800b854 	.word	0x0800b854
		} else if (jsoneq(Buffer, &t[i], "CHANNELTITLE") == 0) {
 8002510:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002514:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	18d1      	adds	r1, r2, r3
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	4a61      	ldr	r2, [pc, #388]	; (80026a4 <parse_device+0x4ac>)
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	f7ff fe39 	bl	8002198 <jsoneq>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d138      	bne.n	800259e <parse_device+0x3a6>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	2214      	movs	r2, #20
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f007 ff78 	bl	800a42a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 800253a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800253e:	3301      	adds	r3, #1
 8002540:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	1898      	adds	r0, r3, r2
 8002554:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002558:	3301      	adds	r3, #1
 800255a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	4413      	add	r3, r2
 8002562:	3308      	adds	r3, #8
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800256a:	3301      	adds	r3, #1
 800256c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	440b      	add	r3, r1
 8002574:	3304      	adds	r3, #4
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	461a      	mov	r2, r3
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4601      	mov	r1, r0
 8002582:	4618      	mov	r0, r3
 8002584:	f008 f87b 	bl	800a67e <strncpy>
			(ptr)->channeltitle = temp;
 8002588:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <parse_device+0x4b0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f107 021c 	add.w	r2, r7, #28
 8002590:	611a      	str	r2, [r3, #16]
			i++;
 8002592:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002596:	3301      	adds	r3, #1
 8002598:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800259c:	e06e      	b.n	800267c <parse_device+0x484>
		}else if (jsoneq(Buffer, &t[i], "VALUETYPE") == 0) {
 800259e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80025a2:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	18d1      	adds	r1, r2, r3
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	4a3f      	ldr	r2, [pc, #252]	; (80026ac <parse_device+0x4b4>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	f7ff fdf2 	bl	8002198 <jsoneq>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d138      	bne.n	800262c <parse_device+0x434>
			char temp[20];
			memset(temp,'\0',sizeof(temp));
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	2214      	movs	r2, #20
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f007 ff31 	bl	800a42a <memset>
			strncpy(temp,Buffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 80025c8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80025cc:	3301      	adds	r3, #1
 80025ce:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1898      	adds	r0, r3, r2
 80025e2:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80025e6:	3301      	adds	r3, #1
 80025e8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	3308      	adds	r3, #8
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80025f8:	3301      	adds	r3, #1
 80025fa:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	440b      	add	r3, r1
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	461a      	mov	r2, r3
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	4601      	mov	r1, r0
 8002610:	4618      	mov	r0, r3
 8002612:	f008 f834 	bl	800a67e <strncpy>
			(ptr)->valueType= temp;
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <parse_device+0x4b0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f107 0208 	add.w	r2, r7, #8
 800261e:	615a      	str	r2, [r3, #20]
			i++;
 8002620:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002624:	3301      	adds	r3, #1
 8002626:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800262a:	e027      	b.n	800267c <parse_device+0x484>
		} else if (jsoneq(Buffer, &t[i], "DEVICESTATUS") == 0) {
 800262c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002630:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	18d1      	adds	r1, r2, r3
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <parse_device+0x4b8>)
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	f7ff fdab 	bl	8002198 <jsoneq>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d119      	bne.n	800267c <parse_device+0x484>
			(ptr)->devicestatus = atoi(Buffer + t[i + 1].start);
 8002648:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800264c:	3301      	adds	r3, #1
 800264e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	4413      	add	r3, r2
 8002656:	3304      	adds	r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4413      	add	r3, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f007 fea0 	bl	800a3a8 <atoi>
 8002668:	4602      	mov	r2, r0
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <parse_device+0x4b0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	70da      	strb	r2, [r3, #3]
			i++;
 8002672:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002676:	3301      	adds	r3, #1
 8002678:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
	for (i = 1; i < r; i++) {
 800267c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002680:	3301      	adds	r3, #1
 8002682:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8002686:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
 800268a:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800268e:	429a      	cmp	r2, r3
 8002690:	f6ff add6 	blt.w	8002240 <parse_device+0x48>
		}
	}
	return ptr;
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <parse_device+0x4b0>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	f607 5704 	addw	r7, r7, #3332	; 0xd04
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	0800b860 	.word	0x0800b860
 80026a8:	200004d8 	.word	0x200004d8
 80026ac:	0800b870 	.word	0x0800b870
 80026b0:	0800b87c 	.word	0x0800b87c

080026b4 <addDevice>:

void addDevice(data1_t *destination, data1_t *data)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
   destination->channel = data->channel;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	701a      	strb	r2, [r3, #0]
   destination->deviceID = data->deviceID;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	785a      	ldrb	r2, [r3, #1]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	705a      	strb	r2, [r3, #1]
   destination->func = data->func;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	789a      	ldrb	r2, [r3, #2]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	709a      	strb	r2, [r3, #2]
   destination->devicestatus = data->devicestatus;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	78da      	ldrb	r2, [r3, #3]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	70da      	strb	r2, [r3, #3]
   destination->deviceChannel = data->deviceChannel;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	889a      	ldrh	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	809a      	strh	r2, [r3, #4]
   destination->deviceType = strdup(data->deviceType); // return NULL means fail
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f007 ff9a 	bl	800a624 <strdup>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
   destination->deviceName = strdup(data->deviceName);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f007 ff91 	bl	800a624 <strdup>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60da      	str	r2, [r3, #12]
   destination->channeltitle = strdup(data->channeltitle);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4618      	mov	r0, r3
 8002710:	f007 ff88 	bl	800a624 <strdup>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	611a      	str	r2, [r3, #16]
   destination->valueType = strdup(data->valueType);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4618      	mov	r0, r3
 8002722:	f007 ff7f 	bl	800a624 <strdup>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	615a      	str	r2, [r3, #20]

}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <SD_READ_ALL>:
	f_gets(SDbuffer,sizeof(SDbuffer), &fil);
	fresult = f_close(&fil);
}
/*-----------------------------------------------------------------------------------------*/
uint8_t  SD_READ_ALL(char *filename)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	uint8_t lines = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
	fresult = f_mount(&fs, "", 1);
 8002744:	2201      	movs	r2, #1
 8002746:	491e      	ldr	r1, [pc, #120]	; (80027c0 <SD_READ_ALL+0x88>)
 8002748:	481e      	ldr	r0, [pc, #120]	; (80027c4 <SD_READ_ALL+0x8c>)
 800274a:	f004 fd61 	bl	8007210 <f_mount>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <SD_READ_ALL+0x90>)
 8002754:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil,filename, FA_READ|FA_WRITE);
 8002756:	2203      	movs	r2, #3
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	481c      	ldr	r0, [pc, #112]	; (80027cc <SD_READ_ALL+0x94>)
 800275c:	f004 fdbc 	bl	80072d8 <f_open>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <SD_READ_ALL+0x90>)
 8002766:	701a      	strb	r2, [r3, #0]
	for (lines = 0; (f_eof(&fil) == 0); lines++)
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e010      	b.n	8002790 <SD_READ_ALL+0x58>
	{
	   memset(SDbuffer,0, sizeof(SDbuffer));
 800276e:	22c8      	movs	r2, #200	; 0xc8
 8002770:	2100      	movs	r1, #0
 8002772:	4817      	ldr	r0, [pc, #92]	; (80027d0 <SD_READ_ALL+0x98>)
 8002774:	f007 fe59 	bl	800a42a <memset>
	   f_gets((char*)SDbuffer, sizeof(SDbuffer), &fil);
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <SD_READ_ALL+0x94>)
 800277a:	21c8      	movs	r1, #200	; 0xc8
 800277c:	4814      	ldr	r0, [pc, #80]	; (80027d0 <SD_READ_ALL+0x98>)
 800277e:	f005 f996 	bl	8007aae <f_gets>
	   printf("\r\n%s",SDbuffer);
 8002782:	4913      	ldr	r1, [pc, #76]	; (80027d0 <SD_READ_ALL+0x98>)
 8002784:	4813      	ldr	r0, [pc, #76]	; (80027d4 <SD_READ_ALL+0x9c>)
 8002786:	f007 fec1 	bl	800a50c <iprintf>
	for (lines = 0; (f_eof(&fil) == 0); lines++)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	3301      	adds	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <SD_READ_ALL+0x94>)
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <SD_READ_ALL+0x94>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	d1e8      	bne.n	800276e <SD_READ_ALL+0x36>
	}
	fresult = f_close(&fil);
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <SD_READ_ALL+0x94>)
 800279e:	f005 f957 	bl	8007a50 <f_close>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <SD_READ_ALL+0x90>)
 80027a8:	701a      	strb	r2, [r3, #0]
	printf("\r\n%d lines in file", lines);
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	4619      	mov	r1, r3
 80027ae:	480a      	ldr	r0, [pc, #40]	; (80027d8 <SD_READ_ALL+0xa0>)
 80027b0:	f007 feac 	bl	800a50c <iprintf>

}
 80027b4:	bf00      	nop
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	0800b890 	.word	0x0800b890
 80027c4:	20004350 	.word	0x20004350
 80027c8:	200046f8 	.word	0x200046f8
 80027cc:	200046fc 	.word	0x200046fc
 80027d0:	200045ec 	.word	0x200045ec
 80027d4:	0800b894 	.word	0x0800b894
 80027d8:	0800b89c 	.word	0x0800b89c

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_MspInit+0x54>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a11      	ldr	r2, [pc, #68]	; (8002830 <HAL_MspInit+0x54>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_MspInit+0x54>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_MspInit+0x54>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_MspInit+0x54>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_MspInit+0x54>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	210f      	movs	r1, #15
 800281e:	f06f 0001 	mvn.w	r0, #1
 8002822:	f000 fb0d 	bl	8002e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800

08002834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_SPI_MspInit+0x84>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d12b      	bne.n	80028ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_SPI_MspInit+0x88>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_SPI_MspInit+0x88>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800288e:	23e0      	movs	r3, #224	; 0xe0
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800289e:	2305      	movs	r3, #5
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <HAL_SPI_MspInit+0x8c>)
 80028aa:	f000 fb85 	bl	8002fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40013000 	.word	0x40013000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000

080028c4 <HAL_UART_MspInit>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_UART_MspInit+0x94>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d133      	bne.n	800294e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_UART_MspInit+0x98>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_UART_MspInit+0x98>)
 80028f0:	f043 0320 	orr.w	r3, r3, #32
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_UART_MspInit+0x98>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_UART_MspInit+0x98>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_UART_MspInit+0x98>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_UART_MspInit+0x98>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800291e:	23c0      	movs	r3, #192	; 0xc0
 8002920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800292e:	2308      	movs	r3, #8
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	4809      	ldr	r0, [pc, #36]	; (8002960 <HAL_UART_MspInit+0x9c>)
 800293a:	f000 fb3d 	bl	8002fb8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2047      	movs	r0, #71	; 0x47
 8002944:	f000 fa7c 	bl	8002e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002948:	2047      	movs	r0, #71	; 0x47
 800294a:	f000 fa95 	bl	8002e78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800294e:	bf00      	nop
 8002950:	3728      	adds	r7, #40	; 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40011400 	.word	0x40011400
 800295c:	40023800 	.word	0x40023800
 8002960:	40020800 	.word	0x40020800

08002964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002974:	2200      	movs	r2, #0
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	2019      	movs	r0, #25
 800297a:	f000 fa61 	bl	8002e40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800297e:	2019      	movs	r0, #25
 8002980:	f000 fa7a 	bl	8002e78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <HAL_InitTick+0xa4>)
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_InitTick+0xa4>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6453      	str	r3, [r2, #68]	; 0x44
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_InitTick+0xa4>)
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a0:	f107 0210 	add.w	r2, r7, #16
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 f8fc 	bl	8003ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80029b0:	f001 f8e6 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 80029b4:	4603      	mov	r3, r0
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <HAL_InitTick+0xa8>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	3b01      	subs	r3, #1
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_InitTick+0xac>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_InitTick+0xb0>)
 80029cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_InitTick+0xac>)
 80029d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029d6:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <HAL_InitTick+0xac>)
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_InitTick+0xac>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_InitTick+0xac>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80029e8:	4809      	ldr	r0, [pc, #36]	; (8002a10 <HAL_InitTick+0xac>)
 80029ea:	f001 fd4f 	bl	800448c <HAL_TIM_Base_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80029f4:	4806      	ldr	r0, [pc, #24]	; (8002a10 <HAL_InitTick+0xac>)
 80029f6:	f001 fda3 	bl	8004540 <HAL_TIM_Base_Start_IT>
 80029fa:	4603      	mov	r3, r0
 80029fc:	e000      	b.n	8002a00 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	431bde83 	.word	0x431bde83
 8002a10:	200049b4 	.word	0x200049b4
 8002a14:	40010000 	.word	0x40010000

08002a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <NMI_Handler+0x4>

08002a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <HardFault_Handler+0x4>

08002a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <MemManage_Handler+0x4>

08002a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <BusFault_Handler+0x4>

08002a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <UsageFault_Handler+0x4>

08002a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a4a:	f001 fde9 	bl	8004620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200049b4 	.word	0x200049b4

08002a58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	UARTIntHandler();
 8002a5e:	f7fd fdf9 	bl	8000654 <UARTIntHandler>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 8002a62:	4809      	ldr	r0, [pc, #36]	; (8002a88 <USART6_IRQHandler+0x30>)
 8002a64:	f002 f8a0 	bl	8004ba8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	__HAL_UART_CLEAR_PEFLAG(&huart6);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <USART6_IRQHandler+0x30>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <USART6_IRQHandler+0x30>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END USART1_IRQn 1 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200046b4 	.word	0x200046b4

08002a8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e00a      	b.n	8002ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a9e:	f3af 8000 	nop.w
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	60ba      	str	r2, [r7, #8]
 8002aaa:	b2ca      	uxtb	r2, r1
 8002aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dbf0      	blt.n	8002a9e <_read+0x12>
	}

return len;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e009      	b.n	8002aec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	60ba      	str	r2, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe ff63 	bl	80019ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf1      	blt.n	8002ad8 <_write+0x12>
	}
	return len;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_close>:

int _close(int file)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	return -1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b26:	605a      	str	r2, [r3, #4]
	return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_isatty>:

int _isatty(int file)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b98:	f007 fc12 	bl	800a3c0 <__errno>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	e009      	b.n	8002bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <_sbrk+0x64>)
 8002bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20020000 	.word	0x20020000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	200004f4 	.word	0x200004f4
 8002bd0:	20004eb8 	.word	0x20004eb8

08002bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <SystemInit+0x20>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <SystemInit+0x20>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bfe:	490e      	ldr	r1, [pc, #56]	; (8002c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c14:	4c0b      	ldr	r4, [pc, #44]	; (8002c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c22:	f7ff ffd7 	bl	8002bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f007 fbd1 	bl	800a3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe fd3b 	bl	80016a4 <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002c3c:	0800bbd0 	.word	0x0800bbd0
  ldr r2, =_sbss
 8002c40:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002c44:	20004eb4 	.word	0x20004eb4

08002c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_Init+0x40>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_Init+0x40>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <HAL_Init+0x40>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 f8d8 	bl	8002e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7ff fe72 	bl	8002964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7ff fdac 	bl	80027dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_IncTick+0x20>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_IncTick+0x24>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_IncTick+0x24>)
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000003c 	.word	0x2000003c
 8002cb4:	20004a00 	.word	0x20004a00

08002cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return uwTick;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_GetTick+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20004a00 	.word	0x20004a00

08002cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <__NVIC_GetPriorityGrouping+0x18>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 0307 	and.w	r3, r3, #7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	db0b      	blt.n	8002d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4907      	ldr	r1, [pc, #28]	; (8002d6c <__NVIC_EnableIRQ+0x38>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2001      	movs	r0, #1
 8002d56:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000e100 	.word	0xe000e100

08002d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	db0a      	blt.n	8002d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	490c      	ldr	r1, [pc, #48]	; (8002dbc <__NVIC_SetPriority+0x4c>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d98:	e00a      	b.n	8002db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4908      	ldr	r1, [pc, #32]	; (8002dc0 <__NVIC_SetPriority+0x50>)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3b04      	subs	r3, #4
 8002da8:	0112      	lsls	r2, r2, #4
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	761a      	strb	r2, [r3, #24]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	; 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f1c3 0307 	rsb	r3, r3, #7
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	bf28      	it	cs
 8002de2:	2304      	movcs	r3, #4
 8002de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d902      	bls.n	8002df4 <NVIC_EncodePriority+0x30>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3b03      	subs	r3, #3
 8002df2:	e000      	b.n	8002df6 <NVIC_EncodePriority+0x32>
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	4313      	orrs	r3, r2
         );
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff4c 	bl	8002cd0 <__NVIC_SetPriorityGrouping>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e52:	f7ff ff61 	bl	8002d18 <__NVIC_GetPriorityGrouping>
 8002e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	6978      	ldr	r0, [r7, #20]
 8002e5e:	f7ff ffb1 	bl	8002dc4 <NVIC_EncodePriority>
 8002e62:	4602      	mov	r2, r0
 8002e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff80 	bl	8002d70 <__NVIC_SetPriority>
}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff ff54 	bl	8002d34 <__NVIC_EnableIRQ>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ea2:	f7ff ff09 	bl	8002cb8 <HAL_GetTick>
 8002ea6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d008      	beq.n	8002ec6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e052      	b.n	8002f6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0216 	bic.w	r2, r2, #22
 8002ed4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ee4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <HAL_DMA_Abort+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0208 	bic.w	r2, r2, #8
 8002f04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f16:	e013      	b.n	8002f40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f18:	f7ff fece 	bl	8002cb8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d90c      	bls.n	8002f40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2203      	movs	r2, #3
 8002f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e015      	b.n	8002f6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e4      	bne.n	8002f18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	223f      	movs	r2, #63	; 0x3f
 8002f54:	409a      	lsls	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d004      	beq.n	8002f92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00c      	b.n	8002fac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2205      	movs	r2, #5
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e16b      	b.n	80032ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 815a 	bne.w	80032a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d005      	beq.n	800300a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003006:	2b02      	cmp	r3, #2
 8003008:	d130      	bne.n	800306c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b03      	cmp	r3, #3
 8003076:	d017      	beq.n	80030a8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d123      	bne.n	80030fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80b4 	beq.w	80032a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <HAL_GPIO_Init+0x308>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4a5e      	ldr	r2, [pc, #376]	; (80032c0 <HAL_GPIO_Init+0x308>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314c:	6453      	str	r3, [r2, #68]	; 0x44
 800314e:	4b5c      	ldr	r3, [pc, #368]	; (80032c0 <HAL_GPIO_Init+0x308>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315a:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <HAL_GPIO_Init+0x30c>)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a51      	ldr	r2, [pc, #324]	; (80032c8 <HAL_GPIO_Init+0x310>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02b      	beq.n	80031de <HAL_GPIO_Init+0x226>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a50      	ldr	r2, [pc, #320]	; (80032cc <HAL_GPIO_Init+0x314>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d025      	beq.n	80031da <HAL_GPIO_Init+0x222>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4f      	ldr	r2, [pc, #316]	; (80032d0 <HAL_GPIO_Init+0x318>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <HAL_GPIO_Init+0x21e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4e      	ldr	r2, [pc, #312]	; (80032d4 <HAL_GPIO_Init+0x31c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d019      	beq.n	80031d2 <HAL_GPIO_Init+0x21a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4d      	ldr	r2, [pc, #308]	; (80032d8 <HAL_GPIO_Init+0x320>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0x216>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4c      	ldr	r2, [pc, #304]	; (80032dc <HAL_GPIO_Init+0x324>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00d      	beq.n	80031ca <HAL_GPIO_Init+0x212>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4b      	ldr	r2, [pc, #300]	; (80032e0 <HAL_GPIO_Init+0x328>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <HAL_GPIO_Init+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_GPIO_Init+0x32c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_GPIO_Init+0x20a>
 80031be:	2307      	movs	r3, #7
 80031c0:	e00e      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031c2:	2308      	movs	r3, #8
 80031c4:	e00c      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031c6:	2306      	movs	r3, #6
 80031c8:	e00a      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031ca:	2305      	movs	r3, #5
 80031cc:	e008      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e004      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031de:	2300      	movs	r3, #0
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f002 0203 	and.w	r2, r2, #3
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	4093      	lsls	r3, r2
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f0:	4934      	ldr	r1, [pc, #208]	; (80032c4 <HAL_GPIO_Init+0x30c>)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3302      	adds	r3, #2
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031fe:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_GPIO_Init+0x330>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003222:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <HAL_GPIO_Init+0x330>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003228:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_GPIO_Init+0x330>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800324c:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <HAL_GPIO_Init+0x330>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_GPIO_Init+0x330>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_GPIO_Init+0x330>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_GPIO_Init+0x330>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a0:	4a11      	ldr	r2, [pc, #68]	; (80032e8 <HAL_GPIO_Init+0x330>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3301      	adds	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	f67f ae90 	bls.w	8002fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b4:	bf00      	nop
 80032b6:	3724      	adds	r7, #36	; 0x24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40021400 	.word	0x40021400
 80032e0:	40021800 	.word	0x40021800
 80032e4:	40021c00 	.word	0x40021c00
 80032e8:	40013c00 	.word	0x40013c00

080032ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
 80032f8:	4613      	mov	r3, r2
 80032fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032fc:	787b      	ldrb	r3, [r7, #1]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003308:	e003      	b.n	8003312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	041a      	lsls	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	619a      	str	r2, [r3, #24]
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e264      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d075      	beq.n	800342a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333e:	4ba3      	ldr	r3, [pc, #652]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b04      	cmp	r3, #4
 8003348:	d00c      	beq.n	8003364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334a:	4ba0      	ldr	r3, [pc, #640]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003352:	2b08      	cmp	r3, #8
 8003354:	d112      	bne.n	800337c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4b9d      	ldr	r3, [pc, #628]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003362:	d10b      	bne.n	800337c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	4b99      	ldr	r3, [pc, #612]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d05b      	beq.n	8003428 <HAL_RCC_OscConfig+0x108>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d157      	bne.n	8003428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e23f      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d106      	bne.n	8003394 <HAL_RCC_OscConfig+0x74>
 8003386:	4b91      	ldr	r3, [pc, #580]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a90      	ldr	r2, [pc, #576]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xb0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x98>
 800339e:	4b8b      	ldr	r3, [pc, #556]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a8a      	ldr	r2, [pc, #552]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a87      	ldr	r2, [pc, #540]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xb0>
 80033b8:	4b84      	ldr	r3, [pc, #528]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a83      	ldr	r2, [pc, #524]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b81      	ldr	r3, [pc, #516]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a80      	ldr	r2, [pc, #512]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7ff fc6e 	bl	8002cb8 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e0:	f7ff fc6a 	bl	8002cb8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e204      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xc0>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7ff fc5a 	bl	8002cb8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7ff fc56 	bl	8002cb8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1f0      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0xe8>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003436:	4b65      	ldr	r3, [pc, #404]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003442:	4b62      	ldr	r3, [pc, #392]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344a:	2b08      	cmp	r3, #8
 800344c:	d11c      	bne.n	8003488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344e:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d116      	bne.n	8003488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_RCC_OscConfig+0x152>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e1c4      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b56      	ldr	r3, [pc, #344]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4952      	ldr	r1, [pc, #328]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	e03a      	b.n	80034fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003490:	4b4f      	ldr	r3, [pc, #316]	; (80035d0 <HAL_RCC_OscConfig+0x2b0>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7ff fc0f 	bl	8002cb8 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349e:	f7ff fc0b 	bl	8002cb8 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1a5      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	4b46      	ldr	r3, [pc, #280]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b43      	ldr	r3, [pc, #268]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4940      	ldr	r1, [pc, #256]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	e015      	b.n	80034fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <HAL_RCC_OscConfig+0x2b0>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7ff fbee 	bl	8002cb8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e0:	f7ff fbea 	bl	8002cb8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e184      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	4b36      	ldr	r3, [pc, #216]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d030      	beq.n	800356c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <HAL_RCC_OscConfig+0x2b4>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7ff fbce 	bl	8002cb8 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003520:	f7ff fbca 	bl	8002cb8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e164      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x200>
 800353e:	e015      	b.n	800356c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003540:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_OscConfig+0x2b4>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003546:	f7ff fbb7 	bl	8002cb8 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354e:	f7ff fbb3 	bl	8002cb8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e14d      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003560:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80a0 	beq.w	80036ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357e:	4b13      	ldr	r3, [pc, #76]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	4a0e      	ldr	r2, [pc, #56]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 8003594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003598:	6413      	str	r3, [r2, #64]	; 0x40
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_RCC_OscConfig+0x2ac>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a6:	2301      	movs	r3, #1
 80035a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x2b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d121      	bne.n	80035fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_RCC_OscConfig+0x2b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <HAL_RCC_OscConfig+0x2b8>)
 80035bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c2:	f7ff fb79 	bl	8002cb8 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	e011      	b.n	80035ee <HAL_RCC_OscConfig+0x2ce>
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470000 	.word	0x42470000
 80035d4:	42470e80 	.word	0x42470e80
 80035d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035dc:	f7ff fb6c 	bl	8002cb8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e106      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b85      	ldr	r3, [pc, #532]	; (8003804 <HAL_RCC_OscConfig+0x4e4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d106      	bne.n	8003610 <HAL_RCC_OscConfig+0x2f0>
 8003602:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a80      	ldr	r2, [pc, #512]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	e01c      	b.n	800364a <HAL_RCC_OscConfig+0x32a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d10c      	bne.n	8003632 <HAL_RCC_OscConfig+0x312>
 8003618:	4b7b      	ldr	r3, [pc, #492]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a7a      	ldr	r2, [pc, #488]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b78      	ldr	r3, [pc, #480]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a77      	ldr	r2, [pc, #476]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	e00b      	b.n	800364a <HAL_RCC_OscConfig+0x32a>
 8003632:	4b75      	ldr	r3, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a74      	ldr	r2, [pc, #464]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	4b72      	ldr	r3, [pc, #456]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a71      	ldr	r2, [pc, #452]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d015      	beq.n	800367e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7ff fb31 	bl	8002cb8 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7ff fb2d 	bl	8002cb8 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0c5      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b65      	ldr	r3, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ee      	beq.n	800365a <HAL_RCC_OscConfig+0x33a>
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367e:	f7ff fb1b 	bl	8002cb8 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7ff fb17 	bl	8002cb8 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0af      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	4b5a      	ldr	r3, [pc, #360]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ee      	bne.n	8003686 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b56      	ldr	r3, [pc, #344]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a55      	ldr	r2, [pc, #340]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 809b 	beq.w	80037fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c4:	4b50      	ldr	r3, [pc, #320]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d05c      	beq.n	800378a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d141      	bne.n	800375c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <HAL_RCC_OscConfig+0x4ec>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7ff faeb 	bl	8002cb8 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e6:	f7ff fae7 	bl	8002cb8 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e081      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	019b      	lsls	r3, r3, #6
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	061b      	lsls	r3, r3, #24
 8003728:	4937      	ldr	r1, [pc, #220]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_RCC_OscConfig+0x4ec>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7ff fac0 	bl	8002cb8 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373c:	f7ff fabc 	bl	8002cb8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e056      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b2e      	ldr	r3, [pc, #184]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x41c>
 800375a:	e04e      	b.n	80037fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375c:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_OscConfig+0x4ec>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7ff faa9 	bl	8002cb8 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376a:	f7ff faa5 	bl	8002cb8 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e03f      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377c:	4b22      	ldr	r3, [pc, #136]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x44a>
 8003788:	e037      	b.n	80037fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e032      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003796:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <HAL_RCC_OscConfig+0x4e8>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d028      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d121      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d11a      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c6:	4013      	ands	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d111      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	3b01      	subs	r3, #1
 80037e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40007000 	.word	0x40007000
 8003808:	40023800 	.word	0x40023800
 800380c:	42470060 	.word	0x42470060

08003810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0cc      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003824:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d90c      	bls.n	800384c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b65      	ldr	r3, [pc, #404]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0b8      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003864:	4b59      	ldr	r3, [pc, #356]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a58      	ldr	r2, [pc, #352]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800386e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a52      	ldr	r2, [pc, #328]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	494d      	ldr	r1, [pc, #308]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d044      	beq.n	8003930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	4b47      	ldr	r3, [pc, #284]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d119      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07f      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	4b3f      	ldr	r3, [pc, #252]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e06f      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e067      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4934      	ldr	r1, [pc, #208]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003900:	f7ff f9da 	bl	8002cb8 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	e00a      	b.n	800391e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003908:	f7ff f9d6 	bl	8002cb8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e04f      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 020c 	and.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	429a      	cmp	r2, r3
 800392e:	d1eb      	bne.n	8003908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d20c      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e032      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4916      	ldr	r1, [pc, #88]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	490e      	ldr	r1, [pc, #56]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003996:	f000 f821 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800399a:	4601      	mov	r1, r0
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	5cd3      	ldrb	r3, [r2, r3]
 80039aa:	fa21 f303 	lsr.w	r3, r1, r3
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe ffd4 	bl	8002964 <HAL_InitTick>

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023c00 	.word	0x40023c00
 80039cc:	40023800 	.word	0x40023800
 80039d0:	0800b984 	.word	0x0800b984
 80039d4:	20000034 	.word	0x20000034
 80039d8:	20000038 	.word	0x20000038

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	2300      	movs	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f2:	4b50      	ldr	r3, [pc, #320]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d007      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x32>
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d008      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x38>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 808d 	bne.w	8003b22 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a0a:	60bb      	str	r3, [r7, #8]
       break;
 8003a0c:	e08c      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a10:	60bb      	str	r3, [r7, #8]
      break;
 8003a12:	e089      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a14:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a1e:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d023      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	ea03 0501 	and.w	r5, r3, r1
 8003a40:	ea04 0602 	and.w	r6, r4, r2
 8003a44:	4a3d      	ldr	r2, [pc, #244]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a46:	fb02 f106 	mul.w	r1, r2, r6
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	fb02 f205 	mul.w	r2, r2, r5
 8003a50:	440a      	add	r2, r1
 8003a52:	493a      	ldr	r1, [pc, #232]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a54:	fba5 0101 	umull	r0, r1, r5, r1
 8003a58:	1853      	adds	r3, r2, r1
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f04f 0400 	mov.w	r4, #0
 8003a62:	461a      	mov	r2, r3
 8003a64:	4623      	mov	r3, r4
 8003a66:	f7fc fc1b 	bl	80002a0 <__aeabi_uldivmod>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e049      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	f04f 0400 	mov.w	r4, #0
 8003a7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	ea03 0501 	and.w	r5, r3, r1
 8003a88:	ea04 0602 	and.w	r6, r4, r2
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4632      	mov	r2, r6
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	0154      	lsls	r4, r2, #5
 8003a9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a9e:	014b      	lsls	r3, r1, #5
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	1b49      	subs	r1, r1, r5
 8003aa6:	eb62 0206 	sbc.w	r2, r2, r6
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	0194      	lsls	r4, r2, #6
 8003ab4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ab8:	018b      	lsls	r3, r1, #6
 8003aba:	1a5b      	subs	r3, r3, r1
 8003abc:	eb64 0402 	sbc.w	r4, r4, r2
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	00e2      	lsls	r2, r4, #3
 8003aca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ace:	00d9      	lsls	r1, r3, #3
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	195b      	adds	r3, r3, r5
 8003ad6:	eb44 0406 	adc.w	r4, r4, r6
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	02a2      	lsls	r2, r4, #10
 8003ae4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ae8:	0299      	lsls	r1, r3, #10
 8003aea:	460b      	mov	r3, r1
 8003aec:	4614      	mov	r4, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	4621      	mov	r1, r4
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	461a      	mov	r2, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	f7fc fbd0 	bl	80002a0 <__aeabi_uldivmod>
 8003b00:	4603      	mov	r3, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	3301      	adds	r3, #1
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	60bb      	str	r3, [r7, #8]
      break;
 8003b20:	e002      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b24:	60bb      	str	r3, [r7, #8]
      break;
 8003b26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b28:	68bb      	ldr	r3, [r7, #8]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	00f42400 	.word	0x00f42400
 8003b3c:	017d7840 	.word	0x017d7840

08003b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000034 	.word	0x20000034

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4601      	mov	r1, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800b994 	.word	0x0800b994

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b84:	f7ff ffdc 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0b5b      	lsrs	r3, r3, #13
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	0800b994 	.word	0x0800b994

08003ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_RCC_GetClockConfig+0x60>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0207 	and.w	r2, r3, #7
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40023c00 	.word	0x40023c00

08003c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e07b      	b.n	8003d16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d108      	bne.n	8003c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2e:	d009      	beq.n	8003c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	61da      	str	r2, [r3, #28]
 8003c36:	e005      	b.n	8003c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fe fde8 	bl	8002834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	ea42 0103 	orr.w	r1, r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	f003 0104 	and.w	r1, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0210 	and.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b088      	sub	sp, #32
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_SPI_Transmit+0x22>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e126      	b.n	8003f8e <HAL_SPI_Transmit+0x270>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d48:	f7fe ffb6 	bl	8002cb8 <HAL_GetTick>
 8003d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d002      	beq.n	8003d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d62:	e10b      	b.n	8003f7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Transmit+0x52>
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d74:	e102      	b.n	8003f7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d10f      	bne.n	8003dde <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d007      	beq.n	8003dfc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e04:	d14b      	bne.n	8003e9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_SPI_Transmit+0xf6>
 8003e0e:	8afb      	ldrh	r3, [r7, #22]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d13e      	bne.n	8003e92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	1c9a      	adds	r2, r3, #2
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e38:	e02b      	b.n	8003e92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d112      	bne.n	8003e6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	881a      	ldrh	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	1c9a      	adds	r2, r3, #2
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e6c:	e011      	b.n	8003e92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e6e:	f7fe ff23 	bl	8002cb8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d803      	bhi.n	8003e86 <HAL_SPI_Transmit+0x168>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d102      	bne.n	8003e8c <HAL_SPI_Transmit+0x16e>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e90:	e074      	b.n	8003f7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ce      	bne.n	8003e3a <HAL_SPI_Transmit+0x11c>
 8003e9c:	e04c      	b.n	8003f38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Transmit+0x18e>
 8003ea6:	8afb      	ldrh	r3, [r7, #22]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d140      	bne.n	8003f2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ed2:	e02c      	b.n	8003f2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d113      	bne.n	8003f0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f08:	e011      	b.n	8003f2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f0a:	f7fe fed5 	bl	8002cb8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d803      	bhi.n	8003f22 <HAL_SPI_Transmit+0x204>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d102      	bne.n	8003f28 <HAL_SPI_Transmit+0x20a>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f2c:	e026      	b.n	8003f7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1cd      	bne.n	8003ed4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	6839      	ldr	r1, [r7, #0]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fa63 	bl	8004408 <SPI_EndRxTxTransaction>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e000      	b.n	8003f7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b08c      	sub	sp, #48	; 0x30
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_SPI_TransmitReceive+0x26>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e18a      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x33c>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc4:	f7fe fe78 	bl	8002cb8 <HAL_GetTick>
 8003fc8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fda:	887b      	ldrh	r3, [r7, #2]
 8003fdc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d00f      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x70>
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fec:	d107      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x68>
 8003ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
 8004000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004004:	e15b      	b.n	80042be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x82>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x82>
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800401e:	e14e      	b.n	80042be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b04      	cmp	r3, #4
 800402a:	d003      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2205      	movs	r2, #5
 8004030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	887a      	ldrh	r2, [r7, #2]
 800404a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	887a      	ldrh	r2, [r7, #2]
 8004056:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	887a      	ldrh	r2, [r7, #2]
 800405c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d007      	beq.n	8004088 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004090:	d178      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x10a>
 800409a:	8b7b      	ldrh	r3, [r7, #26]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d166      	bne.n	800416e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c4:	e053      	b.n	800416e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d11b      	bne.n	800410c <HAL_SPI_TransmitReceive+0x176>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_SPI_TransmitReceive+0x176>
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d113      	bne.n	800410c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d119      	bne.n	800414e <HAL_SPI_TransmitReceive+0x1b8>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d014      	beq.n	800414e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	b292      	uxth	r2, r2
 8004130:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	1c9a      	adds	r2, r3, #2
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800414a:	2301      	movs	r3, #1
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800414e:	f7fe fdb3 	bl	8002cb8 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800415a:	429a      	cmp	r2, r3
 800415c:	d807      	bhi.n	800416e <HAL_SPI_TransmitReceive+0x1d8>
 800415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d003      	beq.n	800416e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800416c:	e0a7      	b.n	80042be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1a6      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x130>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1a1      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x130>
 8004182:	e07c      	b.n	800427e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_SPI_TransmitReceive+0x1fc>
 800418c:	8b7b      	ldrh	r3, [r7, #26]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d16b      	bne.n	800426a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b8:	e057      	b.n	800426a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d11c      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x26c>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d017      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x26c>
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d114      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d119      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x2ae>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d014      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004240:	2301      	movs	r3, #1
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004244:	f7fe fd38 	bl	8002cb8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004250:	429a      	cmp	r2, r3
 8004252:	d803      	bhi.n	800425c <HAL_SPI_TransmitReceive+0x2c6>
 8004254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d102      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x2cc>
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004268:	e029      	b.n	80042be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1a2      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x224>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d19d      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004280:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8c0 	bl	8004408 <SPI_EndRxTxTransaction>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800429a:	e010      	b.n	80042be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	e000      	b.n	80042be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3730      	adds	r7, #48	; 0x30
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e8:	b2db      	uxtb	r3, r3
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004308:	f7fe fcd6 	bl	8002cb8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	4413      	add	r3, r2
 8004316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004318:	f7fe fcce 	bl	8002cb8 <HAL_GetTick>
 800431c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800431e:	4b39      	ldr	r3, [pc, #228]	; (8004404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	015b      	lsls	r3, r3, #5
 8004324:	0d1b      	lsrs	r3, r3, #20
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	fb02 f303 	mul.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432e:	e054      	b.n	80043da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d050      	beq.n	80043da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004338:	f7fe fcbe 	bl	8002cb8 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	429a      	cmp	r2, r3
 8004346:	d902      	bls.n	800434e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d13d      	bne.n	80043ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800435c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004366:	d111      	bne.n	800438c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	d004      	beq.n	800437c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d107      	bne.n	800438c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004394:	d10f      	bne.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e017      	b.n	80043fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d19b      	bne.n	8004330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000034 	.word	0x20000034

08004408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <SPI_EndRxTxTransaction+0x7c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <SPI_EndRxTxTransaction+0x80>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	0d5b      	lsrs	r3, r3, #21
 8004420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004424:	fb02 f303 	mul.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004432:	d112      	bne.n	800445a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2200      	movs	r2, #0
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff ff5a 	bl	80042f8 <SPI_WaitFlagStateUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f043 0220 	orr.w	r2, r3, #32
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e00f      	b.n	800447a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3b01      	subs	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004470:	2b80      	cmp	r3, #128	; 0x80
 8004472:	d0f2      	beq.n	800445a <SPI_EndRxTxTransaction+0x52>
 8004474:	e000      	b.n	8004478 <SPI_EndRxTxTransaction+0x70>
        break;
 8004476:	bf00      	nop
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000034 	.word	0x20000034
 8004488:	165e9f81 	.word	0x165e9f81

0800448c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e041      	b.n	8004522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f839 	bl	800452a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 f9d8 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d001      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e04e      	b.n	80045f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a23      	ldr	r2, [pc, #140]	; (8004604 <HAL_TIM_Base_Start_IT+0xc4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d022      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x80>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004582:	d01d      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x80>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <HAL_TIM_Base_Start_IT+0xc8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d018      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x80>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <HAL_TIM_Base_Start_IT+0xcc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x80>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_TIM_Base_Start_IT+0xd0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00e      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x80>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_TIM_Base_Start_IT+0xd4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x80>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_TIM_Base_Start_IT+0xd8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x80>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_TIM_Base_Start_IT+0xdc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d111      	bne.n	80045e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d010      	beq.n	80045f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	e007      	b.n	80045f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40010400 	.word	0x40010400
 8004618:	40014000 	.word	0x40014000
 800461c:	40001800 	.word	0x40001800

08004620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0202 	mvn.w	r2, #2
 800464c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f8ee 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8e0 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8f1 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b04      	cmp	r3, #4
 8004688:	d122      	bne.n	80046d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b04      	cmp	r3, #4
 8004696:	d11b      	bne.n	80046d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0204 	mvn.w	r2, #4
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f8c4 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8b6 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8c7 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d122      	bne.n	8004724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d11b      	bne.n	8004724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0208 	mvn.w	r2, #8
 80046f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2204      	movs	r2, #4
 80046fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f89a 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f88c 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f89d 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b10      	cmp	r3, #16
 8004730:	d122      	bne.n	8004778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b10      	cmp	r3, #16
 800473e:	d11b      	bne.n	8004778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0210 	mvn.w	r2, #16
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2208      	movs	r2, #8
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f870 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f862 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f873 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10e      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d107      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0201 	mvn.w	r2, #1
 800479c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fd f8ee 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b80      	cmp	r3, #128	; 0x80
 80047b0:	d10e      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047bc:	2b80      	cmp	r3, #128	; 0x80
 80047be:	d107      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f902 	bl	80049d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d10e      	bne.n	80047fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d107      	bne.n	80047fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f838 	bl	800486c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b20      	cmp	r3, #32
 8004808:	d10e      	bne.n	8004828 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b20      	cmp	r3, #32
 8004816:	d107      	bne.n	8004828 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0220 	mvn.w	r2, #32
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8cc 	bl	80049c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a40      	ldr	r2, [pc, #256]	; (8004994 <TIM_Base_SetConfig+0x114>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3d      	ldr	r2, [pc, #244]	; (8004998 <TIM_Base_SetConfig+0x118>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3c      	ldr	r2, [pc, #240]	; (800499c <TIM_Base_SetConfig+0x11c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3b      	ldr	r2, [pc, #236]	; (80049a0 <TIM_Base_SetConfig+0x120>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3a      	ldr	r2, [pc, #232]	; (80049a4 <TIM_Base_SetConfig+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <TIM_Base_SetConfig+0x114>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d027      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <TIM_Base_SetConfig+0x118>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d023      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	; (800499c <TIM_Base_SetConfig+0x11c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <TIM_Base_SetConfig+0x120>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <TIM_Base_SetConfig+0x124>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <TIM_Base_SetConfig+0x128>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a27      	ldr	r2, [pc, #156]	; (80049ac <TIM_Base_SetConfig+0x12c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <TIM_Base_SetConfig+0x130>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <TIM_Base_SetConfig+0x134>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a24      	ldr	r2, [pc, #144]	; (80049b8 <TIM_Base_SetConfig+0x138>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a23      	ldr	r2, [pc, #140]	; (80049bc <TIM_Base_SetConfig+0x13c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <TIM_Base_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0xf8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a0c      	ldr	r2, [pc, #48]	; (80049a4 <TIM_Base_SetConfig+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40010400 	.word	0x40010400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400
 80049b0:	40014800 	.word	0x40014800
 80049b4:	40001800 	.word	0x40001800
 80049b8:	40001c00 	.word	0x40001c00
 80049bc:	40002000 	.word	0x40002000

080049c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e03f      	b.n	8004a7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd ff58 	bl	80028c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	; 0x24
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fc1b 	bl	8005268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b08a      	sub	sp, #40	; 0x28
 8004a86:	af02      	add	r7, sp, #8
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d17c      	bne.n	8004b9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_UART_Transmit+0x2c>
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e075      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_UART_Transmit+0x3e>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e06e      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2221      	movs	r2, #33	; 0x21
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad6:	f7fe f8ef 	bl	8002cb8 <HAL_GetTick>
 8004ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d108      	bne.n	8004b04 <HAL_UART_Transmit+0x82>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e003      	b.n	8004b0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b14:	e02a      	b.n	8004b6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2180      	movs	r1, #128	; 0x80
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fa17 	bl	8004f54 <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e036      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3302      	adds	r3, #2
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e007      	b.n	8004b5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1cf      	bne.n	8004b16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2140      	movs	r1, #64	; 0x40
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f9e7 	bl	8004f54 <UART_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e006      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10d      	bne.n	8004bfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_UART_IRQHandler+0x52>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 faa1 	bl	800513a <UART_Receive_IT>
      return;
 8004bf8:	e17d      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80b1 	beq.w	8004d64 <HAL_UART_IRQHandler+0x1bc>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_UART_IRQHandler+0x70>
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80a6 	beq.w	8004d64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_UART_IRQHandler+0x90>
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_UART_IRQHandler+0xb0>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f043 0202 	orr.w	r2, r3, #2
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_UART_IRQHandler+0xd0>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0204 	orr.w	r2, r3, #4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xfa>
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <HAL_UART_IRQHandler+0xee>
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0208 	orr.w	r2, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8120 	beq.w	8004eec <HAL_UART_IRQHandler+0x344>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x11e>
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fa3a 	bl	800513a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <HAL_UART_IRQHandler+0x146>
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d031      	beq.n	8004d52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f97a 	bl	8004fe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d123      	bne.n	8004d4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d013      	beq.n	8004d42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	4a77      	ldr	r2, [pc, #476]	; (8004efc <HAL_UART_IRQHandler+0x354>)
 8004d20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe f924 	bl	8002f74 <HAL_DMA_Abort_IT>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d016      	beq.n	8004d60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d40:	e00e      	b.n	8004d60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8f0 	bl	8004f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	e00a      	b.n	8004d60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8ec 	bl	8004f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	e006      	b.n	8004d60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8e8 	bl	8004f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d5e:	e0c5      	b.n	8004eec <HAL_UART_IRQHandler+0x344>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	bf00      	nop
    return;
 8004d62:	e0c3      	b.n	8004eec <HAL_UART_IRQHandler+0x344>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	f040 80a2 	bne.w	8004eb2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 809c 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8096 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d14f      	bne.n	8004e4a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004db4:	8a3b      	ldrh	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 809a 	beq.w	8004ef0 <HAL_UART_IRQHandler+0x348>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dc0:	8a3a      	ldrh	r2, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	f080 8094 	bcs.w	8004ef0 <HAL_UART_IRQHandler+0x348>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8a3a      	ldrh	r2, [r7, #16]
 8004dcc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd8:	d02b      	beq.n	8004e32 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e08:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0210 	bic.w	r2, r2, #16
 8004e26:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe f831 	bl	8002e94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f87a 	bl	8004f3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e48:	e052      	b.n	8004ef0 <HAL_UART_IRQHandler+0x348>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d048      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x34c>
          &&(nb_rx_data > 0U) )
 8004e62:	8a7b      	ldrh	r3, [r7, #18]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d045      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x34c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e76:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0210 	bic.w	r2, r2, #16
 8004ea4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ea6:	8a7b      	ldrh	r3, [r7, #18]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f846 	bl	8004f3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004eb0:	e020      	b.n	8004ef4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_UART_IRQHandler+0x326>
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f8cf 	bl	800506a <UART_Transmit_IT>
    return;
 8004ecc:	e013      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x34e>
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x34e>
  {
    UART_EndTransmit_IT(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f911 	bl	800510a <UART_EndTransmit_IT>
    return;
 8004ee8:	bf00      	nop
 8004eea:	e004      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34e>
    return;
 8004eec:	bf00      	nop
 8004eee:	e002      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34e>
      return;
 8004ef0:	bf00      	nop
 8004ef2:	e000      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34e>
      return;
 8004ef4:	bf00      	nop
  }
}
 8004ef6:	3728      	adds	r7, #40	; 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	08005043 	.word	0x08005043

08004f00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f64:	e02c      	b.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d028      	beq.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f74:	f7fd fea0 	bl	8002cb8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d21d      	bcs.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695a      	ldr	r2, [r3, #20]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e00f      	b.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d0c3      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ffe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	2b01      	cmp	r3, #1
 8005016:	d107      	bne.n	8005028 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0210 	bic.w	r2, r2, #16
 8005026:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff ff63 	bl	8004f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b21      	cmp	r3, #33	; 0x21
 800507c:	d13e      	bne.n	80050fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005086:	d114      	bne.n	80050b2 <UART_Transmit_IT+0x48>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d110      	bne.n	80050b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	1c9a      	adds	r2, r3, #2
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]
 80050b0:	e008      	b.n	80050c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6211      	str	r1, [r2, #32]
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4619      	mov	r1, r3
 80050d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10f      	bne.n	80050f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
  }
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fee8 	bl	8004f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b22      	cmp	r3, #34	; 0x22
 800514c:	f040 8087 	bne.w	800525e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005158:	d117      	bne.n	800518a <UART_Receive_IT+0x50>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d113      	bne.n	800518a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005178:	b29a      	uxth	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28
 8005188:	e026      	b.n	80051d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519c:	d007      	beq.n	80051ae <UART_Receive_IT+0x74>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <UART_Receive_IT+0x82>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e008      	b.n	80051ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4619      	mov	r1, r3
 80051e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d136      	bne.n	800525a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0220 	bic.w	r2, r2, #32
 80051fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800520a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0201 	bic.w	r2, r2, #1
 800521a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10e      	bne.n	800524a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0210 	bic.w	r2, r2, #16
 800523a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fe7a 	bl	8004f3c <HAL_UARTEx_RxEventCallback>
 8005248:	e002      	b.n	8005250 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fe62 	bl	8004f14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	e002      	b.n	8005260 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	4313      	orrs	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052aa:	f023 030c 	bic.w	r3, r3, #12
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4ad0      	ldr	r2, [pc, #832]	; (8005614 <UART_SetConfig+0x3ac>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <UART_SetConfig+0x7a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4ace      	ldr	r2, [pc, #824]	; (8005618 <UART_SetConfig+0x3b0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d103      	bne.n	80052ea <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052e2:	f7fe fc4d 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	e002      	b.n	80052f0 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ea:	f7fe fc35 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80052ee:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f8:	f040 80ba 	bne.w	8005470 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	461d      	mov	r5, r3
 8005300:	f04f 0600 	mov.w	r6, #0
 8005304:	46a8      	mov	r8, r5
 8005306:	46b1      	mov	r9, r6
 8005308:	eb18 0308 	adds.w	r3, r8, r8
 800530c:	eb49 0409 	adc.w	r4, r9, r9
 8005310:	4698      	mov	r8, r3
 8005312:	46a1      	mov	r9, r4
 8005314:	eb18 0805 	adds.w	r8, r8, r5
 8005318:	eb49 0906 	adc.w	r9, r9, r6
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005328:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800532c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005330:	4688      	mov	r8, r1
 8005332:	4691      	mov	r9, r2
 8005334:	eb18 0005 	adds.w	r0, r8, r5
 8005338:	eb49 0106 	adc.w	r1, r9, r6
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	461d      	mov	r5, r3
 8005342:	f04f 0600 	mov.w	r6, #0
 8005346:	196b      	adds	r3, r5, r5
 8005348:	eb46 0406 	adc.w	r4, r6, r6
 800534c:	461a      	mov	r2, r3
 800534e:	4623      	mov	r3, r4
 8005350:	f7fa ffa6 	bl	80002a0 <__aeabi_uldivmod>
 8005354:	4603      	mov	r3, r0
 8005356:	460c      	mov	r4, r1
 8005358:	461a      	mov	r2, r3
 800535a:	4bb0      	ldr	r3, [pc, #704]	; (800561c <UART_SetConfig+0x3b4>)
 800535c:	fba3 2302 	umull	r2, r3, r3, r2
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	461d      	mov	r5, r3
 800536a:	f04f 0600 	mov.w	r6, #0
 800536e:	46a9      	mov	r9, r5
 8005370:	46b2      	mov	sl, r6
 8005372:	eb19 0309 	adds.w	r3, r9, r9
 8005376:	eb4a 040a 	adc.w	r4, sl, sl
 800537a:	4699      	mov	r9, r3
 800537c:	46a2      	mov	sl, r4
 800537e:	eb19 0905 	adds.w	r9, r9, r5
 8005382:	eb4a 0a06 	adc.w	sl, sl, r6
 8005386:	f04f 0100 	mov.w	r1, #0
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005392:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005396:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800539a:	4689      	mov	r9, r1
 800539c:	4692      	mov	sl, r2
 800539e:	eb19 0005 	adds.w	r0, r9, r5
 80053a2:	eb4a 0106 	adc.w	r1, sl, r6
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	461d      	mov	r5, r3
 80053ac:	f04f 0600 	mov.w	r6, #0
 80053b0:	196b      	adds	r3, r5, r5
 80053b2:	eb46 0406 	adc.w	r4, r6, r6
 80053b6:	461a      	mov	r2, r3
 80053b8:	4623      	mov	r3, r4
 80053ba:	f7fa ff71 	bl	80002a0 <__aeabi_uldivmod>
 80053be:	4603      	mov	r3, r0
 80053c0:	460c      	mov	r4, r1
 80053c2:	461a      	mov	r2, r3
 80053c4:	4b95      	ldr	r3, [pc, #596]	; (800561c <UART_SetConfig+0x3b4>)
 80053c6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2164      	movs	r1, #100	; 0x64
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a90      	ldr	r2, [pc, #576]	; (800561c <UART_SetConfig+0x3b4>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053e6:	4498      	add	r8, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	461d      	mov	r5, r3
 80053ec:	f04f 0600 	mov.w	r6, #0
 80053f0:	46a9      	mov	r9, r5
 80053f2:	46b2      	mov	sl, r6
 80053f4:	eb19 0309 	adds.w	r3, r9, r9
 80053f8:	eb4a 040a 	adc.w	r4, sl, sl
 80053fc:	4699      	mov	r9, r3
 80053fe:	46a2      	mov	sl, r4
 8005400:	eb19 0905 	adds.w	r9, r9, r5
 8005404:	eb4a 0a06 	adc.w	sl, sl, r6
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005414:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005418:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800541c:	4689      	mov	r9, r1
 800541e:	4692      	mov	sl, r2
 8005420:	eb19 0005 	adds.w	r0, r9, r5
 8005424:	eb4a 0106 	adc.w	r1, sl, r6
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	461d      	mov	r5, r3
 800542e:	f04f 0600 	mov.w	r6, #0
 8005432:	196b      	adds	r3, r5, r5
 8005434:	eb46 0406 	adc.w	r4, r6, r6
 8005438:	461a      	mov	r2, r3
 800543a:	4623      	mov	r3, r4
 800543c:	f7fa ff30 	bl	80002a0 <__aeabi_uldivmod>
 8005440:	4603      	mov	r3, r0
 8005442:	460c      	mov	r4, r1
 8005444:	461a      	mov	r2, r3
 8005446:	4b75      	ldr	r3, [pc, #468]	; (800561c <UART_SetConfig+0x3b4>)
 8005448:	fba3 1302 	umull	r1, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	2164      	movs	r1, #100	; 0x64
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	3332      	adds	r3, #50	; 0x32
 800545a:	4a70      	ldr	r2, [pc, #448]	; (800561c <UART_SetConfig+0x3b4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f003 0207 	and.w	r2, r3, #7
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4442      	add	r2, r8
 800546c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800546e:	e0cc      	b.n	800560a <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	469a      	mov	sl, r3
 8005474:	f04f 0b00 	mov.w	fp, #0
 8005478:	46d0      	mov	r8, sl
 800547a:	46d9      	mov	r9, fp
 800547c:	eb18 0308 	adds.w	r3, r8, r8
 8005480:	eb49 0409 	adc.w	r4, r9, r9
 8005484:	4698      	mov	r8, r3
 8005486:	46a1      	mov	r9, r4
 8005488:	eb18 080a 	adds.w	r8, r8, sl
 800548c:	eb49 090b 	adc.w	r9, r9, fp
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800549c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054a4:	4688      	mov	r8, r1
 80054a6:	4691      	mov	r9, r2
 80054a8:	eb1a 0508 	adds.w	r5, sl, r8
 80054ac:	eb4b 0609 	adc.w	r6, fp, r9
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4619      	mov	r1, r3
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	f04f 0400 	mov.w	r4, #0
 80054c2:	0094      	lsls	r4, r2, #2
 80054c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054c8:	008b      	lsls	r3, r1, #2
 80054ca:	461a      	mov	r2, r3
 80054cc:	4623      	mov	r3, r4
 80054ce:	4628      	mov	r0, r5
 80054d0:	4631      	mov	r1, r6
 80054d2:	f7fa fee5 	bl	80002a0 <__aeabi_uldivmod>
 80054d6:	4603      	mov	r3, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	461a      	mov	r2, r3
 80054dc:	4b4f      	ldr	r3, [pc, #316]	; (800561c <UART_SetConfig+0x3b4>)
 80054de:	fba3 2302 	umull	r2, r3, r3, r2
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	469b      	mov	fp, r3
 80054ec:	f04f 0c00 	mov.w	ip, #0
 80054f0:	46d9      	mov	r9, fp
 80054f2:	46e2      	mov	sl, ip
 80054f4:	eb19 0309 	adds.w	r3, r9, r9
 80054f8:	eb4a 040a 	adc.w	r4, sl, sl
 80054fc:	4699      	mov	r9, r3
 80054fe:	46a2      	mov	sl, r4
 8005500:	eb19 090b 	adds.w	r9, r9, fp
 8005504:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005514:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800551c:	4689      	mov	r9, r1
 800551e:	4692      	mov	sl, r2
 8005520:	eb1b 0509 	adds.w	r5, fp, r9
 8005524:	eb4c 060a 	adc.w	r6, ip, sl
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4619      	mov	r1, r3
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	0094      	lsls	r4, r2, #2
 800553c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005540:	008b      	lsls	r3, r1, #2
 8005542:	461a      	mov	r2, r3
 8005544:	4623      	mov	r3, r4
 8005546:	4628      	mov	r0, r5
 8005548:	4631      	mov	r1, r6
 800554a:	f7fa fea9 	bl	80002a0 <__aeabi_uldivmod>
 800554e:	4603      	mov	r3, r0
 8005550:	460c      	mov	r4, r1
 8005552:	461a      	mov	r2, r3
 8005554:	4b31      	ldr	r3, [pc, #196]	; (800561c <UART_SetConfig+0x3b4>)
 8005556:	fba3 1302 	umull	r1, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	2164      	movs	r1, #100	; 0x64
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	3332      	adds	r3, #50	; 0x32
 8005568:	4a2c      	ldr	r2, [pc, #176]	; (800561c <UART_SetConfig+0x3b4>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005574:	4498      	add	r8, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	469b      	mov	fp, r3
 800557a:	f04f 0c00 	mov.w	ip, #0
 800557e:	46d9      	mov	r9, fp
 8005580:	46e2      	mov	sl, ip
 8005582:	eb19 0309 	adds.w	r3, r9, r9
 8005586:	eb4a 040a 	adc.w	r4, sl, sl
 800558a:	4699      	mov	r9, r3
 800558c:	46a2      	mov	sl, r4
 800558e:	eb19 090b 	adds.w	r9, r9, fp
 8005592:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055aa:	4689      	mov	r9, r1
 80055ac:	4692      	mov	sl, r2
 80055ae:	eb1b 0509 	adds.w	r5, fp, r9
 80055b2:	eb4c 060a 	adc.w	r6, ip, sl
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4619      	mov	r1, r3
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	f04f 0400 	mov.w	r4, #0
 80055c8:	0094      	lsls	r4, r2, #2
 80055ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055ce:	008b      	lsls	r3, r1, #2
 80055d0:	461a      	mov	r2, r3
 80055d2:	4623      	mov	r3, r4
 80055d4:	4628      	mov	r0, r5
 80055d6:	4631      	mov	r1, r6
 80055d8:	f7fa fe62 	bl	80002a0 <__aeabi_uldivmod>
 80055dc:	4603      	mov	r3, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <UART_SetConfig+0x3b4>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <UART_SetConfig+0x3b4>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4442      	add	r2, r8
 8005608:	609a      	str	r2, [r3, #8]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005614:	40011000 	.word	0x40011000
 8005618:	40011400 	.word	0x40011400
 800561c:	51eb851f 	.word	0x51eb851f

08005620 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005624:	4904      	ldr	r1, [pc, #16]	; (8005638 <MX_FATFS_Init+0x18>)
 8005626:	4805      	ldr	r0, [pc, #20]	; (800563c <MX_FATFS_Init+0x1c>)
 8005628:	f002 fac6 	bl	8007bb8 <FATFS_LinkDriver>
 800562c:	4603      	mov	r3, r0
 800562e:	461a      	mov	r2, r3
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <MX_FATFS_Init+0x20>)
 8005632:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005634:	bf00      	nop
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20004a04 	.word	0x20004a04
 800563c:	20000040 	.word	0x20000040
 8005640:	20004a08 	.word	0x20004a08

08005644 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005648:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	4618      	mov	r0, r3
 8005662:	f7fb fc1d 	bl	8000ea0 <SD_disk_initialize>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <USER_initialize+0x28>)
 800566c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800566e:	4b03      	ldr	r3, [pc, #12]	; (800567c <USER_initialize+0x28>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2000003d 	.word	0x2000003d

08005680 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	4618      	mov	r0, r3
 800568e:	f7fb fcf1 	bl	8001074 <SD_disk_status>
 8005692:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4603      	mov	r3, r0
 80056aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80056ac:	7bf8      	ldrb	r0, [r7, #15]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	f7fb fcf4 	bl	80010a0 <SD_disk_read>
 80056b8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	4603      	mov	r3, r0
 80056d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80056d2:	7bf8      	ldrb	r0, [r7, #15]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	f7fb fd4b 	bl	8001174 <SD_disk_write>
 80056de:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	603a      	str	r2, [r7, #0]
 80056f2:	71fb      	strb	r3, [r7, #7]
 80056f4:	460b      	mov	r3, r1
 80056f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80056f8:	79b9      	ldrb	r1, [r7, #6]
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fb fdbc 	bl	800127c <SD_disk_ioctl>
 8005704:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <disk_status+0x30>)
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	79fa      	ldrb	r2, [r7, #7]
 8005728:	4905      	ldr	r1, [pc, #20]	; (8005740 <disk_status+0x30>)
 800572a:	440a      	add	r2, r1
 800572c:	7a12      	ldrb	r2, [r2, #8]
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
 8005732:	4603      	mov	r3, r0
 8005734:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005736:	7bfb      	ldrb	r3, [r7, #15]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000520 	.word	0x20000520

08005744 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	4a0d      	ldr	r2, [pc, #52]	; (800578c <disk_initialize+0x48>)
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d111      	bne.n	8005780 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	4a0b      	ldr	r2, [pc, #44]	; (800578c <disk_initialize+0x48>)
 8005760:	2101      	movs	r1, #1
 8005762:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	4a09      	ldr	r2, [pc, #36]	; (800578c <disk_initialize+0x48>)
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	79fa      	ldrb	r2, [r7, #7]
 8005772:	4906      	ldr	r1, [pc, #24]	; (800578c <disk_initialize+0x48>)
 8005774:	440a      	add	r2, r1
 8005776:	7a12      	ldrb	r2, [r2, #8]
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000520 	.word	0x20000520

08005790 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <disk_read+0x3c>)
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	689c      	ldr	r4, [r3, #8]
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	4a07      	ldr	r2, [pc, #28]	; (80057cc <disk_read+0x3c>)
 80057b0:	4413      	add	r3, r2
 80057b2:	7a18      	ldrb	r0, [r3, #8]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	47a0      	blx	r4
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]
  return res;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd90      	pop	{r4, r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000520 	.word	0x20000520

080057d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4603      	mov	r3, r0
 80057de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	4a0a      	ldr	r2, [pc, #40]	; (800580c <disk_write+0x3c>)
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68dc      	ldr	r4, [r3, #12]
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	4a07      	ldr	r2, [pc, #28]	; (800580c <disk_write+0x3c>)
 80057f0:	4413      	add	r3, r2
 80057f2:	7a18      	ldrb	r0, [r3, #8]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	47a0      	blx	r4
 80057fc:	4603      	mov	r3, r0
 80057fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8005800:	7dfb      	ldrb	r3, [r7, #23]
}
 8005802:	4618      	mov	r0, r3
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	bd90      	pop	{r4, r7, pc}
 800580a:	bf00      	nop
 800580c:	20000520 	.word	0x20000520

08005810 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	603a      	str	r2, [r7, #0]
 800581a:	71fb      	strb	r3, [r7, #7]
 800581c:	460b      	mov	r3, r1
 800581e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <disk_ioctl+0x38>)
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	79fa      	ldrb	r2, [r7, #7]
 800582e:	4906      	ldr	r1, [pc, #24]	; (8005848 <disk_ioctl+0x38>)
 8005830:	440a      	add	r2, r1
 8005832:	7a10      	ldrb	r0, [r2, #8]
 8005834:	79b9      	ldrb	r1, [r7, #6]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	4798      	blx	r3
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
  return res;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20000520 	.word	0x20000520

0800584c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3301      	adds	r3, #1
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800585c:	89fb      	ldrh	r3, [r7, #14]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	b21a      	sxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	b21b      	sxth	r3, r3
 8005868:	4313      	orrs	r3, r2
 800586a:	b21b      	sxth	r3, r3
 800586c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800586e:	89fb      	ldrh	r3, [r7, #14]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3303      	adds	r3, #3
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	3202      	adds	r2, #2
 8005894:	7812      	ldrb	r2, [r2, #0]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	3201      	adds	r2, #1
 80058a2:	7812      	ldrb	r2, [r2, #0]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80058b4:	68fb      	ldr	r3, [r7, #12]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	887a      	ldrh	r2, [r7, #2]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	887b      	ldrh	r3, [r7, #2]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	607a      	str	r2, [r7, #4]
 80058e6:	887a      	ldrh	r2, [r7, #2]
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	607a      	str	r2, [r7, #4]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	0a1b      	lsrs	r3, r3, #8
 8005936:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00d      	beq.n	8005986 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	1c53      	adds	r3, r2, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	1c59      	adds	r1, r3, #1
 8005974:	6179      	str	r1, [r7, #20]
 8005976:	7812      	ldrb	r2, [r2, #0]
 8005978:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3b01      	subs	r3, #1
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f1      	bne.n	800596a <mem_cpy+0x1a>
	}
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005992:	b480      	push	{r7}
 8005994:	b087      	sub	sp, #28
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	617a      	str	r2, [r7, #20]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f3      	bne.n	80059a2 <mem_set+0x10>
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80059c6:	b480      	push	{r7}
 80059c8:	b089      	sub	sp, #36	; 0x24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	61fa      	str	r2, [r7, #28]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	4619      	mov	r1, r3
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	61ba      	str	r2, [r7, #24]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	1acb      	subs	r3, r1, r3
 80059f2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <mem_cmp+0x40>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0eb      	beq.n	80059de <mem_cmp+0x18>

	return r;
 8005a06:	697b      	ldr	r3, [r7, #20]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3724      	adds	r7, #36	; 0x24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a1e:	e002      	b.n	8005a26 <chk_chr+0x12>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3301      	adds	r3, #1
 8005a24:	607b      	str	r3, [r7, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <chk_chr+0x26>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d1f2      	bne.n	8005a20 <chk_chr+0xc>
	return *str;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d009      	beq.n	8005a6c <lock_fs+0x22>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f002 f8e6 	bl	8007c2e <ff_req_grant>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <lock_fs+0x22>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <lock_fs+0x24>
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00d      	beq.n	8005aa4 <unlock_fs+0x2e>
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	2b0c      	cmp	r3, #12
 8005a8c:	d00a      	beq.n	8005aa4 <unlock_fs+0x2e>
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	2b0b      	cmp	r3, #11
 8005a92:	d007      	beq.n	8005aa4 <unlock_fs+0x2e>
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b0f      	cmp	r3, #15
 8005a98:	d004      	beq.n	8005aa4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f002 f8da 	bl	8007c58 <ff_rel_grant>
	}
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e029      	b.n	8005b14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ac0:	4a27      	ldr	r2, [pc, #156]	; (8005b60 <chk_lock+0xb4>)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4413      	add	r3, r2
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01d      	beq.n	8005b0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ace:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <chk_lock+0xb4>)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	4413      	add	r3, r2
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d116      	bne.n	8005b0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <chk_lock+0xb4>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3304      	adds	r3, #4
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d10c      	bne.n	8005b0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005af4:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <chk_lock+0xb4>)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4413      	add	r3, r2
 8005afc:	3308      	adds	r3, #8
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d102      	bne.n	8005b0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b08:	e007      	b.n	8005b1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d9d2      	bls.n	8005ac0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d109      	bne.n	8005b34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <chk_lock+0x80>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d101      	bne.n	8005b30 <chk_lock+0x84>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e010      	b.n	8005b52 <chk_lock+0xa6>
 8005b30:	2312      	movs	r3, #18
 8005b32:	e00e      	b.n	8005b52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d108      	bne.n	8005b4c <chk_lock+0xa0>
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <chk_lock+0xb4>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	4413      	add	r3, r2
 8005b42:	330c      	adds	r3, #12
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4a:	d101      	bne.n	8005b50 <chk_lock+0xa4>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	e000      	b.n	8005b52 <chk_lock+0xa6>
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000500 	.word	0x20000500

08005b64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	e002      	b.n	8005b76 <enq_lock+0x12>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3301      	adds	r3, #1
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d806      	bhi.n	8005b8a <enq_lock+0x26>
 8005b7c:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <enq_lock+0x40>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	4413      	add	r3, r2
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f2      	bne.n	8005b70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000500 	.word	0x20000500

08005ba8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e01f      	b.n	8005bf8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005bb8:	4a41      	ldr	r2, [pc, #260]	; (8005cc0 <inc_lock+0x118>)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	4413      	add	r3, r2
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d113      	bne.n	8005bf2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005bca:	4a3d      	ldr	r2, [pc, #244]	; (8005cc0 <inc_lock+0x118>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d109      	bne.n	8005bf2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005bde:	4a38      	ldr	r2, [pc, #224]	; (8005cc0 <inc_lock+0x118>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	4413      	add	r3, r2
 8005be6:	3308      	adds	r3, #8
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d006      	beq.n	8005c00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d9dc      	bls.n	8005bb8 <inc_lock+0x10>
 8005bfe:	e000      	b.n	8005c02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d132      	bne.n	8005c6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e002      	b.n	8005c14 <inc_lock+0x6c>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d806      	bhi.n	8005c28 <inc_lock+0x80>
 8005c1a:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <inc_lock+0x118>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	4413      	add	r3, r2
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f2      	bne.n	8005c0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d101      	bne.n	8005c32 <inc_lock+0x8a>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e040      	b.n	8005cb4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4922      	ldr	r1, [pc, #136]	; (8005cc0 <inc_lock+0x118>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	440b      	add	r3, r1
 8005c3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	491e      	ldr	r1, [pc, #120]	; (8005cc0 <inc_lock+0x118>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	491a      	ldr	r1, [pc, #104]	; (8005cc0 <inc_lock+0x118>)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <inc_lock+0x118>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	4413      	add	r3, r2
 8005c68:	330c      	adds	r3, #12
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <inc_lock+0xe0>
 8005c74:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <inc_lock+0x118>)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	4413      	add	r3, r2
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <inc_lock+0xe0>
 8005c84:	2300      	movs	r3, #0
 8005c86:	e015      	b.n	8005cb4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d108      	bne.n	8005ca0 <inc_lock+0xf8>
 8005c8e:	4a0c      	ldr	r2, [pc, #48]	; (8005cc0 <inc_lock+0x118>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	4413      	add	r3, r2
 8005c96:	330c      	adds	r3, #12
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	e001      	b.n	8005ca4 <inc_lock+0xfc>
 8005ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca4:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <inc_lock+0x118>)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	440b      	add	r3, r1
 8005cac:	330c      	adds	r3, #12
 8005cae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000500 	.word	0x20000500

08005cc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d825      	bhi.n	8005d24 <dec_lock+0x60>
		n = Files[i].ctr;
 8005cd8:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <dec_lock+0x74>)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	4413      	add	r3, r2
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005ce6:	89fb      	ldrh	r3, [r7, #14]
 8005ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cec:	d101      	bne.n	8005cf2 <dec_lock+0x2e>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005cf2:	89fb      	ldrh	r3, [r7, #14]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <dec_lock+0x3a>
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005cfe:	4a0e      	ldr	r2, [pc, #56]	; (8005d38 <dec_lock+0x74>)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	4413      	add	r3, r2
 8005d06:	330c      	adds	r3, #12
 8005d08:	89fa      	ldrh	r2, [r7, #14]
 8005d0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d0c:	89fb      	ldrh	r3, [r7, #14]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <dec_lock+0x5a>
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <dec_lock+0x74>)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	4413      	add	r3, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	737b      	strb	r3, [r7, #13]
 8005d22:	e001      	b.n	8005d28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d24:	2302      	movs	r3, #2
 8005d26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d28:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000500 	.word	0x20000500

08005d3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e010      	b.n	8005d6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d4a:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <clear_lock+0x44>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	4413      	add	r3, r2
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d105      	bne.n	8005d66 <clear_lock+0x2a>
 8005d5a:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <clear_lock+0x44>)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	4413      	add	r3, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d9eb      	bls.n	8005d4a <clear_lock+0xe>
	}
}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20000500 	.word	0x20000500

08005d84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	78db      	ldrb	r3, [r3, #3]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d034      	beq.n	8005e02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	7858      	ldrb	r0, [r3, #1]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005da8:	2301      	movs	r3, #1
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	f7ff fd10 	bl	80057d0 <disk_write>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <sync_window+0x38>
			res = FR_DISK_ERR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	e022      	b.n	8005e02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d217      	bcs.n	8005e02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	789b      	ldrb	r3, [r3, #2]
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e010      	b.n	8005dfc <sync_window+0x78>
					wsect += fs->fsize;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4413      	add	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	7858      	ldrb	r0, [r3, #1]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005dee:	2301      	movs	r3, #1
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	f7ff fced 	bl	80057d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d8eb      	bhi.n	8005dda <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d01b      	beq.n	8005e5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ffad 	bl	8005d84 <sync_window>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d113      	bne.n	8005e5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	7858      	ldrb	r0, [r3, #1]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e3e:	2301      	movs	r3, #1
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	f7ff fca5 	bl	8005790 <disk_read>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff87 	bl	8005d84 <sync_window>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d158      	bne.n	8005f32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d148      	bne.n	8005f1a <sync_fs+0xb2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	791b      	ldrb	r3, [r3, #4]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d144      	bne.n	8005f1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3334      	adds	r3, #52	; 0x34
 8005e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fd79 	bl	8005992 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3334      	adds	r3, #52	; 0x34
 8005ea4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ea8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fd08 	bl	80058c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3334      	adds	r3, #52	; 0x34
 8005eb6:	4921      	ldr	r1, [pc, #132]	; (8005f3c <sync_fs+0xd4>)
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff fd1d 	bl	80058f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3334      	adds	r3, #52	; 0x34
 8005ec2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ec6:	491e      	ldr	r1, [pc, #120]	; (8005f40 <sync_fs+0xd8>)
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fd15 	bl	80058f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3334      	adds	r3, #52	; 0x34
 8005ed2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f7ff fd0b 	bl	80058f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3334      	adds	r3, #52	; 0x34
 8005ee6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7ff fd01 	bl	80058f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	7858      	ldrb	r0, [r3, #1]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f7ff fc5e 	bl	80057d0 <disk_write>
			fs->fsi_flag = 0;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fc74 	bl	8005810 <disk_ioctl>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <sync_fs+0xca>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	41615252 	.word	0x41615252
 8005f40:	61417272 	.word	0x61417272

08005f44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	3b02      	subs	r3, #2
 8005f52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	3b02      	subs	r3, #2
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d301      	bcc.n	8005f64 <clust2sect+0x20>
 8005f60:	2300      	movs	r3, #0
 8005f62:	e008      	b.n	8005f76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	895b      	ldrh	r3, [r3, #10]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	fb03 f202 	mul.w	r2, r3, r2
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	4413      	add	r3, r2
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d904      	bls.n	8005fa2 <get_fat+0x20>
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e08c      	b.n	80060c2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d045      	beq.n	8006042 <get_fat+0xc0>
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d05d      	beq.n	8006076 <get_fat+0xf4>
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d177      	bne.n	80060ae <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	0a5b      	lsrs	r3, r3, #9
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6938      	ldr	r0, [r7, #16]
 8005fda:	f7ff ff17 	bl	8005e0c <move_window>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d167      	bne.n	80060b4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	60fa      	str	r2, [r7, #12]
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ff6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	0a5b      	lsrs	r3, r3, #9
 8006000:	4413      	add	r3, r2
 8006002:	4619      	mov	r1, r3
 8006004:	6938      	ldr	r0, [r7, #16]
 8006006:	f7ff ff01 	bl	8005e0c <move_window>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d153      	bne.n	80060b8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	461a      	mov	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4313      	orrs	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <get_fat+0xb6>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	e002      	b.n	800603e <get_fat+0xbc>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603e:	617b      	str	r3, [r7, #20]
			break;
 8006040:	e03f      	b.n	80060c2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	4413      	add	r3, r2
 800604c:	4619      	mov	r1, r3
 800604e:	6938      	ldr	r0, [r7, #16]
 8006050:	f7ff fedc 	bl	8005e0c <move_window>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d130      	bne.n	80060bc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006068:	4413      	add	r3, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fbee 	bl	800584c <ld_word>
 8006070:	4603      	mov	r3, r0
 8006072:	617b      	str	r3, [r7, #20]
			break;
 8006074:	e025      	b.n	80060c2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	09db      	lsrs	r3, r3, #7
 800607e:	4413      	add	r3, r2
 8006080:	4619      	mov	r1, r3
 8006082:	6938      	ldr	r0, [r7, #16]
 8006084:	f7ff fec2 	bl	8005e0c <move_window>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d118      	bne.n	80060c0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800609c:	4413      	add	r3, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fbec 	bl	800587c <ld_dword>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060aa:	617b      	str	r3, [r7, #20]
			break;
 80060ac:	e009      	b.n	80060c2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80060ae:	2301      	movs	r3, #1
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	e006      	b.n	80060c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060b4:	bf00      	nop
 80060b6:	e004      	b.n	80060c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060b8:	bf00      	nop
 80060ba:	e002      	b.n	80060c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060c0:	bf00      	nop
		}
	}

	return val;
 80060c2:	697b      	ldr	r3, [r7, #20]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80060cc:	b590      	push	{r4, r7, lr}
 80060ce:	b089      	sub	sp, #36	; 0x24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80060d8:	2302      	movs	r3, #2
 80060da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	f240 80d6 	bls.w	8006290 <put_fat+0x1c4>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	f080 80d0 	bcs.w	8006290 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d073      	beq.n	80061e0 <put_fat+0x114>
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	f000 8091 	beq.w	8006220 <put_fat+0x154>
 80060fe:	2b01      	cmp	r3, #1
 8006100:	f040 80c6 	bne.w	8006290 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4413      	add	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	0a5b      	lsrs	r3, r3, #9
 800611a:	4413      	add	r3, r2
 800611c:	4619      	mov	r1, r3
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fe74 	bl	8005e0c <move_window>
 8006124:	4603      	mov	r3, r0
 8006126:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006128:	7ffb      	ldrb	r3, [r7, #31]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f040 80a9 	bne.w	8006282 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	61b9      	str	r1, [r7, #24]
 800613c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006140:	4413      	add	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00d      	beq.n	800616a <put_fat+0x9e>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	b25b      	sxtb	r3, r3
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	b25a      	sxtb	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	b25b      	sxtb	r3, r3
 8006162:	4313      	orrs	r3, r2
 8006164:	b25b      	sxtb	r3, r3
 8006166:	b2db      	uxtb	r3, r3
 8006168:	e001      	b.n	800616e <put_fat+0xa2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	0a5b      	lsrs	r3, r3, #9
 8006180:	4413      	add	r3, r2
 8006182:	4619      	mov	r1, r3
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fe41 	bl	8005e0c <move_window>
 800618a:	4603      	mov	r3, r0
 800618c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800618e:	7ffb      	ldrb	r3, [r7, #31]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d178      	bne.n	8006286 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	4413      	add	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <put_fat+0xea>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	e00e      	b.n	80061d4 <put_fat+0x108>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	f023 030f 	bic.w	r3, r3, #15
 80061c0:	b25a      	sxtb	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	b25b      	sxtb	r3, r3
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	b25b      	sxtb	r3, r3
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b25b      	sxtb	r3, r3
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	70da      	strb	r2, [r3, #3]
			break;
 80061de:	e057      	b.n	8006290 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	4413      	add	r3, r2
 80061ea:	4619      	mov	r1, r3
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fe0d 	bl	8005e0c <move_window>
 80061f2:	4603      	mov	r3, r0
 80061f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061f6:	7ffb      	ldrb	r3, [r7, #31]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d146      	bne.n	800628a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800620a:	4413      	add	r3, r2
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	b292      	uxth	r2, r2
 8006210:	4611      	mov	r1, r2
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fb55 	bl	80058c2 <st_word>
			fs->wflag = 1;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	70da      	strb	r2, [r3, #3]
			break;
 800621e:	e037      	b.n	8006290 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	09db      	lsrs	r3, r3, #7
 8006228:	4413      	add	r3, r2
 800622a:	4619      	mov	r1, r3
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fded 	bl	8005e0c <move_window>
 8006232:	4603      	mov	r3, r0
 8006234:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006236:	7ffb      	ldrb	r3, [r7, #31]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d128      	bne.n	800628e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006250:	4413      	add	r3, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fb12 	bl	800587c <ld_dword>
 8006258:	4603      	mov	r3, r0
 800625a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800625e:	4323      	orrs	r3, r4
 8006260:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006270:	4413      	add	r3, r2
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fb3f 	bl	80058f8 <st_dword>
			fs->wflag = 1;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	70da      	strb	r2, [r3, #3]
			break;
 8006280:	e006      	b.n	8006290 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006282:	bf00      	nop
 8006284:	e004      	b.n	8006290 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006286:	bf00      	nop
 8006288:	e002      	b.n	8006290 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800628e:	bf00      	nop
		}
	}
	return res;
 8006290:	7ffb      	ldrb	r3, [r7, #31]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3724      	adds	r7, #36	; 0x24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd90      	pop	{r4, r7, pc}

0800629a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b088      	sub	sp, #32
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d904      	bls.n	80062c0 <remove_chain+0x26>
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d301      	bcc.n	80062c4 <remove_chain+0x2a>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e04b      	b.n	800635c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	69b8      	ldr	r0, [r7, #24]
 80062d2:	f7ff fefb 	bl	80060cc <put_fat>
 80062d6:	4603      	mov	r3, r0
 80062d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80062da:	7ffb      	ldrb	r3, [r7, #31]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <remove_chain+0x4a>
 80062e0:	7ffb      	ldrb	r3, [r7, #31]
 80062e2:	e03b      	b.n	800635c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff fe4b 	bl	8005f82 <get_fat>
 80062ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d031      	beq.n	8006358 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <remove_chain+0x64>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e02e      	b.n	800635c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d101      	bne.n	800630a <remove_chain+0x70>
 8006306:	2301      	movs	r3, #1
 8006308:	e028      	b.n	800635c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800630a:	2200      	movs	r2, #0
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	69b8      	ldr	r0, [r7, #24]
 8006310:	f7ff fedc 	bl	80060cc <put_fat>
 8006314:	4603      	mov	r3, r0
 8006316:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006318:	7ffb      	ldrb	r3, [r7, #31]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <remove_chain+0x88>
 800631e:	7ffb      	ldrb	r3, [r7, #31]
 8006320:	e01c      	b.n	800635c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	3b02      	subs	r3, #2
 800632c:	429a      	cmp	r2, r3
 800632e:	d20b      	bcs.n	8006348 <remove_chain+0xae>
			fs->free_clst++;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	791b      	ldrb	r3, [r3, #4]
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	429a      	cmp	r2, r3
 8006354:	d3c6      	bcc.n	80062e4 <remove_chain+0x4a>
 8006356:	e000      	b.n	800635a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006358:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3720      	adds	r7, #32
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10d      	bne.n	8006396 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <create_chain+0x2c>
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	429a      	cmp	r2, r3
 800638e:	d31b      	bcc.n	80063c8 <create_chain+0x64>
 8006390:	2301      	movs	r3, #1
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	e018      	b.n	80063c8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff fdf2 	bl	8005f82 <get_fat>
 800639e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d801      	bhi.n	80063aa <create_chain+0x46>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e070      	b.n	800648c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b0:	d101      	bne.n	80063b6 <create_chain+0x52>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	e06a      	b.n	800648c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d201      	bcs.n	80063c4 <create_chain+0x60>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	e063      	b.n	800648c <create_chain+0x128>
		scl = clst;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	3301      	adds	r3, #1
 80063d0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d307      	bcc.n	80063ec <create_chain+0x88>
				ncl = 2;
 80063dc:	2302      	movs	r3, #2
 80063de:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d901      	bls.n	80063ec <create_chain+0x88>
 80063e8:	2300      	movs	r3, #0
 80063ea:	e04f      	b.n	800648c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80063ec:	69f9      	ldr	r1, [r7, #28]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fdc7 	bl	8005f82 <get_fat>
 80063f4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00e      	beq.n	800641a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d003      	beq.n	800640a <create_chain+0xa6>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d101      	bne.n	800640e <create_chain+0xaa>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	e03e      	b.n	800648c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	429a      	cmp	r2, r3
 8006414:	d1da      	bne.n	80063cc <create_chain+0x68>
 8006416:	2300      	movs	r3, #0
 8006418:	e038      	b.n	800648c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800641a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	69f9      	ldr	r1, [r7, #28]
 8006422:	6938      	ldr	r0, [r7, #16]
 8006424:	f7ff fe52 	bl	80060cc <put_fat>
 8006428:	4603      	mov	r3, r0
 800642a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <create_chain+0xe2>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d006      	beq.n	8006446 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6938      	ldr	r0, [r7, #16]
 800643e:	f7ff fe45 	bl	80060cc <put_fat>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <create_chain+0x116>
		fs->last_clst = ncl;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	3b02      	subs	r3, #2
 800645c:	429a      	cmp	r2, r3
 800645e:	d804      	bhi.n	800646a <create_chain+0x106>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	1e5a      	subs	r2, r3, #1
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	791b      	ldrb	r3, [r3, #4]
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	711a      	strb	r2, [r3, #4]
 8006478:	e007      	b.n	800648a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d102      	bne.n	8006486 <create_chain+0x122>
 8006480:	f04f 33ff 	mov.w	r3, #4294967295
 8006484:	e000      	b.n	8006488 <create_chain+0x124>
 8006486:	2301      	movs	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800648a:	69fb      	ldr	r3, [r7, #28]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3720      	adds	r7, #32
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	3304      	adds	r3, #4
 80064aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	0a5b      	lsrs	r3, r3, #9
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	8952      	ldrh	r2, [r2, #10]
 80064b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1d1a      	adds	r2, r3, #4
 80064be:	613a      	str	r2, [r7, #16]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <clmt_clust+0x3a>
 80064ca:	2300      	movs	r3, #0
 80064cc:	e010      	b.n	80064f0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d307      	bcc.n	80064e6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	3304      	adds	r3, #4
 80064e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064e4:	e7e9      	b.n	80064ba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80064e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4413      	add	r3, r2
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006512:	d204      	bcs.n	800651e <dir_sdi+0x22>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <dir_sdi+0x26>
		return FR_INT_ERR;
 800651e:	2302      	movs	r3, #2
 8006520:	e063      	b.n	80065ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <dir_sdi+0x46>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d902      	bls.n	8006542 <dir_sdi+0x46>
		clst = fs->dirbase;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10c      	bne.n	8006562 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	8912      	ldrh	r2, [r2, #8]
 8006550:	4293      	cmp	r3, r2
 8006552:	d301      	bcc.n	8006558 <dir_sdi+0x5c>
 8006554:	2302      	movs	r3, #2
 8006556:	e048      	b.n	80065ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	61da      	str	r2, [r3, #28]
 8006560:	e029      	b.n	80065b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	895b      	ldrh	r3, [r3, #10]
 8006566:	025b      	lsls	r3, r3, #9
 8006568:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800656a:	e019      	b.n	80065a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6979      	ldr	r1, [r7, #20]
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fd06 	bl	8005f82 <get_fat>
 8006576:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d101      	bne.n	8006584 <dir_sdi+0x88>
 8006580:	2301      	movs	r3, #1
 8006582:	e032      	b.n	80065ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d904      	bls.n	8006594 <dir_sdi+0x98>
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	429a      	cmp	r2, r3
 8006592:	d301      	bcc.n	8006598 <dir_sdi+0x9c>
 8006594:	2302      	movs	r3, #2
 8006596:	e028      	b.n	80065ea <dir_sdi+0xee>
			ofs -= csz;
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d2e1      	bcs.n	800656c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80065a8:	6979      	ldr	r1, [r7, #20]
 80065aa:	6938      	ldr	r0, [r7, #16]
 80065ac:	f7ff fcca 	bl	8005f44 <clust2sect>
 80065b0:	4602      	mov	r2, r0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <dir_sdi+0xcc>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e010      	b.n	80065ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69da      	ldr	r2, [r3, #28]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	0a5b      	lsrs	r3, r3, #9
 80065d0:	441a      	add	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e2:	441a      	add	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	3320      	adds	r3, #32
 8006608:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <dir_next+0x28>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006618:	d301      	bcc.n	800661e <dir_next+0x2c>
 800661a:	2304      	movs	r3, #4
 800661c:	e0aa      	b.n	8006774 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 8098 	bne.w	800675a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	8912      	ldrh	r2, [r2, #8]
 8006644:	4293      	cmp	r3, r2
 8006646:	f0c0 8088 	bcc.w	800675a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	61da      	str	r2, [r3, #28]
 8006650:	2304      	movs	r3, #4
 8006652:	e08f      	b.n	8006774 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	0a5b      	lsrs	r3, r3, #9
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	8952      	ldrh	r2, [r2, #10]
 800665c:	3a01      	subs	r2, #1
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d17a      	bne.n	800675a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f7ff fc88 	bl	8005f82 <get_fat>
 8006672:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d801      	bhi.n	800667e <dir_next+0x8c>
 800667a:	2302      	movs	r3, #2
 800667c:	e07a      	b.n	8006774 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d101      	bne.n	800668a <dir_next+0x98>
 8006686:	2301      	movs	r3, #1
 8006688:	e074      	b.n	8006774 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	429a      	cmp	r2, r3
 8006692:	d358      	bcc.n	8006746 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d104      	bne.n	80066a4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	61da      	str	r2, [r3, #28]
 80066a0:	2304      	movs	r3, #4
 80066a2:	e067      	b.n	8006774 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7ff fe59 	bl	8006364 <create_chain>
 80066b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <dir_next+0xcc>
 80066ba:	2307      	movs	r3, #7
 80066bc:	e05a      	b.n	8006774 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <dir_next+0xd6>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e055      	b.n	8006774 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d101      	bne.n	80066d4 <dir_next+0xe2>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e04f      	b.n	8006774 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff fb55 	bl	8005d84 <sync_window>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <dir_next+0xf2>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e047      	b.n	8006774 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3334      	adds	r3, #52	; 0x34
 80066e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff f94f 	bl	8005992 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066f4:	2300      	movs	r3, #0
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	6979      	ldr	r1, [r7, #20]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff fc22 	bl	8005f44 <clust2sect>
 8006700:	4602      	mov	r2, r0
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
 8006706:	e012      	b.n	800672e <dir_next+0x13c>
						fs->wflag = 1;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff fb38 	bl	8005d84 <sync_window>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <dir_next+0x12c>
 800671a:	2301      	movs	r3, #1
 800671c:	e02a      	b.n	8006774 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3301      	adds	r3, #1
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	631a      	str	r2, [r3, #48]	; 0x30
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	895b      	ldrh	r3, [r3, #10]
 8006732:	461a      	mov	r2, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	4293      	cmp	r3, r2
 8006738:	d3e6      	bcc.n	8006708 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad2      	subs	r2, r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800674c:	6979      	ldr	r1, [r7, #20]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff fbf8 	bl	8005f44 <clust2sect>
 8006754:	4602      	mov	r2, r0
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800678c:	2100      	movs	r1, #0
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff feb4 	bl	80064fc <dir_sdi>
 8006794:	4603      	mov	r3, r0
 8006796:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d12b      	bne.n	80067f6 <dir_alloc+0x7a>
		n = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff fb2f 	bl	8005e0c <move_window>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d11d      	bne.n	80067f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2be5      	cmp	r3, #229	; 0xe5
 80067c0:	d004      	beq.n	80067cc <dir_alloc+0x50>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d107      	bne.n	80067dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3301      	adds	r3, #1
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d102      	bne.n	80067e0 <dir_alloc+0x64>
 80067da:	e00c      	b.n	80067f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80067dc:	2300      	movs	r3, #0
 80067de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80067e0:	2101      	movs	r1, #1
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff ff05 	bl	80065f2 <dir_next>
 80067e8:	4603      	mov	r3, r0
 80067ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0d7      	beq.n	80067a2 <dir_alloc+0x26>
 80067f2:	e000      	b.n	80067f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80067f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d101      	bne.n	8006800 <dir_alloc+0x84>
 80067fc:	2307      	movs	r3, #7
 80067fe:	75fb      	strb	r3, [r7, #23]
	return res;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	331a      	adds	r3, #26
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff f817 	bl	800584c <ld_word>
 800681e:	4603      	mov	r3, r0
 8006820:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b03      	cmp	r3, #3
 8006828:	d109      	bne.n	800683e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	3314      	adds	r3, #20
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff f80c 	bl	800584c <ld_word>
 8006834:	4603      	mov	r3, r0
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	331a      	adds	r3, #26
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	b292      	uxth	r2, r2
 800685c:	4611      	mov	r1, r2
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff f82f 	bl	80058c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d109      	bne.n	8006880 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f103 0214 	add.w	r2, r3, #20
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	b29b      	uxth	r3, r3
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7ff f821 	bl	80058c2 <st_word>
	}
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006896:	2100      	movs	r1, #0
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff fe2f 	bl	80064fc <dir_sdi>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <dir_find+0x24>
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	e03e      	b.n	800692a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	4619      	mov	r1, r3
 80068b2:	6938      	ldr	r0, [r7, #16]
 80068b4:	f7ff faaa 	bl	8005e0c <move_window>
 80068b8:	4603      	mov	r3, r0
 80068ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d12f      	bne.n	8006922 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <dir_find+0x4e>
 80068d0:	2304      	movs	r3, #4
 80068d2:	75fb      	strb	r3, [r7, #23]
 80068d4:	e028      	b.n	8006928 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	330b      	adds	r3, #11
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	330b      	adds	r3, #11
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <dir_find+0x86>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a18      	ldr	r0, [r3, #32]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3324      	adds	r3, #36	; 0x24
 8006900:	220b      	movs	r2, #11
 8006902:	4619      	mov	r1, r3
 8006904:	f7ff f85f 	bl	80059c6 <mem_cmp>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800690e:	2100      	movs	r1, #0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff fe6e 	bl	80065f2 <dir_next>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0c5      	beq.n	80068ac <dir_find+0x24>
 8006920:	e002      	b.n	8006928 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006926:	bf00      	nop

	return res;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff ff1a 	bl	800677c <dir_alloc>
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d11c      	bne.n	800698c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	4619      	mov	r1, r3
 8006958:	68b8      	ldr	r0, [r7, #8]
 800695a:	f7ff fa57 	bl	8005e0c <move_window>
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d111      	bne.n	800698c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	2220      	movs	r2, #32
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff f80e 	bl	8005992 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a18      	ldr	r0, [r3, #32]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3324      	adds	r3, #36	; 0x24
 800697e:	220b      	movs	r2, #11
 8006980:	4619      	mov	r1, r3
 8006982:	f7fe ffe5 	bl	8005950 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2201      	movs	r2, #1
 800698a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3324      	adds	r3, #36	; 0x24
 80069ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80069ae:	220b      	movs	r2, #11
 80069b0:	2120      	movs	r1, #32
 80069b2:	68b8      	ldr	r0, [r7, #8]
 80069b4:	f7fe ffed 	bl	8005992 <mem_set>
	si = i = 0; ni = 8;
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	2308      	movs	r3, #8
 80069c2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	617a      	str	r2, [r7, #20]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80069d2:	7ffb      	ldrb	r3, [r7, #31]
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d94e      	bls.n	8006a76 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80069d8:	7ffb      	ldrb	r3, [r7, #31]
 80069da:	2b2f      	cmp	r3, #47	; 0x2f
 80069dc:	d006      	beq.n	80069ec <create_name+0x54>
 80069de:	7ffb      	ldrb	r3, [r7, #31]
 80069e0:	2b5c      	cmp	r3, #92	; 0x5c
 80069e2:	d110      	bne.n	8006a06 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80069e4:	e002      	b.n	80069ec <create_name+0x54>
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	3301      	adds	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	4413      	add	r3, r2
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b2f      	cmp	r3, #47	; 0x2f
 80069f6:	d0f6      	beq.n	80069e6 <create_name+0x4e>
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	4413      	add	r3, r2
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b5c      	cmp	r3, #92	; 0x5c
 8006a02:	d0f0      	beq.n	80069e6 <create_name+0x4e>
			break;
 8006a04:	e038      	b.n	8006a78 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006a06:	7ffb      	ldrb	r3, [r7, #31]
 8006a08:	2b2e      	cmp	r3, #46	; 0x2e
 8006a0a:	d003      	beq.n	8006a14 <create_name+0x7c>
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d30c      	bcc.n	8006a2e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b0b      	cmp	r3, #11
 8006a18:	d002      	beq.n	8006a20 <create_name+0x88>
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
 8006a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a1e:	d001      	beq.n	8006a24 <create_name+0x8c>
 8006a20:	2306      	movs	r3, #6
 8006a22:	e044      	b.n	8006aae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006a24:	2308      	movs	r3, #8
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	230b      	movs	r3, #11
 8006a2a:	61bb      	str	r3, [r7, #24]
			continue;
 8006a2c:	e022      	b.n	8006a74 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006a2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da04      	bge.n	8006a40 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006a36:	7ffb      	ldrb	r3, [r7, #31]
 8006a38:	3b80      	subs	r3, #128	; 0x80
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	; (8006ab8 <create_name+0x120>)
 8006a3c:	5cd3      	ldrb	r3, [r2, r3]
 8006a3e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006a40:	7ffb      	ldrb	r3, [r7, #31]
 8006a42:	4619      	mov	r1, r3
 8006a44:	481d      	ldr	r0, [pc, #116]	; (8006abc <create_name+0x124>)
 8006a46:	f7fe ffe5 	bl	8005a14 <chk_chr>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <create_name+0xbc>
 8006a50:	2306      	movs	r3, #6
 8006a52:	e02c      	b.n	8006aae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006a54:	7ffb      	ldrb	r3, [r7, #31]
 8006a56:	2b60      	cmp	r3, #96	; 0x60
 8006a58:	d905      	bls.n	8006a66 <create_name+0xce>
 8006a5a:	7ffb      	ldrb	r3, [r7, #31]
 8006a5c:	2b7a      	cmp	r3, #122	; 0x7a
 8006a5e:	d802      	bhi.n	8006a66 <create_name+0xce>
 8006a60:	7ffb      	ldrb	r3, [r7, #31]
 8006a62:	3b20      	subs	r3, #32
 8006a64:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	613a      	str	r2, [r7, #16]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	4413      	add	r3, r2
 8006a70:	7ffa      	ldrb	r2, [r7, #31]
 8006a72:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006a74:	e7a6      	b.n	80069c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a76:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	441a      	add	r2, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <create_name+0xf4>
 8006a88:	2306      	movs	r3, #6
 8006a8a:	e010      	b.n	8006aae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2be5      	cmp	r3, #229	; 0xe5
 8006a92:	d102      	bne.n	8006a9a <create_name+0x102>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2205      	movs	r2, #5
 8006a98:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a9a:	7ffb      	ldrb	r3, [r7, #31]
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d801      	bhi.n	8006aa4 <create_name+0x10c>
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	e000      	b.n	8006aa6 <create_name+0x10e>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	330b      	adds	r3, #11
 8006aaa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006aac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	0800b99c 	.word	0x0800b99c
 8006abc:	0800b938 	.word	0x0800b938

08006ac0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ad4:	e002      	b.n	8006adc <follow_path+0x1c>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8006ae2:	d0f8      	beq.n	8006ad6 <follow_path+0x16>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8006aea:	d0f4      	beq.n	8006ad6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2200      	movs	r2, #0
 8006af0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b1f      	cmp	r3, #31
 8006af8:	d80a      	bhi.n	8006b10 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2280      	movs	r2, #128	; 0x80
 8006afe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006b02:	2100      	movs	r1, #0
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff fcf9 	bl	80064fc <dir_sdi>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75fb      	strb	r3, [r7, #23]
 8006b0e:	e043      	b.n	8006b98 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b10:	463b      	mov	r3, r7
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff ff3f 	bl	8006998 <create_name>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d134      	bne.n	8006b8e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff feaf 	bl	8006888 <dir_find>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00a      	beq.n	8006b52 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d127      	bne.n	8006b92 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d122      	bne.n	8006b92 <follow_path+0xd2>
 8006b4c:	2305      	movs	r3, #5
 8006b4e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006b50:	e01f      	b.n	8006b92 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d11c      	bne.n	8006b96 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	799b      	ldrb	r3, [r3, #6]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b68:	2305      	movs	r3, #5
 8006b6a:	75fb      	strb	r3, [r7, #23]
 8006b6c:	e014      	b.n	8006b98 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7c:	4413      	add	r3, r2
 8006b7e:	4619      	mov	r1, r3
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff fe42 	bl	800680a <ld_clust>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b8c:	e7c0      	b.n	8006b10 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b8e:	bf00      	nop
 8006b90:	e002      	b.n	8006b98 <follow_path+0xd8>
				break;
 8006b92:	bf00      	nop
 8006b94:	e000      	b.n	8006b98 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b96:	bf00      	nop
			}
		}
	}

	return res;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006baa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d031      	beq.n	8006c1c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e002      	b.n	8006bc6 <get_ldnumber+0x24>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d903      	bls.n	8006bd6 <get_ldnumber+0x34>
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b3a      	cmp	r3, #58	; 0x3a
 8006bd4:	d1f4      	bne.n	8006bc0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b3a      	cmp	r3, #58	; 0x3a
 8006bdc:	d11c      	bne.n	8006c18 <get_ldnumber+0x76>
			tp = *path;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	60fa      	str	r2, [r7, #12]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	3b30      	subs	r3, #48	; 0x30
 8006bee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b09      	cmp	r3, #9
 8006bf4:	d80e      	bhi.n	8006c14 <get_ldnumber+0x72>
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d10a      	bne.n	8006c14 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d107      	bne.n	8006c14 <get_ldnumber+0x72>
					vol = (int)i;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	e002      	b.n	8006c1e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c18:	2300      	movs	r3, #0
 8006c1a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c1c:	693b      	ldr	r3, [r7, #16]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	70da      	strb	r2, [r3, #3]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff f8e0 	bl	8005e0c <move_window>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <check_fs+0x2a>
 8006c52:	2304      	movs	r3, #4
 8006c54:	e038      	b.n	8006cc8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3334      	adds	r3, #52	; 0x34
 8006c5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fdf4 	bl	800584c <ld_word>
 8006c64:	4603      	mov	r3, r0
 8006c66:	461a      	mov	r2, r3
 8006c68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <check_fs+0x48>
 8006c70:	2303      	movs	r3, #3
 8006c72:	e029      	b.n	8006cc8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c7a:	2be9      	cmp	r3, #233	; 0xe9
 8006c7c:	d009      	beq.n	8006c92 <check_fs+0x66>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c84:	2beb      	cmp	r3, #235	; 0xeb
 8006c86:	d11e      	bne.n	8006cc6 <check_fs+0x9a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006c8e:	2b90      	cmp	r3, #144	; 0x90
 8006c90:	d119      	bne.n	8006cc6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3334      	adds	r3, #52	; 0x34
 8006c96:	3336      	adds	r3, #54	; 0x36
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fdef 	bl	800587c <ld_dword>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ca4:	4a0a      	ldr	r2, [pc, #40]	; (8006cd0 <check_fs+0xa4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d101      	bne.n	8006cae <check_fs+0x82>
 8006caa:	2300      	movs	r3, #0
 8006cac:	e00c      	b.n	8006cc8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3334      	adds	r3, #52	; 0x34
 8006cb2:	3352      	adds	r3, #82	; 0x52
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fde1 	bl	800587c <ld_dword>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <check_fs+0xa8>)
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d101      	bne.n	8006cc6 <check_fs+0x9a>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e000      	b.n	8006cc8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006cc6:	2302      	movs	r3, #2
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	00544146 	.word	0x00544146
 8006cd4:	33544146 	.word	0x33544146

08006cd8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b096      	sub	sp, #88	; 0x58
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff ff58 	bl	8006ba2 <get_ldnumber>
 8006cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	da01      	bge.n	8006cfe <find_volume+0x26>
 8006cfa:	230b      	movs	r3, #11
 8006cfc:	e236      	b.n	800716c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cfe:	4aac      	ldr	r2, [pc, #688]	; (8006fb0 <find_volume+0x2d8>)
 8006d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <find_volume+0x3a>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	e22c      	b.n	800716c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8006d12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d14:	f7fe fe99 	bl	8005a4a <lock_fs>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <find_volume+0x4a>
 8006d1e:	230f      	movs	r3, #15
 8006d20:	e224      	b.n	800716c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01a      	beq.n	8006d6e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe fce7 	bl	8005710 <disk_status>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10c      	bne.n	8006d6e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <find_volume+0x92>
 8006d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006d66:	230a      	movs	r3, #10
 8006d68:	e200      	b.n	800716c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e1fe      	b.n	800716c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe fcdf 	bl	8005744 <disk_initialize>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e1e7      	b.n	800716c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <find_volume+0xda>
 8006da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8006dae:	230a      	movs	r3, #10
 8006db0:	e1dc      	b.n	800716c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006db6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006db8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dba:	f7ff ff37 	bl	8006c2c <check_fs>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d14b      	bne.n	8006e64 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006dcc:	2300      	movs	r3, #0
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd0:	e01f      	b.n	8006e12 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006de0:	4413      	add	r3, r2
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	3304      	adds	r3, #4
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d006      	beq.n	8006dfc <find_volume+0x124>
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	3308      	adds	r3, #8
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fd42 	bl	800587c <ld_dword>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	e000      	b.n	8006dfe <find_volume+0x126>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006e06:	440b      	add	r3, r1
 8006e08:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0e:	3301      	adds	r3, #1
 8006e10:	643b      	str	r3, [r7, #64]	; 0x40
 8006e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d9dc      	bls.n	8006dd2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006e18:	2300      	movs	r3, #0
 8006e1a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <find_volume+0x150>
 8006e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e24:	3b01      	subs	r3, #1
 8006e26:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e30:	4413      	add	r3, r2
 8006e32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <find_volume+0x172>
 8006e3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e42:	f7ff fef3 	bl	8006c2c <check_fs>
 8006e46:	4603      	mov	r3, r0
 8006e48:	e000      	b.n	8006e4c <find_volume+0x174>
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d905      	bls.n	8006e64 <find_volume+0x18c>
 8006e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d9e1      	bls.n	8006e28 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d101      	bne.n	8006e70 <find_volume+0x198>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e17d      	b.n	800716c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d901      	bls.n	8006e7c <find_volume+0x1a4>
 8006e78:	230d      	movs	r3, #13
 8006e7a:	e177      	b.n	800716c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	3334      	adds	r3, #52	; 0x34
 8006e80:	330b      	adds	r3, #11
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fce2 	bl	800584c <ld_word>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8e:	d001      	beq.n	8006e94 <find_volume+0x1bc>
 8006e90:	230d      	movs	r3, #13
 8006e92:	e16b      	b.n	800716c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	3334      	adds	r3, #52	; 0x34
 8006e98:	3316      	adds	r3, #22
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fcd6 	bl	800584c <ld_word>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <find_volume+0x1e0>
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	3334      	adds	r3, #52	; 0x34
 8006eae:	3324      	adds	r3, #36	; 0x24
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe fce3 	bl	800587c <ld_dword>
 8006eb6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ebc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	789b      	ldrb	r3, [r3, #2]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d005      	beq.n	8006edc <find_volume+0x204>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	789b      	ldrb	r3, [r3, #2]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d001      	beq.n	8006edc <find_volume+0x204>
 8006ed8:	230d      	movs	r3, #13
 8006eda:	e147      	b.n	800716c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	789b      	ldrb	r3, [r3, #2]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee4:	fb02 f303 	mul.w	r3, r2, r3
 8006ee8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	895b      	ldrh	r3, [r3, #10]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d008      	beq.n	8006f10 <find_volume+0x238>
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	895b      	ldrh	r3, [r3, #10]
 8006f02:	461a      	mov	r2, r3
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	895b      	ldrh	r3, [r3, #10]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <find_volume+0x23c>
 8006f10:	230d      	movs	r3, #13
 8006f12:	e12b      	b.n	800716c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	3334      	adds	r3, #52	; 0x34
 8006f18:	3311      	adds	r3, #17
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe fc96 	bl	800584c <ld_word>
 8006f20:	4603      	mov	r3, r0
 8006f22:	461a      	mov	r2, r3
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	891b      	ldrh	r3, [r3, #8]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <find_volume+0x262>
 8006f36:	230d      	movs	r3, #13
 8006f38:	e118      	b.n	800716c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	3334      	adds	r3, #52	; 0x34
 8006f3e:	3313      	adds	r3, #19
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fc83 	bl	800584c <ld_word>
 8006f46:	4603      	mov	r3, r0
 8006f48:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <find_volume+0x286>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	3334      	adds	r3, #52	; 0x34
 8006f54:	3320      	adds	r3, #32
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fc90 	bl	800587c <ld_dword>
 8006f5c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	3334      	adds	r3, #52	; 0x34
 8006f62:	330e      	adds	r3, #14
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fc71 	bl	800584c <ld_word>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <find_volume+0x2a0>
 8006f74:	230d      	movs	r3, #13
 8006f76:	e0f9      	b.n	800716c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7c:	4413      	add	r3, r2
 8006f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f80:	8912      	ldrh	r2, [r2, #8]
 8006f82:	0912      	lsrs	r2, r2, #4
 8006f84:	b292      	uxth	r2, r2
 8006f86:	4413      	add	r3, r2
 8006f88:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d201      	bcs.n	8006f96 <find_volume+0x2be>
 8006f92:	230d      	movs	r3, #13
 8006f94:	e0ea      	b.n	800716c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f9e:	8952      	ldrh	r2, [r2, #10]
 8006fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <find_volume+0x2dc>
 8006fac:	230d      	movs	r3, #13
 8006fae:	e0dd      	b.n	800716c <find_volume+0x494>
 8006fb0:	200004f8 	.word	0x200004f8
		fmt = FS_FAT32;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d802      	bhi.n	8006fca <find_volume+0x2f2>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d802      	bhi.n	8006fda <find_volume+0x302>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	1c9a      	adds	r2, r3, #2
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fe6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006fe8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fec:	441a      	add	r2, r3
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006ff2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	441a      	add	r2, r3
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007000:	2b03      	cmp	r3, #3
 8007002:	d11e      	bne.n	8007042 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	3334      	adds	r3, #52	; 0x34
 8007008:	332a      	adds	r3, #42	; 0x2a
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fc1e 	bl	800584c <ld_word>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <find_volume+0x342>
 8007016:	230d      	movs	r3, #13
 8007018:	e0a8      	b.n	800716c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	891b      	ldrh	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <find_volume+0x34e>
 8007022:	230d      	movs	r3, #13
 8007024:	e0a2      	b.n	800716c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	3334      	adds	r3, #52	; 0x34
 800702a:	332c      	adds	r3, #44	; 0x2c
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fc25 	bl	800587c <ld_dword>
 8007032:	4602      	mov	r2, r0
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	647b      	str	r3, [r7, #68]	; 0x44
 8007040:	e01f      	b.n	8007082 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	891b      	ldrh	r3, [r3, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <find_volume+0x376>
 800704a:	230d      	movs	r3, #13
 800704c:	e08e      	b.n	800716c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007054:	441a      	add	r2, r3
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800705a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800705e:	2b02      	cmp	r3, #2
 8007060:	d103      	bne.n	800706a <find_volume+0x392>
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	e00a      	b.n	8007080 <find_volume+0x3a8>
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	699a      	ldr	r2, [r3, #24]
 800706e:	4613      	mov	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4413      	add	r3, r2
 8007074:	085a      	lsrs	r2, r3, #1
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007080:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	69da      	ldr	r2, [r3, #28]
 8007086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007088:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800708c:	0a5b      	lsrs	r3, r3, #9
 800708e:	429a      	cmp	r2, r3
 8007090:	d201      	bcs.n	8007096 <find_volume+0x3be>
 8007092:	230d      	movs	r3, #13
 8007094:	e06a      	b.n	800716c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	f04f 32ff 	mov.w	r2, #4294967295
 800709c:	615a      	str	r2, [r3, #20]
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	695a      	ldr	r2, [r3, #20]
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	2280      	movs	r2, #128	; 0x80
 80070aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80070ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d149      	bne.n	8007148 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	3334      	adds	r3, #52	; 0x34
 80070b8:	3330      	adds	r3, #48	; 0x30
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fbc6 	bl	800584c <ld_word>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d140      	bne.n	8007148 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80070c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c8:	3301      	adds	r3, #1
 80070ca:	4619      	mov	r1, r3
 80070cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070ce:	f7fe fe9d 	bl	8005e0c <move_window>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d137      	bne.n	8007148 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	2200      	movs	r2, #0
 80070dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	3334      	adds	r3, #52	; 0x34
 80070e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fbb0 	bl	800584c <ld_word>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d127      	bne.n	8007148 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	3334      	adds	r3, #52	; 0x34
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe fbbd 	bl	800587c <ld_dword>
 8007102:	4602      	mov	r2, r0
 8007104:	4b1b      	ldr	r3, [pc, #108]	; (8007174 <find_volume+0x49c>)
 8007106:	429a      	cmp	r2, r3
 8007108:	d11e      	bne.n	8007148 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	3334      	adds	r3, #52	; 0x34
 800710e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fbb2 	bl	800587c <ld_dword>
 8007118:	4602      	mov	r2, r0
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <find_volume+0x4a0>)
 800711c:	429a      	cmp	r2, r3
 800711e:	d113      	bne.n	8007148 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	3334      	adds	r3, #52	; 0x34
 8007124:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fba7 	bl	800587c <ld_dword>
 800712e:	4602      	mov	r2, r0
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	3334      	adds	r3, #52	; 0x34
 8007138:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fb9d 	bl	800587c <ld_dword>
 8007142:	4602      	mov	r2, r0
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800714e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <find_volume+0x4a4>)
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	3301      	adds	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	4b08      	ldr	r3, [pc, #32]	; (800717c <find_volume+0x4a4>)
 800715a:	801a      	strh	r2, [r3, #0]
 800715c:	4b07      	ldr	r3, [pc, #28]	; (800717c <find_volume+0x4a4>)
 800715e:	881a      	ldrh	r2, [r3, #0]
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007166:	f7fe fde9 	bl	8005d3c <clear_lock>
#endif
	return FR_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3758      	adds	r7, #88	; 0x58
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	41615252 	.word	0x41615252
 8007178:	61417272 	.word	0x61417272
 800717c:	200004fc 	.word	0x200004fc

08007180 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800718a:	2309      	movs	r3, #9
 800718c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02e      	beq.n	80071f2 <validate+0x72>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02a      	beq.n	80071f2 <validate+0x72>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d025      	beq.n	80071f2 <validate+0x72>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	889a      	ldrh	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	88db      	ldrh	r3, [r3, #6]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d11e      	bne.n	80071f2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fc46 	bl	8005a4a <lock_fs>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d014      	beq.n	80071ee <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe faa0 	bl	8005710 <disk_status>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d102      	bne.n	80071e0 <validate+0x60>
				res = FR_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
 80071de:	e008      	b.n	80071f2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fc45 	bl	8005a76 <unlock_fs>
 80071ec:	e001      	b.n	80071f2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80071ee:	230f      	movs	r3, #15
 80071f0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <validate+0x7e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	e000      	b.n	8007200 <validate+0x80>
 80071fe:	2300      	movs	r3, #0
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	6013      	str	r3, [r2, #0]
	return res;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007222:	f107 0310 	add.w	r3, r7, #16
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fcbb 	bl	8006ba2 <get_ldnumber>
 800722c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	da01      	bge.n	8007238 <f_mount+0x28>
 8007234:	230b      	movs	r3, #11
 8007236:	e048      	b.n	80072ca <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007238:	4a26      	ldr	r2, [pc, #152]	; (80072d4 <f_mount+0xc4>)
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007240:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00f      	beq.n	8007268 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007248:	69b8      	ldr	r0, [r7, #24]
 800724a:	f7fe fd77 	bl	8005d3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fcdf 	bl	8007c16 <ff_del_syncobj>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <f_mount+0x52>
 800725e:	2302      	movs	r3, #2
 8007260:	e033      	b.n	80072ca <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00f      	beq.n	800728e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	b2da      	uxtb	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	330c      	adds	r3, #12
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f000 fca9 	bl	8007bd6 <ff_cre_syncobj>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <f_mount+0x7e>
 800728a:	2302      	movs	r3, #2
 800728c:	e01d      	b.n	80072ca <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4910      	ldr	r1, [pc, #64]	; (80072d4 <f_mount+0xc4>)
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <f_mount+0x94>
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d001      	beq.n	80072a8 <f_mount+0x98>
 80072a4:	2300      	movs	r3, #0
 80072a6:	e010      	b.n	80072ca <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80072a8:	f107 010c 	add.w	r1, r7, #12
 80072ac:	f107 0308 	add.w	r3, r7, #8
 80072b0:	2200      	movs	r2, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fd10 	bl	8006cd8 <find_volume>
 80072b8:	4603      	mov	r3, r0
 80072ba:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	7dfa      	ldrb	r2, [r7, #23]
 80072c0:	4611      	mov	r1, r2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fbd7 	bl	8005a76 <unlock_fs>
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3720      	adds	r7, #32
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200004f8 	.word	0x200004f8

080072d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b098      	sub	sp, #96	; 0x60
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <f_open+0x18>
 80072ec:	2309      	movs	r3, #9
 80072ee:	e1b4      	b.n	800765a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80072f8:	79fa      	ldrb	r2, [r7, #7]
 80072fa:	f107 0110 	add.w	r1, r7, #16
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff fce8 	bl	8006cd8 <find_volume>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800730e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007312:	2b00      	cmp	r3, #0
 8007314:	f040 8191 	bne.w	800763a <f_open+0x362>
		dj.obj.fs = fs;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	f107 0314 	add.w	r3, r7, #20
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fbcb 	bl	8006ac0 <follow_path>
 800732a:	4603      	mov	r3, r0
 800732c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007334:	2b00      	cmp	r3, #0
 8007336:	d11a      	bne.n	800736e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007338:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800733c:	b25b      	sxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	da03      	bge.n	800734a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007342:	2306      	movs	r3, #6
 8007344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007348:	e011      	b.n	800736e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	bf14      	ite	ne
 8007354:	2301      	movne	r3, #1
 8007356:	2300      	moveq	r3, #0
 8007358:	b2db      	uxtb	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	f107 0314 	add.w	r3, r7, #20
 8007360:	4611      	mov	r1, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fba2 	bl	8005aac <chk_lock>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	f003 031c 	and.w	r3, r3, #28
 8007374:	2b00      	cmp	r3, #0
 8007376:	d07f      	beq.n	8007478 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800737c:	2b00      	cmp	r3, #0
 800737e:	d017      	beq.n	80073b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007384:	2b04      	cmp	r3, #4
 8007386:	d10e      	bne.n	80073a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007388:	f7fe fbec 	bl	8005b64 <enq_lock>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d006      	beq.n	80073a0 <f_open+0xc8>
 8007392:	f107 0314 	add.w	r3, r7, #20
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff facb 	bl	8006932 <dir_register>
 800739c:	4603      	mov	r3, r0
 800739e:	e000      	b.n	80073a2 <f_open+0xca>
 80073a0:	2312      	movs	r3, #18
 80073a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	f043 0308 	orr.w	r3, r3, #8
 80073ac:	71fb      	strb	r3, [r7, #7]
 80073ae:	e010      	b.n	80073d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80073b0:	7ebb      	ldrb	r3, [r7, #26]
 80073b2:	f003 0311 	and.w	r3, r3, #17
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <f_open+0xea>
					res = FR_DENIED;
 80073ba:	2307      	movs	r3, #7
 80073bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80073c0:	e007      	b.n	80073d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <f_open+0xfa>
 80073cc:	2308      	movs	r3, #8
 80073ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80073d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d168      	bne.n	80074ac <f_open+0x1d4>
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d063      	beq.n	80074ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80073e4:	f7fe f92e 	bl	8005644 <get_fattime>
 80073e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	330e      	adds	r3, #14
 80073ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe fa81 	bl	80058f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80073f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f8:	3316      	adds	r3, #22
 80073fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fa7b 	bl	80058f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	330b      	adds	r3, #11
 8007406:	2220      	movs	r2, #32
 8007408:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff f9fa 	bl	800680a <ld_clust>
 8007416:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800741c:	2200      	movs	r2, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff fa12 	bl	8006848 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	331c      	adds	r3, #28
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fa64 	bl	80058f8 <st_dword>
					fs->wflag = 1;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2201      	movs	r2, #1
 8007434:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d037      	beq.n	80074ac <f_open+0x1d4>
						dw = fs->winsect;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007442:	f107 0314 	add.w	r3, r7, #20
 8007446:	2200      	movs	r2, #0
 8007448:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe ff25 	bl	800629a <remove_chain>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800745a:	2b00      	cmp	r3, #0
 800745c:	d126      	bne.n	80074ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fcd2 	bl	8005e0c <move_window>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007472:	3a01      	subs	r2, #1
 8007474:	611a      	str	r2, [r3, #16]
 8007476:	e019      	b.n	80074ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800747c:	2b00      	cmp	r3, #0
 800747e:	d115      	bne.n	80074ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007480:	7ebb      	ldrb	r3, [r7, #26]
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <f_open+0x1ba>
					res = FR_NO_FILE;
 800748a:	2304      	movs	r3, #4
 800748c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007490:	e00c      	b.n	80074ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d007      	beq.n	80074ac <f_open+0x1d4>
 800749c:	7ebb      	ldrb	r3, [r7, #26]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <f_open+0x1d4>
						res = FR_DENIED;
 80074a6:	2307      	movs	r3, #7
 80074a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80074ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d128      	bne.n	8007506 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80074ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bf14      	ite	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	2300      	moveq	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	f107 0314 	add.w	r3, r7, #20
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe fb5b 	bl	8005ba8 <inc_lock>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d102      	bne.n	8007506 <f_open+0x22e>
 8007500:	2302      	movs	r3, #2
 8007502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 8095 	bne.w	800763a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff f977 	bl	800680a <ld_clust>
 800751c:	4602      	mov	r2, r0
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007524:	331c      	adds	r3, #28
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe f9a8 	bl	800587c <ld_dword>
 800752c:	4602      	mov	r2, r0
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	88da      	ldrh	r2, [r3, #6]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	79fa      	ldrb	r2, [r7, #7]
 800754a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3330      	adds	r3, #48	; 0x30
 8007562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007566:	2100      	movs	r1, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fa12 	bl	8005992 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d060      	beq.n	800763a <f_open+0x362>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d05c      	beq.n	800763a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	895b      	ldrh	r3, [r3, #10]
 800758c:	025b      	lsls	r3, r3, #9
 800758e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	657b      	str	r3, [r7, #84]	; 0x54
 800759c:	e016      	b.n	80075cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fced 	bl	8005f82 <get_fat>
 80075a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80075aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d802      	bhi.n	80075b6 <f_open+0x2de>
 80075b0:	2302      	movs	r3, #2
 80075b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80075b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d102      	bne.n	80075c4 <f_open+0x2ec>
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80075c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	657b      	str	r3, [r7, #84]	; 0x54
 80075cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <f_open+0x304>
 80075d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d8:	429a      	cmp	r2, r3
 80075da:	d8e0      	bhi.n	800759e <f_open+0x2c6>
				}
				fp->clust = clst;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80075e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d127      	bne.n	800763a <f_open+0x362>
 80075ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d022      	beq.n	800763a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fca3 	bl	8005f44 <clust2sect>
 80075fe:	6478      	str	r0, [r7, #68]	; 0x44
 8007600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007602:	2b00      	cmp	r3, #0
 8007604:	d103      	bne.n	800760e <f_open+0x336>
						res = FR_INT_ERR;
 8007606:	2302      	movs	r3, #2
 8007608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800760c:	e015      	b.n	800763a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800760e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007610:	0a5a      	lsrs	r2, r3, #9
 8007612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	7858      	ldrb	r0, [r3, #1]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1a      	ldr	r2, [r3, #32]
 8007628:	2301      	movs	r3, #1
 800762a:	f7fe f8b1 	bl	8005790 <disk_read>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <f_open+0x362>
 8007634:	2301      	movs	r3, #1
 8007636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800763a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <f_open+0x370>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800764e:	4611      	mov	r1, r2
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe fa10 	bl	8005a76 <unlock_fs>
 8007656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800765a:	4618      	mov	r0, r3
 800765c:	3760      	adds	r7, #96	; 0x60
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b08e      	sub	sp, #56	; 0x38
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
 800766e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f107 0214 	add.w	r2, r7, #20
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff fd7c 	bl	8007180 <validate>
 8007688:	4603      	mov	r3, r0
 800768a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800768e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007692:	2b00      	cmp	r3, #0
 8007694:	d107      	bne.n	80076a6 <f_read+0x44>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	7d5b      	ldrb	r3, [r3, #21]
 800769a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800769e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d009      	beq.n	80076ba <f_read+0x58>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe f9e1 	bl	8005a76 <unlock_fs>
 80076b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076b8:	e13d      	b.n	8007936 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	7d1b      	ldrb	r3, [r3, #20]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <f_read+0x72>
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2107      	movs	r1, #7
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe f9d3 	bl	8005a76 <unlock_fs>
 80076d0:	2307      	movs	r3, #7
 80076d2:	e130      	b.n	8007936 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	f240 811c 	bls.w	8007922 <f_read+0x2c0>
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80076ee:	e118      	b.n	8007922 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 80e4 	bne.w	80078c6 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	0a5b      	lsrs	r3, r3, #9
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	8952      	ldrh	r2, [r2, #10]
 8007708:	3a01      	subs	r2, #1
 800770a:	4013      	ands	r3, r2
 800770c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d139      	bne.n	8007788 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	633b      	str	r3, [r7, #48]	; 0x30
 8007722:	e013      	b.n	800774c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	4619      	mov	r1, r3
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7fe feae 	bl	8006494 <clmt_clust>
 8007738:	6338      	str	r0, [r7, #48]	; 0x30
 800773a:	e007      	b.n	800774c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f7fe fc1c 	bl	8005f82 <get_fat>
 800774a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	2b01      	cmp	r3, #1
 8007750:	d809      	bhi.n	8007766 <f_read+0x104>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2202      	movs	r2, #2
 8007756:	755a      	strb	r2, [r3, #21]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2102      	movs	r1, #2
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe f98a 	bl	8005a76 <unlock_fs>
 8007762:	2302      	movs	r3, #2
 8007764:	e0e7      	b.n	8007936 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d109      	bne.n	8007782 <f_read+0x120>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	755a      	strb	r2, [r3, #21]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2101      	movs	r1, #1
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe f97c 	bl	8005a76 <unlock_fs>
 800777e:	2301      	movs	r3, #1
 8007780:	e0d9      	b.n	8007936 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007786:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	4619      	mov	r1, r3
 8007790:	4610      	mov	r0, r2
 8007792:	f7fe fbd7 	bl	8005f44 <clust2sect>
 8007796:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <f_read+0x150>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2202      	movs	r2, #2
 80077a2:	755a      	strb	r2, [r3, #21]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2102      	movs	r1, #2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe f964 	bl	8005a76 <unlock_fs>
 80077ae:	2302      	movs	r3, #2
 80077b0:	e0c1      	b.n	8007936 <f_read+0x2d4>
			sect += csect;
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	4413      	add	r3, r2
 80077b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	0a5b      	lsrs	r3, r3, #9
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d03e      	beq.n	8007844 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	4413      	add	r3, r2
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	8952      	ldrh	r2, [r2, #10]
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d905      	bls.n	80077e0 <f_read+0x17e>
					cc = fs->csize - csect;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	895b      	ldrh	r3, [r3, #10]
 80077d8:	461a      	mov	r2, r3
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	7858      	ldrb	r0, [r3, #1]
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077ea:	f7fd ffd1 	bl	8005790 <disk_read>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d009      	beq.n	8007808 <f_read+0x1a6>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	755a      	strb	r2, [r3, #21]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2101      	movs	r1, #1
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe f939 	bl	8005a76 <unlock_fs>
 8007804:	2301      	movs	r3, #1
 8007806:	e096      	b.n	8007936 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	7d1b      	ldrb	r3, [r3, #20]
 800780c:	b25b      	sxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	da14      	bge.n	800783c <f_read+0x1da>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781c:	429a      	cmp	r2, r3
 800781e:	d90d      	bls.n	800783c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	025b      	lsls	r3, r3, #9
 800782a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782c:	18d0      	adds	r0, r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3330      	adds	r3, #48	; 0x30
 8007832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007836:	4619      	mov	r1, r3
 8007838:	f7fe f88a 	bl	8005950 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	025b      	lsls	r3, r3, #9
 8007840:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007842:	e05a      	b.n	80078fa <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	429a      	cmp	r2, r3
 800784c:	d038      	beq.n	80078c0 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	7d1b      	ldrb	r3, [r3, #20]
 8007852:	b25b      	sxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	da1d      	bge.n	8007894 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	7858      	ldrb	r0, [r3, #1]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a1a      	ldr	r2, [r3, #32]
 8007866:	2301      	movs	r3, #1
 8007868:	f7fd ffb2 	bl	80057d0 <disk_write>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d009      	beq.n	8007886 <f_read+0x224>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	755a      	strb	r2, [r3, #21]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe f8fa 	bl	8005a76 <unlock_fs>
 8007882:	2301      	movs	r3, #1
 8007884:	e057      	b.n	8007936 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	7d1b      	ldrb	r3, [r3, #20]
 800788a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788e:	b2da      	uxtb	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	7858      	ldrb	r0, [r3, #1]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800789e:	2301      	movs	r3, #1
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	f7fd ff75 	bl	8005790 <disk_read>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <f_read+0x25e>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	755a      	strb	r2, [r3, #21]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe f8dd 	bl	8005a76 <unlock_fs>
 80078bc:	2301      	movs	r3, #1
 80078be:	e03a      	b.n	8007936 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80078d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d901      	bls.n	80078e0 <f_read+0x27e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ee:	4413      	add	r3, r2
 80078f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f2:	4619      	mov	r1, r3
 80078f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f6:	f7fe f82b 	bl	8005950 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	4413      	add	r3, r2
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	441a      	add	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	619a      	str	r2, [r3, #24]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	441a      	add	r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f47f aee3 	bne.w	80076f0 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe f8a1 	bl	8005a76 <unlock_fs>
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3738      	adds	r7, #56	; 0x38
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f107 0208 	add.w	r2, r7, #8
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff fc16 	bl	8007180 <validate>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d16d      	bne.n	8007a3a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7d1b      	ldrb	r3, [r3, #20]
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d067      	beq.n	8007a3a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7d1b      	ldrb	r3, [r3, #20]
 800796e:	b25b      	sxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	da1a      	bge.n	80079aa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	7858      	ldrb	r0, [r3, #1]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1a      	ldr	r2, [r3, #32]
 8007982:	2301      	movs	r3, #1
 8007984:	f7fd ff24 	bl	80057d0 <disk_write>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d006      	beq.n	800799c <f_sync+0x5e>
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2101      	movs	r1, #1
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe f86f 	bl	8005a76 <unlock_fs>
 8007998:	2301      	movs	r3, #1
 800799a:	e055      	b.n	8007a48 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	7d1b      	ldrb	r3, [r3, #20]
 80079a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80079aa:	f7fd fe4b 	bl	8005644 <get_fattime>
 80079ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f7fe fa27 	bl	8005e0c <move_window>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d138      	bne.n	8007a3a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	330b      	adds	r3, #11
 80079d2:	781a      	ldrb	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	330b      	adds	r3, #11
 80079d8:	f042 0220 	orr.w	r2, r2, #32
 80079dc:	b2d2      	uxtb	r2, r2
 80079de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	461a      	mov	r2, r3
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	f7fe ff2c 	bl	8006848 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f103 021c 	add.w	r2, r3, #28
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7fd ff7b 	bl	80058f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3316      	adds	r3, #22
 8007a06:	6939      	ldr	r1, [r7, #16]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fd ff75 	bl	80058f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3312      	adds	r3, #18
 8007a12:	2100      	movs	r1, #0
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fd ff54 	bl	80058c2 <st_word>
					fs->wflag = 1;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fa20 	bl	8005e68 <sync_fs>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	7d1b      	ldrb	r3, [r3, #20]
 8007a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	7dfa      	ldrb	r2, [r7, #23]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe f818 	bl	8005a76 <unlock_fs>
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ff70 	bl	800793e <f_sync>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11d      	bne.n	8007aa4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f107 0208 	add.w	r2, r7, #8
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff fb85 	bl	8007180 <validate>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d111      	bne.n	8007aa4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe f91d 	bl	8005cc4 <dec_lock>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd ffe9 	bl	8005a76 <unlock_fs>
#endif
		}
	}
	return res;
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b088      	sub	sp, #32
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007ac2:	e017      	b.n	8007af4 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007ac4:	f107 0310 	add.w	r3, r7, #16
 8007ac8:	f107 0114 	add.w	r1, r7, #20
 8007acc:	2201      	movs	r2, #1
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fdc7 	bl	8007662 <f_read>
		if (rc != 1) break;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d112      	bne.n	8007b00 <f_gets+0x52>
		c = s[0];
 8007ada:	7d3b      	ldrb	r3, [r7, #20]
 8007adc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	61ba      	str	r2, [r7, #24]
 8007ae4:	7dfa      	ldrb	r2, [r7, #23]
 8007ae6:	701a      	strb	r2, [r3, #0]
		n++;
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	3301      	adds	r3, #1
 8007aec:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	2b0a      	cmp	r3, #10
 8007af2:	d007      	beq.n	8007b04 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	dbe2      	blt.n	8007ac4 <f_gets+0x16>
 8007afe:	e002      	b.n	8007b06 <f_gets+0x58>
		if (rc != 1) break;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8007b04:	bf00      	nop
	}
	*p = 0;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <f_gets+0x68>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	e000      	b.n	8007b18 <f_gets+0x6a>
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007b36:	4b1f      	ldr	r3, [pc, #124]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b38:	7a5b      	ldrb	r3, [r3, #9]
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d131      	bne.n	8007ba4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b40:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b42:	7a5b      	ldrb	r3, [r3, #9]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	461a      	mov	r2, r3
 8007b48:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007b4e:	4b19      	ldr	r3, [pc, #100]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b50:	7a5b      	ldrb	r3, [r3, #9]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	4a17      	ldr	r2, [pc, #92]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007b5e:	4b15      	ldr	r3, [pc, #84]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b60:	7a5b      	ldrb	r3, [r3, #9]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b68:	4413      	add	r3, r2
 8007b6a:	79fa      	ldrb	r2, [r7, #7]
 8007b6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b6e:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b70:	7a5b      	ldrb	r3, [r3, #9]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	b2d1      	uxtb	r1, r2
 8007b78:	4a0e      	ldr	r2, [pc, #56]	; (8007bb4 <FATFS_LinkDriverEx+0x94>)
 8007b7a:	7251      	strb	r1, [r2, #9]
 8007b7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007b7e:	7dbb      	ldrb	r3, [r7, #22]
 8007b80:	3330      	adds	r3, #48	; 0x30
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	223a      	movs	r2, #58	; 0x3a
 8007b8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	3302      	adds	r3, #2
 8007b94:	222f      	movs	r2, #47	; 0x2f
 8007b96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	3303      	adds	r3, #3
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000520 	.word	0x20000520

08007bb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff ffaa 	bl	8007b20 <FATFS_LinkDriverEx>
 8007bcc:	4603      	mov	r3, r0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	4603      	mov	r3, r0
 8007bde:	6039      	str	r1, [r7, #0]
 8007be0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	2300      	movs	r3, #0
 8007be8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007bea:	f107 030c 	add.w	r3, r7, #12
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 f8b9 	bl	8007d68 <osSemaphoreCreate>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	617b      	str	r3, [r7, #20]

    return ret;
 8007c0c:	697b      	ldr	r3, [r7, #20]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f95a 	bl	8007ed8 <osSemaphoreDelete>
#endif
    return 1;
 8007c24:	2301      	movs	r3, #1
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8007c3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f8c6 	bl	8007dd0 <osSemaphoreWait>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f903 	bl	8007e6c <osSemaphoreRelease>
#endif
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	4603      	mov	r3, r0
 8007c76:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c80:	2b84      	cmp	r3, #132	; 0x84
 8007c82:	d005      	beq.n	8007c90 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	3303      	adds	r3, #3
 8007c8e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c90:	68fb      	ldr	r3, [r7, #12]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca4:	f3ef 8305 	mrs	r3, IPSR
 8007ca8:	607b      	str	r3, [r7, #4]
  return(result);
 8007caa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007cc6:	f001 f939 	bl	8008f3c <vTaskStartScheduler>
  
  return osOK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd2:	b089      	sub	sp, #36	; 0x24
 8007cd4:	af04      	add	r7, sp, #16
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d020      	beq.n	8007d24 <osThreadCreate+0x54>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01c      	beq.n	8007d24 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685c      	ldr	r4, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681d      	ldr	r5, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691e      	ldr	r6, [r3, #16]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff ffb6 	bl	8007c6e <makeFreeRtosPriority>
 8007d02:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d0c:	9202      	str	r2, [sp, #8]
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	9100      	str	r1, [sp, #0]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	4632      	mov	r2, r6
 8007d16:	4629      	mov	r1, r5
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 ff7f 	bl	8008c1c <xTaskCreateStatic>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	e01c      	b.n	8007d5e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685c      	ldr	r4, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d30:	b29e      	uxth	r6, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff ff98 	bl	8007c6e <makeFreeRtosPriority>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	f107 030c 	add.w	r3, r7, #12
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	9200      	str	r2, [sp, #0]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	4632      	mov	r2, r6
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 ffbe 	bl	8008cd0 <xTaskCreate>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d001      	beq.n	8007d5e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e000      	b.n	8007d60 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d68 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d10b      	bne.n	8007d98 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	2303      	movs	r3, #3
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	2001      	movs	r0, #1
 8007d90:	f000 f9fa 	bl	8008188 <xQueueGenericCreateStatic>
 8007d94:	4603      	mov	r3, r0
 8007d96:	e016      	b.n	8007dc6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e014      	b.n	8007dc6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d110      	bne.n	8007dc4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8007da2:	2203      	movs	r2, #3
 8007da4:	2100      	movs	r1, #0
 8007da6:	2001      	movs	r0, #1
 8007da8:	f000 fa61 	bl	800826e <xQueueGenericCreate>
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <osSemaphoreCreate+0x58>
 8007db4:	2300      	movs	r3, #0
 8007db6:	2200      	movs	r2, #0
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fab0 	bl	8008320 <xQueueGenericSend>
      return sema;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	e000      	b.n	8007dc6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007dc4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007de4:	2380      	movs	r3, #128	; 0x80
 8007de6:	e03a      	b.n	8007e5e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df2:	d103      	bne.n	8007dfc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007df4:	f04f 33ff 	mov.w	r3, #4294967295
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	e009      	b.n	8007e10 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d006      	beq.n	8007e10 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <osSemaphoreWait+0x40>
      ticks = 1;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007e10:	f7ff ff45 	bl	8007c9e <inHandlerMode>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d017      	beq.n	8007e4a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007e1a:	f107 0308 	add.w	r3, r7, #8
 8007e1e:	461a      	mov	r2, r3
 8007e20:	2100      	movs	r1, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fd08 	bl	8008838 <xQueueReceiveFromISR>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d001      	beq.n	8007e32 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007e2e:	23ff      	movs	r3, #255	; 0xff
 8007e30:	e015      	b.n	8007e5e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d011      	beq.n	8007e5c <osSemaphoreWait+0x8c>
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <osSemaphoreWait+0x98>)
 8007e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	e008      	b.n	8007e5c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007e4a:	68f9      	ldr	r1, [r7, #12]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fbeb 	bl	8008628 <xQueueSemaphoreTake>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d001      	beq.n	8007e5c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007e58:	23ff      	movs	r3, #255	; 0xff
 8007e5a:	e000      	b.n	8007e5e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007e7c:	f7ff ff0f 	bl	8007c9e <inHandlerMode>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d016      	beq.n	8007eb4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007e86:	f107 0308 	add.w	r3, r7, #8
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fb41 	bl	8008514 <xQueueGiveFromISR>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d001      	beq.n	8007e9c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007e98:	23ff      	movs	r3, #255	; 0xff
 8007e9a:	e017      	b.n	8007ecc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <osSemaphoreRelease+0x5e>
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <osSemaphoreRelease+0x68>)
 8007ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	e00a      	b.n	8007eca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2100      	movs	r1, #0
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa30 	bl	8008320 <xQueueGenericSend>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d001      	beq.n	8007eca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007ec6:	23ff      	movs	r3, #255	; 0xff
 8007ec8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007eca:	68fb      	ldr	r3, [r7, #12]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007ee0:	f7ff fedd 	bl	8007c9e <inHandlerMode>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007eea:	2382      	movs	r3, #130	; 0x82
 8007eec:	e003      	b.n	8007ef6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fd1f 	bl	8008932 <vQueueDelete>

  return osOK; 
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007efe:	b590      	push	{r4, r7, lr}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af02      	add	r7, sp, #8
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d012      	beq.n	8007f36 <osMessageCreate+0x38>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00e      	beq.n	8007f36 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6859      	ldr	r1, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68dc      	ldr	r4, [r3, #12]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	4623      	mov	r3, r4
 8007f2e:	f000 f92b 	bl	8008188 <xQueueGenericCreateStatic>
 8007f32:	4603      	mov	r3, r0
 8007f34:	e008      	b.n	8007f48 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4619      	mov	r1, r3
 8007f42:	f000 f994 	bl	800826e <xQueueGenericCreate>
 8007f46:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd90      	pop	{r4, r7, pc}

08007f50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f103 0208 	add.w	r2, r3, #8
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f103 0208 	add.w	r2, r3, #8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f103 0208 	add.w	r2, r3, #8
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d103      	bne.n	8008012 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	e00c      	b.n	800802c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3308      	adds	r3, #8
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	e002      	b.n	8008020 <vListInsert+0x2e>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	429a      	cmp	r2, r3
 800802a:	d2f6      	bcs.n	800801a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6892      	ldr	r2, [r2, #8]
 800807a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6852      	ldr	r2, [r2, #4]
 8008084:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	429a      	cmp	r2, r3
 800808e:	d103      	bne.n	8008098 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	1e5a      	subs	r2, r3, #1
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60bb      	str	r3, [r7, #8]
 80080de:	e7fe      	b.n	80080de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80080e0:	f001 fe64 	bl	8009dac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ec:	68f9      	ldr	r1, [r7, #12]
 80080ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	441a      	add	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	3b01      	subs	r3, #1
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008116:	fb01 f303 	mul.w	r3, r1, r3
 800811a:	441a      	add	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	22ff      	movs	r2, #255	; 0xff
 8008124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	22ff      	movs	r2, #255	; 0xff
 800812c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d114      	bne.n	8008160 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01a      	beq.n	8008174 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3310      	adds	r3, #16
 8008142:	4618      	mov	r0, r3
 8008144:	f001 f938 	bl	80093b8 <xTaskRemoveFromEventList>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d012      	beq.n	8008174 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800814e:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <xQueueGenericReset+0xcc>)
 8008150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	e009      	b.n	8008174 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3310      	adds	r3, #16
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff fef3 	bl	8007f50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3324      	adds	r3, #36	; 0x24
 800816e:	4618      	mov	r0, r3
 8008170:	f7ff feee 	bl	8007f50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008174:	f001 fe48 	bl	8009e08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008178:	2301      	movs	r3, #1
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	e000ed04 	.word	0xe000ed04

08008188 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08e      	sub	sp, #56	; 0x38
 800818c:	af02      	add	r7, sp, #8
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d109      	bne.n	80081b0 <xQueueGenericCreateStatic+0x28>
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ae:	e7fe      	b.n	80081ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <xQueueGenericCreateStatic+0x42>
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
 80081c8:	e7fe      	b.n	80081c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <xQueueGenericCreateStatic+0x4e>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <xQueueGenericCreateStatic+0x52>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <xQueueGenericCreateStatic+0x54>
 80081da:	2300      	movs	r3, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d109      	bne.n	80081f4 <xQueueGenericCreateStatic+0x6c>
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	623b      	str	r3, [r7, #32]
 80081f2:	e7fe      	b.n	80081f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d102      	bne.n	8008200 <xQueueGenericCreateStatic+0x78>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <xQueueGenericCreateStatic+0x7c>
 8008200:	2301      	movs	r3, #1
 8008202:	e000      	b.n	8008206 <xQueueGenericCreateStatic+0x7e>
 8008204:	2300      	movs	r3, #0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d109      	bne.n	800821e <xQueueGenericCreateStatic+0x96>
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	61fb      	str	r3, [r7, #28]
 800821c:	e7fe      	b.n	800821c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800821e:	2348      	movs	r3, #72	; 0x48
 8008220:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b48      	cmp	r3, #72	; 0x48
 8008226:	d009      	beq.n	800823c <xQueueGenericCreateStatic+0xb4>
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	e7fe      	b.n	800823a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800823c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00d      	beq.n	8008264 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008250:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	4613      	mov	r3, r2
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 f83e 	bl	80082e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008266:	4618      	mov	r0, r3
 8008268:	3730      	adds	r7, #48	; 0x30
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800826e:	b580      	push	{r7, lr}
 8008270:	b08a      	sub	sp, #40	; 0x28
 8008272:	af02      	add	r7, sp, #8
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	4613      	mov	r3, r2
 800827a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <xQueueGenericCreate+0x28>
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	613b      	str	r3, [r7, #16]
 8008294:	e7fe      	b.n	8008294 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	fb02 f303 	mul.w	r3, r2, r3
 800829e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	3348      	adds	r3, #72	; 0x48
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fe9b 	bl	8009fe0 <pvPortMalloc>
 80082aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d011      	beq.n	80082d6 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	3348      	adds	r3, #72	; 0x48
 80082ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082c4:	79fa      	ldrb	r2, [r7, #7]
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	4613      	mov	r3, r2
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 f805 	bl	80082e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082d6:	69bb      	ldr	r3, [r7, #24]
	}
 80082d8:	4618      	mov	r0, r3
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d103      	bne.n	80082fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e002      	b.n	8008302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800830e:	2101      	movs	r1, #1
 8008310:	69b8      	ldr	r0, [r7, #24]
 8008312:	f7ff fed1 	bl	80080b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008316:	bf00      	nop
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08e      	sub	sp, #56	; 0x38
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800832e:	2300      	movs	r3, #0
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d109      	bne.n	8008350 <xQueueGenericSend+0x30>
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
 800834e:	e7fe      	b.n	800834e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <xQueueGenericSend+0x3e>
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <xQueueGenericSend+0x42>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <xQueueGenericSend+0x44>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d109      	bne.n	800837c <xQueueGenericSend+0x5c>
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
 800837a:	e7fe      	b.n	800837a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d103      	bne.n	800838a <xQueueGenericSend+0x6a>
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <xQueueGenericSend+0x6e>
 800838a:	2301      	movs	r3, #1
 800838c:	e000      	b.n	8008390 <xQueueGenericSend+0x70>
 800838e:	2300      	movs	r3, #0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <xQueueGenericSend+0x88>
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	623b      	str	r3, [r7, #32]
 80083a6:	e7fe      	b.n	80083a6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a8:	f001 f9bc 	bl	8009724 <xTaskGetSchedulerState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <xQueueGenericSend+0x98>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <xQueueGenericSend+0x9c>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e000      	b.n	80083be <xQueueGenericSend+0x9e>
 80083bc:	2300      	movs	r3, #0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d109      	bne.n	80083d6 <xQueueGenericSend+0xb6>
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	e7fe      	b.n	80083d4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d6:	f001 fce9 	bl	8009dac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d302      	bcc.n	80083ec <xQueueGenericSend+0xcc>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d129      	bne.n	8008440 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083f2:	f000 fad8 	bl	80089a6 <prvCopyDataToQueue>
 80083f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d010      	beq.n	8008422 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	3324      	adds	r3, #36	; 0x24
 8008404:	4618      	mov	r0, r3
 8008406:	f000 ffd7 	bl	80093b8 <xTaskRemoveFromEventList>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d013      	beq.n	8008438 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008410:	4b3f      	ldr	r3, [pc, #252]	; (8008510 <xQueueGenericSend+0x1f0>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	e00a      	b.n	8008438 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d007      	beq.n	8008438 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008428:	4b39      	ldr	r3, [pc, #228]	; (8008510 <xQueueGenericSend+0x1f0>)
 800842a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008438:	f001 fce6 	bl	8009e08 <vPortExitCritical>
				return pdPASS;
 800843c:	2301      	movs	r3, #1
 800843e:	e063      	b.n	8008508 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008446:	f001 fcdf 	bl	8009e08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800844a:	2300      	movs	r3, #0
 800844c:	e05c      	b.n	8008508 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	4618      	mov	r0, r3
 800845a:	f001 f80f 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800845e:	2301      	movs	r3, #1
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008462:	f001 fcd1 	bl	8009e08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008466:	f000 fdc7 	bl	8008ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800846a:	f001 fc9f 	bl	8009dac <vPortEnterCritical>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008474:	b25b      	sxtb	r3, r3
 8008476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847a:	d103      	bne.n	8008484 <xQueueGenericSend+0x164>
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800848a:	b25b      	sxtb	r3, r3
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d103      	bne.n	800849a <xQueueGenericSend+0x17a>
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800849a:	f001 fcb5 	bl	8009e08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800849e:	1d3a      	adds	r2, r7, #4
 80084a0:	f107 0314 	add.w	r3, r7, #20
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fffe 	bl	80094a8 <xTaskCheckForTimeOut>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d124      	bne.n	80084fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084b4:	f000 fb6f 	bl	8008b96 <prvIsQueueFull>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d018      	beq.n	80084f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	3310      	adds	r3, #16
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 ff52 	bl	8009370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ce:	f000 fafa 	bl	8008ac6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084d2:	f000 fd9f 	bl	8009014 <xTaskResumeAll>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f47f af7c 	bne.w	80083d6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <xQueueGenericSend+0x1f0>)
 80084e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	e772      	b.n	80083d6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084f2:	f000 fae8 	bl	8008ac6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084f6:	f000 fd8d 	bl	8009014 <xTaskResumeAll>
 80084fa:	e76c      	b.n	80083d6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084fe:	f000 fae2 	bl	8008ac6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008502:	f000 fd87 	bl	8009014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008508:	4618      	mov	r0, r3
 800850a:	3738      	adds	r7, #56	; 0x38
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08e      	sub	sp, #56	; 0x38
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	2b00      	cmp	r3, #0
 8008526:	d109      	bne.n	800853c <xQueueGiveFromISR+0x28>
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	623b      	str	r3, [r7, #32]
 800853a:	e7fe      	b.n	800853a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d009      	beq.n	8008558 <xQueueGiveFromISR+0x44>
 8008544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	61fb      	str	r3, [r7, #28]
 8008556:	e7fe      	b.n	8008556 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d103      	bne.n	8008568 <xQueueGiveFromISR+0x54>
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <xQueueGiveFromISR+0x58>
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <xQueueGiveFromISR+0x5a>
 800856c:	2300      	movs	r3, #0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <xQueueGiveFromISR+0x72>
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	e7fe      	b.n	8008584 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008586:	f001 fced 	bl	8009f64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800858a:	f3ef 8211 	mrs	r2, BASEPRI
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	617a      	str	r2, [r7, #20]
 80085a0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d22b      	bcs.n	800860e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d0:	d112      	bne.n	80085f8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d016      	beq.n	8008608 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	3324      	adds	r3, #36	; 0x24
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 feea 	bl	80093b8 <xTaskRemoveFromEventList>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00e      	beq.n	8008608 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2201      	movs	r2, #1
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	e007      	b.n	8008608 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085fc:	3301      	adds	r3, #1
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	b25a      	sxtb	r2, r3
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008608:	2301      	movs	r3, #1
 800860a:	637b      	str	r3, [r7, #52]	; 0x34
 800860c:	e001      	b.n	8008612 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800860e:	2300      	movs	r3, #0
 8008610:	637b      	str	r3, [r7, #52]	; 0x34
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800861e:	4618      	mov	r0, r3
 8008620:	3738      	adds	r7, #56	; 0x38
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800863a:	2300      	movs	r3, #0
 800863c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d109      	bne.n	8008658 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	623b      	str	r3, [r7, #32]
 8008656:	e7fe      	b.n	8008656 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d009      	beq.n	8008674 <xQueueSemaphoreTake+0x4c>
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	61fb      	str	r3, [r7, #28]
 8008672:	e7fe      	b.n	8008672 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008674:	f001 f856 	bl	8009724 <xTaskGetSchedulerState>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d102      	bne.n	8008684 <xQueueSemaphoreTake+0x5c>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <xQueueSemaphoreTake+0x60>
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <xQueueSemaphoreTake+0x62>
 8008688:	2300      	movs	r3, #0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <xQueueSemaphoreTake+0x7a>
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	e7fe      	b.n	80086a0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086a2:	f001 fb83 	bl	8009dac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d024      	beq.n	80086fc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	1e5a      	subs	r2, r3, #1
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d104      	bne.n	80086cc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80086c2:	f001 f9d3 	bl	8009a6c <pvTaskIncrementMutexHeldCount>
 80086c6:	4602      	mov	r2, r0
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00f      	beq.n	80086f4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d6:	3310      	adds	r3, #16
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fe6d 	bl	80093b8 <xTaskRemoveFromEventList>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086e4:	4b53      	ldr	r3, [pc, #332]	; (8008834 <xQueueSemaphoreTake+0x20c>)
 80086e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086f4:	f001 fb88 	bl	8009e08 <vPortExitCritical>
				return pdPASS;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e096      	b.n	800882a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d110      	bne.n	8008724 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <xQueueSemaphoreTake+0xf4>
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	e7fe      	b.n	800871a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800871c:	f001 fb74 	bl	8009e08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008720:	2300      	movs	r3, #0
 8008722:	e082      	b.n	800882a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800872a:	f107 030c 	add.w	r3, r7, #12
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fea4 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008734:	2301      	movs	r3, #1
 8008736:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008738:	f001 fb66 	bl	8009e08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800873c:	f000 fc5c 	bl	8008ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008740:	f001 fb34 	bl	8009dac <vPortEnterCritical>
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800874a:	b25b      	sxtb	r3, r3
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d103      	bne.n	800875a <xQueueSemaphoreTake+0x132>
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008760:	b25b      	sxtb	r3, r3
 8008762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008766:	d103      	bne.n	8008770 <xQueueSemaphoreTake+0x148>
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008770:	f001 fb4a 	bl	8009e08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008774:	463a      	mov	r2, r7
 8008776:	f107 030c 	add.w	r3, r7, #12
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fe93 	bl	80094a8 <xTaskCheckForTimeOut>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d132      	bne.n	80087ee <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800878a:	f000 f9ee 	bl	8008b6a <prvIsQueueEmpty>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d026      	beq.n	80087e2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d109      	bne.n	80087b0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800879c:	f001 fb06 	bl	8009dac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 ffdb 	bl	8009760 <xTaskPriorityInherit>
 80087aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80087ac:	f001 fb2c 	bl	8009e08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	3324      	adds	r3, #36	; 0x24
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	4611      	mov	r1, r2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fdd9 	bl	8009370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087c0:	f000 f981 	bl	8008ac6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087c4:	f000 fc26 	bl	8009014 <xTaskResumeAll>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f47f af69 	bne.w	80086a2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80087d0:	4b18      	ldr	r3, [pc, #96]	; (8008834 <xQueueSemaphoreTake+0x20c>)
 80087d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	e75f      	b.n	80086a2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80087e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087e4:	f000 f96f 	bl	8008ac6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087e8:	f000 fc14 	bl	8009014 <xTaskResumeAll>
 80087ec:	e759      	b.n	80086a2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80087ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087f0:	f000 f969 	bl	8008ac6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087f4:	f000 fc0e 	bl	8009014 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087fa:	f000 f9b6 	bl	8008b6a <prvIsQueueEmpty>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	f43f af4e 	beq.w	80086a2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00d      	beq.n	8008828 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800880c:	f001 face 	bl	8009dac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008812:	f000 f8b0 	bl	8008976 <prvGetDisinheritPriorityAfterTimeout>
 8008816:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800881e:	4618      	mov	r0, r3
 8008820:	f001 f898 	bl	8009954 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008824:	f001 faf0 	bl	8009e08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008828:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800882a:	4618      	mov	r0, r3
 800882c:	3738      	adds	r7, #56	; 0x38
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	e000ed04 	.word	0xe000ed04

08008838 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08e      	sub	sp, #56	; 0x38
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <xQueueReceiveFromISR+0x2a>
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	623b      	str	r3, [r7, #32]
 8008860:	e7fe      	b.n	8008860 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <xQueueReceiveFromISR+0x38>
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <xQueueReceiveFromISR+0x3c>
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <xQueueReceiveFromISR+0x3e>
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d109      	bne.n	800888e <xQueueReceiveFromISR+0x56>
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	e7fe      	b.n	800888c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800888e:	f001 fb69 	bl	8009f64 <vPortValidateInterruptPriority>
	__asm volatile
 8008892:	f3ef 8211 	mrs	r2, BASEPRI
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	61ba      	str	r2, [r7, #24]
 80088a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80088aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d02f      	beq.n	800891a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c8:	f000 f8d7 	bl	8008a7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	1e5a      	subs	r2, r3, #1
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80088d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d112      	bne.n	8008904 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d016      	beq.n	8008914 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	3310      	adds	r3, #16
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fd64 	bl	80093b8 <xTaskRemoveFromEventList>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00e      	beq.n	8008914 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	e007      	b.n	8008914 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008908:	3301      	adds	r3, #1
 800890a:	b2db      	uxtb	r3, r3
 800890c:	b25a      	sxtb	r2, r3
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008914:	2301      	movs	r3, #1
 8008916:	637b      	str	r3, [r7, #52]	; 0x34
 8008918:	e001      	b.n	800891e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800891a:	2300      	movs	r3, #0
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
 800891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008920:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800892a:	4618      	mov	r0, r3
 800892c:	3738      	adds	r7, #56	; 0x38
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <vQueueDelete+0x26>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	e7fe      	b.n	8008956 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f935 	bl	8008bc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f001 fc01 	bl	800a170 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	d006      	beq.n	8008994 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f1c3 0307 	rsb	r3, r3, #7
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	e001      	b.n	8008998 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008998:	68fb      	ldr	r3, [r7, #12]
	}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b086      	sub	sp, #24
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10d      	bne.n	80089e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d14d      	bne.n	8008a68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 ff3b 	bl	800984c <xTaskPriorityDisinherit>
 80089d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	609a      	str	r2, [r3, #8]
 80089de:	e043      	b.n	8008a68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d119      	bne.n	8008a1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6858      	ldr	r0, [r3, #4]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	461a      	mov	r2, r3
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	f001 fd0f 	bl	800a414 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	441a      	add	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d32b      	bcc.n	8008a68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	605a      	str	r2, [r3, #4]
 8008a18:	e026      	b.n	8008a68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	68d8      	ldr	r0, [r3, #12]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	461a      	mov	r2, r3
 8008a24:	68b9      	ldr	r1, [r7, #8]
 8008a26:	f001 fcf5 	bl	800a414 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	425b      	negs	r3, r3
 8008a34:	441a      	add	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d207      	bcs.n	8008a56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	689a      	ldr	r2, [r3, #8]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	425b      	negs	r3, r3
 8008a50:	441a      	add	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d105      	bne.n	8008a68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a70:	697b      	ldr	r3, [r7, #20]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d018      	beq.n	8008abe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	441a      	add	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d303      	bcc.n	8008aae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68d9      	ldr	r1, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6838      	ldr	r0, [r7, #0]
 8008aba:	f001 fcab 	bl	800a414 <memcpy>
	}
}
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ace:	f001 f96d 	bl	8009dac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ad8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ada:	e011      	b.n	8008b00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d012      	beq.n	8008b0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3324      	adds	r3, #36	; 0x24
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fc65 	bl	80093b8 <xTaskRemoveFromEventList>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008af4:	f000 fd38 	bl	8009568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dce9      	bgt.n	8008adc <prvUnlockQueue+0x16>
 8008b08:	e000      	b.n	8008b0c <prvUnlockQueue+0x46>
					break;
 8008b0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	22ff      	movs	r2, #255	; 0xff
 8008b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b14:	f001 f978 	bl	8009e08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b18:	f001 f948 	bl	8009dac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b24:	e011      	b.n	8008b4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d012      	beq.n	8008b54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3310      	adds	r3, #16
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fc40 	bl	80093b8 <xTaskRemoveFromEventList>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b3e:	f000 fd13 	bl	8009568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	dce9      	bgt.n	8008b26 <prvUnlockQueue+0x60>
 8008b52:	e000      	b.n	8008b56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b5e:	f001 f953 	bl	8009e08 <vPortExitCritical>
}
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b72:	f001 f91b 	bl	8009dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	e001      	b.n	8008b88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b88:	f001 f93e 	bl	8009e08 <vPortExitCritical>

	return xReturn;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b9e:	f001 f905 	bl	8009dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d102      	bne.n	8008bb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e001      	b.n	8008bb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bb8:	f001 f926 	bl	8009e08 <vPortExitCritical>

	return xReturn;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e016      	b.n	8008c04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008bd6:	4a10      	ldr	r2, [pc, #64]	; (8008c18 <vQueueUnregisterQueue+0x50>)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	00db      	lsls	r3, r3, #3
 8008bdc:	4413      	add	r3, r2
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d10b      	bne.n	8008bfe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008be6:	4a0c      	ldr	r2, [pc, #48]	; (8008c18 <vQueueUnregisterQueue+0x50>)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2100      	movs	r1, #0
 8008bec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008bf0:	4a09      	ldr	r2, [pc, #36]	; (8008c18 <vQueueUnregisterQueue+0x50>)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	605a      	str	r2, [r3, #4]
				break;
 8008bfc:	e005      	b.n	8008c0a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b07      	cmp	r3, #7
 8008c08:	d9e5      	bls.n	8008bd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20004e70 	.word	0x20004e70

08008c1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08e      	sub	sp, #56	; 0x38
 8008c20:	af04      	add	r7, sp, #16
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d109      	bne.n	8008c44 <xTaskCreateStatic+0x28>
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	623b      	str	r3, [r7, #32]
 8008c42:	e7fe      	b.n	8008c42 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <xTaskCreateStatic+0x42>
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	61fb      	str	r3, [r7, #28]
 8008c5c:	e7fe      	b.n	8008c5c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c5e:	2354      	movs	r3, #84	; 0x54
 8008c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2b54      	cmp	r3, #84	; 0x54
 8008c66:	d009      	beq.n	8008c7c <xTaskCreateStatic+0x60>
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	e7fe      	b.n	8008c7a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01e      	beq.n	8008cc2 <xTaskCreateStatic+0xa6>
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01b      	beq.n	8008cc2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	9303      	str	r3, [sp, #12]
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	f107 0314 	add.w	r3, r7, #20
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	68b9      	ldr	r1, [r7, #8]
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f850 	bl	8008d5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cbc:	f000 f8d4 	bl	8008e68 <prvAddNewTaskToReadyList>
 8008cc0:	e001      	b.n	8008cc6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cc6:	697b      	ldr	r3, [r7, #20]
	}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3728      	adds	r7, #40	; 0x28
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08c      	sub	sp, #48	; 0x30
 8008cd4:	af04      	add	r7, sp, #16
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ce0:	88fb      	ldrh	r3, [r7, #6]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 f97b 	bl	8009fe0 <pvPortMalloc>
 8008cea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00e      	beq.n	8008d10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cf2:	2054      	movs	r0, #84	; 0x54
 8008cf4:	f001 f974 	bl	8009fe0 <pvPortMalloc>
 8008cf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	631a      	str	r2, [r3, #48]	; 0x30
 8008d06:	e005      	b.n	8008d14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d08:	6978      	ldr	r0, [r7, #20]
 8008d0a:	f001 fa31 	bl	800a170 <vPortFree>
 8008d0e:	e001      	b.n	8008d14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d017      	beq.n	8008d4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d22:	88fa      	ldrh	r2, [r7, #6]
 8008d24:	2300      	movs	r3, #0
 8008d26:	9303      	str	r3, [sp, #12]
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	9302      	str	r3, [sp, #8]
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 f80e 	bl	8008d5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d3e:	69f8      	ldr	r0, [r7, #28]
 8008d40:	f000 f892 	bl	8008e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d44:	2301      	movs	r3, #1
 8008d46:	61bb      	str	r3, [r7, #24]
 8008d48:	e002      	b.n	8008d50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d50:	69bb      	ldr	r3, [r7, #24]
	}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3720      	adds	r7, #32
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b088      	sub	sp, #32
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	607a      	str	r2, [r7, #4]
 8008d66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d72:	3b01      	subs	r3, #1
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	f023 0307 	bic.w	r3, r3, #7
 8008d80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <prvInitialiseNewTask+0x46>
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	e7fe      	b.n	8008d9e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01f      	beq.n	8008de6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008da6:	2300      	movs	r3, #0
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	e012      	b.n	8008dd2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	7819      	ldrb	r1, [r3, #0]
 8008db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	3334      	adds	r3, #52	; 0x34
 8008dbc:	460a      	mov	r2, r1
 8008dbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d006      	beq.n	8008dda <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	61fb      	str	r3, [r7, #28]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	2b0f      	cmp	r3, #15
 8008dd6:	d9e9      	bls.n	8008dac <prvInitialiseNewTask+0x52>
 8008dd8:	e000      	b.n	8008ddc <prvInitialiseNewTask+0x82>
			{
				break;
 8008dda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008de4:	e003      	b.n	8008dee <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	2b06      	cmp	r3, #6
 8008df2:	d901      	bls.n	8008df8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008df4:	2306      	movs	r3, #6
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	2200      	movs	r2, #0
 8008e08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff f8be 	bl	8007f90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	3318      	adds	r3, #24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff f8b9 	bl	8007f90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	f1c3 0207 	rsb	r2, r3, #7
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	2200      	movs	r2, #0
 8008e38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	68f9      	ldr	r1, [r7, #12]
 8008e46:	69b8      	ldr	r0, [r7, #24]
 8008e48:	f000 fe8a 	bl	8009b60 <pxPortInitialiseStack>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5e:	bf00      	nop
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e70:	f000 ff9c 	bl	8009dac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e74:	4b2a      	ldr	r3, [pc, #168]	; (8008f20 <prvAddNewTaskToReadyList+0xb8>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	4a29      	ldr	r2, [pc, #164]	; (8008f20 <prvAddNewTaskToReadyList+0xb8>)
 8008e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e7e:	4b29      	ldr	r3, [pc, #164]	; (8008f24 <prvAddNewTaskToReadyList+0xbc>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d109      	bne.n	8008e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e86:	4a27      	ldr	r2, [pc, #156]	; (8008f24 <prvAddNewTaskToReadyList+0xbc>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e8c:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <prvAddNewTaskToReadyList+0xb8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d110      	bne.n	8008eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e94:	f000 fb8c 	bl	80095b0 <prvInitialiseTaskLists>
 8008e98:	e00d      	b.n	8008eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e9a:	4b23      	ldr	r3, [pc, #140]	; (8008f28 <prvAddNewTaskToReadyList+0xc0>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ea2:	4b20      	ldr	r3, [pc, #128]	; (8008f24 <prvAddNewTaskToReadyList+0xbc>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d802      	bhi.n	8008eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008eb0:	4a1c      	ldr	r2, [pc, #112]	; (8008f24 <prvAddNewTaskToReadyList+0xbc>)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eb6:	4b1d      	ldr	r3, [pc, #116]	; (8008f2c <prvAddNewTaskToReadyList+0xc4>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	4a1b      	ldr	r2, [pc, #108]	; (8008f2c <prvAddNewTaskToReadyList+0xc4>)
 8008ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	409a      	lsls	r2, r3
 8008ec8:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <prvAddNewTaskToReadyList+0xc8>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	4a18      	ldr	r2, [pc, #96]	; (8008f30 <prvAddNewTaskToReadyList+0xc8>)
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4a15      	ldr	r2, [pc, #84]	; (8008f34 <prvAddNewTaskToReadyList+0xcc>)
 8008ee0:	441a      	add	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f7ff f85e 	bl	8007faa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008eee:	f000 ff8b 	bl	8009e08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <prvAddNewTaskToReadyList+0xc0>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00e      	beq.n	8008f18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008efa:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <prvAddNewTaskToReadyList+0xbc>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d207      	bcs.n	8008f18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f08:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <prvAddNewTaskToReadyList+0xd0>)
 8008f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	2000062c 	.word	0x2000062c
 8008f24:	2000052c 	.word	0x2000052c
 8008f28:	20000638 	.word	0x20000638
 8008f2c:	20000648 	.word	0x20000648
 8008f30:	20000634 	.word	0x20000634
 8008f34:	20000530 	.word	0x20000530
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08a      	sub	sp, #40	; 0x28
 8008f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f4a:	463a      	mov	r2, r7
 8008f4c:	1d39      	adds	r1, r7, #4
 8008f4e:	f107 0308 	add.w	r3, r7, #8
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7f8 fac0 	bl	80014d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	9202      	str	r2, [sp, #8]
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	2300      	movs	r3, #0
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	2300      	movs	r3, #0
 8008f68:	460a      	mov	r2, r1
 8008f6a:	491d      	ldr	r1, [pc, #116]	; (8008fe0 <vTaskStartScheduler+0xa4>)
 8008f6c:	481d      	ldr	r0, [pc, #116]	; (8008fe4 <vTaskStartScheduler+0xa8>)
 8008f6e:	f7ff fe55 	bl	8008c1c <xTaskCreateStatic>
 8008f72:	4602      	mov	r2, r0
 8008f74:	4b1c      	ldr	r3, [pc, #112]	; (8008fe8 <vTaskStartScheduler+0xac>)
 8008f76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f78:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <vTaskStartScheduler+0xac>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f80:	2301      	movs	r3, #1
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	e001      	b.n	8008f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d115      	bne.n	8008fbc <vTaskStartScheduler+0x80>
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fa2:	4b12      	ldr	r3, [pc, #72]	; (8008fec <vTaskStartScheduler+0xb0>)
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008faa:	4b11      	ldr	r3, [pc, #68]	; (8008ff0 <vTaskStartScheduler+0xb4>)
 8008fac:	2201      	movs	r2, #1
 8008fae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fb0:	4b10      	ldr	r3, [pc, #64]	; (8008ff4 <vTaskStartScheduler+0xb8>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fb6:	f000 fe5b 	bl	8009c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fba:	e00d      	b.n	8008fd8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d109      	bne.n	8008fd8 <vTaskStartScheduler+0x9c>
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	e7fe      	b.n	8008fd6 <vTaskStartScheduler+0x9a>
}
 8008fd8:	bf00      	nop
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	0800b97c 	.word	0x0800b97c
 8008fe4:	08009581 	.word	0x08009581
 8008fe8:	20000650 	.word	0x20000650
 8008fec:	2000064c 	.word	0x2000064c
 8008ff0:	20000638 	.word	0x20000638
 8008ff4:	20000630 	.word	0x20000630

08008ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <vTaskSuspendAll+0x18>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3301      	adds	r3, #1
 8009002:	4a03      	ldr	r2, [pc, #12]	; (8009010 <vTaskSuspendAll+0x18>)
 8009004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009006:	bf00      	nop
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	20000654 	.word	0x20000654

08009014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800901e:	2300      	movs	r3, #0
 8009020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009022:	4b41      	ldr	r3, [pc, #260]	; (8009128 <xTaskResumeAll+0x114>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <xTaskResumeAll+0x2a>
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	603b      	str	r3, [r7, #0]
 800903c:	e7fe      	b.n	800903c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800903e:	f000 feb5 	bl	8009dac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009042:	4b39      	ldr	r3, [pc, #228]	; (8009128 <xTaskResumeAll+0x114>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3b01      	subs	r3, #1
 8009048:	4a37      	ldr	r2, [pc, #220]	; (8009128 <xTaskResumeAll+0x114>)
 800904a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904c:	4b36      	ldr	r3, [pc, #216]	; (8009128 <xTaskResumeAll+0x114>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d161      	bne.n	8009118 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009054:	4b35      	ldr	r3, [pc, #212]	; (800912c <xTaskResumeAll+0x118>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d05d      	beq.n	8009118 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800905c:	e02e      	b.n	80090bc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905e:	4b34      	ldr	r3, [pc, #208]	; (8009130 <xTaskResumeAll+0x11c>)
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3318      	adds	r3, #24
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fffa 	bl	8008064 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3304      	adds	r3, #4
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe fff5 	bl	8008064 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	2201      	movs	r2, #1
 8009080:	409a      	lsls	r2, r3
 8009082:	4b2c      	ldr	r3, [pc, #176]	; (8009134 <xTaskResumeAll+0x120>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4313      	orrs	r3, r2
 8009088:	4a2a      	ldr	r2, [pc, #168]	; (8009134 <xTaskResumeAll+0x120>)
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4a27      	ldr	r2, [pc, #156]	; (8009138 <xTaskResumeAll+0x124>)
 800909a:	441a      	add	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3304      	adds	r3, #4
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f7fe ff81 	bl	8007faa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ac:	4b23      	ldr	r3, [pc, #140]	; (800913c <xTaskResumeAll+0x128>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d302      	bcc.n	80090bc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80090b6:	4b22      	ldr	r3, [pc, #136]	; (8009140 <xTaskResumeAll+0x12c>)
 80090b8:	2201      	movs	r2, #1
 80090ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090bc:	4b1c      	ldr	r3, [pc, #112]	; (8009130 <xTaskResumeAll+0x11c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1cc      	bne.n	800905e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090ca:	f000 fb0b 	bl	80096e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090ce:	4b1d      	ldr	r3, [pc, #116]	; (8009144 <xTaskResumeAll+0x130>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d010      	beq.n	80090fc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090da:	f000 f837 	bl	800914c <xTaskIncrementTick>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80090e4:	4b16      	ldr	r3, [pc, #88]	; (8009140 <xTaskResumeAll+0x12c>)
 80090e6:	2201      	movs	r2, #1
 80090e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1f1      	bne.n	80090da <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80090f6:	4b13      	ldr	r3, [pc, #76]	; (8009144 <xTaskResumeAll+0x130>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090fc:	4b10      	ldr	r3, [pc, #64]	; (8009140 <xTaskResumeAll+0x12c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d009      	beq.n	8009118 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009104:	2301      	movs	r3, #1
 8009106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009108:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <xTaskResumeAll+0x134>)
 800910a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009118:	f000 fe76 	bl	8009e08 <vPortExitCritical>

	return xAlreadyYielded;
 800911c:	68bb      	ldr	r3, [r7, #8]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000654 	.word	0x20000654
 800912c:	2000062c 	.word	0x2000062c
 8009130:	200005ec 	.word	0x200005ec
 8009134:	20000634 	.word	0x20000634
 8009138:	20000530 	.word	0x20000530
 800913c:	2000052c 	.word	0x2000052c
 8009140:	20000640 	.word	0x20000640
 8009144:	2000063c 	.word	0x2000063c
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009156:	4b4e      	ldr	r3, [pc, #312]	; (8009290 <xTaskIncrementTick+0x144>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f040 808d 	bne.w	800927a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009160:	4b4c      	ldr	r3, [pc, #304]	; (8009294 <xTaskIncrementTick+0x148>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009168:	4a4a      	ldr	r2, [pc, #296]	; (8009294 <xTaskIncrementTick+0x148>)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d11f      	bne.n	80091b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009174:	4b48      	ldr	r3, [pc, #288]	; (8009298 <xTaskIncrementTick+0x14c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d009      	beq.n	8009192 <xTaskIncrementTick+0x46>
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	603b      	str	r3, [r7, #0]
 8009190:	e7fe      	b.n	8009190 <xTaskIncrementTick+0x44>
 8009192:	4b41      	ldr	r3, [pc, #260]	; (8009298 <xTaskIncrementTick+0x14c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	4b40      	ldr	r3, [pc, #256]	; (800929c <xTaskIncrementTick+0x150>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a3e      	ldr	r2, [pc, #248]	; (8009298 <xTaskIncrementTick+0x14c>)
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	4a3e      	ldr	r2, [pc, #248]	; (800929c <xTaskIncrementTick+0x150>)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	4b3e      	ldr	r3, [pc, #248]	; (80092a0 <xTaskIncrementTick+0x154>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3301      	adds	r3, #1
 80091ac:	4a3c      	ldr	r2, [pc, #240]	; (80092a0 <xTaskIncrementTick+0x154>)
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	f000 fa98 	bl	80096e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091b4:	4b3b      	ldr	r3, [pc, #236]	; (80092a4 <xTaskIncrementTick+0x158>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d348      	bcc.n	8009250 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091be:	4b36      	ldr	r3, [pc, #216]	; (8009298 <xTaskIncrementTick+0x14c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c8:	4b36      	ldr	r3, [pc, #216]	; (80092a4 <xTaskIncrementTick+0x158>)
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	601a      	str	r2, [r3, #0]
					break;
 80091d0:	e03e      	b.n	8009250 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d2:	4b31      	ldr	r3, [pc, #196]	; (8009298 <xTaskIncrementTick+0x14c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d203      	bcs.n	80091f2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091ea:	4a2e      	ldr	r2, [pc, #184]	; (80092a4 <xTaskIncrementTick+0x158>)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091f0:	e02e      	b.n	8009250 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	3304      	adds	r3, #4
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe ff34 	bl	8008064 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	3318      	adds	r3, #24
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe ff2b 	bl	8008064 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	2201      	movs	r2, #1
 8009214:	409a      	lsls	r2, r3
 8009216:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <xTaskIncrementTick+0x15c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4313      	orrs	r3, r2
 800921c:	4a22      	ldr	r2, [pc, #136]	; (80092a8 <xTaskIncrementTick+0x15c>)
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4a1f      	ldr	r2, [pc, #124]	; (80092ac <xTaskIncrementTick+0x160>)
 800922e:	441a      	add	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	3304      	adds	r3, #4
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f7fe feb7 	bl	8007faa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <xTaskIncrementTick+0x164>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	429a      	cmp	r2, r3
 8009248:	d3b9      	bcc.n	80091be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800924a:	2301      	movs	r3, #1
 800924c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800924e:	e7b6      	b.n	80091be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <xTaskIncrementTick+0x164>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009256:	4915      	ldr	r1, [pc, #84]	; (80092ac <xTaskIncrementTick+0x160>)
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d901      	bls.n	800926c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8009268:	2301      	movs	r3, #1
 800926a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800926c:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <xTaskIncrementTick+0x168>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d007      	beq.n	8009284 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009274:	2301      	movs	r3, #1
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	e004      	b.n	8009284 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <xTaskIncrementTick+0x16c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3301      	adds	r3, #1
 8009280:	4a0d      	ldr	r2, [pc, #52]	; (80092b8 <xTaskIncrementTick+0x16c>)
 8009282:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009284:	697b      	ldr	r3, [r7, #20]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000654 	.word	0x20000654
 8009294:	20000630 	.word	0x20000630
 8009298:	200005e4 	.word	0x200005e4
 800929c:	200005e8 	.word	0x200005e8
 80092a0:	20000644 	.word	0x20000644
 80092a4:	2000064c 	.word	0x2000064c
 80092a8:	20000634 	.word	0x20000634
 80092ac:	20000530 	.word	0x20000530
 80092b0:	2000052c 	.word	0x2000052c
 80092b4:	20000640 	.word	0x20000640
 80092b8:	2000063c 	.word	0x2000063c

080092bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092c2:	4b26      	ldr	r3, [pc, #152]	; (800935c <vTaskSwitchContext+0xa0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092ca:	4b25      	ldr	r3, [pc, #148]	; (8009360 <vTaskSwitchContext+0xa4>)
 80092cc:	2201      	movs	r2, #1
 80092ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092d0:	e03e      	b.n	8009350 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80092d2:	4b23      	ldr	r3, [pc, #140]	; (8009360 <vTaskSwitchContext+0xa4>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d8:	4b22      	ldr	r3, [pc, #136]	; (8009364 <vTaskSwitchContext+0xa8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	fab3 f383 	clz	r3, r3
 80092e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	f1c3 031f 	rsb	r3, r3, #31
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	491e      	ldr	r1, [pc, #120]	; (8009368 <vTaskSwitchContext+0xac>)
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	440b      	add	r3, r1
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d109      	bne.n	8009316 <vTaskSwitchContext+0x5a>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	607b      	str	r3, [r7, #4]
 8009314:	e7fe      	b.n	8009314 <vTaskSwitchContext+0x58>
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4a11      	ldr	r2, [pc, #68]	; (8009368 <vTaskSwitchContext+0xac>)
 8009322:	4413      	add	r3, r2
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	605a      	str	r2, [r3, #4]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3308      	adds	r3, #8
 8009338:	429a      	cmp	r2, r3
 800933a:	d104      	bne.n	8009346 <vTaskSwitchContext+0x8a>
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	605a      	str	r2, [r3, #4]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4a07      	ldr	r2, [pc, #28]	; (800936c <vTaskSwitchContext+0xb0>)
 800934e:	6013      	str	r3, [r2, #0]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	20000654 	.word	0x20000654
 8009360:	20000640 	.word	0x20000640
 8009364:	20000634 	.word	0x20000634
 8009368:	20000530 	.word	0x20000530
 800936c:	2000052c 	.word	0x2000052c

08009370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <vTaskPlaceOnEventList+0x24>
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	60fb      	str	r3, [r7, #12]
 8009392:	e7fe      	b.n	8009392 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009394:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <vTaskPlaceOnEventList+0x44>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3318      	adds	r3, #24
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7fe fe28 	bl	8007ff2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093a2:	2101      	movs	r1, #1
 80093a4:	6838      	ldr	r0, [r7, #0]
 80093a6:	f000 fb75 	bl	8009a94 <prvAddCurrentTaskToDelayedList>
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	2000052c 	.word	0x2000052c

080093b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <xTaskRemoveFromEventList+0x2a>
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e7fe      	b.n	80093e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3318      	adds	r3, #24
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fe3c 	bl	8008064 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ec:	4b1d      	ldr	r3, [pc, #116]	; (8009464 <xTaskRemoveFromEventList+0xac>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d11c      	bne.n	800942e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fe33 	bl	8008064 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009402:	2201      	movs	r2, #1
 8009404:	409a      	lsls	r2, r3
 8009406:	4b18      	ldr	r3, [pc, #96]	; (8009468 <xTaskRemoveFromEventList+0xb0>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4313      	orrs	r3, r2
 800940c:	4a16      	ldr	r2, [pc, #88]	; (8009468 <xTaskRemoveFromEventList+0xb0>)
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4a13      	ldr	r2, [pc, #76]	; (800946c <xTaskRemoveFromEventList+0xb4>)
 800941e:	441a      	add	r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3304      	adds	r3, #4
 8009424:	4619      	mov	r1, r3
 8009426:	4610      	mov	r0, r2
 8009428:	f7fe fdbf 	bl	8007faa <vListInsertEnd>
 800942c:	e005      	b.n	800943a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	3318      	adds	r3, #24
 8009432:	4619      	mov	r1, r3
 8009434:	480e      	ldr	r0, [pc, #56]	; (8009470 <xTaskRemoveFromEventList+0xb8>)
 8009436:	f7fe fdb8 	bl	8007faa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943e:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <xTaskRemoveFromEventList+0xbc>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	429a      	cmp	r2, r3
 8009446:	d905      	bls.n	8009454 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009448:	2301      	movs	r3, #1
 800944a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <xTaskRemoveFromEventList+0xc0>)
 800944e:	2201      	movs	r2, #1
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e001      	b.n	8009458 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009458:	697b      	ldr	r3, [r7, #20]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000654 	.word	0x20000654
 8009468:	20000634 	.word	0x20000634
 800946c:	20000530 	.word	0x20000530
 8009470:	200005ec 	.word	0x200005ec
 8009474:	2000052c 	.word	0x2000052c
 8009478:	20000640 	.word	0x20000640

0800947c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009484:	4b06      	ldr	r3, [pc, #24]	; (80094a0 <vTaskInternalSetTimeOutState+0x24>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <vTaskInternalSetTimeOutState+0x28>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	605a      	str	r2, [r3, #4]
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20000644 	.word	0x20000644
 80094a4:	20000630 	.word	0x20000630

080094a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d109      	bne.n	80094cc <xTaskCheckForTimeOut+0x24>
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	613b      	str	r3, [r7, #16]
 80094ca:	e7fe      	b.n	80094ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <xTaskCheckForTimeOut+0x3e>
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e7fe      	b.n	80094e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80094e6:	f000 fc61 	bl	8009dac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094ea:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <xTaskCheckForTimeOut+0xb8>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009502:	d102      	bne.n	800950a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009504:	2300      	movs	r3, #0
 8009506:	61fb      	str	r3, [r7, #28]
 8009508:	e023      	b.n	8009552 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4b15      	ldr	r3, [pc, #84]	; (8009564 <xTaskCheckForTimeOut+0xbc>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d007      	beq.n	8009526 <xTaskCheckForTimeOut+0x7e>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	429a      	cmp	r2, r3
 800951e:	d302      	bcc.n	8009526 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009520:	2301      	movs	r3, #1
 8009522:	61fb      	str	r3, [r7, #28]
 8009524:	e015      	b.n	8009552 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	429a      	cmp	r2, r3
 800952e:	d20b      	bcs.n	8009548 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	1ad2      	subs	r2, r2, r3
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ff9d 	bl	800947c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	e004      	b.n	8009552 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800954e:	2301      	movs	r3, #1
 8009550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009552:	f000 fc59 	bl	8009e08 <vPortExitCritical>

	return xReturn;
 8009556:	69fb      	ldr	r3, [r7, #28]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20000630 	.word	0x20000630
 8009564:	20000644 	.word	0x20000644

08009568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009568:	b480      	push	{r7}
 800956a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800956c:	4b03      	ldr	r3, [pc, #12]	; (800957c <vTaskMissedYield+0x14>)
 800956e:	2201      	movs	r2, #1
 8009570:	601a      	str	r2, [r3, #0]
}
 8009572:	bf00      	nop
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	20000640 	.word	0x20000640

08009580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009588:	f000 f852 	bl	8009630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800958c:	4b06      	ldr	r3, [pc, #24]	; (80095a8 <prvIdleTask+0x28>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d9f9      	bls.n	8009588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <prvIdleTask+0x2c>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095a4:	e7f0      	b.n	8009588 <prvIdleTask+0x8>
 80095a6:	bf00      	nop
 80095a8:	20000530 	.word	0x20000530
 80095ac:	e000ed04 	.word	0xe000ed04

080095b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095b6:	2300      	movs	r3, #0
 80095b8:	607b      	str	r3, [r7, #4]
 80095ba:	e00c      	b.n	80095d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4a12      	ldr	r2, [pc, #72]	; (8009610 <prvInitialiseTaskLists+0x60>)
 80095c8:	4413      	add	r3, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fcc0 	bl	8007f50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3301      	adds	r3, #1
 80095d4:	607b      	str	r3, [r7, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b06      	cmp	r3, #6
 80095da:	d9ef      	bls.n	80095bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095dc:	480d      	ldr	r0, [pc, #52]	; (8009614 <prvInitialiseTaskLists+0x64>)
 80095de:	f7fe fcb7 	bl	8007f50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095e2:	480d      	ldr	r0, [pc, #52]	; (8009618 <prvInitialiseTaskLists+0x68>)
 80095e4:	f7fe fcb4 	bl	8007f50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095e8:	480c      	ldr	r0, [pc, #48]	; (800961c <prvInitialiseTaskLists+0x6c>)
 80095ea:	f7fe fcb1 	bl	8007f50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095ee:	480c      	ldr	r0, [pc, #48]	; (8009620 <prvInitialiseTaskLists+0x70>)
 80095f0:	f7fe fcae 	bl	8007f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095f4:	480b      	ldr	r0, [pc, #44]	; (8009624 <prvInitialiseTaskLists+0x74>)
 80095f6:	f7fe fcab 	bl	8007f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095fa:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <prvInitialiseTaskLists+0x78>)
 80095fc:	4a05      	ldr	r2, [pc, #20]	; (8009614 <prvInitialiseTaskLists+0x64>)
 80095fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <prvInitialiseTaskLists+0x7c>)
 8009602:	4a05      	ldr	r2, [pc, #20]	; (8009618 <prvInitialiseTaskLists+0x68>)
 8009604:	601a      	str	r2, [r3, #0]
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20000530 	.word	0x20000530
 8009614:	200005bc 	.word	0x200005bc
 8009618:	200005d0 	.word	0x200005d0
 800961c:	200005ec 	.word	0x200005ec
 8009620:	20000600 	.word	0x20000600
 8009624:	20000618 	.word	0x20000618
 8009628:	200005e4 	.word	0x200005e4
 800962c:	200005e8 	.word	0x200005e8

08009630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009636:	e019      	b.n	800966c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009638:	f000 fbb8 	bl	8009dac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963c:	4b0f      	ldr	r3, [pc, #60]	; (800967c <prvCheckTasksWaitingTermination+0x4c>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3304      	adds	r3, #4
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe fd0b 	bl	8008064 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800964e:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <prvCheckTasksWaitingTermination+0x50>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3b01      	subs	r3, #1
 8009654:	4a0a      	ldr	r2, [pc, #40]	; (8009680 <prvCheckTasksWaitingTermination+0x50>)
 8009656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009658:	4b0a      	ldr	r3, [pc, #40]	; (8009684 <prvCheckTasksWaitingTermination+0x54>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3b01      	subs	r3, #1
 800965e:	4a09      	ldr	r2, [pc, #36]	; (8009684 <prvCheckTasksWaitingTermination+0x54>)
 8009660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009662:	f000 fbd1 	bl	8009e08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f80e 	bl	8009688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <prvCheckTasksWaitingTermination+0x54>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e1      	bne.n	8009638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20000600 	.word	0x20000600
 8009680:	2000062c 	.word	0x2000062c
 8009684:	20000614 	.word	0x20000614

08009688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009696:	2b00      	cmp	r3, #0
 8009698:	d108      	bne.n	80096ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fd66 	bl	800a170 <vPortFree>
				vPortFree( pxTCB );
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fd63 	bl	800a170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096aa:	e017      	b.n	80096dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d103      	bne.n	80096be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fd5a 	bl	800a170 <vPortFree>
	}
 80096bc:	e00e      	b.n	80096dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d009      	beq.n	80096dc <prvDeleteTCB+0x54>
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	e7fe      	b.n	80096da <prvDeleteTCB+0x52>
	}
 80096dc:	bf00      	nop
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ea:	4b0c      	ldr	r3, [pc, #48]	; (800971c <prvResetNextTaskUnblockTime+0x38>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d104      	bne.n	80096fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096f4:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <prvResetNextTaskUnblockTime+0x3c>)
 80096f6:	f04f 32ff 	mov.w	r2, #4294967295
 80096fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096fc:	e008      	b.n	8009710 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fe:	4b07      	ldr	r3, [pc, #28]	; (800971c <prvResetNextTaskUnblockTime+0x38>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	4a04      	ldr	r2, [pc, #16]	; (8009720 <prvResetNextTaskUnblockTime+0x3c>)
 800970e:	6013      	str	r3, [r2, #0]
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	200005e4 	.word	0x200005e4
 8009720:	2000064c 	.word	0x2000064c

08009724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800972a:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <xTaskGetSchedulerState+0x34>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009732:	2301      	movs	r3, #1
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	e008      	b.n	800974a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009738:	4b08      	ldr	r3, [pc, #32]	; (800975c <xTaskGetSchedulerState+0x38>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009740:	2302      	movs	r3, #2
 8009742:	607b      	str	r3, [r7, #4]
 8009744:	e001      	b.n	800974a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009746:	2300      	movs	r3, #0
 8009748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800974a:	687b      	ldr	r3, [r7, #4]
	}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	20000638 	.word	0x20000638
 800975c:	20000654 	.word	0x20000654

08009760 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d05e      	beq.n	8009834 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977a:	4b31      	ldr	r3, [pc, #196]	; (8009840 <xTaskPriorityInherit+0xe0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009780:	429a      	cmp	r2, r3
 8009782:	d24e      	bcs.n	8009822 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	2b00      	cmp	r3, #0
 800978a:	db06      	blt.n	800979a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800978c:	4b2c      	ldr	r3, [pc, #176]	; (8009840 <xTaskPriorityInherit+0xe0>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009792:	f1c3 0207 	rsb	r2, r3, #7
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	6959      	ldr	r1, [r3, #20]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4a26      	ldr	r2, [pc, #152]	; (8009844 <xTaskPriorityInherit+0xe4>)
 80097ac:	4413      	add	r3, r2
 80097ae:	4299      	cmp	r1, r3
 80097b0:	d12f      	bne.n	8009812 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	3304      	adds	r3, #4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fc54 	bl	8008064 <uxListRemove>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10a      	bne.n	80097d8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c6:	2201      	movs	r2, #1
 80097c8:	fa02 f303 	lsl.w	r3, r2, r3
 80097cc:	43da      	mvns	r2, r3
 80097ce:	4b1e      	ldr	r3, [pc, #120]	; (8009848 <xTaskPriorityInherit+0xe8>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4013      	ands	r3, r2
 80097d4:	4a1c      	ldr	r2, [pc, #112]	; (8009848 <xTaskPriorityInherit+0xe8>)
 80097d6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097d8:	4b19      	ldr	r3, [pc, #100]	; (8009840 <xTaskPriorityInherit+0xe0>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	2201      	movs	r2, #1
 80097e8:	409a      	lsls	r2, r3
 80097ea:	4b17      	ldr	r3, [pc, #92]	; (8009848 <xTaskPriorityInherit+0xe8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	4a15      	ldr	r2, [pc, #84]	; (8009848 <xTaskPriorityInherit+0xe8>)
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4a10      	ldr	r2, [pc, #64]	; (8009844 <xTaskPriorityInherit+0xe4>)
 8009802:	441a      	add	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f7fe fbcd 	bl	8007faa <vListInsertEnd>
 8009810:	e004      	b.n	800981c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009812:	4b0b      	ldr	r3, [pc, #44]	; (8009840 <xTaskPriorityInherit+0xe0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800981c:	2301      	movs	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	e008      	b.n	8009834 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009826:	4b06      	ldr	r3, [pc, #24]	; (8009840 <xTaskPriorityInherit+0xe0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	429a      	cmp	r2, r3
 800982e:	d201      	bcs.n	8009834 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009830:	2301      	movs	r3, #1
 8009832:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009834:	68fb      	ldr	r3, [r7, #12]
	}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	2000052c 	.word	0x2000052c
 8009844:	20000530 	.word	0x20000530
 8009848:	20000634 	.word	0x20000634

0800984c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d06c      	beq.n	800993c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009862:	4b39      	ldr	r3, [pc, #228]	; (8009948 <xTaskPriorityDisinherit+0xfc>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	429a      	cmp	r2, r3
 800986a:	d009      	beq.n	8009880 <xTaskPriorityDisinherit+0x34>
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e7fe      	b.n	800987e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009884:	2b00      	cmp	r3, #0
 8009886:	d109      	bne.n	800989c <xTaskPriorityDisinherit+0x50>
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	60bb      	str	r3, [r7, #8]
 800989a:	e7fe      	b.n	800989a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a0:	1e5a      	subs	r2, r3, #1
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d044      	beq.n	800993c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d140      	bne.n	800993c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	3304      	adds	r3, #4
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fbd0 	bl	8008064 <uxListRemove>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d115      	bne.n	80098f6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ce:	491f      	ldr	r1, [pc, #124]	; (800994c <xTaskPriorityDisinherit+0x100>)
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xTaskPriorityDisinherit+0xaa>
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e4:	2201      	movs	r2, #1
 80098e6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ea:	43da      	mvns	r2, r3
 80098ec:	4b18      	ldr	r3, [pc, #96]	; (8009950 <xTaskPriorityDisinherit+0x104>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4013      	ands	r3, r2
 80098f2:	4a17      	ldr	r2, [pc, #92]	; (8009950 <xTaskPriorityDisinherit+0x104>)
 80098f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009902:	f1c3 0207 	rsb	r2, r3, #7
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990e:	2201      	movs	r2, #1
 8009910:	409a      	lsls	r2, r3
 8009912:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <xTaskPriorityDisinherit+0x104>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4313      	orrs	r3, r2
 8009918:	4a0d      	ldr	r2, [pc, #52]	; (8009950 <xTaskPriorityDisinherit+0x104>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a08      	ldr	r2, [pc, #32]	; (800994c <xTaskPriorityDisinherit+0x100>)
 800992a:	441a      	add	r2, r3
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7fe fb39 	bl	8007faa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800993c:	697b      	ldr	r3, [r7, #20]
	}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	2000052c 	.word	0x2000052c
 800994c:	20000530 	.word	0x20000530
 8009950:	20000634 	.word	0x20000634

08009954 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009962:	2301      	movs	r3, #1
 8009964:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d075      	beq.n	8009a58 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009970:	2b00      	cmp	r3, #0
 8009972:	d109      	bne.n	8009988 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e7fe      	b.n	8009986 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d902      	bls.n	8009998 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	e002      	b.n	800999e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800999c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	69fa      	ldr	r2, [r7, #28]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d057      	beq.n	8009a58 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d152      	bne.n	8009a58 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80099b2:	4b2b      	ldr	r3, [pc, #172]	; (8009a60 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69ba      	ldr	r2, [r7, #24]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d109      	bne.n	80099d0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	60bb      	str	r3, [r7, #8]
 80099ce:	e7fe      	b.n	80099ce <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	db04      	blt.n	80099ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	f1c3 0207 	rsb	r2, r3, #7
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	6959      	ldr	r1, [r3, #20]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	4613      	mov	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4a19      	ldr	r2, [pc, #100]	; (8009a64 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80099fe:	4413      	add	r3, r2
 8009a00:	4299      	cmp	r1, r3
 8009a02:	d129      	bne.n	8009a58 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fb2b 	bl	8008064 <uxListRemove>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	2201      	movs	r2, #1
 8009a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1e:	43da      	mvns	r2, r3
 8009a20:	4b11      	ldr	r3, [pc, #68]	; (8009a68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4013      	ands	r3, r2
 8009a26:	4a10      	ldr	r2, [pc, #64]	; (8009a68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009a28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2e:	2201      	movs	r2, #1
 8009a30:	409a      	lsls	r2, r3
 8009a32:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	4a0b      	ldr	r2, [pc, #44]	; (8009a68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4a06      	ldr	r2, [pc, #24]	; (8009a64 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009a4a:	441a      	add	r2, r3
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4619      	mov	r1, r3
 8009a52:	4610      	mov	r0, r2
 8009a54:	f7fe faa9 	bl	8007faa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a58:	bf00      	nop
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	2000052c 	.word	0x2000052c
 8009a64:	20000530 	.word	0x20000530
 8009a68:	20000634 	.word	0x20000634

08009a6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a70:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d004      	beq.n	8009a82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a7e:	3201      	adds	r2, #1
 8009a80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009a82:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a84:	681b      	ldr	r3, [r3, #0]
	}
 8009a86:	4618      	mov	r0, r3
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	2000052c 	.word	0x2000052c

08009a94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a9e:	4b29      	ldr	r3, [pc, #164]	; (8009b44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aa4:	4b28      	ldr	r3, [pc, #160]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fada 	bl	8008064 <uxListRemove>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009ab6:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	2201      	movs	r2, #1
 8009abe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac2:	43da      	mvns	r2, r3
 8009ac4:	4b21      	ldr	r3, [pc, #132]	; (8009b4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4013      	ands	r3, r2
 8009aca:	4a20      	ldr	r2, [pc, #128]	; (8009b4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009acc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad4:	d10a      	bne.n	8009aec <prvAddCurrentTaskToDelayedList+0x58>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009adc:	4b1a      	ldr	r3, [pc, #104]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	481a      	ldr	r0, [pc, #104]	; (8009b50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ae6:	f7fe fa60 	bl	8007faa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009aea:	e026      	b.n	8009b3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009af4:	4b14      	ldr	r3, [pc, #80]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d209      	bcs.n	8009b18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b04:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	4619      	mov	r1, r3
 8009b10:	4610      	mov	r0, r2
 8009b12:	f7fe fa6e 	bl	8007ff2 <vListInsert>
}
 8009b16:	e010      	b.n	8009b3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b18:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7fe fa64 	bl	8007ff2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d202      	bcs.n	8009b3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b34:	4a09      	ldr	r2, [pc, #36]	; (8009b5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6013      	str	r3, [r2, #0]
}
 8009b3a:	bf00      	nop
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000630 	.word	0x20000630
 8009b48:	2000052c 	.word	0x2000052c
 8009b4c:	20000634 	.word	0x20000634
 8009b50:	20000618 	.word	0x20000618
 8009b54:	200005e8 	.word	0x200005e8
 8009b58:	200005e4 	.word	0x200005e4
 8009b5c:	2000064c 	.word	0x2000064c

08009b60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3b04      	subs	r3, #4
 8009b70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3b04      	subs	r3, #4
 8009b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f023 0201 	bic.w	r2, r3, #1
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3b04      	subs	r3, #4
 8009b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b90:	4a0c      	ldr	r2, [pc, #48]	; (8009bc4 <pxPortInitialiseStack+0x64>)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3b14      	subs	r3, #20
 8009b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3b04      	subs	r3, #4
 8009ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f06f 0202 	mvn.w	r2, #2
 8009bae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	3b20      	subs	r3, #32
 8009bb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	08009bc9 	.word	0x08009bc9

08009bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bd2:	4b11      	ldr	r3, [pc, #68]	; (8009c18 <prvTaskExitError+0x50>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bda:	d009      	beq.n	8009bf0 <prvTaskExitError+0x28>
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	e7fe      	b.n	8009bee <prvTaskExitError+0x26>
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c02:	bf00      	nop
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0fc      	beq.n	8009c04 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c0a:	bf00      	nop
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000054 	.word	0x20000054
 8009c1c:	00000000 	.word	0x00000000

08009c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c20:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <pxCurrentTCBConst2>)
 8009c22:	6819      	ldr	r1, [r3, #0]
 8009c24:	6808      	ldr	r0, [r1, #0]
 8009c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2a:	f380 8809 	msr	PSP, r0
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f04f 0000 	mov.w	r0, #0
 8009c36:	f380 8811 	msr	BASEPRI, r0
 8009c3a:	4770      	bx	lr
 8009c3c:	f3af 8000 	nop.w

08009c40 <pxCurrentTCBConst2>:
 8009c40:	2000052c 	.word	0x2000052c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop

08009c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c48:	4808      	ldr	r0, [pc, #32]	; (8009c6c <prvPortStartFirstTask+0x24>)
 8009c4a:	6800      	ldr	r0, [r0, #0]
 8009c4c:	6800      	ldr	r0, [r0, #0]
 8009c4e:	f380 8808 	msr	MSP, r0
 8009c52:	f04f 0000 	mov.w	r0, #0
 8009c56:	f380 8814 	msr	CONTROL, r0
 8009c5a:	b662      	cpsie	i
 8009c5c:	b661      	cpsie	f
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	df00      	svc	0
 8009c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c6a:	bf00      	nop
 8009c6c:	e000ed08 	.word	0xe000ed08

08009c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c76:	4b44      	ldr	r3, [pc, #272]	; (8009d88 <xPortStartScheduler+0x118>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a44      	ldr	r2, [pc, #272]	; (8009d8c <xPortStartScheduler+0x11c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d109      	bne.n	8009c94 <xPortStartScheduler+0x24>
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	613b      	str	r3, [r7, #16]
 8009c92:	e7fe      	b.n	8009c92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c94:	4b3c      	ldr	r3, [pc, #240]	; (8009d88 <xPortStartScheduler+0x118>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a3d      	ldr	r2, [pc, #244]	; (8009d90 <xPortStartScheduler+0x120>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d109      	bne.n	8009cb2 <xPortStartScheduler+0x42>
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e7fe      	b.n	8009cb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cb2:	4b38      	ldr	r3, [pc, #224]	; (8009d94 <xPortStartScheduler+0x124>)
 8009cb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	22ff      	movs	r2, #255	; 0xff
 8009cc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ccc:	78fb      	ldrb	r3, [r7, #3]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	4b30      	ldr	r3, [pc, #192]	; (8009d98 <xPortStartScheduler+0x128>)
 8009cd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cda:	4b30      	ldr	r3, [pc, #192]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009cdc:	2207      	movs	r2, #7
 8009cde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ce0:	e009      	b.n	8009cf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009ce2:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	4a2c      	ldr	r2, [pc, #176]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009cea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	005b      	lsls	r3, r3, #1
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cf6:	78fb      	ldrb	r3, [r7, #3]
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cfe:	2b80      	cmp	r3, #128	; 0x80
 8009d00:	d0ef      	beq.n	8009ce2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d02:	4b26      	ldr	r3, [pc, #152]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f1c3 0307 	rsb	r3, r3, #7
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d009      	beq.n	8009d22 <xPortStartScheduler+0xb2>
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	60bb      	str	r3, [r7, #8]
 8009d20:	e7fe      	b.n	8009d20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d22:	4b1e      	ldr	r3, [pc, #120]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	4a1c      	ldr	r2, [pc, #112]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009d2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d2c:	4b1b      	ldr	r3, [pc, #108]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d34:	4a19      	ldr	r2, [pc, #100]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009d36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d40:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <xPortStartScheduler+0x130>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a16      	ldr	r2, [pc, #88]	; (8009da0 <xPortStartScheduler+0x130>)
 8009d46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d4c:	4b14      	ldr	r3, [pc, #80]	; (8009da0 <xPortStartScheduler+0x130>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a13      	ldr	r2, [pc, #76]	; (8009da0 <xPortStartScheduler+0x130>)
 8009d52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d58:	f000 f8d6 	bl	8009f08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d5c:	4b11      	ldr	r3, [pc, #68]	; (8009da4 <xPortStartScheduler+0x134>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d62:	f000 f8f5 	bl	8009f50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d66:	4b10      	ldr	r3, [pc, #64]	; (8009da8 <xPortStartScheduler+0x138>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a0f      	ldr	r2, [pc, #60]	; (8009da8 <xPortStartScheduler+0x138>)
 8009d6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d72:	f7ff ff69 	bl	8009c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d76:	f7ff faa1 	bl	80092bc <vTaskSwitchContext>
	prvTaskExitError();
 8009d7a:	f7ff ff25 	bl	8009bc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	e000ed00 	.word	0xe000ed00
 8009d8c:	410fc271 	.word	0x410fc271
 8009d90:	410fc270 	.word	0x410fc270
 8009d94:	e000e400 	.word	0xe000e400
 8009d98:	20000658 	.word	0x20000658
 8009d9c:	2000065c 	.word	0x2000065c
 8009da0:	e000ed20 	.word	0xe000ed20
 8009da4:	20000054 	.word	0x20000054
 8009da8:	e000ef34 	.word	0xe000ef34

08009dac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <vPortEnterCritical+0x54>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	4a0d      	ldr	r2, [pc, #52]	; (8009e00 <vPortEnterCritical+0x54>)
 8009dcc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dce:	4b0c      	ldr	r3, [pc, #48]	; (8009e00 <vPortEnterCritical+0x54>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d10e      	bne.n	8009df4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009dd6:	4b0b      	ldr	r3, [pc, #44]	; (8009e04 <vPortEnterCritical+0x58>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d009      	beq.n	8009df4 <vPortEnterCritical+0x48>
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	603b      	str	r3, [r7, #0]
 8009df2:	e7fe      	b.n	8009df2 <vPortEnterCritical+0x46>
	}
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	20000054 	.word	0x20000054
 8009e04:	e000ed04 	.word	0xe000ed04

08009e08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e0e:	4b11      	ldr	r3, [pc, #68]	; (8009e54 <vPortExitCritical+0x4c>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d109      	bne.n	8009e2a <vPortExitCritical+0x22>
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	607b      	str	r3, [r7, #4]
 8009e28:	e7fe      	b.n	8009e28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009e2a:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <vPortExitCritical+0x4c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	4a08      	ldr	r2, [pc, #32]	; (8009e54 <vPortExitCritical+0x4c>)
 8009e32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e34:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <vPortExitCritical+0x4c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d104      	bne.n	8009e46 <vPortExitCritical+0x3e>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20000054 	.word	0x20000054
	...

08009e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e60:	f3ef 8009 	mrs	r0, PSP
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	4b15      	ldr	r3, [pc, #84]	; (8009ec0 <pxCurrentTCBConst>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	f01e 0f10 	tst.w	lr, #16
 8009e70:	bf08      	it	eq
 8009e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7a:	6010      	str	r0, [r2, #0]
 8009e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e84:	f380 8811 	msr	BASEPRI, r0
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f7ff fa14 	bl	80092bc <vTaskSwitchContext>
 8009e94:	f04f 0000 	mov.w	r0, #0
 8009e98:	f380 8811 	msr	BASEPRI, r0
 8009e9c:	bc09      	pop	{r0, r3}
 8009e9e:	6819      	ldr	r1, [r3, #0]
 8009ea0:	6808      	ldr	r0, [r1, #0]
 8009ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea6:	f01e 0f10 	tst.w	lr, #16
 8009eaa:	bf08      	it	eq
 8009eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009eb0:	f380 8809 	msr	PSP, r0
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	f3af 8000 	nop.w

08009ec0 <pxCurrentTCBConst>:
 8009ec0:	2000052c 	.word	0x2000052c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop

08009ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ee0:	f7ff f934 	bl	800914c <xTaskIncrementTick>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009eea:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <SysTick_Handler+0x3c>)
 8009eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	e000ed04 	.word	0xe000ed04

08009f08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	; (8009f3c <vPortSetupTimerInterrupt+0x34>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f12:	4b0b      	ldr	r3, [pc, #44]	; (8009f40 <vPortSetupTimerInterrupt+0x38>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <vPortSetupTimerInterrupt+0x3c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a0a      	ldr	r2, [pc, #40]	; (8009f48 <vPortSetupTimerInterrupt+0x40>)
 8009f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f22:	099b      	lsrs	r3, r3, #6
 8009f24:	4a09      	ldr	r2, [pc, #36]	; (8009f4c <vPortSetupTimerInterrupt+0x44>)
 8009f26:	3b01      	subs	r3, #1
 8009f28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f2a:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <vPortSetupTimerInterrupt+0x34>)
 8009f2c:	2207      	movs	r2, #7
 8009f2e:	601a      	str	r2, [r3, #0]
}
 8009f30:	bf00      	nop
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	e000e010 	.word	0xe000e010
 8009f40:	e000e018 	.word	0xe000e018
 8009f44:	20000034 	.word	0x20000034
 8009f48:	10624dd3 	.word	0x10624dd3
 8009f4c:	e000e014 	.word	0xe000e014

08009f50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f60 <vPortEnableVFP+0x10>
 8009f54:	6801      	ldr	r1, [r0, #0]
 8009f56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f5a:	6001      	str	r1, [r0, #0]
 8009f5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f5e:	bf00      	nop
 8009f60:	e000ed88 	.word	0xe000ed88

08009f64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f6a:	f3ef 8305 	mrs	r3, IPSR
 8009f6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b0f      	cmp	r3, #15
 8009f74:	d913      	bls.n	8009f9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f76:	4a16      	ldr	r2, [pc, #88]	; (8009fd0 <vPortValidateInterruptPriority+0x6c>)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f80:	4b14      	ldr	r3, [pc, #80]	; (8009fd4 <vPortValidateInterruptPriority+0x70>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	7afa      	ldrb	r2, [r7, #11]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d209      	bcs.n	8009f9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	607b      	str	r3, [r7, #4]
 8009f9c:	e7fe      	b.n	8009f9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f9e:	4b0e      	ldr	r3, [pc, #56]	; (8009fd8 <vPortValidateInterruptPriority+0x74>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <vPortValidateInterruptPriority+0x78>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d909      	bls.n	8009fc2 <vPortValidateInterruptPriority+0x5e>
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	e7fe      	b.n	8009fc0 <vPortValidateInterruptPriority+0x5c>
	}
 8009fc2:	bf00      	nop
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	e000e3f0 	.word	0xe000e3f0
 8009fd4:	20000658 	.word	0x20000658
 8009fd8:	e000ed0c 	.word	0xe000ed0c
 8009fdc:	2000065c 	.word	0x2000065c

08009fe0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08a      	sub	sp, #40	; 0x28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fec:	f7ff f804 	bl	8008ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ff0:	4b59      	ldr	r3, [pc, #356]	; (800a158 <pvPortMalloc+0x178>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ff8:	f000 f91a 	bl	800a230 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ffc:	4b57      	ldr	r3, [pc, #348]	; (800a15c <pvPortMalloc+0x17c>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4013      	ands	r3, r2
 800a004:	2b00      	cmp	r3, #0
 800a006:	f040 8091 	bne.w	800a12c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01c      	beq.n	800a04a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a010:	2208      	movs	r2, #8
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4413      	add	r3, r2
 800a016:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f003 0307 	and.w	r3, r3, #7
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d013      	beq.n	800a04a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f023 0307 	bic.w	r3, r3, #7
 800a028:	3308      	adds	r3, #8
 800a02a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f003 0307 	and.w	r3, r3, #7
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <pvPortMalloc+0x6a>
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	e7fe      	b.n	800a048 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d06d      	beq.n	800a12c <pvPortMalloc+0x14c>
 800a050:	4b43      	ldr	r3, [pc, #268]	; (800a160 <pvPortMalloc+0x180>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	429a      	cmp	r2, r3
 800a058:	d868      	bhi.n	800a12c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a05a:	4b42      	ldr	r3, [pc, #264]	; (800a164 <pvPortMalloc+0x184>)
 800a05c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a05e:	4b41      	ldr	r3, [pc, #260]	; (800a164 <pvPortMalloc+0x184>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a064:	e004      	b.n	800a070 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	429a      	cmp	r2, r3
 800a078:	d903      	bls.n	800a082 <pvPortMalloc+0xa2>
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1f1      	bne.n	800a066 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a082:	4b35      	ldr	r3, [pc, #212]	; (800a158 <pvPortMalloc+0x178>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a088:	429a      	cmp	r2, r3
 800a08a:	d04f      	beq.n	800a12c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2208      	movs	r2, #8
 800a092:	4413      	add	r3, r2
 800a094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	1ad2      	subs	r2, r2, r3
 800a0a6:	2308      	movs	r3, #8
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d91e      	bls.n	800a0ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f003 0307 	and.w	r3, r3, #7
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d009      	beq.n	800a0d4 <pvPortMalloc+0xf4>
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	613b      	str	r3, [r7, #16]
 800a0d2:	e7fe      	b.n	800a0d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	1ad2      	subs	r2, r2, r3
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0e6:	69b8      	ldr	r0, [r7, #24]
 800a0e8:	f000 f904 	bl	800a2f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0ec:	4b1c      	ldr	r3, [pc, #112]	; (800a160 <pvPortMalloc+0x180>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	4a1a      	ldr	r2, [pc, #104]	; (800a160 <pvPortMalloc+0x180>)
 800a0f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0fa:	4b19      	ldr	r3, [pc, #100]	; (800a160 <pvPortMalloc+0x180>)
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	4b1a      	ldr	r3, [pc, #104]	; (800a168 <pvPortMalloc+0x188>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	d203      	bcs.n	800a10e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a106:	4b16      	ldr	r3, [pc, #88]	; (800a160 <pvPortMalloc+0x180>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a17      	ldr	r2, [pc, #92]	; (800a168 <pvPortMalloc+0x188>)
 800a10c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	4b12      	ldr	r3, [pc, #72]	; (800a15c <pvPortMalloc+0x17c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	431a      	orrs	r2, r3
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	2200      	movs	r2, #0
 800a120:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a122:	4b12      	ldr	r3, [pc, #72]	; (800a16c <pvPortMalloc+0x18c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3301      	adds	r3, #1
 800a128:	4a10      	ldr	r2, [pc, #64]	; (800a16c <pvPortMalloc+0x18c>)
 800a12a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a12c:	f7fe ff72 	bl	8009014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	2b00      	cmp	r3, #0
 800a138:	d009      	beq.n	800a14e <pvPortMalloc+0x16e>
 800a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	e7fe      	b.n	800a14c <pvPortMalloc+0x16c>
	return pvReturn;
 800a14e:	69fb      	ldr	r3, [r7, #28]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3728      	adds	r7, #40	; 0x28
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	20004268 	.word	0x20004268
 800a15c:	2000427c 	.word	0x2000427c
 800a160:	2000426c 	.word	0x2000426c
 800a164:	20004260 	.word	0x20004260
 800a168:	20004270 	.word	0x20004270
 800a16c:	20004274 	.word	0x20004274

0800a170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d04b      	beq.n	800a21a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a182:	2308      	movs	r3, #8
 800a184:	425b      	negs	r3, r3
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	4413      	add	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	4b23      	ldr	r3, [pc, #140]	; (800a224 <vPortFree+0xb4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4013      	ands	r3, r2
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d109      	bne.n	800a1b2 <vPortFree+0x42>
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e7fe      	b.n	800a1b0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d009      	beq.n	800a1ce <vPortFree+0x5e>
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	60bb      	str	r3, [r7, #8]
 800a1cc:	e7fe      	b.n	800a1cc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	4b14      	ldr	r3, [pc, #80]	; (800a224 <vPortFree+0xb4>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d01e      	beq.n	800a21a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d11a      	bne.n	800a21a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	4b0e      	ldr	r3, [pc, #56]	; (800a224 <vPortFree+0xb4>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	43db      	mvns	r3, r3
 800a1ee:	401a      	ands	r2, r3
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1f4:	f7fe ff00 	bl	8008ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <vPortFree+0xb8>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4413      	add	r3, r2
 800a202:	4a09      	ldr	r2, [pc, #36]	; (800a228 <vPortFree+0xb8>)
 800a204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a206:	6938      	ldr	r0, [r7, #16]
 800a208:	f000 f874 	bl	800a2f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a20c:	4b07      	ldr	r3, [pc, #28]	; (800a22c <vPortFree+0xbc>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	4a06      	ldr	r2, [pc, #24]	; (800a22c <vPortFree+0xbc>)
 800a214:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a216:	f7fe fefd 	bl	8009014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a21a:	bf00      	nop
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	2000427c 	.word	0x2000427c
 800a228:	2000426c 	.word	0x2000426c
 800a22c:	20004278 	.word	0x20004278

0800a230 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a236:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a23a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a23c:	4b27      	ldr	r3, [pc, #156]	; (800a2dc <prvHeapInit+0xac>)
 800a23e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00c      	beq.n	800a264 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3307      	adds	r3, #7
 800a24e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f023 0307 	bic.w	r3, r3, #7
 800a256:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	4a1f      	ldr	r2, [pc, #124]	; (800a2dc <prvHeapInit+0xac>)
 800a260:	4413      	add	r3, r2
 800a262:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a268:	4a1d      	ldr	r2, [pc, #116]	; (800a2e0 <prvHeapInit+0xb0>)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a26e:	4b1c      	ldr	r3, [pc, #112]	; (800a2e0 <prvHeapInit+0xb0>)
 800a270:	2200      	movs	r2, #0
 800a272:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	4413      	add	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a27c:	2208      	movs	r2, #8
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	1a9b      	subs	r3, r3, r2
 800a282:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f023 0307 	bic.w	r3, r3, #7
 800a28a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4a15      	ldr	r2, [pc, #84]	; (800a2e4 <prvHeapInit+0xb4>)
 800a290:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a292:	4b14      	ldr	r3, [pc, #80]	; (800a2e4 <prvHeapInit+0xb4>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2200      	movs	r2, #0
 800a298:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a29a:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <prvHeapInit+0xb4>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	1ad2      	subs	r2, r2, r3
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2b0:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <prvHeapInit+0xb4>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	4a0a      	ldr	r2, [pc, #40]	; (800a2e8 <prvHeapInit+0xb8>)
 800a2be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <prvHeapInit+0xbc>)
 800a2c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2c8:	4b09      	ldr	r3, [pc, #36]	; (800a2f0 <prvHeapInit+0xc0>)
 800a2ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2ce:	601a      	str	r2, [r3, #0]
}
 800a2d0:	bf00      	nop
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	20000660 	.word	0x20000660
 800a2e0:	20004260 	.word	0x20004260
 800a2e4:	20004268 	.word	0x20004268
 800a2e8:	20004270 	.word	0x20004270
 800a2ec:	2000426c 	.word	0x2000426c
 800a2f0:	2000427c 	.word	0x2000427c

0800a2f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2fc:	4b28      	ldr	r3, [pc, #160]	; (800a3a0 <prvInsertBlockIntoFreeList+0xac>)
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	e002      	b.n	800a308 <prvInsertBlockIntoFreeList+0x14>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d8f7      	bhi.n	800a302 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	4413      	add	r3, r2
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	429a      	cmp	r2, r3
 800a322:	d108      	bne.n	800a336 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	441a      	add	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	441a      	add	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	429a      	cmp	r2, r3
 800a348:	d118      	bne.n	800a37c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	429a      	cmp	r2, r3
 800a354:	d00d      	beq.n	800a372 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	441a      	add	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	e008      	b.n	800a384 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a372:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	e003      	b.n	800a384 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d002      	beq.n	800a392 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20004260 	.word	0x20004260
 800a3a4:	20004268 	.word	0x20004268

0800a3a8 <atoi>:
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	f000 b9f8 	b.w	800a7a0 <strtol>

0800a3b0 <calloc>:
 800a3b0:	4b02      	ldr	r3, [pc, #8]	; (800a3bc <calloc+0xc>)
 800a3b2:	460a      	mov	r2, r1
 800a3b4:	4601      	mov	r1, r0
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	f000 b83f 	b.w	800a43a <_calloc_r>
 800a3bc:	20000058 	.word	0x20000058

0800a3c0 <__errno>:
 800a3c0:	4b01      	ldr	r3, [pc, #4]	; (800a3c8 <__errno+0x8>)
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	20000058 	.word	0x20000058

0800a3cc <__libc_init_array>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	4e0d      	ldr	r6, [pc, #52]	; (800a404 <__libc_init_array+0x38>)
 800a3d0:	4c0d      	ldr	r4, [pc, #52]	; (800a408 <__libc_init_array+0x3c>)
 800a3d2:	1ba4      	subs	r4, r4, r6
 800a3d4:	10a4      	asrs	r4, r4, #2
 800a3d6:	2500      	movs	r5, #0
 800a3d8:	42a5      	cmp	r5, r4
 800a3da:	d109      	bne.n	800a3f0 <__libc_init_array+0x24>
 800a3dc:	4e0b      	ldr	r6, [pc, #44]	; (800a40c <__libc_init_array+0x40>)
 800a3de:	4c0c      	ldr	r4, [pc, #48]	; (800a410 <__libc_init_array+0x44>)
 800a3e0:	f001 f878 	bl	800b4d4 <_init>
 800a3e4:	1ba4      	subs	r4, r4, r6
 800a3e6:	10a4      	asrs	r4, r4, #2
 800a3e8:	2500      	movs	r5, #0
 800a3ea:	42a5      	cmp	r5, r4
 800a3ec:	d105      	bne.n	800a3fa <__libc_init_array+0x2e>
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3f4:	4798      	blx	r3
 800a3f6:	3501      	adds	r5, #1
 800a3f8:	e7ee      	b.n	800a3d8 <__libc_init_array+0xc>
 800a3fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3fe:	4798      	blx	r3
 800a400:	3501      	adds	r5, #1
 800a402:	e7f2      	b.n	800a3ea <__libc_init_array+0x1e>
 800a404:	0800bbc8 	.word	0x0800bbc8
 800a408:	0800bbc8 	.word	0x0800bbc8
 800a40c:	0800bbc8 	.word	0x0800bbc8
 800a410:	0800bbcc 	.word	0x0800bbcc

0800a414 <memcpy>:
 800a414:	b510      	push	{r4, lr}
 800a416:	1e43      	subs	r3, r0, #1
 800a418:	440a      	add	r2, r1
 800a41a:	4291      	cmp	r1, r2
 800a41c:	d100      	bne.n	800a420 <memcpy+0xc>
 800a41e:	bd10      	pop	{r4, pc}
 800a420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a428:	e7f7      	b.n	800a41a <memcpy+0x6>

0800a42a <memset>:
 800a42a:	4402      	add	r2, r0
 800a42c:	4603      	mov	r3, r0
 800a42e:	4293      	cmp	r3, r2
 800a430:	d100      	bne.n	800a434 <memset+0xa>
 800a432:	4770      	bx	lr
 800a434:	f803 1b01 	strb.w	r1, [r3], #1
 800a438:	e7f9      	b.n	800a42e <memset+0x4>

0800a43a <_calloc_r>:
 800a43a:	b538      	push	{r3, r4, r5, lr}
 800a43c:	fb02 f401 	mul.w	r4, r2, r1
 800a440:	4621      	mov	r1, r4
 800a442:	f000 f809 	bl	800a458 <_malloc_r>
 800a446:	4605      	mov	r5, r0
 800a448:	b118      	cbz	r0, 800a452 <_calloc_r+0x18>
 800a44a:	4622      	mov	r2, r4
 800a44c:	2100      	movs	r1, #0
 800a44e:	f7ff ffec 	bl	800a42a <memset>
 800a452:	4628      	mov	r0, r5
 800a454:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a458 <_malloc_r>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	1ccd      	adds	r5, r1, #3
 800a45c:	f025 0503 	bic.w	r5, r5, #3
 800a460:	3508      	adds	r5, #8
 800a462:	2d0c      	cmp	r5, #12
 800a464:	bf38      	it	cc
 800a466:	250c      	movcc	r5, #12
 800a468:	2d00      	cmp	r5, #0
 800a46a:	4606      	mov	r6, r0
 800a46c:	db01      	blt.n	800a472 <_malloc_r+0x1a>
 800a46e:	42a9      	cmp	r1, r5
 800a470:	d903      	bls.n	800a47a <_malloc_r+0x22>
 800a472:	230c      	movs	r3, #12
 800a474:	6033      	str	r3, [r6, #0]
 800a476:	2000      	movs	r0, #0
 800a478:	bd70      	pop	{r4, r5, r6, pc}
 800a47a:	f000 fc5b 	bl	800ad34 <__malloc_lock>
 800a47e:	4a21      	ldr	r2, [pc, #132]	; (800a504 <_malloc_r+0xac>)
 800a480:	6814      	ldr	r4, [r2, #0]
 800a482:	4621      	mov	r1, r4
 800a484:	b991      	cbnz	r1, 800a4ac <_malloc_r+0x54>
 800a486:	4c20      	ldr	r4, [pc, #128]	; (800a508 <_malloc_r+0xb0>)
 800a488:	6823      	ldr	r3, [r4, #0]
 800a48a:	b91b      	cbnz	r3, 800a494 <_malloc_r+0x3c>
 800a48c:	4630      	mov	r0, r6
 800a48e:	f000 f8b9 	bl	800a604 <_sbrk_r>
 800a492:	6020      	str	r0, [r4, #0]
 800a494:	4629      	mov	r1, r5
 800a496:	4630      	mov	r0, r6
 800a498:	f000 f8b4 	bl	800a604 <_sbrk_r>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d124      	bne.n	800a4ea <_malloc_r+0x92>
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	6033      	str	r3, [r6, #0]
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f000 fc46 	bl	800ad36 <__malloc_unlock>
 800a4aa:	e7e4      	b.n	800a476 <_malloc_r+0x1e>
 800a4ac:	680b      	ldr	r3, [r1, #0]
 800a4ae:	1b5b      	subs	r3, r3, r5
 800a4b0:	d418      	bmi.n	800a4e4 <_malloc_r+0x8c>
 800a4b2:	2b0b      	cmp	r3, #11
 800a4b4:	d90f      	bls.n	800a4d6 <_malloc_r+0x7e>
 800a4b6:	600b      	str	r3, [r1, #0]
 800a4b8:	50cd      	str	r5, [r1, r3]
 800a4ba:	18cc      	adds	r4, r1, r3
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f000 fc3a 	bl	800ad36 <__malloc_unlock>
 800a4c2:	f104 000b 	add.w	r0, r4, #11
 800a4c6:	1d23      	adds	r3, r4, #4
 800a4c8:	f020 0007 	bic.w	r0, r0, #7
 800a4cc:	1ac3      	subs	r3, r0, r3
 800a4ce:	d0d3      	beq.n	800a478 <_malloc_r+0x20>
 800a4d0:	425a      	negs	r2, r3
 800a4d2:	50e2      	str	r2, [r4, r3]
 800a4d4:	e7d0      	b.n	800a478 <_malloc_r+0x20>
 800a4d6:	428c      	cmp	r4, r1
 800a4d8:	684b      	ldr	r3, [r1, #4]
 800a4da:	bf16      	itet	ne
 800a4dc:	6063      	strne	r3, [r4, #4]
 800a4de:	6013      	streq	r3, [r2, #0]
 800a4e0:	460c      	movne	r4, r1
 800a4e2:	e7eb      	b.n	800a4bc <_malloc_r+0x64>
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	6849      	ldr	r1, [r1, #4]
 800a4e8:	e7cc      	b.n	800a484 <_malloc_r+0x2c>
 800a4ea:	1cc4      	adds	r4, r0, #3
 800a4ec:	f024 0403 	bic.w	r4, r4, #3
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d005      	beq.n	800a500 <_malloc_r+0xa8>
 800a4f4:	1a21      	subs	r1, r4, r0
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f000 f884 	bl	800a604 <_sbrk_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d0cf      	beq.n	800a4a0 <_malloc_r+0x48>
 800a500:	6025      	str	r5, [r4, #0]
 800a502:	e7db      	b.n	800a4bc <_malloc_r+0x64>
 800a504:	20004280 	.word	0x20004280
 800a508:	20004284 	.word	0x20004284

0800a50c <iprintf>:
 800a50c:	b40f      	push	{r0, r1, r2, r3}
 800a50e:	4b0a      	ldr	r3, [pc, #40]	; (800a538 <iprintf+0x2c>)
 800a510:	b513      	push	{r0, r1, r4, lr}
 800a512:	681c      	ldr	r4, [r3, #0]
 800a514:	b124      	cbz	r4, 800a520 <iprintf+0x14>
 800a516:	69a3      	ldr	r3, [r4, #24]
 800a518:	b913      	cbnz	r3, 800a520 <iprintf+0x14>
 800a51a:	4620      	mov	r0, r4
 800a51c:	f000 fb06 	bl	800ab2c <__sinit>
 800a520:	ab05      	add	r3, sp, #20
 800a522:	9a04      	ldr	r2, [sp, #16]
 800a524:	68a1      	ldr	r1, [r4, #8]
 800a526:	9301      	str	r3, [sp, #4]
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fc7d 	bl	800ae28 <_vfiprintf_r>
 800a52e:	b002      	add	sp, #8
 800a530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a534:	b004      	add	sp, #16
 800a536:	4770      	bx	lr
 800a538:	20000058 	.word	0x20000058

0800a53c <_puts_r>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	460e      	mov	r6, r1
 800a540:	4605      	mov	r5, r0
 800a542:	b118      	cbz	r0, 800a54c <_puts_r+0x10>
 800a544:	6983      	ldr	r3, [r0, #24]
 800a546:	b90b      	cbnz	r3, 800a54c <_puts_r+0x10>
 800a548:	f000 faf0 	bl	800ab2c <__sinit>
 800a54c:	69ab      	ldr	r3, [r5, #24]
 800a54e:	68ac      	ldr	r4, [r5, #8]
 800a550:	b913      	cbnz	r3, 800a558 <_puts_r+0x1c>
 800a552:	4628      	mov	r0, r5
 800a554:	f000 faea 	bl	800ab2c <__sinit>
 800a558:	4b23      	ldr	r3, [pc, #140]	; (800a5e8 <_puts_r+0xac>)
 800a55a:	429c      	cmp	r4, r3
 800a55c:	d117      	bne.n	800a58e <_puts_r+0x52>
 800a55e:	686c      	ldr	r4, [r5, #4]
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	071b      	lsls	r3, r3, #28
 800a564:	d51d      	bpl.n	800a5a2 <_puts_r+0x66>
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	b1db      	cbz	r3, 800a5a2 <_puts_r+0x66>
 800a56a:	3e01      	subs	r6, #1
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a572:	3b01      	subs	r3, #1
 800a574:	60a3      	str	r3, [r4, #8]
 800a576:	b9e9      	cbnz	r1, 800a5b4 <_puts_r+0x78>
 800a578:	2b00      	cmp	r3, #0
 800a57a:	da2e      	bge.n	800a5da <_puts_r+0x9e>
 800a57c:	4622      	mov	r2, r4
 800a57e:	210a      	movs	r1, #10
 800a580:	4628      	mov	r0, r5
 800a582:	f000 f923 	bl	800a7cc <__swbuf_r>
 800a586:	3001      	adds	r0, #1
 800a588:	d011      	beq.n	800a5ae <_puts_r+0x72>
 800a58a:	200a      	movs	r0, #10
 800a58c:	e011      	b.n	800a5b2 <_puts_r+0x76>
 800a58e:	4b17      	ldr	r3, [pc, #92]	; (800a5ec <_puts_r+0xb0>)
 800a590:	429c      	cmp	r4, r3
 800a592:	d101      	bne.n	800a598 <_puts_r+0x5c>
 800a594:	68ac      	ldr	r4, [r5, #8]
 800a596:	e7e3      	b.n	800a560 <_puts_r+0x24>
 800a598:	4b15      	ldr	r3, [pc, #84]	; (800a5f0 <_puts_r+0xb4>)
 800a59a:	429c      	cmp	r4, r3
 800a59c:	bf08      	it	eq
 800a59e:	68ec      	ldreq	r4, [r5, #12]
 800a5a0:	e7de      	b.n	800a560 <_puts_r+0x24>
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f000 f963 	bl	800a870 <__swsetup_r>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d0dd      	beq.n	800a56a <_puts_r+0x2e>
 800a5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	da04      	bge.n	800a5c2 <_puts_r+0x86>
 800a5b8:	69a2      	ldr	r2, [r4, #24]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	dc06      	bgt.n	800a5cc <_puts_r+0x90>
 800a5be:	290a      	cmp	r1, #10
 800a5c0:	d004      	beq.n	800a5cc <_puts_r+0x90>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	6022      	str	r2, [r4, #0]
 800a5c8:	7019      	strb	r1, [r3, #0]
 800a5ca:	e7cf      	b.n	800a56c <_puts_r+0x30>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 f8fc 	bl	800a7cc <__swbuf_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d1c9      	bne.n	800a56c <_puts_r+0x30>
 800a5d8:	e7e9      	b.n	800a5ae <_puts_r+0x72>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	200a      	movs	r0, #10
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	6022      	str	r2, [r4, #0]
 800a5e2:	7018      	strb	r0, [r3, #0]
 800a5e4:	e7e5      	b.n	800a5b2 <_puts_r+0x76>
 800a5e6:	bf00      	nop
 800a5e8:	0800ba40 	.word	0x0800ba40
 800a5ec:	0800ba60 	.word	0x0800ba60
 800a5f0:	0800ba20 	.word	0x0800ba20

0800a5f4 <puts>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <puts+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f7ff bf9f 	b.w	800a53c <_puts_r>
 800a5fe:	bf00      	nop
 800a600:	20000058 	.word	0x20000058

0800a604 <_sbrk_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4c06      	ldr	r4, [pc, #24]	; (800a620 <_sbrk_r+0x1c>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4605      	mov	r5, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	f7f8 faaa 	bl	8002b68 <_sbrk>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_sbrk_r+0x1a>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_sbrk_r+0x1a>
 800a61c:	602b      	str	r3, [r5, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20004eb0 	.word	0x20004eb0

0800a624 <strdup>:
 800a624:	4b02      	ldr	r3, [pc, #8]	; (800a630 <strdup+0xc>)
 800a626:	4601      	mov	r1, r0
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f000 b803 	b.w	800a634 <_strdup_r>
 800a62e:	bf00      	nop
 800a630:	20000058 	.word	0x20000058

0800a634 <_strdup_r>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	4606      	mov	r6, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	460c      	mov	r4, r1
 800a63c:	f7f5 fdd2 	bl	80001e4 <strlen>
 800a640:	1c45      	adds	r5, r0, #1
 800a642:	4629      	mov	r1, r5
 800a644:	4630      	mov	r0, r6
 800a646:	f7ff ff07 	bl	800a458 <_malloc_r>
 800a64a:	4606      	mov	r6, r0
 800a64c:	b118      	cbz	r0, 800a656 <_strdup_r+0x22>
 800a64e:	462a      	mov	r2, r5
 800a650:	4621      	mov	r1, r4
 800a652:	f7ff fedf 	bl	800a414 <memcpy>
 800a656:	4630      	mov	r0, r6
 800a658:	bd70      	pop	{r4, r5, r6, pc}

0800a65a <strncmp>:
 800a65a:	b510      	push	{r4, lr}
 800a65c:	b16a      	cbz	r2, 800a67a <strncmp+0x20>
 800a65e:	3901      	subs	r1, #1
 800a660:	1884      	adds	r4, r0, r2
 800a662:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a666:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d103      	bne.n	800a676 <strncmp+0x1c>
 800a66e:	42a0      	cmp	r0, r4
 800a670:	d001      	beq.n	800a676 <strncmp+0x1c>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1f5      	bne.n	800a662 <strncmp+0x8>
 800a676:	1a98      	subs	r0, r3, r2
 800a678:	bd10      	pop	{r4, pc}
 800a67a:	4610      	mov	r0, r2
 800a67c:	e7fc      	b.n	800a678 <strncmp+0x1e>

0800a67e <strncpy>:
 800a67e:	b570      	push	{r4, r5, r6, lr}
 800a680:	3901      	subs	r1, #1
 800a682:	4604      	mov	r4, r0
 800a684:	b902      	cbnz	r2, 800a688 <strncpy+0xa>
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	4623      	mov	r3, r4
 800a68a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a68e:	f803 5b01 	strb.w	r5, [r3], #1
 800a692:	1e56      	subs	r6, r2, #1
 800a694:	b92d      	cbnz	r5, 800a6a2 <strncpy+0x24>
 800a696:	4414      	add	r4, r2
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d0f4      	beq.n	800a686 <strncpy+0x8>
 800a69c:	f803 5b01 	strb.w	r5, [r3], #1
 800a6a0:	e7fa      	b.n	800a698 <strncpy+0x1a>
 800a6a2:	461c      	mov	r4, r3
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	e7ed      	b.n	800a684 <strncpy+0x6>

0800a6a8 <_strtol_l.isra.0>:
 800a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	4689      	mov	r9, r1
 800a6b0:	4692      	mov	sl, r2
 800a6b2:	461e      	mov	r6, r3
 800a6b4:	460f      	mov	r7, r1
 800a6b6:	463d      	mov	r5, r7
 800a6b8:	9808      	ldr	r0, [sp, #32]
 800a6ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6be:	f000 fabf 	bl	800ac40 <__locale_ctype_ptr_l>
 800a6c2:	4420      	add	r0, r4
 800a6c4:	7843      	ldrb	r3, [r0, #1]
 800a6c6:	f013 0308 	ands.w	r3, r3, #8
 800a6ca:	d132      	bne.n	800a732 <_strtol_l.isra.0+0x8a>
 800a6cc:	2c2d      	cmp	r4, #45	; 0x2d
 800a6ce:	d132      	bne.n	800a736 <_strtol_l.isra.0+0x8e>
 800a6d0:	787c      	ldrb	r4, [r7, #1]
 800a6d2:	1cbd      	adds	r5, r7, #2
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	d05d      	beq.n	800a796 <_strtol_l.isra.0+0xee>
 800a6da:	2e10      	cmp	r6, #16
 800a6dc:	d109      	bne.n	800a6f2 <_strtol_l.isra.0+0x4a>
 800a6de:	2c30      	cmp	r4, #48	; 0x30
 800a6e0:	d107      	bne.n	800a6f2 <_strtol_l.isra.0+0x4a>
 800a6e2:	782b      	ldrb	r3, [r5, #0]
 800a6e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6e8:	2b58      	cmp	r3, #88	; 0x58
 800a6ea:	d14f      	bne.n	800a78c <_strtol_l.isra.0+0xe4>
 800a6ec:	786c      	ldrb	r4, [r5, #1]
 800a6ee:	2610      	movs	r6, #16
 800a6f0:	3502      	adds	r5, #2
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	bf14      	ite	ne
 800a6f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a6fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a6fe:	2700      	movs	r7, #0
 800a700:	fbb1 fcf6 	udiv	ip, r1, r6
 800a704:	4638      	mov	r0, r7
 800a706:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a70a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a70e:	2b09      	cmp	r3, #9
 800a710:	d817      	bhi.n	800a742 <_strtol_l.isra.0+0x9a>
 800a712:	461c      	mov	r4, r3
 800a714:	42a6      	cmp	r6, r4
 800a716:	dd23      	ble.n	800a760 <_strtol_l.isra.0+0xb8>
 800a718:	1c7b      	adds	r3, r7, #1
 800a71a:	d007      	beq.n	800a72c <_strtol_l.isra.0+0x84>
 800a71c:	4584      	cmp	ip, r0
 800a71e:	d31c      	bcc.n	800a75a <_strtol_l.isra.0+0xb2>
 800a720:	d101      	bne.n	800a726 <_strtol_l.isra.0+0x7e>
 800a722:	45a6      	cmp	lr, r4
 800a724:	db19      	blt.n	800a75a <_strtol_l.isra.0+0xb2>
 800a726:	fb00 4006 	mla	r0, r0, r6, r4
 800a72a:	2701      	movs	r7, #1
 800a72c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a730:	e7eb      	b.n	800a70a <_strtol_l.isra.0+0x62>
 800a732:	462f      	mov	r7, r5
 800a734:	e7bf      	b.n	800a6b6 <_strtol_l.isra.0+0xe>
 800a736:	2c2b      	cmp	r4, #43	; 0x2b
 800a738:	bf04      	itt	eq
 800a73a:	1cbd      	addeq	r5, r7, #2
 800a73c:	787c      	ldrbeq	r4, [r7, #1]
 800a73e:	461a      	mov	r2, r3
 800a740:	e7c9      	b.n	800a6d6 <_strtol_l.isra.0+0x2e>
 800a742:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a746:	2b19      	cmp	r3, #25
 800a748:	d801      	bhi.n	800a74e <_strtol_l.isra.0+0xa6>
 800a74a:	3c37      	subs	r4, #55	; 0x37
 800a74c:	e7e2      	b.n	800a714 <_strtol_l.isra.0+0x6c>
 800a74e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a752:	2b19      	cmp	r3, #25
 800a754:	d804      	bhi.n	800a760 <_strtol_l.isra.0+0xb8>
 800a756:	3c57      	subs	r4, #87	; 0x57
 800a758:	e7dc      	b.n	800a714 <_strtol_l.isra.0+0x6c>
 800a75a:	f04f 37ff 	mov.w	r7, #4294967295
 800a75e:	e7e5      	b.n	800a72c <_strtol_l.isra.0+0x84>
 800a760:	1c7b      	adds	r3, r7, #1
 800a762:	d108      	bne.n	800a776 <_strtol_l.isra.0+0xce>
 800a764:	2322      	movs	r3, #34	; 0x22
 800a766:	f8c8 3000 	str.w	r3, [r8]
 800a76a:	4608      	mov	r0, r1
 800a76c:	f1ba 0f00 	cmp.w	sl, #0
 800a770:	d107      	bne.n	800a782 <_strtol_l.isra.0+0xda>
 800a772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a776:	b102      	cbz	r2, 800a77a <_strtol_l.isra.0+0xd2>
 800a778:	4240      	negs	r0, r0
 800a77a:	f1ba 0f00 	cmp.w	sl, #0
 800a77e:	d0f8      	beq.n	800a772 <_strtol_l.isra.0+0xca>
 800a780:	b10f      	cbz	r7, 800a786 <_strtol_l.isra.0+0xde>
 800a782:	f105 39ff 	add.w	r9, r5, #4294967295
 800a786:	f8ca 9000 	str.w	r9, [sl]
 800a78a:	e7f2      	b.n	800a772 <_strtol_l.isra.0+0xca>
 800a78c:	2430      	movs	r4, #48	; 0x30
 800a78e:	2e00      	cmp	r6, #0
 800a790:	d1af      	bne.n	800a6f2 <_strtol_l.isra.0+0x4a>
 800a792:	2608      	movs	r6, #8
 800a794:	e7ad      	b.n	800a6f2 <_strtol_l.isra.0+0x4a>
 800a796:	2c30      	cmp	r4, #48	; 0x30
 800a798:	d0a3      	beq.n	800a6e2 <_strtol_l.isra.0+0x3a>
 800a79a:	260a      	movs	r6, #10
 800a79c:	e7a9      	b.n	800a6f2 <_strtol_l.isra.0+0x4a>
	...

0800a7a0 <strtol>:
 800a7a0:	4b08      	ldr	r3, [pc, #32]	; (800a7c4 <strtol+0x24>)
 800a7a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7a4:	681c      	ldr	r4, [r3, #0]
 800a7a6:	4d08      	ldr	r5, [pc, #32]	; (800a7c8 <strtol+0x28>)
 800a7a8:	6a23      	ldr	r3, [r4, #32]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	bf08      	it	eq
 800a7ae:	462b      	moveq	r3, r5
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	460a      	mov	r2, r1
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f7ff ff75 	bl	800a6a8 <_strtol_l.isra.0>
 800a7be:	b003      	add	sp, #12
 800a7c0:	bd30      	pop	{r4, r5, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000058 	.word	0x20000058
 800a7c8:	200000bc 	.word	0x200000bc

0800a7cc <__swbuf_r>:
 800a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ce:	460e      	mov	r6, r1
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	b118      	cbz	r0, 800a7de <__swbuf_r+0x12>
 800a7d6:	6983      	ldr	r3, [r0, #24]
 800a7d8:	b90b      	cbnz	r3, 800a7de <__swbuf_r+0x12>
 800a7da:	f000 f9a7 	bl	800ab2c <__sinit>
 800a7de:	4b21      	ldr	r3, [pc, #132]	; (800a864 <__swbuf_r+0x98>)
 800a7e0:	429c      	cmp	r4, r3
 800a7e2:	d12a      	bne.n	800a83a <__swbuf_r+0x6e>
 800a7e4:	686c      	ldr	r4, [r5, #4]
 800a7e6:	69a3      	ldr	r3, [r4, #24]
 800a7e8:	60a3      	str	r3, [r4, #8]
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	071a      	lsls	r2, r3, #28
 800a7ee:	d52e      	bpl.n	800a84e <__swbuf_r+0x82>
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	b363      	cbz	r3, 800a84e <__swbuf_r+0x82>
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	6820      	ldr	r0, [r4, #0]
 800a7f8:	1ac0      	subs	r0, r0, r3
 800a7fa:	6963      	ldr	r3, [r4, #20]
 800a7fc:	b2f6      	uxtb	r6, r6
 800a7fe:	4283      	cmp	r3, r0
 800a800:	4637      	mov	r7, r6
 800a802:	dc04      	bgt.n	800a80e <__swbuf_r+0x42>
 800a804:	4621      	mov	r1, r4
 800a806:	4628      	mov	r0, r5
 800a808:	f000 f926 	bl	800aa58 <_fflush_r>
 800a80c:	bb28      	cbnz	r0, 800a85a <__swbuf_r+0x8e>
 800a80e:	68a3      	ldr	r3, [r4, #8]
 800a810:	3b01      	subs	r3, #1
 800a812:	60a3      	str	r3, [r4, #8]
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	6022      	str	r2, [r4, #0]
 800a81a:	701e      	strb	r6, [r3, #0]
 800a81c:	6963      	ldr	r3, [r4, #20]
 800a81e:	3001      	adds	r0, #1
 800a820:	4283      	cmp	r3, r0
 800a822:	d004      	beq.n	800a82e <__swbuf_r+0x62>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	07db      	lsls	r3, r3, #31
 800a828:	d519      	bpl.n	800a85e <__swbuf_r+0x92>
 800a82a:	2e0a      	cmp	r6, #10
 800a82c:	d117      	bne.n	800a85e <__swbuf_r+0x92>
 800a82e:	4621      	mov	r1, r4
 800a830:	4628      	mov	r0, r5
 800a832:	f000 f911 	bl	800aa58 <_fflush_r>
 800a836:	b190      	cbz	r0, 800a85e <__swbuf_r+0x92>
 800a838:	e00f      	b.n	800a85a <__swbuf_r+0x8e>
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <__swbuf_r+0x9c>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d101      	bne.n	800a844 <__swbuf_r+0x78>
 800a840:	68ac      	ldr	r4, [r5, #8]
 800a842:	e7d0      	b.n	800a7e6 <__swbuf_r+0x1a>
 800a844:	4b09      	ldr	r3, [pc, #36]	; (800a86c <__swbuf_r+0xa0>)
 800a846:	429c      	cmp	r4, r3
 800a848:	bf08      	it	eq
 800a84a:	68ec      	ldreq	r4, [r5, #12]
 800a84c:	e7cb      	b.n	800a7e6 <__swbuf_r+0x1a>
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f000 f80d 	bl	800a870 <__swsetup_r>
 800a856:	2800      	cmp	r0, #0
 800a858:	d0cc      	beq.n	800a7f4 <__swbuf_r+0x28>
 800a85a:	f04f 37ff 	mov.w	r7, #4294967295
 800a85e:	4638      	mov	r0, r7
 800a860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a862:	bf00      	nop
 800a864:	0800ba40 	.word	0x0800ba40
 800a868:	0800ba60 	.word	0x0800ba60
 800a86c:	0800ba20 	.word	0x0800ba20

0800a870 <__swsetup_r>:
 800a870:	4b32      	ldr	r3, [pc, #200]	; (800a93c <__swsetup_r+0xcc>)
 800a872:	b570      	push	{r4, r5, r6, lr}
 800a874:	681d      	ldr	r5, [r3, #0]
 800a876:	4606      	mov	r6, r0
 800a878:	460c      	mov	r4, r1
 800a87a:	b125      	cbz	r5, 800a886 <__swsetup_r+0x16>
 800a87c:	69ab      	ldr	r3, [r5, #24]
 800a87e:	b913      	cbnz	r3, 800a886 <__swsetup_r+0x16>
 800a880:	4628      	mov	r0, r5
 800a882:	f000 f953 	bl	800ab2c <__sinit>
 800a886:	4b2e      	ldr	r3, [pc, #184]	; (800a940 <__swsetup_r+0xd0>)
 800a888:	429c      	cmp	r4, r3
 800a88a:	d10f      	bne.n	800a8ac <__swsetup_r+0x3c>
 800a88c:	686c      	ldr	r4, [r5, #4]
 800a88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a892:	b29a      	uxth	r2, r3
 800a894:	0715      	lsls	r5, r2, #28
 800a896:	d42c      	bmi.n	800a8f2 <__swsetup_r+0x82>
 800a898:	06d0      	lsls	r0, r2, #27
 800a89a:	d411      	bmi.n	800a8c0 <__swsetup_r+0x50>
 800a89c:	2209      	movs	r2, #9
 800a89e:	6032      	str	r2, [r6, #0]
 800a8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8aa:	e03e      	b.n	800a92a <__swsetup_r+0xba>
 800a8ac:	4b25      	ldr	r3, [pc, #148]	; (800a944 <__swsetup_r+0xd4>)
 800a8ae:	429c      	cmp	r4, r3
 800a8b0:	d101      	bne.n	800a8b6 <__swsetup_r+0x46>
 800a8b2:	68ac      	ldr	r4, [r5, #8]
 800a8b4:	e7eb      	b.n	800a88e <__swsetup_r+0x1e>
 800a8b6:	4b24      	ldr	r3, [pc, #144]	; (800a948 <__swsetup_r+0xd8>)
 800a8b8:	429c      	cmp	r4, r3
 800a8ba:	bf08      	it	eq
 800a8bc:	68ec      	ldreq	r4, [r5, #12]
 800a8be:	e7e6      	b.n	800a88e <__swsetup_r+0x1e>
 800a8c0:	0751      	lsls	r1, r2, #29
 800a8c2:	d512      	bpl.n	800a8ea <__swsetup_r+0x7a>
 800a8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8c6:	b141      	cbz	r1, 800a8da <__swsetup_r+0x6a>
 800a8c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	d002      	beq.n	800a8d6 <__swsetup_r+0x66>
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f000 fa31 	bl	800ad38 <_free_r>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f043 0308 	orr.w	r3, r3, #8
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	b94b      	cbnz	r3, 800a90a <__swsetup_r+0x9a>
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a900:	d003      	beq.n	800a90a <__swsetup_r+0x9a>
 800a902:	4621      	mov	r1, r4
 800a904:	4630      	mov	r0, r6
 800a906:	f000 f9c3 	bl	800ac90 <__smakebuf_r>
 800a90a:	89a2      	ldrh	r2, [r4, #12]
 800a90c:	f012 0301 	ands.w	r3, r2, #1
 800a910:	d00c      	beq.n	800a92c <__swsetup_r+0xbc>
 800a912:	2300      	movs	r3, #0
 800a914:	60a3      	str	r3, [r4, #8]
 800a916:	6963      	ldr	r3, [r4, #20]
 800a918:	425b      	negs	r3, r3
 800a91a:	61a3      	str	r3, [r4, #24]
 800a91c:	6923      	ldr	r3, [r4, #16]
 800a91e:	b953      	cbnz	r3, 800a936 <__swsetup_r+0xc6>
 800a920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a924:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a928:	d1ba      	bne.n	800a8a0 <__swsetup_r+0x30>
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	0792      	lsls	r2, r2, #30
 800a92e:	bf58      	it	pl
 800a930:	6963      	ldrpl	r3, [r4, #20]
 800a932:	60a3      	str	r3, [r4, #8]
 800a934:	e7f2      	b.n	800a91c <__swsetup_r+0xac>
 800a936:	2000      	movs	r0, #0
 800a938:	e7f7      	b.n	800a92a <__swsetup_r+0xba>
 800a93a:	bf00      	nop
 800a93c:	20000058 	.word	0x20000058
 800a940:	0800ba40 	.word	0x0800ba40
 800a944:	0800ba60 	.word	0x0800ba60
 800a948:	0800ba20 	.word	0x0800ba20

0800a94c <__sflush_r>:
 800a94c:	898a      	ldrh	r2, [r1, #12]
 800a94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a952:	4605      	mov	r5, r0
 800a954:	0710      	lsls	r0, r2, #28
 800a956:	460c      	mov	r4, r1
 800a958:	d458      	bmi.n	800aa0c <__sflush_r+0xc0>
 800a95a:	684b      	ldr	r3, [r1, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dc05      	bgt.n	800a96c <__sflush_r+0x20>
 800a960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a962:	2b00      	cmp	r3, #0
 800a964:	dc02      	bgt.n	800a96c <__sflush_r+0x20>
 800a966:	2000      	movs	r0, #0
 800a968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a96c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a96e:	2e00      	cmp	r6, #0
 800a970:	d0f9      	beq.n	800a966 <__sflush_r+0x1a>
 800a972:	2300      	movs	r3, #0
 800a974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a978:	682f      	ldr	r7, [r5, #0]
 800a97a:	6a21      	ldr	r1, [r4, #32]
 800a97c:	602b      	str	r3, [r5, #0]
 800a97e:	d032      	beq.n	800a9e6 <__sflush_r+0x9a>
 800a980:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	075a      	lsls	r2, r3, #29
 800a986:	d505      	bpl.n	800a994 <__sflush_r+0x48>
 800a988:	6863      	ldr	r3, [r4, #4]
 800a98a:	1ac0      	subs	r0, r0, r3
 800a98c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a98e:	b10b      	cbz	r3, 800a994 <__sflush_r+0x48>
 800a990:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a992:	1ac0      	subs	r0, r0, r3
 800a994:	2300      	movs	r3, #0
 800a996:	4602      	mov	r2, r0
 800a998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a99a:	6a21      	ldr	r1, [r4, #32]
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b0      	blx	r6
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	d106      	bne.n	800a9b4 <__sflush_r+0x68>
 800a9a6:	6829      	ldr	r1, [r5, #0]
 800a9a8:	291d      	cmp	r1, #29
 800a9aa:	d848      	bhi.n	800aa3e <__sflush_r+0xf2>
 800a9ac:	4a29      	ldr	r2, [pc, #164]	; (800aa54 <__sflush_r+0x108>)
 800a9ae:	40ca      	lsrs	r2, r1
 800a9b0:	07d6      	lsls	r6, r2, #31
 800a9b2:	d544      	bpl.n	800aa3e <__sflush_r+0xf2>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	6062      	str	r2, [r4, #4]
 800a9b8:	04d9      	lsls	r1, r3, #19
 800a9ba:	6922      	ldr	r2, [r4, #16]
 800a9bc:	6022      	str	r2, [r4, #0]
 800a9be:	d504      	bpl.n	800a9ca <__sflush_r+0x7e>
 800a9c0:	1c42      	adds	r2, r0, #1
 800a9c2:	d101      	bne.n	800a9c8 <__sflush_r+0x7c>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b903      	cbnz	r3, 800a9ca <__sflush_r+0x7e>
 800a9c8:	6560      	str	r0, [r4, #84]	; 0x54
 800a9ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9cc:	602f      	str	r7, [r5, #0]
 800a9ce:	2900      	cmp	r1, #0
 800a9d0:	d0c9      	beq.n	800a966 <__sflush_r+0x1a>
 800a9d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d6:	4299      	cmp	r1, r3
 800a9d8:	d002      	beq.n	800a9e0 <__sflush_r+0x94>
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f000 f9ac 	bl	800ad38 <_free_r>
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	6360      	str	r0, [r4, #52]	; 0x34
 800a9e4:	e7c0      	b.n	800a968 <__sflush_r+0x1c>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	47b0      	blx	r6
 800a9ec:	1c41      	adds	r1, r0, #1
 800a9ee:	d1c8      	bne.n	800a982 <__sflush_r+0x36>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0c5      	beq.n	800a982 <__sflush_r+0x36>
 800a9f6:	2b1d      	cmp	r3, #29
 800a9f8:	d001      	beq.n	800a9fe <__sflush_r+0xb2>
 800a9fa:	2b16      	cmp	r3, #22
 800a9fc:	d101      	bne.n	800aa02 <__sflush_r+0xb6>
 800a9fe:	602f      	str	r7, [r5, #0]
 800aa00:	e7b1      	b.n	800a966 <__sflush_r+0x1a>
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa08:	81a3      	strh	r3, [r4, #12]
 800aa0a:	e7ad      	b.n	800a968 <__sflush_r+0x1c>
 800aa0c:	690f      	ldr	r7, [r1, #16]
 800aa0e:	2f00      	cmp	r7, #0
 800aa10:	d0a9      	beq.n	800a966 <__sflush_r+0x1a>
 800aa12:	0793      	lsls	r3, r2, #30
 800aa14:	680e      	ldr	r6, [r1, #0]
 800aa16:	bf08      	it	eq
 800aa18:	694b      	ldreq	r3, [r1, #20]
 800aa1a:	600f      	str	r7, [r1, #0]
 800aa1c:	bf18      	it	ne
 800aa1e:	2300      	movne	r3, #0
 800aa20:	eba6 0807 	sub.w	r8, r6, r7
 800aa24:	608b      	str	r3, [r1, #8]
 800aa26:	f1b8 0f00 	cmp.w	r8, #0
 800aa2a:	dd9c      	ble.n	800a966 <__sflush_r+0x1a>
 800aa2c:	4643      	mov	r3, r8
 800aa2e:	463a      	mov	r2, r7
 800aa30:	6a21      	ldr	r1, [r4, #32]
 800aa32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa34:	4628      	mov	r0, r5
 800aa36:	47b0      	blx	r6
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	dc06      	bgt.n	800aa4a <__sflush_r+0xfe>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa42:	81a3      	strh	r3, [r4, #12]
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295
 800aa48:	e78e      	b.n	800a968 <__sflush_r+0x1c>
 800aa4a:	4407      	add	r7, r0
 800aa4c:	eba8 0800 	sub.w	r8, r8, r0
 800aa50:	e7e9      	b.n	800aa26 <__sflush_r+0xda>
 800aa52:	bf00      	nop
 800aa54:	20400001 	.word	0x20400001

0800aa58 <_fflush_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	690b      	ldr	r3, [r1, #16]
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	b1db      	cbz	r3, 800aa9a <_fflush_r+0x42>
 800aa62:	b118      	cbz	r0, 800aa6c <_fflush_r+0x14>
 800aa64:	6983      	ldr	r3, [r0, #24]
 800aa66:	b90b      	cbnz	r3, 800aa6c <_fflush_r+0x14>
 800aa68:	f000 f860 	bl	800ab2c <__sinit>
 800aa6c:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <_fflush_r+0x48>)
 800aa6e:	429c      	cmp	r4, r3
 800aa70:	d109      	bne.n	800aa86 <_fflush_r+0x2e>
 800aa72:	686c      	ldr	r4, [r5, #4]
 800aa74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa78:	b17b      	cbz	r3, 800aa9a <_fflush_r+0x42>
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa82:	f7ff bf63 	b.w	800a94c <__sflush_r>
 800aa86:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <_fflush_r+0x4c>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	d101      	bne.n	800aa90 <_fflush_r+0x38>
 800aa8c:	68ac      	ldr	r4, [r5, #8]
 800aa8e:	e7f1      	b.n	800aa74 <_fflush_r+0x1c>
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <_fflush_r+0x50>)
 800aa92:	429c      	cmp	r4, r3
 800aa94:	bf08      	it	eq
 800aa96:	68ec      	ldreq	r4, [r5, #12]
 800aa98:	e7ec      	b.n	800aa74 <_fflush_r+0x1c>
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	bd38      	pop	{r3, r4, r5, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800ba40 	.word	0x0800ba40
 800aaa4:	0800ba60 	.word	0x0800ba60
 800aaa8:	0800ba20 	.word	0x0800ba20

0800aaac <std>:
 800aaac:	2300      	movs	r3, #0
 800aaae:	b510      	push	{r4, lr}
 800aab0:	4604      	mov	r4, r0
 800aab2:	e9c0 3300 	strd	r3, r3, [r0]
 800aab6:	6083      	str	r3, [r0, #8]
 800aab8:	8181      	strh	r1, [r0, #12]
 800aaba:	6643      	str	r3, [r0, #100]	; 0x64
 800aabc:	81c2      	strh	r2, [r0, #14]
 800aabe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aac2:	6183      	str	r3, [r0, #24]
 800aac4:	4619      	mov	r1, r3
 800aac6:	2208      	movs	r2, #8
 800aac8:	305c      	adds	r0, #92	; 0x5c
 800aaca:	f7ff fcae 	bl	800a42a <memset>
 800aace:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <std+0x38>)
 800aad0:	6263      	str	r3, [r4, #36]	; 0x24
 800aad2:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <std+0x3c>)
 800aad4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <std+0x40>)
 800aad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <std+0x44>)
 800aadc:	6224      	str	r4, [r4, #32]
 800aade:	6323      	str	r3, [r4, #48]	; 0x30
 800aae0:	bd10      	pop	{r4, pc}
 800aae2:	bf00      	nop
 800aae4:	0800b365 	.word	0x0800b365
 800aae8:	0800b387 	.word	0x0800b387
 800aaec:	0800b3bf 	.word	0x0800b3bf
 800aaf0:	0800b3e3 	.word	0x0800b3e3

0800aaf4 <_cleanup_r>:
 800aaf4:	4901      	ldr	r1, [pc, #4]	; (800aafc <_cleanup_r+0x8>)
 800aaf6:	f000 b885 	b.w	800ac04 <_fwalk_reent>
 800aafa:	bf00      	nop
 800aafc:	0800aa59 	.word	0x0800aa59

0800ab00 <__sfmoreglue>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	1e4a      	subs	r2, r1, #1
 800ab04:	2568      	movs	r5, #104	; 0x68
 800ab06:	4355      	muls	r5, r2
 800ab08:	460e      	mov	r6, r1
 800ab0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab0e:	f7ff fca3 	bl	800a458 <_malloc_r>
 800ab12:	4604      	mov	r4, r0
 800ab14:	b140      	cbz	r0, 800ab28 <__sfmoreglue+0x28>
 800ab16:	2100      	movs	r1, #0
 800ab18:	e9c0 1600 	strd	r1, r6, [r0]
 800ab1c:	300c      	adds	r0, #12
 800ab1e:	60a0      	str	r0, [r4, #8]
 800ab20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab24:	f7ff fc81 	bl	800a42a <memset>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}

0800ab2c <__sinit>:
 800ab2c:	6983      	ldr	r3, [r0, #24]
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	4604      	mov	r4, r0
 800ab32:	bb33      	cbnz	r3, 800ab82 <__sinit+0x56>
 800ab34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ab38:	6503      	str	r3, [r0, #80]	; 0x50
 800ab3a:	4b12      	ldr	r3, [pc, #72]	; (800ab84 <__sinit+0x58>)
 800ab3c:	4a12      	ldr	r2, [pc, #72]	; (800ab88 <__sinit+0x5c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6282      	str	r2, [r0, #40]	; 0x28
 800ab42:	4298      	cmp	r0, r3
 800ab44:	bf04      	itt	eq
 800ab46:	2301      	moveq	r3, #1
 800ab48:	6183      	streq	r3, [r0, #24]
 800ab4a:	f000 f81f 	bl	800ab8c <__sfp>
 800ab4e:	6060      	str	r0, [r4, #4]
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 f81b 	bl	800ab8c <__sfp>
 800ab56:	60a0      	str	r0, [r4, #8]
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 f817 	bl	800ab8c <__sfp>
 800ab5e:	2200      	movs	r2, #0
 800ab60:	60e0      	str	r0, [r4, #12]
 800ab62:	2104      	movs	r1, #4
 800ab64:	6860      	ldr	r0, [r4, #4]
 800ab66:	f7ff ffa1 	bl	800aaac <std>
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	2109      	movs	r1, #9
 800ab6e:	68a0      	ldr	r0, [r4, #8]
 800ab70:	f7ff ff9c 	bl	800aaac <std>
 800ab74:	2202      	movs	r2, #2
 800ab76:	2112      	movs	r1, #18
 800ab78:	68e0      	ldr	r0, [r4, #12]
 800ab7a:	f7ff ff97 	bl	800aaac <std>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61a3      	str	r3, [r4, #24]
 800ab82:	bd10      	pop	{r4, pc}
 800ab84:	0800ba1c 	.word	0x0800ba1c
 800ab88:	0800aaf5 	.word	0x0800aaf5

0800ab8c <__sfp>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	4b1b      	ldr	r3, [pc, #108]	; (800abfc <__sfp+0x70>)
 800ab90:	681e      	ldr	r6, [r3, #0]
 800ab92:	69b3      	ldr	r3, [r6, #24]
 800ab94:	4607      	mov	r7, r0
 800ab96:	b913      	cbnz	r3, 800ab9e <__sfp+0x12>
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7ff ffc7 	bl	800ab2c <__sinit>
 800ab9e:	3648      	adds	r6, #72	; 0x48
 800aba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	d503      	bpl.n	800abb0 <__sfp+0x24>
 800aba8:	6833      	ldr	r3, [r6, #0]
 800abaa:	b133      	cbz	r3, 800abba <__sfp+0x2e>
 800abac:	6836      	ldr	r6, [r6, #0]
 800abae:	e7f7      	b.n	800aba0 <__sfp+0x14>
 800abb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abb4:	b16d      	cbz	r5, 800abd2 <__sfp+0x46>
 800abb6:	3468      	adds	r4, #104	; 0x68
 800abb8:	e7f4      	b.n	800aba4 <__sfp+0x18>
 800abba:	2104      	movs	r1, #4
 800abbc:	4638      	mov	r0, r7
 800abbe:	f7ff ff9f 	bl	800ab00 <__sfmoreglue>
 800abc2:	6030      	str	r0, [r6, #0]
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d1f1      	bne.n	800abac <__sfp+0x20>
 800abc8:	230c      	movs	r3, #12
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	4604      	mov	r4, r0
 800abce:	4620      	mov	r0, r4
 800abd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd2:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <__sfp+0x74>)
 800abd4:	6665      	str	r5, [r4, #100]	; 0x64
 800abd6:	e9c4 5500 	strd	r5, r5, [r4]
 800abda:	60a5      	str	r5, [r4, #8]
 800abdc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800abe0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800abe4:	2208      	movs	r2, #8
 800abe6:	4629      	mov	r1, r5
 800abe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abec:	f7ff fc1d 	bl	800a42a <memset>
 800abf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abf8:	e7e9      	b.n	800abce <__sfp+0x42>
 800abfa:	bf00      	nop
 800abfc:	0800ba1c 	.word	0x0800ba1c
 800ac00:	ffff0001 	.word	0xffff0001

0800ac04 <_fwalk_reent>:
 800ac04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac08:	4680      	mov	r8, r0
 800ac0a:	4689      	mov	r9, r1
 800ac0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac10:	2600      	movs	r6, #0
 800ac12:	b914      	cbnz	r4, 800ac1a <_fwalk_reent+0x16>
 800ac14:	4630      	mov	r0, r6
 800ac16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ac1e:	3f01      	subs	r7, #1
 800ac20:	d501      	bpl.n	800ac26 <_fwalk_reent+0x22>
 800ac22:	6824      	ldr	r4, [r4, #0]
 800ac24:	e7f5      	b.n	800ac12 <_fwalk_reent+0xe>
 800ac26:	89ab      	ldrh	r3, [r5, #12]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d907      	bls.n	800ac3c <_fwalk_reent+0x38>
 800ac2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac30:	3301      	adds	r3, #1
 800ac32:	d003      	beq.n	800ac3c <_fwalk_reent+0x38>
 800ac34:	4629      	mov	r1, r5
 800ac36:	4640      	mov	r0, r8
 800ac38:	47c8      	blx	r9
 800ac3a:	4306      	orrs	r6, r0
 800ac3c:	3568      	adds	r5, #104	; 0x68
 800ac3e:	e7ee      	b.n	800ac1e <_fwalk_reent+0x1a>

0800ac40 <__locale_ctype_ptr_l>:
 800ac40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ac44:	4770      	bx	lr

0800ac46 <__swhatbuf_r>:
 800ac46:	b570      	push	{r4, r5, r6, lr}
 800ac48:	460e      	mov	r6, r1
 800ac4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4e:	2900      	cmp	r1, #0
 800ac50:	b096      	sub	sp, #88	; 0x58
 800ac52:	4614      	mov	r4, r2
 800ac54:	461d      	mov	r5, r3
 800ac56:	da07      	bge.n	800ac68 <__swhatbuf_r+0x22>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	602b      	str	r3, [r5, #0]
 800ac5c:	89b3      	ldrh	r3, [r6, #12]
 800ac5e:	061a      	lsls	r2, r3, #24
 800ac60:	d410      	bmi.n	800ac84 <__swhatbuf_r+0x3e>
 800ac62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac66:	e00e      	b.n	800ac86 <__swhatbuf_r+0x40>
 800ac68:	466a      	mov	r2, sp
 800ac6a:	f000 fbed 	bl	800b448 <_fstat_r>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	dbf2      	blt.n	800ac58 <__swhatbuf_r+0x12>
 800ac72:	9a01      	ldr	r2, [sp, #4]
 800ac74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac7c:	425a      	negs	r2, r3
 800ac7e:	415a      	adcs	r2, r3
 800ac80:	602a      	str	r2, [r5, #0]
 800ac82:	e7ee      	b.n	800ac62 <__swhatbuf_r+0x1c>
 800ac84:	2340      	movs	r3, #64	; 0x40
 800ac86:	2000      	movs	r0, #0
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	b016      	add	sp, #88	; 0x58
 800ac8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac90 <__smakebuf_r>:
 800ac90:	898b      	ldrh	r3, [r1, #12]
 800ac92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac94:	079d      	lsls	r5, r3, #30
 800ac96:	4606      	mov	r6, r0
 800ac98:	460c      	mov	r4, r1
 800ac9a:	d507      	bpl.n	800acac <__smakebuf_r+0x1c>
 800ac9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	6123      	str	r3, [r4, #16]
 800aca4:	2301      	movs	r3, #1
 800aca6:	6163      	str	r3, [r4, #20]
 800aca8:	b002      	add	sp, #8
 800acaa:	bd70      	pop	{r4, r5, r6, pc}
 800acac:	ab01      	add	r3, sp, #4
 800acae:	466a      	mov	r2, sp
 800acb0:	f7ff ffc9 	bl	800ac46 <__swhatbuf_r>
 800acb4:	9900      	ldr	r1, [sp, #0]
 800acb6:	4605      	mov	r5, r0
 800acb8:	4630      	mov	r0, r6
 800acba:	f7ff fbcd 	bl	800a458 <_malloc_r>
 800acbe:	b948      	cbnz	r0, 800acd4 <__smakebuf_r+0x44>
 800acc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc4:	059a      	lsls	r2, r3, #22
 800acc6:	d4ef      	bmi.n	800aca8 <__smakebuf_r+0x18>
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	f043 0302 	orr.w	r3, r3, #2
 800acd0:	81a3      	strh	r3, [r4, #12]
 800acd2:	e7e3      	b.n	800ac9c <__smakebuf_r+0xc>
 800acd4:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <__smakebuf_r+0x7c>)
 800acd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	6020      	str	r0, [r4, #0]
 800acdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	9b00      	ldr	r3, [sp, #0]
 800ace4:	6163      	str	r3, [r4, #20]
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	6120      	str	r0, [r4, #16]
 800acea:	b15b      	cbz	r3, 800ad04 <__smakebuf_r+0x74>
 800acec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acf0:	4630      	mov	r0, r6
 800acf2:	f000 fbbb 	bl	800b46c <_isatty_r>
 800acf6:	b128      	cbz	r0, 800ad04 <__smakebuf_r+0x74>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	f023 0303 	bic.w	r3, r3, #3
 800acfe:	f043 0301 	orr.w	r3, r3, #1
 800ad02:	81a3      	strh	r3, [r4, #12]
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	431d      	orrs	r5, r3
 800ad08:	81a5      	strh	r5, [r4, #12]
 800ad0a:	e7cd      	b.n	800aca8 <__smakebuf_r+0x18>
 800ad0c:	0800aaf5 	.word	0x0800aaf5

0800ad10 <__ascii_mbtowc>:
 800ad10:	b082      	sub	sp, #8
 800ad12:	b901      	cbnz	r1, 800ad16 <__ascii_mbtowc+0x6>
 800ad14:	a901      	add	r1, sp, #4
 800ad16:	b142      	cbz	r2, 800ad2a <__ascii_mbtowc+0x1a>
 800ad18:	b14b      	cbz	r3, 800ad2e <__ascii_mbtowc+0x1e>
 800ad1a:	7813      	ldrb	r3, [r2, #0]
 800ad1c:	600b      	str	r3, [r1, #0]
 800ad1e:	7812      	ldrb	r2, [r2, #0]
 800ad20:	1c10      	adds	r0, r2, #0
 800ad22:	bf18      	it	ne
 800ad24:	2001      	movne	r0, #1
 800ad26:	b002      	add	sp, #8
 800ad28:	4770      	bx	lr
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	e7fb      	b.n	800ad26 <__ascii_mbtowc+0x16>
 800ad2e:	f06f 0001 	mvn.w	r0, #1
 800ad32:	e7f8      	b.n	800ad26 <__ascii_mbtowc+0x16>

0800ad34 <__malloc_lock>:
 800ad34:	4770      	bx	lr

0800ad36 <__malloc_unlock>:
 800ad36:	4770      	bx	lr

0800ad38 <_free_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	d045      	beq.n	800adcc <_free_r+0x94>
 800ad40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad44:	1f0c      	subs	r4, r1, #4
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	bfb8      	it	lt
 800ad4a:	18e4      	addlt	r4, r4, r3
 800ad4c:	f7ff fff2 	bl	800ad34 <__malloc_lock>
 800ad50:	4a1f      	ldr	r2, [pc, #124]	; (800add0 <_free_r+0x98>)
 800ad52:	6813      	ldr	r3, [r2, #0]
 800ad54:	4610      	mov	r0, r2
 800ad56:	b933      	cbnz	r3, 800ad66 <_free_r+0x2e>
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	6014      	str	r4, [r2, #0]
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad62:	f7ff bfe8 	b.w	800ad36 <__malloc_unlock>
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	d90c      	bls.n	800ad84 <_free_r+0x4c>
 800ad6a:	6821      	ldr	r1, [r4, #0]
 800ad6c:	1862      	adds	r2, r4, r1
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	bf04      	itt	eq
 800ad72:	681a      	ldreq	r2, [r3, #0]
 800ad74:	685b      	ldreq	r3, [r3, #4]
 800ad76:	6063      	str	r3, [r4, #4]
 800ad78:	bf04      	itt	eq
 800ad7a:	1852      	addeq	r2, r2, r1
 800ad7c:	6022      	streq	r2, [r4, #0]
 800ad7e:	6004      	str	r4, [r0, #0]
 800ad80:	e7ec      	b.n	800ad5c <_free_r+0x24>
 800ad82:	4613      	mov	r3, r2
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	b10a      	cbz	r2, 800ad8c <_free_r+0x54>
 800ad88:	42a2      	cmp	r2, r4
 800ad8a:	d9fa      	bls.n	800ad82 <_free_r+0x4a>
 800ad8c:	6819      	ldr	r1, [r3, #0]
 800ad8e:	1858      	adds	r0, r3, r1
 800ad90:	42a0      	cmp	r0, r4
 800ad92:	d10b      	bne.n	800adac <_free_r+0x74>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	4401      	add	r1, r0
 800ad98:	1858      	adds	r0, r3, r1
 800ad9a:	4282      	cmp	r2, r0
 800ad9c:	6019      	str	r1, [r3, #0]
 800ad9e:	d1dd      	bne.n	800ad5c <_free_r+0x24>
 800ada0:	6810      	ldr	r0, [r2, #0]
 800ada2:	6852      	ldr	r2, [r2, #4]
 800ada4:	605a      	str	r2, [r3, #4]
 800ada6:	4401      	add	r1, r0
 800ada8:	6019      	str	r1, [r3, #0]
 800adaa:	e7d7      	b.n	800ad5c <_free_r+0x24>
 800adac:	d902      	bls.n	800adb4 <_free_r+0x7c>
 800adae:	230c      	movs	r3, #12
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	e7d3      	b.n	800ad5c <_free_r+0x24>
 800adb4:	6820      	ldr	r0, [r4, #0]
 800adb6:	1821      	adds	r1, r4, r0
 800adb8:	428a      	cmp	r2, r1
 800adba:	bf04      	itt	eq
 800adbc:	6811      	ldreq	r1, [r2, #0]
 800adbe:	6852      	ldreq	r2, [r2, #4]
 800adc0:	6062      	str	r2, [r4, #4]
 800adc2:	bf04      	itt	eq
 800adc4:	1809      	addeq	r1, r1, r0
 800adc6:	6021      	streq	r1, [r4, #0]
 800adc8:	605c      	str	r4, [r3, #4]
 800adca:	e7c7      	b.n	800ad5c <_free_r+0x24>
 800adcc:	bd38      	pop	{r3, r4, r5, pc}
 800adce:	bf00      	nop
 800add0:	20004280 	.word	0x20004280

0800add4 <__sfputc_r>:
 800add4:	6893      	ldr	r3, [r2, #8]
 800add6:	3b01      	subs	r3, #1
 800add8:	2b00      	cmp	r3, #0
 800adda:	b410      	push	{r4}
 800addc:	6093      	str	r3, [r2, #8]
 800adde:	da08      	bge.n	800adf2 <__sfputc_r+0x1e>
 800ade0:	6994      	ldr	r4, [r2, #24]
 800ade2:	42a3      	cmp	r3, r4
 800ade4:	db01      	blt.n	800adea <__sfputc_r+0x16>
 800ade6:	290a      	cmp	r1, #10
 800ade8:	d103      	bne.n	800adf2 <__sfputc_r+0x1e>
 800adea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adee:	f7ff bced 	b.w	800a7cc <__swbuf_r>
 800adf2:	6813      	ldr	r3, [r2, #0]
 800adf4:	1c58      	adds	r0, r3, #1
 800adf6:	6010      	str	r0, [r2, #0]
 800adf8:	7019      	strb	r1, [r3, #0]
 800adfa:	4608      	mov	r0, r1
 800adfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <__sfputs_r>:
 800ae02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae04:	4606      	mov	r6, r0
 800ae06:	460f      	mov	r7, r1
 800ae08:	4614      	mov	r4, r2
 800ae0a:	18d5      	adds	r5, r2, r3
 800ae0c:	42ac      	cmp	r4, r5
 800ae0e:	d101      	bne.n	800ae14 <__sfputs_r+0x12>
 800ae10:	2000      	movs	r0, #0
 800ae12:	e007      	b.n	800ae24 <__sfputs_r+0x22>
 800ae14:	463a      	mov	r2, r7
 800ae16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ffda 	bl	800add4 <__sfputc_r>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d1f3      	bne.n	800ae0c <__sfputs_r+0xa>
 800ae24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae28 <_vfiprintf_r>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	b09d      	sub	sp, #116	; 0x74
 800ae30:	4617      	mov	r7, r2
 800ae32:	461d      	mov	r5, r3
 800ae34:	4606      	mov	r6, r0
 800ae36:	b118      	cbz	r0, 800ae40 <_vfiprintf_r+0x18>
 800ae38:	6983      	ldr	r3, [r0, #24]
 800ae3a:	b90b      	cbnz	r3, 800ae40 <_vfiprintf_r+0x18>
 800ae3c:	f7ff fe76 	bl	800ab2c <__sinit>
 800ae40:	4b7c      	ldr	r3, [pc, #496]	; (800b034 <_vfiprintf_r+0x20c>)
 800ae42:	429c      	cmp	r4, r3
 800ae44:	d158      	bne.n	800aef8 <_vfiprintf_r+0xd0>
 800ae46:	6874      	ldr	r4, [r6, #4]
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	0718      	lsls	r0, r3, #28
 800ae4c:	d55e      	bpl.n	800af0c <_vfiprintf_r+0xe4>
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d05b      	beq.n	800af0c <_vfiprintf_r+0xe4>
 800ae54:	2300      	movs	r3, #0
 800ae56:	9309      	str	r3, [sp, #36]	; 0x24
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae5e:	2330      	movs	r3, #48	; 0x30
 800ae60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae64:	9503      	str	r5, [sp, #12]
 800ae66:	f04f 0b01 	mov.w	fp, #1
 800ae6a:	46b8      	mov	r8, r7
 800ae6c:	4645      	mov	r5, r8
 800ae6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae72:	b10b      	cbz	r3, 800ae78 <_vfiprintf_r+0x50>
 800ae74:	2b25      	cmp	r3, #37	; 0x25
 800ae76:	d154      	bne.n	800af22 <_vfiprintf_r+0xfa>
 800ae78:	ebb8 0a07 	subs.w	sl, r8, r7
 800ae7c:	d00b      	beq.n	800ae96 <_vfiprintf_r+0x6e>
 800ae7e:	4653      	mov	r3, sl
 800ae80:	463a      	mov	r2, r7
 800ae82:	4621      	mov	r1, r4
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7ff ffbc 	bl	800ae02 <__sfputs_r>
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f000 80c2 	beq.w	800b014 <_vfiprintf_r+0x1ec>
 800ae90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae92:	4453      	add	r3, sl
 800ae94:	9309      	str	r3, [sp, #36]	; 0x24
 800ae96:	f898 3000 	ldrb.w	r3, [r8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 80ba 	beq.w	800b014 <_vfiprintf_r+0x1ec>
 800aea0:	2300      	movs	r3, #0
 800aea2:	f04f 32ff 	mov.w	r2, #4294967295
 800aea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	9307      	str	r3, [sp, #28]
 800aeae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeb2:	931a      	str	r3, [sp, #104]	; 0x68
 800aeb4:	46a8      	mov	r8, r5
 800aeb6:	2205      	movs	r2, #5
 800aeb8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800aebc:	485e      	ldr	r0, [pc, #376]	; (800b038 <_vfiprintf_r+0x210>)
 800aebe:	f7f5 f99f 	bl	8000200 <memchr>
 800aec2:	9b04      	ldr	r3, [sp, #16]
 800aec4:	bb78      	cbnz	r0, 800af26 <_vfiprintf_r+0xfe>
 800aec6:	06d9      	lsls	r1, r3, #27
 800aec8:	bf44      	itt	mi
 800aeca:	2220      	movmi	r2, #32
 800aecc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aed0:	071a      	lsls	r2, r3, #28
 800aed2:	bf44      	itt	mi
 800aed4:	222b      	movmi	r2, #43	; 0x2b
 800aed6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aeda:	782a      	ldrb	r2, [r5, #0]
 800aedc:	2a2a      	cmp	r2, #42	; 0x2a
 800aede:	d02a      	beq.n	800af36 <_vfiprintf_r+0x10e>
 800aee0:	9a07      	ldr	r2, [sp, #28]
 800aee2:	46a8      	mov	r8, r5
 800aee4:	2000      	movs	r0, #0
 800aee6:	250a      	movs	r5, #10
 800aee8:	4641      	mov	r1, r8
 800aeea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeee:	3b30      	subs	r3, #48	; 0x30
 800aef0:	2b09      	cmp	r3, #9
 800aef2:	d969      	bls.n	800afc8 <_vfiprintf_r+0x1a0>
 800aef4:	b360      	cbz	r0, 800af50 <_vfiprintf_r+0x128>
 800aef6:	e024      	b.n	800af42 <_vfiprintf_r+0x11a>
 800aef8:	4b50      	ldr	r3, [pc, #320]	; (800b03c <_vfiprintf_r+0x214>)
 800aefa:	429c      	cmp	r4, r3
 800aefc:	d101      	bne.n	800af02 <_vfiprintf_r+0xda>
 800aefe:	68b4      	ldr	r4, [r6, #8]
 800af00:	e7a2      	b.n	800ae48 <_vfiprintf_r+0x20>
 800af02:	4b4f      	ldr	r3, [pc, #316]	; (800b040 <_vfiprintf_r+0x218>)
 800af04:	429c      	cmp	r4, r3
 800af06:	bf08      	it	eq
 800af08:	68f4      	ldreq	r4, [r6, #12]
 800af0a:	e79d      	b.n	800ae48 <_vfiprintf_r+0x20>
 800af0c:	4621      	mov	r1, r4
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff fcae 	bl	800a870 <__swsetup_r>
 800af14:	2800      	cmp	r0, #0
 800af16:	d09d      	beq.n	800ae54 <_vfiprintf_r+0x2c>
 800af18:	f04f 30ff 	mov.w	r0, #4294967295
 800af1c:	b01d      	add	sp, #116	; 0x74
 800af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af22:	46a8      	mov	r8, r5
 800af24:	e7a2      	b.n	800ae6c <_vfiprintf_r+0x44>
 800af26:	4a44      	ldr	r2, [pc, #272]	; (800b038 <_vfiprintf_r+0x210>)
 800af28:	1a80      	subs	r0, r0, r2
 800af2a:	fa0b f000 	lsl.w	r0, fp, r0
 800af2e:	4318      	orrs	r0, r3
 800af30:	9004      	str	r0, [sp, #16]
 800af32:	4645      	mov	r5, r8
 800af34:	e7be      	b.n	800aeb4 <_vfiprintf_r+0x8c>
 800af36:	9a03      	ldr	r2, [sp, #12]
 800af38:	1d11      	adds	r1, r2, #4
 800af3a:	6812      	ldr	r2, [r2, #0]
 800af3c:	9103      	str	r1, [sp, #12]
 800af3e:	2a00      	cmp	r2, #0
 800af40:	db01      	blt.n	800af46 <_vfiprintf_r+0x11e>
 800af42:	9207      	str	r2, [sp, #28]
 800af44:	e004      	b.n	800af50 <_vfiprintf_r+0x128>
 800af46:	4252      	negs	r2, r2
 800af48:	f043 0302 	orr.w	r3, r3, #2
 800af4c:	9207      	str	r2, [sp, #28]
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	f898 3000 	ldrb.w	r3, [r8]
 800af54:	2b2e      	cmp	r3, #46	; 0x2e
 800af56:	d10e      	bne.n	800af76 <_vfiprintf_r+0x14e>
 800af58:	f898 3001 	ldrb.w	r3, [r8, #1]
 800af5c:	2b2a      	cmp	r3, #42	; 0x2a
 800af5e:	d138      	bne.n	800afd2 <_vfiprintf_r+0x1aa>
 800af60:	9b03      	ldr	r3, [sp, #12]
 800af62:	1d1a      	adds	r2, r3, #4
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	9203      	str	r2, [sp, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	bfb8      	it	lt
 800af6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800af70:	f108 0802 	add.w	r8, r8, #2
 800af74:	9305      	str	r3, [sp, #20]
 800af76:	4d33      	ldr	r5, [pc, #204]	; (800b044 <_vfiprintf_r+0x21c>)
 800af78:	f898 1000 	ldrb.w	r1, [r8]
 800af7c:	2203      	movs	r2, #3
 800af7e:	4628      	mov	r0, r5
 800af80:	f7f5 f93e 	bl	8000200 <memchr>
 800af84:	b140      	cbz	r0, 800af98 <_vfiprintf_r+0x170>
 800af86:	2340      	movs	r3, #64	; 0x40
 800af88:	1b40      	subs	r0, r0, r5
 800af8a:	fa03 f000 	lsl.w	r0, r3, r0
 800af8e:	9b04      	ldr	r3, [sp, #16]
 800af90:	4303      	orrs	r3, r0
 800af92:	f108 0801 	add.w	r8, r8, #1
 800af96:	9304      	str	r3, [sp, #16]
 800af98:	f898 1000 	ldrb.w	r1, [r8]
 800af9c:	482a      	ldr	r0, [pc, #168]	; (800b048 <_vfiprintf_r+0x220>)
 800af9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afa2:	2206      	movs	r2, #6
 800afa4:	f108 0701 	add.w	r7, r8, #1
 800afa8:	f7f5 f92a 	bl	8000200 <memchr>
 800afac:	2800      	cmp	r0, #0
 800afae:	d037      	beq.n	800b020 <_vfiprintf_r+0x1f8>
 800afb0:	4b26      	ldr	r3, [pc, #152]	; (800b04c <_vfiprintf_r+0x224>)
 800afb2:	bb1b      	cbnz	r3, 800affc <_vfiprintf_r+0x1d4>
 800afb4:	9b03      	ldr	r3, [sp, #12]
 800afb6:	3307      	adds	r3, #7
 800afb8:	f023 0307 	bic.w	r3, r3, #7
 800afbc:	3308      	adds	r3, #8
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc2:	444b      	add	r3, r9
 800afc4:	9309      	str	r3, [sp, #36]	; 0x24
 800afc6:	e750      	b.n	800ae6a <_vfiprintf_r+0x42>
 800afc8:	fb05 3202 	mla	r2, r5, r2, r3
 800afcc:	2001      	movs	r0, #1
 800afce:	4688      	mov	r8, r1
 800afd0:	e78a      	b.n	800aee8 <_vfiprintf_r+0xc0>
 800afd2:	2300      	movs	r3, #0
 800afd4:	f108 0801 	add.w	r8, r8, #1
 800afd8:	9305      	str	r3, [sp, #20]
 800afda:	4619      	mov	r1, r3
 800afdc:	250a      	movs	r5, #10
 800afde:	4640      	mov	r0, r8
 800afe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe4:	3a30      	subs	r2, #48	; 0x30
 800afe6:	2a09      	cmp	r2, #9
 800afe8:	d903      	bls.n	800aff2 <_vfiprintf_r+0x1ca>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0c3      	beq.n	800af76 <_vfiprintf_r+0x14e>
 800afee:	9105      	str	r1, [sp, #20]
 800aff0:	e7c1      	b.n	800af76 <_vfiprintf_r+0x14e>
 800aff2:	fb05 2101 	mla	r1, r5, r1, r2
 800aff6:	2301      	movs	r3, #1
 800aff8:	4680      	mov	r8, r0
 800affa:	e7f0      	b.n	800afde <_vfiprintf_r+0x1b6>
 800affc:	ab03      	add	r3, sp, #12
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	4622      	mov	r2, r4
 800b002:	4b13      	ldr	r3, [pc, #76]	; (800b050 <_vfiprintf_r+0x228>)
 800b004:	a904      	add	r1, sp, #16
 800b006:	4630      	mov	r0, r6
 800b008:	f3af 8000 	nop.w
 800b00c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b010:	4681      	mov	r9, r0
 800b012:	d1d5      	bne.n	800afc0 <_vfiprintf_r+0x198>
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	065b      	lsls	r3, r3, #25
 800b018:	f53f af7e 	bmi.w	800af18 <_vfiprintf_r+0xf0>
 800b01c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b01e:	e77d      	b.n	800af1c <_vfiprintf_r+0xf4>
 800b020:	ab03      	add	r3, sp, #12
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	4622      	mov	r2, r4
 800b026:	4b0a      	ldr	r3, [pc, #40]	; (800b050 <_vfiprintf_r+0x228>)
 800b028:	a904      	add	r1, sp, #16
 800b02a:	4630      	mov	r0, r6
 800b02c:	f000 f888 	bl	800b140 <_printf_i>
 800b030:	e7ec      	b.n	800b00c <_vfiprintf_r+0x1e4>
 800b032:	bf00      	nop
 800b034:	0800ba40 	.word	0x0800ba40
 800b038:	0800ba8a 	.word	0x0800ba8a
 800b03c:	0800ba60 	.word	0x0800ba60
 800b040:	0800ba20 	.word	0x0800ba20
 800b044:	0800ba90 	.word	0x0800ba90
 800b048:	0800ba94 	.word	0x0800ba94
 800b04c:	00000000 	.word	0x00000000
 800b050:	0800ae03 	.word	0x0800ae03

0800b054 <_printf_common>:
 800b054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b058:	4691      	mov	r9, r2
 800b05a:	461f      	mov	r7, r3
 800b05c:	688a      	ldr	r2, [r1, #8]
 800b05e:	690b      	ldr	r3, [r1, #16]
 800b060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b064:	4293      	cmp	r3, r2
 800b066:	bfb8      	it	lt
 800b068:	4613      	movlt	r3, r2
 800b06a:	f8c9 3000 	str.w	r3, [r9]
 800b06e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b072:	4606      	mov	r6, r0
 800b074:	460c      	mov	r4, r1
 800b076:	b112      	cbz	r2, 800b07e <_printf_common+0x2a>
 800b078:	3301      	adds	r3, #1
 800b07a:	f8c9 3000 	str.w	r3, [r9]
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	0699      	lsls	r1, r3, #26
 800b082:	bf42      	ittt	mi
 800b084:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b088:	3302      	addmi	r3, #2
 800b08a:	f8c9 3000 	strmi.w	r3, [r9]
 800b08e:	6825      	ldr	r5, [r4, #0]
 800b090:	f015 0506 	ands.w	r5, r5, #6
 800b094:	d107      	bne.n	800b0a6 <_printf_common+0x52>
 800b096:	f104 0a19 	add.w	sl, r4, #25
 800b09a:	68e3      	ldr	r3, [r4, #12]
 800b09c:	f8d9 2000 	ldr.w	r2, [r9]
 800b0a0:	1a9b      	subs	r3, r3, r2
 800b0a2:	42ab      	cmp	r3, r5
 800b0a4:	dc28      	bgt.n	800b0f8 <_printf_common+0xa4>
 800b0a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b0aa:	6822      	ldr	r2, [r4, #0]
 800b0ac:	3300      	adds	r3, #0
 800b0ae:	bf18      	it	ne
 800b0b0:	2301      	movne	r3, #1
 800b0b2:	0692      	lsls	r2, r2, #26
 800b0b4:	d42d      	bmi.n	800b112 <_printf_common+0xbe>
 800b0b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	4630      	mov	r0, r6
 800b0be:	47c0      	blx	r8
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d020      	beq.n	800b106 <_printf_common+0xb2>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	68e5      	ldr	r5, [r4, #12]
 800b0c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b0cc:	f003 0306 	and.w	r3, r3, #6
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	bf08      	it	eq
 800b0d4:	1aad      	subeq	r5, r5, r2
 800b0d6:	68a3      	ldr	r3, [r4, #8]
 800b0d8:	6922      	ldr	r2, [r4, #16]
 800b0da:	bf0c      	ite	eq
 800b0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0e0:	2500      	movne	r5, #0
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	bfc4      	itt	gt
 800b0e6:	1a9b      	subgt	r3, r3, r2
 800b0e8:	18ed      	addgt	r5, r5, r3
 800b0ea:	f04f 0900 	mov.w	r9, #0
 800b0ee:	341a      	adds	r4, #26
 800b0f0:	454d      	cmp	r5, r9
 800b0f2:	d11a      	bne.n	800b12a <_printf_common+0xd6>
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	e008      	b.n	800b10a <_printf_common+0xb6>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	4652      	mov	r2, sl
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	4630      	mov	r0, r6
 800b100:	47c0      	blx	r8
 800b102:	3001      	adds	r0, #1
 800b104:	d103      	bne.n	800b10e <_printf_common+0xba>
 800b106:	f04f 30ff 	mov.w	r0, #4294967295
 800b10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10e:	3501      	adds	r5, #1
 800b110:	e7c3      	b.n	800b09a <_printf_common+0x46>
 800b112:	18e1      	adds	r1, r4, r3
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	2030      	movs	r0, #48	; 0x30
 800b118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b11c:	4422      	add	r2, r4
 800b11e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b122:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b126:	3302      	adds	r3, #2
 800b128:	e7c5      	b.n	800b0b6 <_printf_common+0x62>
 800b12a:	2301      	movs	r3, #1
 800b12c:	4622      	mov	r2, r4
 800b12e:	4639      	mov	r1, r7
 800b130:	4630      	mov	r0, r6
 800b132:	47c0      	blx	r8
 800b134:	3001      	adds	r0, #1
 800b136:	d0e6      	beq.n	800b106 <_printf_common+0xb2>
 800b138:	f109 0901 	add.w	r9, r9, #1
 800b13c:	e7d8      	b.n	800b0f0 <_printf_common+0x9c>
	...

0800b140 <_printf_i>:
 800b140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b144:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b148:	460c      	mov	r4, r1
 800b14a:	7e09      	ldrb	r1, [r1, #24]
 800b14c:	b085      	sub	sp, #20
 800b14e:	296e      	cmp	r1, #110	; 0x6e
 800b150:	4617      	mov	r7, r2
 800b152:	4606      	mov	r6, r0
 800b154:	4698      	mov	r8, r3
 800b156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b158:	f000 80b3 	beq.w	800b2c2 <_printf_i+0x182>
 800b15c:	d822      	bhi.n	800b1a4 <_printf_i+0x64>
 800b15e:	2963      	cmp	r1, #99	; 0x63
 800b160:	d036      	beq.n	800b1d0 <_printf_i+0x90>
 800b162:	d80a      	bhi.n	800b17a <_printf_i+0x3a>
 800b164:	2900      	cmp	r1, #0
 800b166:	f000 80b9 	beq.w	800b2dc <_printf_i+0x19c>
 800b16a:	2958      	cmp	r1, #88	; 0x58
 800b16c:	f000 8083 	beq.w	800b276 <_printf_i+0x136>
 800b170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b174:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b178:	e032      	b.n	800b1e0 <_printf_i+0xa0>
 800b17a:	2964      	cmp	r1, #100	; 0x64
 800b17c:	d001      	beq.n	800b182 <_printf_i+0x42>
 800b17e:	2969      	cmp	r1, #105	; 0x69
 800b180:	d1f6      	bne.n	800b170 <_printf_i+0x30>
 800b182:	6820      	ldr	r0, [r4, #0]
 800b184:	6813      	ldr	r3, [r2, #0]
 800b186:	0605      	lsls	r5, r0, #24
 800b188:	f103 0104 	add.w	r1, r3, #4
 800b18c:	d52a      	bpl.n	800b1e4 <_printf_i+0xa4>
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6011      	str	r1, [r2, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	da03      	bge.n	800b19e <_printf_i+0x5e>
 800b196:	222d      	movs	r2, #45	; 0x2d
 800b198:	425b      	negs	r3, r3
 800b19a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b19e:	486f      	ldr	r0, [pc, #444]	; (800b35c <_printf_i+0x21c>)
 800b1a0:	220a      	movs	r2, #10
 800b1a2:	e039      	b.n	800b218 <_printf_i+0xd8>
 800b1a4:	2973      	cmp	r1, #115	; 0x73
 800b1a6:	f000 809d 	beq.w	800b2e4 <_printf_i+0x1a4>
 800b1aa:	d808      	bhi.n	800b1be <_printf_i+0x7e>
 800b1ac:	296f      	cmp	r1, #111	; 0x6f
 800b1ae:	d020      	beq.n	800b1f2 <_printf_i+0xb2>
 800b1b0:	2970      	cmp	r1, #112	; 0x70
 800b1b2:	d1dd      	bne.n	800b170 <_printf_i+0x30>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	f043 0320 	orr.w	r3, r3, #32
 800b1ba:	6023      	str	r3, [r4, #0]
 800b1bc:	e003      	b.n	800b1c6 <_printf_i+0x86>
 800b1be:	2975      	cmp	r1, #117	; 0x75
 800b1c0:	d017      	beq.n	800b1f2 <_printf_i+0xb2>
 800b1c2:	2978      	cmp	r1, #120	; 0x78
 800b1c4:	d1d4      	bne.n	800b170 <_printf_i+0x30>
 800b1c6:	2378      	movs	r3, #120	; 0x78
 800b1c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1cc:	4864      	ldr	r0, [pc, #400]	; (800b360 <_printf_i+0x220>)
 800b1ce:	e055      	b.n	800b27c <_printf_i+0x13c>
 800b1d0:	6813      	ldr	r3, [r2, #0]
 800b1d2:	1d19      	adds	r1, r3, #4
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6011      	str	r1, [r2, #0]
 800b1d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e08c      	b.n	800b2fe <_printf_i+0x1be>
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6011      	str	r1, [r2, #0]
 800b1e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1ec:	bf18      	it	ne
 800b1ee:	b21b      	sxthne	r3, r3
 800b1f0:	e7cf      	b.n	800b192 <_printf_i+0x52>
 800b1f2:	6813      	ldr	r3, [r2, #0]
 800b1f4:	6825      	ldr	r5, [r4, #0]
 800b1f6:	1d18      	adds	r0, r3, #4
 800b1f8:	6010      	str	r0, [r2, #0]
 800b1fa:	0628      	lsls	r0, r5, #24
 800b1fc:	d501      	bpl.n	800b202 <_printf_i+0xc2>
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	e002      	b.n	800b208 <_printf_i+0xc8>
 800b202:	0668      	lsls	r0, r5, #25
 800b204:	d5fb      	bpl.n	800b1fe <_printf_i+0xbe>
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	4854      	ldr	r0, [pc, #336]	; (800b35c <_printf_i+0x21c>)
 800b20a:	296f      	cmp	r1, #111	; 0x6f
 800b20c:	bf14      	ite	ne
 800b20e:	220a      	movne	r2, #10
 800b210:	2208      	moveq	r2, #8
 800b212:	2100      	movs	r1, #0
 800b214:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b218:	6865      	ldr	r5, [r4, #4]
 800b21a:	60a5      	str	r5, [r4, #8]
 800b21c:	2d00      	cmp	r5, #0
 800b21e:	f2c0 8095 	blt.w	800b34c <_printf_i+0x20c>
 800b222:	6821      	ldr	r1, [r4, #0]
 800b224:	f021 0104 	bic.w	r1, r1, #4
 800b228:	6021      	str	r1, [r4, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d13d      	bne.n	800b2aa <_printf_i+0x16a>
 800b22e:	2d00      	cmp	r5, #0
 800b230:	f040 808e 	bne.w	800b350 <_printf_i+0x210>
 800b234:	4665      	mov	r5, ip
 800b236:	2a08      	cmp	r2, #8
 800b238:	d10b      	bne.n	800b252 <_printf_i+0x112>
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	07db      	lsls	r3, r3, #31
 800b23e:	d508      	bpl.n	800b252 <_printf_i+0x112>
 800b240:	6923      	ldr	r3, [r4, #16]
 800b242:	6862      	ldr	r2, [r4, #4]
 800b244:	429a      	cmp	r2, r3
 800b246:	bfde      	ittt	le
 800b248:	2330      	movle	r3, #48	; 0x30
 800b24a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b24e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b252:	ebac 0305 	sub.w	r3, ip, r5
 800b256:	6123      	str	r3, [r4, #16]
 800b258:	f8cd 8000 	str.w	r8, [sp]
 800b25c:	463b      	mov	r3, r7
 800b25e:	aa03      	add	r2, sp, #12
 800b260:	4621      	mov	r1, r4
 800b262:	4630      	mov	r0, r6
 800b264:	f7ff fef6 	bl	800b054 <_printf_common>
 800b268:	3001      	adds	r0, #1
 800b26a:	d14d      	bne.n	800b308 <_printf_i+0x1c8>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	b005      	add	sp, #20
 800b272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b276:	4839      	ldr	r0, [pc, #228]	; (800b35c <_printf_i+0x21c>)
 800b278:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b27c:	6813      	ldr	r3, [r2, #0]
 800b27e:	6821      	ldr	r1, [r4, #0]
 800b280:	1d1d      	adds	r5, r3, #4
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6015      	str	r5, [r2, #0]
 800b286:	060a      	lsls	r2, r1, #24
 800b288:	d50b      	bpl.n	800b2a2 <_printf_i+0x162>
 800b28a:	07ca      	lsls	r2, r1, #31
 800b28c:	bf44      	itt	mi
 800b28e:	f041 0120 	orrmi.w	r1, r1, #32
 800b292:	6021      	strmi	r1, [r4, #0]
 800b294:	b91b      	cbnz	r3, 800b29e <_printf_i+0x15e>
 800b296:	6822      	ldr	r2, [r4, #0]
 800b298:	f022 0220 	bic.w	r2, r2, #32
 800b29c:	6022      	str	r2, [r4, #0]
 800b29e:	2210      	movs	r2, #16
 800b2a0:	e7b7      	b.n	800b212 <_printf_i+0xd2>
 800b2a2:	064d      	lsls	r5, r1, #25
 800b2a4:	bf48      	it	mi
 800b2a6:	b29b      	uxthmi	r3, r3
 800b2a8:	e7ef      	b.n	800b28a <_printf_i+0x14a>
 800b2aa:	4665      	mov	r5, ip
 800b2ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2b0:	fb02 3311 	mls	r3, r2, r1, r3
 800b2b4:	5cc3      	ldrb	r3, [r0, r3]
 800b2b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	d1f5      	bne.n	800b2ac <_printf_i+0x16c>
 800b2c0:	e7b9      	b.n	800b236 <_printf_i+0xf6>
 800b2c2:	6813      	ldr	r3, [r2, #0]
 800b2c4:	6825      	ldr	r5, [r4, #0]
 800b2c6:	6961      	ldr	r1, [r4, #20]
 800b2c8:	1d18      	adds	r0, r3, #4
 800b2ca:	6010      	str	r0, [r2, #0]
 800b2cc:	0628      	lsls	r0, r5, #24
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	d501      	bpl.n	800b2d6 <_printf_i+0x196>
 800b2d2:	6019      	str	r1, [r3, #0]
 800b2d4:	e002      	b.n	800b2dc <_printf_i+0x19c>
 800b2d6:	066a      	lsls	r2, r5, #25
 800b2d8:	d5fb      	bpl.n	800b2d2 <_printf_i+0x192>
 800b2da:	8019      	strh	r1, [r3, #0]
 800b2dc:	2300      	movs	r3, #0
 800b2de:	6123      	str	r3, [r4, #16]
 800b2e0:	4665      	mov	r5, ip
 800b2e2:	e7b9      	b.n	800b258 <_printf_i+0x118>
 800b2e4:	6813      	ldr	r3, [r2, #0]
 800b2e6:	1d19      	adds	r1, r3, #4
 800b2e8:	6011      	str	r1, [r2, #0]
 800b2ea:	681d      	ldr	r5, [r3, #0]
 800b2ec:	6862      	ldr	r2, [r4, #4]
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f7f4 ff85 	bl	8000200 <memchr>
 800b2f6:	b108      	cbz	r0, 800b2fc <_printf_i+0x1bc>
 800b2f8:	1b40      	subs	r0, r0, r5
 800b2fa:	6060      	str	r0, [r4, #4]
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	2300      	movs	r3, #0
 800b302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b306:	e7a7      	b.n	800b258 <_printf_i+0x118>
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	462a      	mov	r2, r5
 800b30c:	4639      	mov	r1, r7
 800b30e:	4630      	mov	r0, r6
 800b310:	47c0      	blx	r8
 800b312:	3001      	adds	r0, #1
 800b314:	d0aa      	beq.n	800b26c <_printf_i+0x12c>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	079b      	lsls	r3, r3, #30
 800b31a:	d413      	bmi.n	800b344 <_printf_i+0x204>
 800b31c:	68e0      	ldr	r0, [r4, #12]
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	4298      	cmp	r0, r3
 800b322:	bfb8      	it	lt
 800b324:	4618      	movlt	r0, r3
 800b326:	e7a3      	b.n	800b270 <_printf_i+0x130>
 800b328:	2301      	movs	r3, #1
 800b32a:	464a      	mov	r2, r9
 800b32c:	4639      	mov	r1, r7
 800b32e:	4630      	mov	r0, r6
 800b330:	47c0      	blx	r8
 800b332:	3001      	adds	r0, #1
 800b334:	d09a      	beq.n	800b26c <_printf_i+0x12c>
 800b336:	3501      	adds	r5, #1
 800b338:	68e3      	ldr	r3, [r4, #12]
 800b33a:	9a03      	ldr	r2, [sp, #12]
 800b33c:	1a9b      	subs	r3, r3, r2
 800b33e:	42ab      	cmp	r3, r5
 800b340:	dcf2      	bgt.n	800b328 <_printf_i+0x1e8>
 800b342:	e7eb      	b.n	800b31c <_printf_i+0x1dc>
 800b344:	2500      	movs	r5, #0
 800b346:	f104 0919 	add.w	r9, r4, #25
 800b34a:	e7f5      	b.n	800b338 <_printf_i+0x1f8>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1ac      	bne.n	800b2aa <_printf_i+0x16a>
 800b350:	7803      	ldrb	r3, [r0, #0]
 800b352:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b356:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b35a:	e76c      	b.n	800b236 <_printf_i+0xf6>
 800b35c:	0800ba9b 	.word	0x0800ba9b
 800b360:	0800baac 	.word	0x0800baac

0800b364 <__sread>:
 800b364:	b510      	push	{r4, lr}
 800b366:	460c      	mov	r4, r1
 800b368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36c:	f000 f8a0 	bl	800b4b0 <_read_r>
 800b370:	2800      	cmp	r0, #0
 800b372:	bfab      	itete	ge
 800b374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b376:	89a3      	ldrhlt	r3, [r4, #12]
 800b378:	181b      	addge	r3, r3, r0
 800b37a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b37e:	bfac      	ite	ge
 800b380:	6563      	strge	r3, [r4, #84]	; 0x54
 800b382:	81a3      	strhlt	r3, [r4, #12]
 800b384:	bd10      	pop	{r4, pc}

0800b386 <__swrite>:
 800b386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38a:	461f      	mov	r7, r3
 800b38c:	898b      	ldrh	r3, [r1, #12]
 800b38e:	05db      	lsls	r3, r3, #23
 800b390:	4605      	mov	r5, r0
 800b392:	460c      	mov	r4, r1
 800b394:	4616      	mov	r6, r2
 800b396:	d505      	bpl.n	800b3a4 <__swrite+0x1e>
 800b398:	2302      	movs	r3, #2
 800b39a:	2200      	movs	r2, #0
 800b39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a0:	f000 f874 	bl	800b48c <_lseek_r>
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3ae:	81a3      	strh	r3, [r4, #12]
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	f000 b823 	b.w	800b404 <_write_r>

0800b3be <__sseek>:
 800b3be:	b510      	push	{r4, lr}
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c6:	f000 f861 	bl	800b48c <_lseek_r>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	bf15      	itete	ne
 800b3d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3da:	81a3      	strheq	r3, [r4, #12]
 800b3dc:	bf18      	it	ne
 800b3de:	81a3      	strhne	r3, [r4, #12]
 800b3e0:	bd10      	pop	{r4, pc}

0800b3e2 <__sclose>:
 800b3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e6:	f000 b81f 	b.w	800b428 <_close_r>

0800b3ea <__ascii_wctomb>:
 800b3ea:	b149      	cbz	r1, 800b400 <__ascii_wctomb+0x16>
 800b3ec:	2aff      	cmp	r2, #255	; 0xff
 800b3ee:	bf85      	ittet	hi
 800b3f0:	238a      	movhi	r3, #138	; 0x8a
 800b3f2:	6003      	strhi	r3, [r0, #0]
 800b3f4:	700a      	strbls	r2, [r1, #0]
 800b3f6:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3fa:	bf98      	it	ls
 800b3fc:	2001      	movls	r0, #1
 800b3fe:	4770      	bx	lr
 800b400:	4608      	mov	r0, r1
 800b402:	4770      	bx	lr

0800b404 <_write_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4c07      	ldr	r4, [pc, #28]	; (800b424 <_write_r+0x20>)
 800b408:	4605      	mov	r5, r0
 800b40a:	4608      	mov	r0, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	2200      	movs	r2, #0
 800b410:	6022      	str	r2, [r4, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f7f7 fb57 	bl	8002ac6 <_write>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_write_r+0x1e>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_write_r+0x1e>
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	20004eb0 	.word	0x20004eb0

0800b428 <_close_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4c06      	ldr	r4, [pc, #24]	; (800b444 <_close_r+0x1c>)
 800b42c:	2300      	movs	r3, #0
 800b42e:	4605      	mov	r5, r0
 800b430:	4608      	mov	r0, r1
 800b432:	6023      	str	r3, [r4, #0]
 800b434:	f7f7 fb63 	bl	8002afe <_close>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d102      	bne.n	800b442 <_close_r+0x1a>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	b103      	cbz	r3, 800b442 <_close_r+0x1a>
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	20004eb0 	.word	0x20004eb0

0800b448 <_fstat_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4c07      	ldr	r4, [pc, #28]	; (800b468 <_fstat_r+0x20>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4605      	mov	r5, r0
 800b450:	4608      	mov	r0, r1
 800b452:	4611      	mov	r1, r2
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	f7f7 fb5e 	bl	8002b16 <_fstat>
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	d102      	bne.n	800b464 <_fstat_r+0x1c>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	b103      	cbz	r3, 800b464 <_fstat_r+0x1c>
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	bd38      	pop	{r3, r4, r5, pc}
 800b466:	bf00      	nop
 800b468:	20004eb0 	.word	0x20004eb0

0800b46c <_isatty_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4c06      	ldr	r4, [pc, #24]	; (800b488 <_isatty_r+0x1c>)
 800b470:	2300      	movs	r3, #0
 800b472:	4605      	mov	r5, r0
 800b474:	4608      	mov	r0, r1
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	f7f7 fb5d 	bl	8002b36 <_isatty>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d102      	bne.n	800b486 <_isatty_r+0x1a>
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	b103      	cbz	r3, 800b486 <_isatty_r+0x1a>
 800b484:	602b      	str	r3, [r5, #0]
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	20004eb0 	.word	0x20004eb0

0800b48c <_lseek_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4c07      	ldr	r4, [pc, #28]	; (800b4ac <_lseek_r+0x20>)
 800b490:	4605      	mov	r5, r0
 800b492:	4608      	mov	r0, r1
 800b494:	4611      	mov	r1, r2
 800b496:	2200      	movs	r2, #0
 800b498:	6022      	str	r2, [r4, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f7f7 fb56 	bl	8002b4c <_lseek>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_lseek_r+0x1e>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_lseek_r+0x1e>
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	20004eb0 	.word	0x20004eb0

0800b4b0 <_read_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4c07      	ldr	r4, [pc, #28]	; (800b4d0 <_read_r+0x20>)
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	6022      	str	r2, [r4, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	f7f7 fae4 	bl	8002a8c <_read>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d102      	bne.n	800b4ce <_read_r+0x1e>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	b103      	cbz	r3, 800b4ce <_read_r+0x1e>
 800b4cc:	602b      	str	r3, [r5, #0]
 800b4ce:	bd38      	pop	{r3, r4, r5, pc}
 800b4d0:	20004eb0 	.word	0x20004eb0

0800b4d4 <_init>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	bf00      	nop
 800b4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4da:	bc08      	pop	{r3}
 800b4dc:	469e      	mov	lr, r3
 800b4de:	4770      	bx	lr

0800b4e0 <_fini>:
 800b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e2:	bf00      	nop
 800b4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4e6:	bc08      	pop	{r3}
 800b4e8:	469e      	mov	lr, r3
 800b4ea:	4770      	bx	lr

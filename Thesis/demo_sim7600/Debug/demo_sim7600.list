
demo_sim7600.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800420c  0800420c  00020390  2**0
                  CONTENTS
  4 .ARM          00000008  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004214  08004214  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  0800421c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000390  080045ac  00020390  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  080045ac  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009368  00000000  00000000  000203c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a20  00000000  00000000  00029728  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  0002b148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  0002b898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020121  00000000  00000000  0002bf10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006db1  00000000  00000000  0004c031  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c16ad  00000000  00000000  00052de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011448f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002180  00000000  00000000  0011450c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000390 	.word	0x20000390
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ca0 	.word	0x08003ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000394 	.word	0x20000394
 80001cc:	08003ca0 	.word	0x08003ca0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <UARTIntHandler>:
err_t err;
uint8_t code;
volatile uint8_t answer = 0;
/***************************************Response from SIM7600**************************************************************/
void UARTIntHandler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
	uint8_t receivedChar = (uint8_t)((huart2).Instance->DR);
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <UARTIntHandler+0x58>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <UARTIntHandler+0x58>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <UARTIntHandler+0x58>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f042 0220 	orr.w	r2, r2, #32
 800059c:	60da      	str	r2, [r3, #12]
	if (__HAL_UART_GET_FLAG(&huart2, UART_IT_RXNE) == RESET) // if flag is set, data in DR register
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <UARTIntHandler+0x58>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <UARTIntHandler+0x5c>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <UARTIntHandler+0x5c>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d00b      	beq.n	80005c6 <UARTIntHandler+0x46>
		{
			commandBuffer[commandBufferIndex] = receivedChar;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <UARTIntHandler+0x60>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <UARTIntHandler+0x64>)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	5453      	strb	r3, [r2, r1]
			commandBufferIndex++;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <UARTIntHandler+0x60>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <UARTIntHandler+0x60>)
 80005c4:	701a      	strb	r2, [r3, #0]
		}
	gotCommandFlag = 1;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <UARTIntHandler+0x68>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	200004b8 	.word	0x200004b8
 80005dc:	10000020 	.word	0x10000020
 80005e0:	200003ad 	.word	0x200003ad
 80005e4:	200003e0 	.word	0x200003e0
 80005e8:	200003ac 	.word	0x200003ac

080005ec <sendATcommand>:
/*---------------------Send AT command---------------------------------------------------------------------------------------*/
uint8_t sendATcommand(char* ATcommand,char *respect_answer_1, uint32_t timeout)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
//	uint8_t status;
//	volatile uint8_t answer = 0;
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,1000);
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f7ff fde9 	bl	80001d0 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29b      	uxth	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	68f9      	ldr	r1, [r7, #12]
 800060c:	4823      	ldr	r0, [pc, #140]	; (800069c <sendATcommand+0xb0>)
 800060e:	f001 ff7a 	bl	8002506 <HAL_UART_Transmit>
	uint32_t  tickstart = HAL_GetTick();
 8000612:	f000 ffd9 	bl	80015c8 <HAL_GetTick>
 8000616:	6178      	str	r0, [r7, #20]
	timeout += (uint32_t)(uwTickFreq); // HERE
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <sendATcommand+0xb4>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
	do
	{
		if (gotCommandFlag == 1)
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <sendATcommand+0xb8>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b01      	cmp	r3, #1
 800062c:	d116      	bne.n	800065c <sendATcommand+0x70>
		{
			if (strstr(commandBuffer,respect_answer_1) != NULL)
 800062e:	68b9      	ldr	r1, [r7, #8]
 8000630:	481d      	ldr	r0, [pc, #116]	; (80006a8 <sendATcommand+0xbc>)
 8000632:	f002 fe80 	bl	8003336 <strstr>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d003      	beq.n	8000644 <sendATcommand+0x58>
			{
				answer = 1;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <sendATcommand+0xc0>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e00b      	b.n	800065c <sendATcommand+0x70>
//			{
//				answer = 3;
//			}
			else
			{
				code = ReturnCode(commandBuffer);
 8000644:	4818      	ldr	r0, [pc, #96]	; (80006a8 <sendATcommand+0xbc>)
 8000646:	f000 f859 	bl	80006fc <ReturnCode>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <sendATcommand+0xc4>)
 8000650:	701a      	strb	r2, [r3, #0]
				Handler_Err(code);
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <sendATcommand+0xc4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f82e 	bl	80006b8 <Handler_Err>
			}
		}
	}
	while((answer == 0) && ((HAL_GetTick() - tickstart) < timeout));
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <sendATcommand+0xc0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d107      	bne.n	8000676 <sendATcommand+0x8a>
 8000666:	f000 ffaf 	bl	80015c8 <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	429a      	cmp	r2, r3
 8000674:	d8d6      	bhi.n	8000624 <sendATcommand+0x38>
	gotCommandFlag = 0;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <sendATcommand+0xb8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	commandBufferIndex = 0;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <sendATcommand+0xc8>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
	memset(commandBuffer,'\0',100);
 8000682:	2264      	movs	r2, #100	; 0x64
 8000684:	2100      	movs	r1, #0
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <sendATcommand+0xbc>)
 8000688:	f002 fe0a 	bl	80032a0 <memset>
	return answer;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <sendATcommand+0xc0>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b2db      	uxtb	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200004b8 	.word	0x200004b8
 80006a0:	200001bc 	.word	0x200001bc
 80006a4:	200003ac 	.word	0x200003ac
 80006a8:	200003e0 	.word	0x200003e0
 80006ac:	200003ae 	.word	0x200003ae
 80006b0:	20000446 	.word	0x20000446
 80006b4:	200003ad 	.word	0x200003ad

080006b8 <Handler_Err>:
/*---------------------Handler ERROR------------------------------------------------------------------*/
uint8_t Handler_Err(uint8_t err_state)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	switch (err_state)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b06      	cmp	r3, #6
 80006c6:	d811      	bhi.n	80006ec <Handler_Err+0x34>
 80006c8:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <Handler_Err+0x18>)
 80006ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ce:	bf00      	nop
 80006d0:	080006ed 	.word	0x080006ed
 80006d4:	080006ed 	.word	0x080006ed
 80006d8:	080006ed 	.word	0x080006ed
 80006dc:	080006ed 	.word	0x080006ed
 80006e0:	080006ed 	.word	0x080006ed
 80006e4:	080006ed 	.word	0x080006ed
 80006e8:	080006ed 	.word	0x080006ed
		case CMQTTPUB:
			break;
		case CMQTTSUB:
			break;
		}
}
 80006ec:	bf00      	nop
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <ReturnCode>:
/*-----------------RETURN CODE--------------------------------------------------------------------------------*/
uint8_t ReturnCode(char str[])
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	char err[2];
	for (uint8_t i = 0; i< strlen(str); i++)
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e014      	b.n	8000734 <ReturnCode+0x38>
	{
		if (str[i] == ','){
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b2c      	cmp	r3, #44	; 0x2c
 8000714:	d10b      	bne.n	800072e <ReturnCode+0x32>
			err[0] = str[i+1];
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	3301      	adds	r3, #1
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	733b      	strb	r3, [r7, #12]
			err[1] = str[i+2];
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	3302      	adds	r3, #2
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i< strlen(str); i++)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3301      	adds	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	7bfc      	ldrb	r4, [r7, #15]
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff fd4a 	bl	80001d0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	429c      	cmp	r4, r3
 8000740:	d3e3      	bcc.n	800070a <ReturnCode+0xe>
		}
	}
	return atoi(err);
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fd7c 	bl	8003244 <atoi>
 800074c:	4603      	mov	r3, r0
 800074e:	b2db      	uxtb	r3, r3
}
 8000750:	4618      	mov	r0, r3
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <sendATcommand_2>:
//
//	return &buf[i + 1];
//}
/*---------------------Send AT command with 2 respect_answer------------------------------------------------------------------*/
uint8_t sendATcommand_2(char* ATcommand,char *respect_answer_1,char *respect_answer_2,uint32_t timeout)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	603b      	str	r3, [r7, #0]
	uint8_t status;
	volatile uint8_t answer = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,1000);
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f7ff fd30 	bl	80001d0 <strlen>
 8000770:	4603      	mov	r3, r0
 8000772:	b29b      	uxth	r3, r3
 8000774:	3301      	adds	r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	4820      	ldr	r0, [pc, #128]	; (8000800 <sendATcommand_2+0xa8>)
 8000780:	f001 fec1 	bl	8002506 <HAL_UART_Transmit>
	uint32_t  tickstart = HAL_GetTick();
 8000784:	f000 ff20 	bl	80015c8 <HAL_GetTick>
 8000788:	6178      	str	r0, [r7, #20]
	timeout += (uint32_t)(uwTickFreq); // HERE
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <sendATcommand_2+0xac>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	603b      	str	r3, [r7, #0]
	do
	{
		if (gotCommandFlag == 1)
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <sendATcommand_2+0xb0>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b01      	cmp	r3, #1
 800079e:	d112      	bne.n	80007c6 <sendATcommand_2+0x6e>
		{
			if (strstr(commandBuffer,respect_answer_1) != NULL)
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	481a      	ldr	r0, [pc, #104]	; (800080c <sendATcommand_2+0xb4>)
 80007a4:	f002 fdc7 	bl	8003336 <strstr>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <sendATcommand_2+0x5c>
			{
				answer = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	74fb      	strb	r3, [r7, #19]
 80007b2:	e008      	b.n	80007c6 <sendATcommand_2+0x6e>
			}
			else if (strstr(commandBuffer,respect_answer_2) != NULL)
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	4815      	ldr	r0, [pc, #84]	; (800080c <sendATcommand_2+0xb4>)
 80007b8:	f002 fdbd 	bl	8003336 <strstr>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <sendATcommand_2+0x6e>
			{
				answer = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	74fb      	strb	r3, [r7, #19]
			}
		}
	}
	while((answer == 0) && ((HAL_GetTick() - tickstart) < timeout));
 80007c6:	7cfb      	ldrb	r3, [r7, #19]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d107      	bne.n	80007de <sendATcommand_2+0x86>
 80007ce:	f000 fefb 	bl	80015c8 <HAL_GetTick>
 80007d2:	4602      	mov	r2, r0
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d8db      	bhi.n	8000796 <sendATcommand_2+0x3e>
	gotCommandFlag = 0;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <sendATcommand_2+0xb0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	commandBufferIndex = 0;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <sendATcommand_2+0xb8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	memset(commandBuffer,'\0',100);
 80007ea:	2264      	movs	r2, #100	; 0x64
 80007ec:	2100      	movs	r1, #0
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <sendATcommand_2+0xb4>)
 80007f0:	f002 fd56 	bl	80032a0 <memset>
	return answer;
 80007f4:	7cfb      	ldrb	r3, [r7, #19]
 80007f6:	b2db      	uxtb	r3, r3
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200004b8 	.word	0x200004b8
 8000804:	200001bc 	.word	0x200001bc
 8000808:	200003ac 	.word	0x200003ac
 800080c:	200003e0 	.word	0x200003e0
 8000810:	200003ad 	.word	0x200003ad

08000814 <createJson_v1>:
/*
 * return mqtt error code
 *
 * */
uint8_t createJson_v1(char demo[50],char name_dev[10], uint16_t val, uint8_t time[6])
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4613      	mov	r3, r2
 8000822:	80fb      	strh	r3, [r7, #6]
	memset(demo,0,100);
 8000824:	2264      	movs	r2, #100	; 0x64
 8000826:	2100      	movs	r1, #0
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f002 fd39 	bl	80032a0 <memset>
	strcat(demo,name_dev);
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f002 fd71 	bl	8003318 <strcat>
	strcat(demo,":");
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f7ff fcca 	bl	80001d0 <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	4969      	ldr	r1, [pc, #420]	; (80009ec <createJson_v1+0x1d8>)
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	8013      	strh	r3, [r2, #0]
    strcat(demo,"[{time:");
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff fcbe 	bl	80001d0 <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	4964      	ldr	r1, [pc, #400]	; (80009f0 <createJson_v1+0x1dc>)
 800085e:	461a      	mov	r2, r3
 8000860:	460b      	mov	r3, r1
 8000862:	cb03      	ldmia	r3!, {r0, r1}
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	6051      	str	r1, [r2, #4]
    strcat(demo,itoa_user(time[0], 10)); // Hour
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	210a      	movs	r1, #10
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f8ec 	bl	8000a4c <itoa_user>
 8000874:	4603      	mov	r3, r0
 8000876:	4619      	mov	r1, r3
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f002 fd4d 	bl	8003318 <strcat>
    strcat(demo,":");
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fca6 	bl	80001d0 <strlen>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	4957      	ldr	r1, [pc, #348]	; (80009ec <createJson_v1+0x1d8>)
 800088e:	461a      	mov	r2, r3
 8000890:	460b      	mov	r3, r1
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	8013      	strh	r3, [r2, #0]
    strcat(demo,itoa_user(time[1], 10)); // Minute
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	210a      	movs	r1, #10
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f8d4 	bl	8000a4c <itoa_user>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4619      	mov	r1, r3
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f002 fd35 	bl	8003318 <strcat>
    strcat(demo,":");
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f7ff fc8e 	bl	80001d0 <strlen>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	494b      	ldr	r1, [pc, #300]	; (80009ec <createJson_v1+0x1d8>)
 80008be:	461a      	mov	r2, r3
 80008c0:	460b      	mov	r3, r1
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	8013      	strh	r3, [r2, #0]
    strcat(demo,itoa_user(time[2], 10)); //Second
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	3302      	adds	r3, #2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	210a      	movs	r1, #10
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f8bc 	bl	8000a4c <itoa_user>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4619      	mov	r1, r3
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f002 fd1d 	bl	8003318 <strcat>
    strcat(demo," ");
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f7ff fc76 	bl	80001d0 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	4941      	ldr	r1, [pc, #260]	; (80009f4 <createJson_v1+0x1e0>)
 80008ee:	461a      	mov	r2, r3
 80008f0:	460b      	mov	r3, r1
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	8013      	strh	r3, [r2, #0]
    strcat(demo,itoa_user(time[3], 10));// Month
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	3303      	adds	r3, #3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	210a      	movs	r1, #10
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f8a4 	bl	8000a4c <itoa_user>
 8000904:	4603      	mov	r3, r0
 8000906:	4619      	mov	r1, r3
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f002 fd05 	bl	8003318 <strcat>
    strcat(demo,".");
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f7ff fc5e 	bl	80001d0 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	4936      	ldr	r1, [pc, #216]	; (80009f8 <createJson_v1+0x1e4>)
 800091e:	461a      	mov	r2, r3
 8000920:	460b      	mov	r3, r1
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	8013      	strh	r3, [r2, #0]
    strcat(demo,itoa_user(time[4], 10)); // Day
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	3304      	adds	r3, #4
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	210a      	movs	r1, #10
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f88c 	bl	8000a4c <itoa_user>
 8000934:	4603      	mov	r3, r0
 8000936:	4619      	mov	r1, r3
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f002 fced 	bl	8003318 <strcat>
    strcat(demo,".");
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff fc46 	bl	80001d0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	492a      	ldr	r1, [pc, #168]	; (80009f8 <createJson_v1+0x1e4>)
 800094e:	461a      	mov	r2, r3
 8000950:	460b      	mov	r3, r1
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	8013      	strh	r3, [r2, #0]
    strcat(demo,itoa_user(time[5], 10)); //Year
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3305      	adds	r3, #5
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	210a      	movs	r1, #10
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f874 	bl	8000a4c <itoa_user>
 8000964:	4603      	mov	r3, r0
 8000966:	4619      	mov	r1, r3
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f002 fcd5 	bl	8003318 <strcat>
    strcat(demo,",");
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff fc2e 	bl	80001d0 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	491f      	ldr	r1, [pc, #124]	; (80009fc <createJson_v1+0x1e8>)
 800097e:	461a      	mov	r2, r3
 8000980:	460b      	mov	r3, r1
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	8013      	strh	r3, [r2, #0]
    strcat(demo,"value");
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff fc22 	bl	80001d0 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <createJson_v1+0x1ec>)
 8000996:	6810      	ldr	r0, [r2, #0]
 8000998:	6018      	str	r0, [r3, #0]
 800099a:	8892      	ldrh	r2, [r2, #4]
 800099c:	809a      	strh	r2, [r3, #4]
    strcat(demo,":");
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff fc16 	bl	80001d0 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	490f      	ldr	r1, [pc, #60]	; (80009ec <createJson_v1+0x1d8>)
 80009ae:	461a      	mov	r2, r3
 80009b0:	460b      	mov	r3, r1
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	8013      	strh	r3, [r2, #0]
    strcat(demo,itoa_user(val, 10));
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	210a      	movs	r1, #10
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f846 	bl	8000a4c <itoa_user>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4619      	mov	r1, r3
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f002 fca7 	bl	8003318 <strcat>
    strcat(demo,"}]");
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f7ff fc00 	bl	80001d0 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <createJson_v1+0x1f0>)
 80009da:	8811      	ldrh	r1, [r2, #0]
 80009dc:	7892      	ldrb	r2, [r2, #2]
 80009de:	8019      	strh	r1, [r3, #0]
 80009e0:	709a      	strb	r2, [r3, #2]

	}
 80009e2:	bf00      	nop
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	08003cb8 	.word	0x08003cb8
 80009f0:	08003cbc 	.word	0x08003cbc
 80009f4:	08003cc4 	.word	0x08003cc4
 80009f8:	08003cc8 	.word	0x08003cc8
 80009fc:	08003ccc 	.word	0x08003ccc
 8000a00:	08003cd0 	.word	0x08003cd0
 8000a04:	08003cd8 	.word	0x08003cd8

08000a08 <Get_Time>:
    strcat(buffer,alias);
    strcat(buffer,"\"");
    strcat(buffer,"}");
}
uint8_t Get_Time(uint8_t time[6])
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	time[0] = 10;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	220a      	movs	r2, #10
 8000a14:	701a      	strb	r2, [r3, #0]
	time[1] = 10;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	220a      	movs	r2, #10
 8000a1c:	701a      	strb	r2, [r3, #0]
	time[2] = 10;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3302      	adds	r3, #2
 8000a22:	220a      	movs	r2, #10
 8000a24:	701a      	strb	r2, [r3, #0]
	time[3] = 4;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3303      	adds	r3, #3
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	701a      	strb	r2, [r3, #0]
	time[4] = 25;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2219      	movs	r2, #25
 8000a34:	701a      	strb	r2, [r3, #0]
	time[5] = 21;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3305      	adds	r3, #5
 8000a3a:	2215      	movs	r2, #21
 8000a3c:	701a      	strb	r2, [r3, #0]
	}
 8000a3e:	bf00      	nop
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <itoa_user>:
/**
 * @brief
 * @param
 * @retval None
 */
uint8_t* itoa_user(uint32_t val, uint8_t base) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
	static uint8_t buf[32] = { 0 };  // 32 bits
	int i = 30;
 8000a58:	231e      	movs	r3, #30
 8000a5a:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d11c      	bne.n	8000a9c <itoa_user+0x50>
		buf[i--] = '0';
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	1e5a      	subs	r2, r3, #1
 8000a66:	60fa      	str	r2, [r7, #12]
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <itoa_user+0x70>)
 8000a6a:	2130      	movs	r1, #48	; 0x30
 8000a6c:	54d1      	strb	r1, [r2, r3]
	for (; val && i; --i, val /= base)
 8000a6e:	e015      	b.n	8000a9c <itoa_user+0x50>
		buf[i] = "0123456789abcdef"[val % base];
 8000a70:	78fa      	ldrb	r2, [r7, #3]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a78:	fb02 f201 	mul.w	r2, r2, r1
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <itoa_user+0x74>)
 8000a80:	5cd1      	ldrb	r1, [r2, r3]
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <itoa_user+0x70>)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	460a      	mov	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]
	for (; val && i; --i, val /= base)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <itoa_user+0x5c>
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1e3      	bne.n	8000a70 <itoa_user+0x24>

	return &buf[i + 1];
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <itoa_user+0x70>)
 8000aae:	4413      	add	r3, r2
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	200003b0 	.word	0x200003b0
 8000ac0:	08003d04 	.word	0x08003d04

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fd18 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f84e 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f000 f90a 	bl	8000ce8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ad4:	f000 f8b4 	bl	8000c40 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ad8:	f000 f8dc 	bl	8000c94 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <main+0x84>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <main+0x84>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0220 	orr.w	r2, r2, #32
 8000aea:	60da      	str	r2, [r3, #12]
  sendATcommand("AT+NETCLOSE\r\n","OK",2000);
 8000aec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000af0:	4916      	ldr	r1, [pc, #88]	; (8000b4c <main+0x88>)
 8000af2:	4817      	ldr	r0, [pc, #92]	; (8000b50 <main+0x8c>)
 8000af4:	f7ff fd7a 	bl	80005ec <sendATcommand>
  answer = Init_SIM7600();
 8000af8:	f000 f950 	bl	8000d9c <Init_SIM7600>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <main+0x90>)
 8000b02:	701a      	strb	r2, [r3, #0]
  answer_1 =  Check_NETSIMstate();
 8000b04:	f000 f990 	bl	8000e28 <Check_NETSIMstate>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <main+0x94>)
 8000b0e:	701a      	strb	r2, [r3, #0]
  answer_2 = setupCONNECTION();
 8000b10:	f000 f9ca 	bl	8000ea8 <setupCONNECTION>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <main+0x98>)
 8000b1a:	701a      	strb	r2, [r3, #0]
  state = Subscibe(sub,0);
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <main+0x9c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fa62 	bl	8000fec <Subscibe>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <main+0xa0>)
 8000b2e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Publish(pub,0);
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <main+0xa4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fa9e 	bl	8001078 <Publish>
	  HAL_Delay(3000);
 8000b3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b40:	f000 fd4e 	bl	80015e0 <HAL_Delay>
	  Publish(pub,0);
 8000b44:	e7f4      	b.n	8000b30 <main+0x6c>
 8000b46:	bf00      	nop
 8000b48:	200004b8 	.word	0x200004b8
 8000b4c:	08003d50 	.word	0x08003d50
 8000b50:	08003d54 	.word	0x08003d54
 8000b54:	200003ae 	.word	0x200003ae
 8000b58:	2000048c 	.word	0x2000048c
 8000b5c:	20000448 	.word	0x20000448
 8000b60:	20000000 	.word	0x20000000
 8000b64:	2000044a 	.word	0x2000044a
 8000b68:	20000004 	.word	0x20000004

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	; 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2230      	movs	r2, #48	; 0x30
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fb90 	bl	80032a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <SystemClock_Config+0xcc>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a27      	ldr	r2, [pc, #156]	; (8000c38 <SystemClock_Config+0xcc>)
 8000b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <SystemClock_Config+0xcc>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <SystemClock_Config+0xd0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <SystemClock_Config+0xd0>)
 8000bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <SystemClock_Config+0xd0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000be0:	23a8      	movs	r3, #168	; 0xa8
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0320 	add.w	r3, r7, #32
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 ffff 	bl	8001bf4 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bfc:	f000 f8c6 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fa58 	bl	80020d4 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c2a:	f000 f8af 	bl	8000d8c <Error_Handler>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3750      	adds	r7, #80	; 0x50
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40007000 	.word	0x40007000

08000c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_USART1_UART_Init+0x50>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c78:	f001 fbf8 	bl	800246c <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c82:	f000 f883 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000044c 	.word	0x2000044c
 8000c90:	40011000 	.word	0x40011000

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_USART2_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f001 fbce 	bl	800246c <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f000 f859 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200004b8 	.word	0x200004b8
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_GPIO_Init+0x9c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <MX_GPIO_Init+0xa0>)
 8000d5a:	f000 ff31 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d5e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4619      	mov	r1, r3
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_GPIO_Init+0xa0>)
 8000d78:	f000 fd88 	bl	800188c <HAL_GPIO_Init>

}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020c00 	.word	0x40020c00

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <Init_SIM7600>:
/**AT+CPIN?<CR><LF>  kiểm tra SIM
 * AT+CREG?<CR><LF>  kiểm tra đăng ký mạng
 * AT+CSQ<CR><LF>  kiểm tra chất lượng mạng
 */
uint8_t Init_SIM7600(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	volatile uint8_t  status = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	71bb      	strb	r3, [r7, #6]
	// kích chân PEN để mở nguồn module
	if (sendATcommand("AT\r\n","OK",2000) == 1 && sendATcommand("AT\r\n","OK",2000) == 1 && sendATcommand("ATE0\r\n","OK",2000) == 1 && sendATcommand("AT&W\r\n","OK",2000))
 8000da6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000daa:	491b      	ldr	r1, [pc, #108]	; (8000e18 <Init_SIM7600+0x7c>)
 8000dac:	481b      	ldr	r0, [pc, #108]	; (8000e1c <Init_SIM7600+0x80>)
 8000dae:	f7ff fc1d 	bl	80005ec <sendATcommand>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d11d      	bne.n	8000df4 <Init_SIM7600+0x58>
 8000db8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000dbc:	4916      	ldr	r1, [pc, #88]	; (8000e18 <Init_SIM7600+0x7c>)
 8000dbe:	4817      	ldr	r0, [pc, #92]	; (8000e1c <Init_SIM7600+0x80>)
 8000dc0:	f7ff fc14 	bl	80005ec <sendATcommand>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d114      	bne.n	8000df4 <Init_SIM7600+0x58>
 8000dca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000dce:	4912      	ldr	r1, [pc, #72]	; (8000e18 <Init_SIM7600+0x7c>)
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <Init_SIM7600+0x84>)
 8000dd2:	f7ff fc0b 	bl	80005ec <sendATcommand>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10b      	bne.n	8000df4 <Init_SIM7600+0x58>
 8000ddc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000de0:	490d      	ldr	r1, [pc, #52]	; (8000e18 <Init_SIM7600+0x7c>)
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <Init_SIM7600+0x88>)
 8000de4:	f7ff fc02 	bl	80005ec <sendATcommand>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <Init_SIM7600+0x58>
	{
		status = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	71bb      	strb	r3, [r7, #6]
 8000df2:	e00a      	b.n	8000e0a <Init_SIM7600+0x6e>
	}
	else
		for (uint8_t i = 0 ; i < 3; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	e004      	b.n	8000e04 <Init_SIM7600+0x68>
		{
			Init_SIM7600();}
 8000dfa:	f7ff ffcf 	bl	8000d9c <Init_SIM7600>
		for (uint8_t i = 0 ; i < 3; i++)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3301      	adds	r3, #1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d9f7      	bls.n	8000dfa <Init_SIM7600+0x5e>
	return status;
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	b2db      	uxtb	r3, r3
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08003f0c 	.word	0x08003f0c
 8000e1c:	08003f10 	.word	0x08003f10
 8000e20:	08003f18 	.word	0x08003f18
 8000e24:	08003f20 	.word	0x08003f20

08000e28 <Check_NETSIMstate>:
/*------------------------------------CHECK SIM STATE --------------------------------------------------------*/
uint8_t Check_NETSIMstate(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	volatile uint8_t status = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	71bb      	strb	r3, [r7, #6]
	if (sendATcommand("AT\r\n","OK",2000) == 1 && sendATcommand("AT+CPIN?\r\n","READY",2000) == 1 && sendATcommand("AT+CREG?\r\n","+CREG: 0,1",1000) == 1)
 8000e32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e36:	4916      	ldr	r1, [pc, #88]	; (8000e90 <Check_NETSIMstate+0x68>)
 8000e38:	4816      	ldr	r0, [pc, #88]	; (8000e94 <Check_NETSIMstate+0x6c>)
 8000e3a:	f7ff fbd7 	bl	80005ec <sendATcommand>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d114      	bne.n	8000e6e <Check_NETSIMstate+0x46>
 8000e44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e48:	4913      	ldr	r1, [pc, #76]	; (8000e98 <Check_NETSIMstate+0x70>)
 8000e4a:	4814      	ldr	r0, [pc, #80]	; (8000e9c <Check_NETSIMstate+0x74>)
 8000e4c:	f7ff fbce 	bl	80005ec <sendATcommand>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d10b      	bne.n	8000e6e <Check_NETSIMstate+0x46>
 8000e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e5a:	4911      	ldr	r1, [pc, #68]	; (8000ea0 <Check_NETSIMstate+0x78>)
 8000e5c:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <Check_NETSIMstate+0x7c>)
 8000e5e:	f7ff fbc5 	bl	80005ec <sendATcommand>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d102      	bne.n	8000e6e <Check_NETSIMstate+0x46>
	{
		status = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	71bb      	strb	r3, [r7, #6]
 8000e6c:	e00a      	b.n	8000e84 <Check_NETSIMstate+0x5c>
	}
	else
		for (uint8_t i = 0 ; i < 3; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	e004      	b.n	8000e7e <Check_NETSIMstate+0x56>
		{
			Check_NETSIMstate();}
 8000e74:	f7ff ffd8 	bl	8000e28 <Check_NETSIMstate>
		for (uint8_t i = 0 ; i < 3; i++)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d9f7      	bls.n	8000e74 <Check_NETSIMstate+0x4c>
	return status;
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	b2db      	uxtb	r3, r3
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	08003f0c 	.word	0x08003f0c
 8000e94:	08003f10 	.word	0x08003f10
 8000e98:	08003f28 	.word	0x08003f28
 8000e9c:	08003f30 	.word	0x08003f30
 8000ea0:	08003f3c 	.word	0x08003f3c
 8000ea4:	08003f48 	.word	0x08003f48

08000ea8 <setupCONNECTION>:
/*------------------------------------CONNECT TO SERVER--------------------------------------------------------*/
/*
 * CMQTTACCQ : 0
 * CMQTTCONNECT : 1*/
uint8_t setupCONNECTION(void)
{
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af08      	add	r7, sp, #32

	connect1 = sendATcommand_2("AT+NETOPEN\r\n","already opened","+NETOPEN: 0",2000);
 8000eae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eb2:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <setupCONNECTION+0xdc>)
 8000eb4:	4934      	ldr	r1, [pc, #208]	; (8000f88 <setupCONNECTION+0xe0>)
 8000eb6:	4835      	ldr	r0, [pc, #212]	; (8000f8c <setupCONNECTION+0xe4>)
 8000eb8:	f7ff fc4e 	bl	8000758 <sendATcommand_2>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <setupCONNECTION+0xe8>)
 8000ec2:	701a      	strb	r2, [r3, #0]
	connect2 = sendATcommand_2("AT+CMQTTSTART\r\n","+CMQTTSTART: 0","ERROR",2000);
 8000ec4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ec8:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <setupCONNECTION+0xec>)
 8000eca:	4933      	ldr	r1, [pc, #204]	; (8000f98 <setupCONNECTION+0xf0>)
 8000ecc:	4833      	ldr	r0, [pc, #204]	; (8000f9c <setupCONNECTION+0xf4>)
 8000ece:	f7ff fc43 	bl	8000758 <sendATcommand_2>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <setupCONNECTION+0xf8>)
 8000ed8:	701a      	strb	r2, [r3, #0]

	memset(aux_str,0,100);
 8000eda:	2264      	movs	r2, #100	; 0x64
 8000edc:	2100      	movs	r1, #0
 8000ede:	4831      	ldr	r0, [pc, #196]	; (8000fa4 <setupCONNECTION+0xfc>)
 8000ee0:	f002 f9de 	bl	80032a0 <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTACCQ=%d,\"%s\"%s",index,client,enter);
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <setupCONNECTION+0x100>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4b30      	ldr	r3, [pc, #192]	; (8000fac <setupCONNECTION+0x104>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a30      	ldr	r2, [pc, #192]	; (8000fb0 <setupCONNECTION+0x108>)
 8000ef0:	9201      	str	r2, [sp, #4]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <setupCONNECTION+0x10c>)
 8000ef8:	2164      	movs	r1, #100	; 0x64
 8000efa:	482a      	ldr	r0, [pc, #168]	; (8000fa4 <setupCONNECTION+0xfc>)
 8000efc:	f002 f9d8 	bl	80032b0 <sniprintf>
	connect3 = sendATcommand_2(aux_str,"OK","+CMQTTACCQ: 0,19",2000);
 8000f00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f04:	4a2c      	ldr	r2, [pc, #176]	; (8000fb8 <setupCONNECTION+0x110>)
 8000f06:	492d      	ldr	r1, [pc, #180]	; (8000fbc <setupCONNECTION+0x114>)
 8000f08:	4826      	ldr	r0, [pc, #152]	; (8000fa4 <setupCONNECTION+0xfc>)
 8000f0a:	f7ff fc25 	bl	8000758 <sendATcommand_2>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <setupCONNECTION+0x118>)
 8000f14:	701a      	strb	r2, [r3, #0]

	memset(aux_str,0,100);
 8000f16:	2264      	movs	r2, #100	; 0x64
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4822      	ldr	r0, [pc, #136]	; (8000fa4 <setupCONNECTION+0xfc>)
 8000f1c:	f002 f9c0 	bl	80032a0 <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTCONNECT=%d,\"tcp://%s:%d\",%d,%d,\"%s\",\"%s\"%s",index,server,port,keepalive,cleansession,username,password,enter);
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <setupCONNECTION+0x100>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	469c      	mov	ip, r3
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <setupCONNECTION+0x11c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <setupCONNECTION+0x120>)
 8000f2c:	8812      	ldrh	r2, [r2, #0]
 8000f2e:	4614      	mov	r4, r2
 8000f30:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <setupCONNECTION+0x124>)
 8000f32:	8812      	ldrh	r2, [r2, #0]
 8000f34:	4615      	mov	r5, r2
 8000f36:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <setupCONNECTION+0x128>)
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	4616      	mov	r6, r2
 8000f3c:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <setupCONNECTION+0x12c>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4925      	ldr	r1, [pc, #148]	; (8000fd8 <setupCONNECTION+0x130>)
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <setupCONNECTION+0x108>)
 8000f46:	9006      	str	r0, [sp, #24]
 8000f48:	9105      	str	r1, [sp, #20]
 8000f4a:	9204      	str	r2, [sp, #16]
 8000f4c:	9603      	str	r6, [sp, #12]
 8000f4e:	9502      	str	r5, [sp, #8]
 8000f50:	9401      	str	r4, [sp, #4]
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	4663      	mov	r3, ip
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <setupCONNECTION+0x134>)
 8000f58:	2164      	movs	r1, #100	; 0x64
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <setupCONNECTION+0xfc>)
 8000f5c:	f002 f9a8 	bl	80032b0 <sniprintf>
	connect4 = sendATcommand_2(aux_str,"+CMQTTCONNECT: 0,0","+CMQTTCONNECT: 0,19",3000);
 8000f60:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <setupCONNECTION+0x138>)
 8000f66:	491f      	ldr	r1, [pc, #124]	; (8000fe4 <setupCONNECTION+0x13c>)
 8000f68:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <setupCONNECTION+0xfc>)
 8000f6a:	f7ff fbf5 	bl	8000758 <sendATcommand_2>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <setupCONNECTION+0x140>)
 8000f74:	701a      	strb	r2, [r3, #0]

	return connect4;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <setupCONNECTION+0x140>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
//AT+CMQTTSTART<CR><LF>
//AT+CMQTTACCQ=0,"SIMCom_client01",1<CR><LF>
//AT+CMQTTCONNECT=0,"tcp://m14.cloudmqtt.com:19613",180,1,"yktdxpqb","VKCG6yboYrYd"<CR><LF>
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3704      	adds	r7, #4
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	08003f54 	.word	0x08003f54
 8000f88:	08003f60 	.word	0x08003f60
 8000f8c:	08003f70 	.word	0x08003f70
 8000f90:	20000502 	.word	0x20000502
 8000f94:	08003f80 	.word	0x08003f80
 8000f98:	08003f88 	.word	0x08003f88
 8000f9c:	08003f98 	.word	0x08003f98
 8000fa0:	200005d6 	.word	0x200005d6
 8000fa4:	20000508 	.word	0x20000508
 8000fa8:	200003d0 	.word	0x200003d0
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	08003fa8 	.word	0x08003fa8
 8000fb8:	08003fc0 	.word	0x08003fc0
 8000fbc:	08003f0c 	.word	0x08003f0c
 8000fc0:	200004fd 	.word	0x200004fd
 8000fc4:	20000010 	.word	0x20000010
 8000fc8:	200001b0 	.word	0x200001b0
 8000fcc:	200001ac 	.word	0x200001ac
 8000fd0:	200001ae 	.word	0x200001ae
 8000fd4:	20000014 	.word	0x20000014
 8000fd8:	20000018 	.word	0x20000018
 8000fdc:	08003fd4 	.word	0x08003fd4
 8000fe0:	08004008 	.word	0x08004008
 8000fe4:	0800401c 	.word	0x0800401c
 8000fe8:	20000503 	.word	0x20000503

08000fec <Subscibe>:
/*------------------------------------SUBSCIBE --------------------------------------------------------*/
// CMQTTSUBTOPIC : 2
uint8_t Subscibe(char *sub_topic, uint8_t qos)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	memset(aux_str,0,100);
 8000ff8:	2264      	movs	r2, #100	; 0x64
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4817      	ldr	r0, [pc, #92]	; (800105c <Subscibe+0x70>)
 8000ffe:	f002 f94f 	bl	80032a0 <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTSUB=%d,%d,%d%s",index,strlen(sub_topic),qos,enter);
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <Subscibe+0x74>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461c      	mov	r4, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff f8e1 	bl	80001d0 <strlen>
 800100e:	4601      	mov	r1, r0
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <Subscibe+0x78>)
 8001014:	9202      	str	r2, [sp, #8]
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	9100      	str	r1, [sp, #0]
 800101a:	4623      	mov	r3, r4
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <Subscibe+0x7c>)
 800101e:	2164      	movs	r1, #100	; 0x64
 8001020:	480e      	ldr	r0, [pc, #56]	; (800105c <Subscibe+0x70>)
 8001022:	f002 f945 	bl	80032b0 <sniprintf>
	connect10 = sendATcommand(aux_str,">",2000);
 8001026:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800102a:	4910      	ldr	r1, [pc, #64]	; (800106c <Subscibe+0x80>)
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <Subscibe+0x70>)
 800102e:	f7ff fadd 	bl	80005ec <sendATcommand>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <Subscibe+0x84>)
 8001038:	701a      	strb	r2, [r3, #0]
	if(sendATcommand(sub_topic,"+CMQTTSUB: 0,0",2000) == 1)
 800103a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <Subscibe+0x88>)
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fad3 	bl	80005ec <sendATcommand>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <Subscibe+0x64>
		return 1;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <Subscibe+0x66>
	return 0;
 8001050:	2300      	movs	r3, #0
//	AT+CMQTTSUBTOPIC=0,9,0,1<CR><LF> // subscribed  AT+CMQTTSUB=0,9,0,1

}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	20000508 	.word	0x20000508
 8001060:	200003d0 	.word	0x200003d0
 8001064:	20000008 	.word	0x20000008
 8001068:	08004030 	.word	0x08004030
 800106c:	08004048 	.word	0x08004048
 8001070:	200004fc 	.word	0x200004fc
 8001074:	0800404c 	.word	0x0800404c

08001078 <Publish>:
 * CMQTTPUB : 5*/
//	AT+CMQTTTOPIC=0,21<CR><LF>  //Set the topic for the PUBLISH message
//	AT+CMQTTPAYLOAD=0,38<CR><LF>//Set the payload for the PUBLISH message
//	AT+CMQTTPUB=0,1,60<CR><LF>  //Publish topic and message
uint8_t Publish(char *pub_topic, uint8_t qos)
{
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af04      	add	r7, sp, #16
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
	sum = cal_sum_dev;
 8001084:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <Publish+0x138>)
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <Publish+0x13c>)
 800108a:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i< 25; i++)
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e085      	b.n	800119e <Publish+0x126>
	{
		memset(aux_str,0,100);
 8001092:	2264      	movs	r2, #100	; 0x64
 8001094:	2100      	movs	r1, #0
 8001096:	4848      	ldr	r0, [pc, #288]	; (80011b8 <Publish+0x140>)
 8001098:	f002 f902 	bl	80032a0 <memset>
		snprintf(aux_str, sizeof(aux_str),"AT+CMQTTTOPIC=%d,%d%s",index,strlen(pub_topic),enter);
 800109c:	4b47      	ldr	r3, [pc, #284]	; (80011bc <Publish+0x144>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461c      	mov	r4, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff f894 	bl	80001d0 <strlen>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <Publish+0x148>)
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	9200      	str	r2, [sp, #0]
 80010b0:	4623      	mov	r3, r4
 80010b2:	4a44      	ldr	r2, [pc, #272]	; (80011c4 <Publish+0x14c>)
 80010b4:	2164      	movs	r1, #100	; 0x64
 80010b6:	4840      	ldr	r0, [pc, #256]	; (80011b8 <Publish+0x140>)
 80010b8:	f002 f8fa 	bl	80032b0 <sniprintf>
		connect8 = sendATcommand(aux_str,">",2000);
 80010bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010c0:	4941      	ldr	r1, [pc, #260]	; (80011c8 <Publish+0x150>)
 80010c2:	483d      	ldr	r0, [pc, #244]	; (80011b8 <Publish+0x140>)
 80010c4:	f7ff fa92 	bl	80005ec <sendATcommand>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <Publish+0x154>)
 80010ce:	701a      	strb	r2, [r3, #0]
		sendATcommand(pub_topic,"OK",2000);
 80010d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010d4:	493e      	ldr	r1, [pc, #248]	; (80011d0 <Publish+0x158>)
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa88 	bl	80005ec <sendATcommand>

		memset(aux_str,0,100);
 80010dc:	2264      	movs	r2, #100	; 0x64
 80010de:	2100      	movs	r1, #0
 80010e0:	4835      	ldr	r0, [pc, #212]	; (80011b8 <Publish+0x140>)
 80010e2:	f002 f8dd 	bl	80032a0 <memset>
		memset(payload,0,100);
 80010e6:	2264      	movs	r2, #100	; 0x64
 80010e8:	2100      	movs	r1, #0
 80010ea:	483a      	ldr	r0, [pc, #232]	; (80011d4 <Publish+0x15c>)
 80010ec:	f002 f8d8 	bl	80032a0 <memset>
		Get_Time(main_time);
 80010f0:	4839      	ldr	r0, [pc, #228]	; (80011d8 <Publish+0x160>)
 80010f2:	f7ff fc89 	bl	8000a08 <Get_Time>
		createJson_v1(payload,table1[i].name_dev,100, main_time); //---------------------------// HERE
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4a38      	ldr	r2, [pc, #224]	; (80011dc <Publish+0x164>)
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	4413      	add	r3, r2
 80010fe:	3304      	adds	r3, #4
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <Publish+0x160>)
 8001104:	2264      	movs	r2, #100	; 0x64
 8001106:	4833      	ldr	r0, [pc, #204]	; (80011d4 <Publish+0x15c>)
 8001108:	f7ff fb84 	bl	8000814 <createJson_v1>
		snprintf(aux_str, sizeof(aux_str),"AT+CMQTTPAYLOAD=%d,%d%s",index,strlen(payload),enter);
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <Publish+0x144>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461c      	mov	r4, r3
 8001112:	4830      	ldr	r0, [pc, #192]	; (80011d4 <Publish+0x15c>)
 8001114:	f7ff f85c 	bl	80001d0 <strlen>
 8001118:	4602      	mov	r2, r0
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <Publish+0x148>)
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	4623      	mov	r3, r4
 8001122:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <Publish+0x168>)
 8001124:	2164      	movs	r1, #100	; 0x64
 8001126:	4824      	ldr	r0, [pc, #144]	; (80011b8 <Publish+0x140>)
 8001128:	f002 f8c2 	bl	80032b0 <sniprintf>
		connect6 = sendATcommand(aux_str,">",2000);
 800112c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001130:	4925      	ldr	r1, [pc, #148]	; (80011c8 <Publish+0x150>)
 8001132:	4821      	ldr	r0, [pc, #132]	; (80011b8 <Publish+0x140>)
 8001134:	f7ff fa5a 	bl	80005ec <sendATcommand>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <Publish+0x16c>)
 800113e:	701a      	strb	r2, [r3, #0]
		sendATcommand(payload,"OK",2000);
 8001140:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001144:	4922      	ldr	r1, [pc, #136]	; (80011d0 <Publish+0x158>)
 8001146:	4823      	ldr	r0, [pc, #140]	; (80011d4 <Publish+0x15c>)
 8001148:	f7ff fa50 	bl	80005ec <sendATcommand>

		memset(aux_str,0,100);
 800114c:	2264      	movs	r2, #100	; 0x64
 800114e:	2100      	movs	r1, #0
 8001150:	4819      	ldr	r0, [pc, #100]	; (80011b8 <Publish+0x140>)
 8001152:	f002 f8a5 	bl	80032a0 <memset>
		snprintf(aux_str, sizeof(aux_str),"AT+CMQTTPUB=%d,%d,%d%s",index,qos, strlen(payload)+strlen(pub_topic), enter);
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <Publish+0x144>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461e      	mov	r6, r3
 800115c:	78fc      	ldrb	r4, [r7, #3]
 800115e:	481d      	ldr	r0, [pc, #116]	; (80011d4 <Publish+0x15c>)
 8001160:	f7ff f836 	bl	80001d0 <strlen>
 8001164:	4605      	mov	r5, r0
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff f832 	bl	80001d0 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	442b      	add	r3, r5
 8001170:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <Publish+0x148>)
 8001172:	9202      	str	r2, [sp, #8]
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	9400      	str	r4, [sp, #0]
 8001178:	4633      	mov	r3, r6
 800117a:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <Publish+0x170>)
 800117c:	2164      	movs	r1, #100	; 0x64
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <Publish+0x140>)
 8001180:	f002 f896 	bl	80032b0 <sniprintf>
		connect7 = sendATcommand(aux_str,"+CMQTTPUB: 0,0",2000);
 8001184:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001188:	4918      	ldr	r1, [pc, #96]	; (80011ec <Publish+0x174>)
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <Publish+0x140>)
 800118c:	f7ff fa2e 	bl	80005ec <sendATcommand>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <Publish+0x178>)
 8001196:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i< 25; i++)
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	3301      	adds	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2b18      	cmp	r3, #24
 80011a2:	f67f af76 	bls.w	8001092 <Publish+0x1a>
	}
}
 80011a6:	bf00      	nop
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b0:	080011f5 	.word	0x080011f5
 80011b4:	20000500 	.word	0x20000500
 80011b8:	20000508 	.word	0x20000508
 80011bc:	200003d0 	.word	0x200003d0
 80011c0:	20000008 	.word	0x20000008
 80011c4:	0800405c 	.word	0x0800405c
 80011c8:	08004048 	.word	0x08004048
 80011cc:	2000063d 	.word	0x2000063d
 80011d0:	08003f0c 	.word	0x08003f0c
 80011d4:	200005d8 	.word	0x200005d8
 80011d8:	200005d0 	.word	0x200005d0
 80011dc:	2000001c 	.word	0x2000001c
 80011e0:	08004074 	.word	0x08004074
 80011e4:	200004ff 	.word	0x200004ff
 80011e8:	0800408c 	.word	0x0800408c
 80011ec:	080040a4 	.word	0x080040a4
 80011f0:	20000504 	.word	0x20000504

080011f4 <cal_sum_dev>:
}
/*------DISCONNECTED---------------------------------------------------------------------------------------*/
//* CMQTTDISC : 6
//* CMQTTREL : 7
uint16_t cal_sum_dev()
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	return sizeof(table1)/sizeof(data1_t);
 80011f8:	2319      	movs	r3, #25
	}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a3a      	ldr	r2, [pc, #232]	; (800135c <HAL_UART_MspInit+0x108>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d135      	bne.n	80012e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_UART_MspInit+0x10c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a38      	ldr	r2, [pc, #224]	; (8001360 <HAL_UART_MspInit+0x10c>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <HAL_UART_MspInit+0x10c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <HAL_UART_MspInit+0x10c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_UART_MspInit+0x10c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_UART_MspInit+0x10c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c0:	2307      	movs	r3, #7
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4826      	ldr	r0, [pc, #152]	; (8001364 <HAL_UART_MspInit+0x110>)
 80012cc:	f000 fade 	bl	800188c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2025      	movs	r0, #37	; 0x25
 80012d6:	f000 fa80 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012da:	2025      	movs	r0, #37	; 0x25
 80012dc:	f000 fa99 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e0:	e038      	b.n	8001354 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a20      	ldr	r2, [pc, #128]	; (8001368 <HAL_UART_MspInit+0x114>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d133      	bne.n	8001354 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_UART_MspInit+0x10c>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_UART_MspInit+0x10c>)
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_UART_MspInit+0x10c>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_UART_MspInit+0x10c>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_UART_MspInit+0x10c>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_UART_MspInit+0x10c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001324:	230c      	movs	r3, #12
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001334:	2307      	movs	r3, #7
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <HAL_UART_MspInit+0x110>)
 8001340:	f000 faa4 	bl	800188c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2026      	movs	r0, #38	; 0x26
 800134a:	f000 fa46 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800134e:	2026      	movs	r0, #38	; 0x26
 8001350:	f000 fa5f 	bl	8001812 <HAL_NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40011000 	.word	0x40011000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40004400 	.word	0x40004400

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f8ee 	bl	80015a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <USART1_IRQHandler+0x10>)
 80013ce:	f001 f933 	bl	8002638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000044c 	.word	0x2000044c

080013dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
	UARTIntHandler();
 80013e2:	f7ff f8cd 	bl	8000580 <UARTIntHandler>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <USART2_IRQHandler+0x30>)
 80013e8:	f001 f926 	bl	8002638 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	__HAL_UART_CLEAR_PEFLAG(&huart2);
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <USART2_IRQHandler+0x30>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <USART2_IRQHandler+0x30>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END USART1_IRQn 1 */
	}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200004b8 	.word	0x200004b8

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f001 ff04 	bl	800324c <__errno>
 8001444:	4602      	mov	r2, r0
 8001446:	230c      	movs	r3, #12
 8001448:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20020000 	.word	0x20020000
 8001470:	00000400 	.word	0x00000400
 8001474:	200003d4 	.word	0x200003d4
 8001478:	20000648 	.word	0x20000648

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <SystemInit+0x28>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <SystemInit+0x28>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SystemInit+0x28>)
 8001492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001496:	609a      	str	r2, [r3, #8]
#endif
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ae:	e003      	b.n	80014b8 <LoopCopyDataInit>

080014b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014b6:	3104      	adds	r1, #4

080014b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014c0:	d3f6      	bcc.n	80014b0 <CopyDataInit>
  ldr  r2, =_sbss
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014c4:	e002      	b.n	80014cc <LoopFillZerobss>

080014c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014c8:	f842 3b04 	str.w	r3, [r2], #4

080014cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014d0:	d3f9      	bcc.n	80014c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014d2:	f7ff ffd3 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f001 febf 	bl	8003258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff faf3 	bl	8000ac4 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014e4:	0800421c 	.word	0x0800421c
  ldr  r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014ec:	20000390 	.word	0x20000390
  ldr  r2, =_sbss
 80014f0:	20000390 	.word	0x20000390
  ldr  r3, = _ebss
 80014f4:	20000648 	.word	0x20000648

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <HAL_Init+0x40>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_Init+0x40>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_Init+0x40>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f94d 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f808 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fe68 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x54>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x58>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f965 	bl	800182e <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00e      	b.n	800158c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d80a      	bhi.n	800158a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f000 f92d 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <HAL_InitTick+0x5c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200001b4 	.word	0x200001b4
 8001598:	200001bc 	.word	0x200001bc
 800159c:	200001b8 	.word	0x200001b8

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200001bc 	.word	0x200001bc
 80015c4:	20000640 	.word	0x20000640

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000640 	.word	0x20000640

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff ffee 	bl	80015c8 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d005      	beq.n	8001606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_Delay+0x40>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001606:	bf00      	nop
 8001608:	f7ff ffde 	bl	80015c8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d8f7      	bhi.n	8001608 <HAL_Delay+0x28>
  {
  }
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200001bc 	.word	0x200001bc

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff29 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff3e 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff8e 	bl	8001718 <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff31 	bl	8001688 <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa2 	bl	8001780 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d004      	beq.n	8001864 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e00c      	b.n	800187e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2205      	movs	r2, #5
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e16b      	b.n	8001b80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 815a 	bne.w	8001b7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d00b      	beq.n	80018e6 <HAL_GPIO_Init+0x5a>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018da:	2b11      	cmp	r3, #17
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0xfc>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b12      	cmp	r3, #18
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80b4 	beq.w	8001b7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_GPIO_Init+0x308>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <HAL_GPIO_Init+0x308>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_GPIO_Init+0x308>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <HAL_GPIO_Init+0x30c>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_GPIO_Init+0x310>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02b      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_GPIO_Init+0x314>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x222>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <HAL_GPIO_Init+0x318>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x21e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ba8 <HAL_GPIO_Init+0x31c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <HAL_GPIO_Init+0x320>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x216>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x212>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4b      	ldr	r2, [pc, #300]	; (8001bb4 <HAL_GPIO_Init+0x328>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x20e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4a      	ldr	r2, [pc, #296]	; (8001bb8 <HAL_GPIO_Init+0x32c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x20a>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00e      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001a96:	2308      	movs	r3, #8
 8001a98:	e00c      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001a9a:	2306      	movs	r3, #6
 8001a9c:	e00a      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac4:	4934      	ldr	r1, [pc, #208]	; (8001b98 <HAL_GPIO_Init+0x30c>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af6:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b20:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	f67f ae90 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3724      	adds	r7, #36	; 0x24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40021400 	.word	0x40021400
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40021c00 	.word	0x40021c00
 8001bbc:	40013c00 	.word	0x40013c00

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e25b      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d075      	beq.n	8001cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c12:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d00c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4ba0      	ldr	r3, [pc, #640]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d112      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4b9d      	ldr	r3, [pc, #628]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c36:	d10b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4b99      	ldr	r3, [pc, #612]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d05b      	beq.n	8001cfc <HAL_RCC_OscConfig+0x108>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d157      	bne.n	8001cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e236      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d106      	bne.n	8001c68 <HAL_RCC_OscConfig+0x74>
 8001c5a:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a90      	ldr	r2, [pc, #576]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x98>
 8001c72:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a8a      	ldr	r2, [pc, #552]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a87      	ldr	r2, [pc, #540]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c8c:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a83      	ldr	r2, [pc, #524]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a80      	ldr	r2, [pc, #512]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fc8c 	bl	80015c8 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fc88 	bl	80015c8 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1fb      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xc0>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc78 	bl	80015c8 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fc74 	bl	80015c8 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1e7      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0xe8>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d16:	4b62      	ldr	r3, [pc, #392]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1bb      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4952      	ldr	r1, [pc, #328]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <HAL_RCC_OscConfig+0x2b0>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fc2d 	bl	80015c8 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fc29 	bl	80015c8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e19c      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4940      	ldr	r1, [pc, #256]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_RCC_OscConfig+0x2b0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fc0c 	bl	80015c8 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fc08 	bl	80015c8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e17b      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d030      	beq.n	8001e40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_RCC_OscConfig+0x2b4>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fbec 	bl	80015c8 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fbe8 	bl	80015c8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e15b      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x200>
 8001e12:	e015      	b.n	8001e40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_OscConfig+0x2b4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fbd5 	bl	80015c8 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff fbd1 	bl	80015c8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e144      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a0 	beq.w	8001f8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10f      	bne.n	8001e7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fb97 	bl	80015c8 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	e011      	b.n	8001ec2 <HAL_RCC_OscConfig+0x2ce>
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470000 	.word	0x42470000
 8001ea8:	42470e80 	.word	0x42470e80
 8001eac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7ff fb8a 	bl	80015c8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0fd      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <HAL_RCC_OscConfig+0x4d4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
 8001ed6:	4b7d      	ldr	r3, [pc, #500]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	4a7c      	ldr	r2, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee2:	e01c      	b.n	8001f1e <HAL_RCC_OscConfig+0x32a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x312>
 8001eec:	4b77      	ldr	r3, [pc, #476]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a76      	ldr	r2, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	4b74      	ldr	r3, [pc, #464]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a73      	ldr	r2, [pc, #460]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0x32a>
 8001f06:	4b71      	ldr	r3, [pc, #452]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a70      	ldr	r2, [pc, #448]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	4b6e      	ldr	r3, [pc, #440]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a6d      	ldr	r2, [pc, #436]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb4f 	bl	80015c8 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fb4b 	bl	80015c8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0bc      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ee      	beq.n	8001f2e <HAL_RCC_OscConfig+0x33a>
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb39 	bl	80015c8 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fb35 	bl	80015c8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0a6      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ee      	bne.n	8001f5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b52      	ldr	r3, [pc, #328]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a51      	ldr	r2, [pc, #324]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8092 	beq.w	80020bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f98:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d05c      	beq.n	800205e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d141      	bne.n	8002030 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <HAL_RCC_OscConfig+0x4dc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fb09 	bl	80015c8 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff fb05 	bl	80015c8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e078      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	019b      	lsls	r3, r3, #6
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	041b      	lsls	r3, r3, #16
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
 8001ffc:	4933      	ldr	r1, [pc, #204]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCC_OscConfig+0x4dc>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fade 	bl	80015c8 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fada 	bl	80015c8 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e04d      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x41c>
 800202e:	e045      	b.n	80020bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x4dc>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fac7 	bl	80015c8 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff fac3 	bl	80015c8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e036      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002050:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x44a>
 800205c:	e02e      	b.n	80020bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e029      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d11c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d115      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002092:	4013      	ands	r3, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002098:	4293      	cmp	r3, r2
 800209a:	d10d      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40007000 	.word	0x40007000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	42470060 	.word	0x42470060

080020d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0cc      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d90c      	bls.n	8002110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b8      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002128:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800214a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	494d      	ldr	r1, [pc, #308]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d044      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d119      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d003      	beq.n	8002192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	2b03      	cmp	r3, #3
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e067      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4934      	ldr	r1, [pc, #208]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7ff fa00 	bl	80015c8 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7ff f9fc 	bl	80015c8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e04f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d20c      	bcs.n	800221c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e032      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4916      	ldr	r1, [pc, #88]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	490e      	ldr	r1, [pc, #56]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800225a:	f000 f821 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800225e:	4601      	mov	r1, r0
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	5cd3      	ldrb	r3, [r2, r3]
 800226e:	fa21 f303 	lsr.w	r3, r1, r3
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f960 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023c00 	.word	0x40023c00
 8002290:	40023800 	.word	0x40023800
 8002294:	080040b4 	.word	0x080040b4
 8002298:	200001b4 	.word	0x200001b4
 800229c:	200001b8 	.word	0x200001b8

080022a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	2300      	movs	r3, #0
 80022b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b6:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d007      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x32>
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d008      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x38>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 808d 	bne.w	80023e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80022ce:	60bb      	str	r3, [r7, #8]
       break;
 80022d0:	e08c      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d2:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <HAL_RCC_GetSysClockFreq+0x160>)
 80022d4:	60bb      	str	r3, [r7, #8]
      break;
 80022d6:	e089      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e2:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d023      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ee:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	099b      	lsrs	r3, r3, #6
 80022f4:	f04f 0400 	mov.w	r4, #0
 80022f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	ea03 0501 	and.w	r5, r3, r1
 8002304:	ea04 0602 	and.w	r6, r4, r2
 8002308:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <HAL_RCC_GetSysClockFreq+0x160>)
 800230a:	fb02 f106 	mul.w	r1, r2, r6
 800230e:	2200      	movs	r2, #0
 8002310:	fb02 f205 	mul.w	r2, r2, r5
 8002314:	440a      	add	r2, r1
 8002316:	493a      	ldr	r1, [pc, #232]	; (8002400 <HAL_RCC_GetSysClockFreq+0x160>)
 8002318:	fba5 0101 	umull	r0, r1, r5, r1
 800231c:	1853      	adds	r3, r2, r1
 800231e:	4619      	mov	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f04f 0400 	mov.w	r4, #0
 8002326:	461a      	mov	r2, r3
 8002328:	4623      	mov	r3, r4
 800232a:	f7fd ffa9 	bl	8000280 <__aeabi_uldivmod>
 800232e:	4603      	mov	r3, r0
 8002330:	460c      	mov	r4, r1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e049      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	f04f 0400 	mov.w	r4, #0
 8002340:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	ea03 0501 	and.w	r5, r3, r1
 800234c:	ea04 0602 	and.w	r6, r4, r2
 8002350:	4629      	mov	r1, r5
 8002352:	4632      	mov	r2, r6
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	f04f 0400 	mov.w	r4, #0
 800235c:	0154      	lsls	r4, r2, #5
 800235e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002362:	014b      	lsls	r3, r1, #5
 8002364:	4619      	mov	r1, r3
 8002366:	4622      	mov	r2, r4
 8002368:	1b49      	subs	r1, r1, r5
 800236a:	eb62 0206 	sbc.w	r2, r2, r6
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	0194      	lsls	r4, r2, #6
 8002378:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800237c:	018b      	lsls	r3, r1, #6
 800237e:	1a5b      	subs	r3, r3, r1
 8002380:	eb64 0402 	sbc.w	r4, r4, r2
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	00e2      	lsls	r2, r4, #3
 800238e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002392:	00d9      	lsls	r1, r3, #3
 8002394:	460b      	mov	r3, r1
 8002396:	4614      	mov	r4, r2
 8002398:	195b      	adds	r3, r3, r5
 800239a:	eb44 0406 	adc.w	r4, r4, r6
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	02a2      	lsls	r2, r4, #10
 80023a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023ac:	0299      	lsls	r1, r3, #10
 80023ae:	460b      	mov	r3, r1
 80023b0:	4614      	mov	r4, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	4621      	mov	r1, r4
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f04f 0400 	mov.w	r4, #0
 80023bc:	461a      	mov	r2, r3
 80023be:	4623      	mov	r3, r4
 80023c0:	f7fd ff5e 	bl	8000280 <__aeabi_uldivmod>
 80023c4:	4603      	mov	r3, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	3301      	adds	r3, #1
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	60bb      	str	r3, [r7, #8]
      break;
 80023e4:	e002      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80023e8:	60bb      	str	r3, [r7, #8]
      break;
 80023ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ec:	68bb      	ldr	r3, [r7, #8]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	00f42400 	.word	0x00f42400
 8002400:	017d7840 	.word	0x017d7840

08002404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_RCC_GetHCLKFreq+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	200001b4 	.word	0x200001b4

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002420:	f7ff fff0 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002424:	4601      	mov	r1, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	0a9b      	lsrs	r3, r3, #10
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	080040c4 	.word	0x080040c4

08002444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002448:	f7ff ffdc 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 800244c:	4601      	mov	r1, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0b5b      	lsrs	r3, r3, #13
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4a03      	ldr	r2, [pc, #12]	; (8002468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	080040c4 	.word	0x080040c4

0800246c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e03f      	b.n	80024fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe fede 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fb4b 	bl	8002b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b088      	sub	sp, #32
 800250a:	af02      	add	r7, sp, #8
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	f040 8083 	bne.w	800262e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_UART_Transmit+0x2e>
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e07b      	b.n	8002630 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_UART_Transmit+0x40>
 8002542:	2302      	movs	r3, #2
 8002544:	e074      	b.n	8002630 <HAL_UART_Transmit+0x12a>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2221      	movs	r2, #33	; 0x21
 8002558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800255c:	f7ff f834 	bl	80015c8 <HAL_GetTick>
 8002560:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002576:	e042      	b.n	80025fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258e:	d122      	bne.n	80025d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2200      	movs	r2, #0
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f96a 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e042      	b.n	8002630 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3302      	adds	r3, #2
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	e017      	b.n	80025fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3301      	adds	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	e013      	b.n	80025fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2200      	movs	r2, #0
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f947 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e01f      	b.n	8002630 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60ba      	str	r2, [r7, #8]
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1b7      	bne.n	8002578 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f92e 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e006      	b.n	8002630 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_UART_IRQHandler+0x52>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9e0 	bl	8002a48 <UART_Receive_IT>
      return;
 8002688:	e0d1      	b.n	800282e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80b0 	beq.w	80027f2 <HAL_UART_IRQHandler+0x1ba>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_UART_IRQHandler+0x70>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80a5 	beq.w	80027f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_UART_IRQHandler+0x90>
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_UART_IRQHandler+0xb0>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	f043 0202 	orr.w	r2, r3, #2
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_UART_IRQHandler+0xd0>
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	f043 0204 	orr.w	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00f      	beq.n	8002732 <HAL_UART_IRQHandler+0xfa>
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_UART_IRQHandler+0xee>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	f043 0208 	orr.w	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d078      	beq.n	800282c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_UART_IRQHandler+0x11c>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f97a 	bl	8002a48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_UART_IRQHandler+0x144>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d031      	beq.n	80027e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f8c3 	bl	8002908 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d123      	bne.n	80027d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800279e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <HAL_UART_IRQHandler+0x1fc>)
 80027ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff f846 	bl	8001846 <HAL_DMA_Abort_IT>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d016      	beq.n	80027ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ca:	4610      	mov	r0, r2
 80027cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ce:	e00e      	b.n	80027ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f845 	bl	8002860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d6:	e00a      	b.n	80027ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f841 	bl	8002860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027de:	e006      	b.n	80027ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f83d 	bl	8002860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80027ec:	e01e      	b.n	800282c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ee:	bf00      	nop
    return;
 80027f0:	e01c      	b.n	800282c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_UART_IRQHandler+0x1d6>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8b0 	bl	800296c <UART_Transmit_IT>
    return;
 800280c:	e00f      	b.n	800282e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_UART_IRQHandler+0x1f6>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f8f8 	bl	8002a18 <UART_EndTransmit_IT>
    return;
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <HAL_UART_IRQHandler+0x1f6>
    return;
 800282c:	bf00      	nop
  }
}
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	08002945 	.word	0x08002945

08002838 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002884:	e02c      	b.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d028      	beq.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002894:	f7fe fe98 	bl	80015c8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d21d      	bcs.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e00f      	b.n	8002900 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d0c3      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800291e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff ff7e 	bl	8002860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b21      	cmp	r3, #33	; 0x21
 800297e:	d144      	bne.n	8002a0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d11a      	bne.n	80029c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	621a      	str	r2, [r3, #32]
 80029b2:	e00e      	b.n	80029d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]
 80029be:	e008      	b.n	80029d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	1c59      	adds	r1, r3, #1
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6211      	str	r1, [r2, #32]
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4619      	mov	r1, r3
 80029e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fefd 	bl	8002838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b22      	cmp	r3, #34	; 0x22
 8002a5a:	d171      	bne.n	8002b40 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a64:	d123      	bne.n	8002aae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10e      	bne.n	8002a92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	1c9a      	adds	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a90:	e029      	b.n	8002ae6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8002aac:	e01b      	b.n	8002ae6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6858      	ldr	r0, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	1c59      	adds	r1, r3, #1
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6291      	str	r1, [r2, #40]	; 0x28
 8002ac6:	b2c2      	uxtb	r2, r0
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e00c      	b.n	8002ae6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	1c58      	adds	r0, r3, #1
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	6288      	str	r0, [r1, #40]	; 0x28
 8002ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4619      	mov	r1, r3
 8002af4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d120      	bne.n	8002b3c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0220 	bic.w	r2, r2, #32
 8002b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fe8a 	bl	800284c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e002      	b.n	8002b42 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e000      	b.n	8002b42 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b40:	2302      	movs	r3, #2
  }
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b8e:	f023 030c 	bic.w	r3, r3, #12
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bba:	f040 818b 	bne.w	8002ed4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4ac1      	ldr	r2, [pc, #772]	; (8002ec8 <UART_SetConfig+0x37c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d005      	beq.n	8002bd4 <UART_SetConfig+0x88>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4abf      	ldr	r2, [pc, #764]	; (8002ecc <UART_SetConfig+0x380>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	f040 80bd 	bne.w	8002d4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bd4:	f7ff fc36 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8002bd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	461d      	mov	r5, r3
 8002bde:	f04f 0600 	mov.w	r6, #0
 8002be2:	46a8      	mov	r8, r5
 8002be4:	46b1      	mov	r9, r6
 8002be6:	eb18 0308 	adds.w	r3, r8, r8
 8002bea:	eb49 0409 	adc.w	r4, r9, r9
 8002bee:	4698      	mov	r8, r3
 8002bf0:	46a1      	mov	r9, r4
 8002bf2:	eb18 0805 	adds.w	r8, r8, r5
 8002bf6:	eb49 0906 	adc.w	r9, r9, r6
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c0e:	4688      	mov	r8, r1
 8002c10:	4691      	mov	r9, r2
 8002c12:	eb18 0005 	adds.w	r0, r8, r5
 8002c16:	eb49 0106 	adc.w	r1, r9, r6
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	461d      	mov	r5, r3
 8002c20:	f04f 0600 	mov.w	r6, #0
 8002c24:	196b      	adds	r3, r5, r5
 8002c26:	eb46 0406 	adc.w	r4, r6, r6
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	f7fd fb27 	bl	8000280 <__aeabi_uldivmod>
 8002c32:	4603      	mov	r3, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	461a      	mov	r2, r3
 8002c38:	4ba5      	ldr	r3, [pc, #660]	; (8002ed0 <UART_SetConfig+0x384>)
 8002c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	461d      	mov	r5, r3
 8002c48:	f04f 0600 	mov.w	r6, #0
 8002c4c:	46a9      	mov	r9, r5
 8002c4e:	46b2      	mov	sl, r6
 8002c50:	eb19 0309 	adds.w	r3, r9, r9
 8002c54:	eb4a 040a 	adc.w	r4, sl, sl
 8002c58:	4699      	mov	r9, r3
 8002c5a:	46a2      	mov	sl, r4
 8002c5c:	eb19 0905 	adds.w	r9, r9, r5
 8002c60:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c78:	4689      	mov	r9, r1
 8002c7a:	4692      	mov	sl, r2
 8002c7c:	eb19 0005 	adds.w	r0, r9, r5
 8002c80:	eb4a 0106 	adc.w	r1, sl, r6
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	461d      	mov	r5, r3
 8002c8a:	f04f 0600 	mov.w	r6, #0
 8002c8e:	196b      	adds	r3, r5, r5
 8002c90:	eb46 0406 	adc.w	r4, r6, r6
 8002c94:	461a      	mov	r2, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	f7fd faf2 	bl	8000280 <__aeabi_uldivmod>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <UART_SetConfig+0x384>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	; 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3332      	adds	r3, #50	; 0x32
 8002cb6:	4a86      	ldr	r2, [pc, #536]	; (8002ed0 <UART_SetConfig+0x384>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc4:	4498      	add	r8, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	461d      	mov	r5, r3
 8002cca:	f04f 0600 	mov.w	r6, #0
 8002cce:	46a9      	mov	r9, r5
 8002cd0:	46b2      	mov	sl, r6
 8002cd2:	eb19 0309 	adds.w	r3, r9, r9
 8002cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8002cda:	4699      	mov	r9, r3
 8002cdc:	46a2      	mov	sl, r4
 8002cde:	eb19 0905 	adds.w	r9, r9, r5
 8002ce2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cfa:	4689      	mov	r9, r1
 8002cfc:	4692      	mov	sl, r2
 8002cfe:	eb19 0005 	adds.w	r0, r9, r5
 8002d02:	eb4a 0106 	adc.w	r1, sl, r6
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	f04f 0600 	mov.w	r6, #0
 8002d10:	196b      	adds	r3, r5, r5
 8002d12:	eb46 0406 	adc.w	r4, r6, r6
 8002d16:	461a      	mov	r2, r3
 8002d18:	4623      	mov	r3, r4
 8002d1a:	f7fd fab1 	bl	8000280 <__aeabi_uldivmod>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <UART_SetConfig+0x384>)
 8002d26:	fba3 1302 	umull	r1, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2164      	movs	r1, #100	; 0x64
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	3332      	adds	r3, #50	; 0x32
 8002d38:	4a65      	ldr	r2, [pc, #404]	; (8002ed0 <UART_SetConfig+0x384>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	f003 0207 	and.w	r2, r3, #7
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4442      	add	r2, r8
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	e26f      	b.n	800322e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d4e:	f7ff fb65 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 8002d52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	461d      	mov	r5, r3
 8002d58:	f04f 0600 	mov.w	r6, #0
 8002d5c:	46a8      	mov	r8, r5
 8002d5e:	46b1      	mov	r9, r6
 8002d60:	eb18 0308 	adds.w	r3, r8, r8
 8002d64:	eb49 0409 	adc.w	r4, r9, r9
 8002d68:	4698      	mov	r8, r3
 8002d6a:	46a1      	mov	r9, r4
 8002d6c:	eb18 0805 	adds.w	r8, r8, r5
 8002d70:	eb49 0906 	adc.w	r9, r9, r6
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d88:	4688      	mov	r8, r1
 8002d8a:	4691      	mov	r9, r2
 8002d8c:	eb18 0005 	adds.w	r0, r8, r5
 8002d90:	eb49 0106 	adc.w	r1, r9, r6
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	461d      	mov	r5, r3
 8002d9a:	f04f 0600 	mov.w	r6, #0
 8002d9e:	196b      	adds	r3, r5, r5
 8002da0:	eb46 0406 	adc.w	r4, r6, r6
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	f7fd fa6a 	bl	8000280 <__aeabi_uldivmod>
 8002dac:	4603      	mov	r3, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <UART_SetConfig+0x384>)
 8002db4:	fba3 2302 	umull	r2, r3, r3, r2
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	f04f 0600 	mov.w	r6, #0
 8002dc6:	46a9      	mov	r9, r5
 8002dc8:	46b2      	mov	sl, r6
 8002dca:	eb19 0309 	adds.w	r3, r9, r9
 8002dce:	eb4a 040a 	adc.w	r4, sl, sl
 8002dd2:	4699      	mov	r9, r3
 8002dd4:	46a2      	mov	sl, r4
 8002dd6:	eb19 0905 	adds.w	r9, r9, r5
 8002dda:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002df2:	4689      	mov	r9, r1
 8002df4:	4692      	mov	sl, r2
 8002df6:	eb19 0005 	adds.w	r0, r9, r5
 8002dfa:	eb4a 0106 	adc.w	r1, sl, r6
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	461d      	mov	r5, r3
 8002e04:	f04f 0600 	mov.w	r6, #0
 8002e08:	196b      	adds	r3, r5, r5
 8002e0a:	eb46 0406 	adc.w	r4, r6, r6
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	f7fd fa35 	bl	8000280 <__aeabi_uldivmod>
 8002e16:	4603      	mov	r3, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <UART_SetConfig+0x384>)
 8002e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2164      	movs	r1, #100	; 0x64
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	3332      	adds	r3, #50	; 0x32
 8002e30:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <UART_SetConfig+0x384>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e3e:	4498      	add	r8, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	461d      	mov	r5, r3
 8002e44:	f04f 0600 	mov.w	r6, #0
 8002e48:	46a9      	mov	r9, r5
 8002e4a:	46b2      	mov	sl, r6
 8002e4c:	eb19 0309 	adds.w	r3, r9, r9
 8002e50:	eb4a 040a 	adc.w	r4, sl, sl
 8002e54:	4699      	mov	r9, r3
 8002e56:	46a2      	mov	sl, r4
 8002e58:	eb19 0905 	adds.w	r9, r9, r5
 8002e5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e74:	4689      	mov	r9, r1
 8002e76:	4692      	mov	sl, r2
 8002e78:	eb19 0005 	adds.w	r0, r9, r5
 8002e7c:	eb4a 0106 	adc.w	r1, sl, r6
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	461d      	mov	r5, r3
 8002e86:	f04f 0600 	mov.w	r6, #0
 8002e8a:	196b      	adds	r3, r5, r5
 8002e8c:	eb46 0406 	adc.w	r4, r6, r6
 8002e90:	461a      	mov	r2, r3
 8002e92:	4623      	mov	r3, r4
 8002e94:	f7fd f9f4 	bl	8000280 <__aeabi_uldivmod>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <UART_SetConfig+0x384>)
 8002ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	2164      	movs	r1, #100	; 0x64
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	3332      	adds	r3, #50	; 0x32
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <UART_SetConfig+0x384>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	f003 0207 	and.w	r2, r3, #7
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4442      	add	r2, r8
 8002ec4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ec6:	e1b2      	b.n	800322e <UART_SetConfig+0x6e2>
 8002ec8:	40011000 	.word	0x40011000
 8002ecc:	40011400 	.word	0x40011400
 8002ed0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4ad7      	ldr	r2, [pc, #860]	; (8003238 <UART_SetConfig+0x6ec>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d005      	beq.n	8002eea <UART_SetConfig+0x39e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4ad6      	ldr	r2, [pc, #856]	; (800323c <UART_SetConfig+0x6f0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	f040 80d1 	bne.w	800308c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eea:	f7ff faab 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8002eee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	469a      	mov	sl, r3
 8002ef4:	f04f 0b00 	mov.w	fp, #0
 8002ef8:	46d0      	mov	r8, sl
 8002efa:	46d9      	mov	r9, fp
 8002efc:	eb18 0308 	adds.w	r3, r8, r8
 8002f00:	eb49 0409 	adc.w	r4, r9, r9
 8002f04:	4698      	mov	r8, r3
 8002f06:	46a1      	mov	r9, r4
 8002f08:	eb18 080a 	adds.w	r8, r8, sl
 8002f0c:	eb49 090b 	adc.w	r9, r9, fp
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f24:	4688      	mov	r8, r1
 8002f26:	4691      	mov	r9, r2
 8002f28:	eb1a 0508 	adds.w	r5, sl, r8
 8002f2c:	eb4b 0609 	adc.w	r6, fp, r9
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	0094      	lsls	r4, r2, #2
 8002f44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f48:	008b      	lsls	r3, r1, #2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	4631      	mov	r1, r6
 8002f52:	f7fd f995 	bl	8000280 <__aeabi_uldivmod>
 8002f56:	4603      	mov	r3, r0
 8002f58:	460c      	mov	r4, r1
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4bb8      	ldr	r3, [pc, #736]	; (8003240 <UART_SetConfig+0x6f4>)
 8002f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	469b      	mov	fp, r3
 8002f6c:	f04f 0c00 	mov.w	ip, #0
 8002f70:	46d9      	mov	r9, fp
 8002f72:	46e2      	mov	sl, ip
 8002f74:	eb19 0309 	adds.w	r3, r9, r9
 8002f78:	eb4a 040a 	adc.w	r4, sl, sl
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	46a2      	mov	sl, r4
 8002f80:	eb19 090b 	adds.w	r9, r9, fp
 8002f84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f9c:	4689      	mov	r9, r1
 8002f9e:	4692      	mov	sl, r2
 8002fa0:	eb1b 0509 	adds.w	r5, fp, r9
 8002fa4:	eb4c 060a 	adc.w	r6, ip, sl
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4619      	mov	r1, r3
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	f04f 0400 	mov.w	r4, #0
 8002fba:	0094      	lsls	r4, r2, #2
 8002fbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fc0:	008b      	lsls	r3, r1, #2
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4623      	mov	r3, r4
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	4631      	mov	r1, r6
 8002fca:	f7fd f959 	bl	8000280 <__aeabi_uldivmod>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b9a      	ldr	r3, [pc, #616]	; (8003240 <UART_SetConfig+0x6f4>)
 8002fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2164      	movs	r1, #100	; 0x64
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	3332      	adds	r3, #50	; 0x32
 8002fe8:	4a95      	ldr	r2, [pc, #596]	; (8003240 <UART_SetConfig+0x6f4>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff4:	4498      	add	r8, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	469b      	mov	fp, r3
 8002ffa:	f04f 0c00 	mov.w	ip, #0
 8002ffe:	46d9      	mov	r9, fp
 8003000:	46e2      	mov	sl, ip
 8003002:	eb19 0309 	adds.w	r3, r9, r9
 8003006:	eb4a 040a 	adc.w	r4, sl, sl
 800300a:	4699      	mov	r9, r3
 800300c:	46a2      	mov	sl, r4
 800300e:	eb19 090b 	adds.w	r9, r9, fp
 8003012:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800302a:	4689      	mov	r9, r1
 800302c:	4692      	mov	sl, r2
 800302e:	eb1b 0509 	adds.w	r5, fp, r9
 8003032:	eb4c 060a 	adc.w	r6, ip, sl
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	f04f 0400 	mov.w	r4, #0
 8003048:	0094      	lsls	r4, r2, #2
 800304a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800304e:	008b      	lsls	r3, r1, #2
 8003050:	461a      	mov	r2, r3
 8003052:	4623      	mov	r3, r4
 8003054:	4628      	mov	r0, r5
 8003056:	4631      	mov	r1, r6
 8003058:	f7fd f912 	bl	8000280 <__aeabi_uldivmod>
 800305c:	4603      	mov	r3, r0
 800305e:	460c      	mov	r4, r1
 8003060:	461a      	mov	r2, r3
 8003062:	4b77      	ldr	r3, [pc, #476]	; (8003240 <UART_SetConfig+0x6f4>)
 8003064:	fba3 1302 	umull	r1, r3, r3, r2
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	2164      	movs	r1, #100	; 0x64
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	3332      	adds	r3, #50	; 0x32
 8003076:	4a72      	ldr	r2, [pc, #456]	; (8003240 <UART_SetConfig+0x6f4>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	f003 020f 	and.w	r2, r3, #15
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4442      	add	r2, r8
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	e0d0      	b.n	800322e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7ff f9c6 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 8003090:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	469a      	mov	sl, r3
 8003096:	f04f 0b00 	mov.w	fp, #0
 800309a:	46d0      	mov	r8, sl
 800309c:	46d9      	mov	r9, fp
 800309e:	eb18 0308 	adds.w	r3, r8, r8
 80030a2:	eb49 0409 	adc.w	r4, r9, r9
 80030a6:	4698      	mov	r8, r3
 80030a8:	46a1      	mov	r9, r4
 80030aa:	eb18 080a 	adds.w	r8, r8, sl
 80030ae:	eb49 090b 	adc.w	r9, r9, fp
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030c6:	4688      	mov	r8, r1
 80030c8:	4691      	mov	r9, r2
 80030ca:	eb1a 0508 	adds.w	r5, sl, r8
 80030ce:	eb4b 0609 	adc.w	r6, fp, r9
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4619      	mov	r1, r3
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	f04f 0400 	mov.w	r4, #0
 80030e4:	0094      	lsls	r4, r2, #2
 80030e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030ea:	008b      	lsls	r3, r1, #2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	4631      	mov	r1, r6
 80030f4:	f7fd f8c4 	bl	8000280 <__aeabi_uldivmod>
 80030f8:	4603      	mov	r3, r0
 80030fa:	460c      	mov	r4, r1
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b50      	ldr	r3, [pc, #320]	; (8003240 <UART_SetConfig+0x6f4>)
 8003100:	fba3 2302 	umull	r2, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	469b      	mov	fp, r3
 800310e:	f04f 0c00 	mov.w	ip, #0
 8003112:	46d9      	mov	r9, fp
 8003114:	46e2      	mov	sl, ip
 8003116:	eb19 0309 	adds.w	r3, r9, r9
 800311a:	eb4a 040a 	adc.w	r4, sl, sl
 800311e:	4699      	mov	r9, r3
 8003120:	46a2      	mov	sl, r4
 8003122:	eb19 090b 	adds.w	r9, r9, fp
 8003126:	eb4a 0a0c 	adc.w	sl, sl, ip
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800313a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800313e:	4689      	mov	r9, r1
 8003140:	4692      	mov	sl, r2
 8003142:	eb1b 0509 	adds.w	r5, fp, r9
 8003146:	eb4c 060a 	adc.w	r6, ip, sl
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4619      	mov	r1, r3
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	0094      	lsls	r4, r2, #2
 800315e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003162:	008b      	lsls	r3, r1, #2
 8003164:	461a      	mov	r2, r3
 8003166:	4623      	mov	r3, r4
 8003168:	4628      	mov	r0, r5
 800316a:	4631      	mov	r1, r6
 800316c:	f7fd f888 	bl	8000280 <__aeabi_uldivmod>
 8003170:	4603      	mov	r3, r0
 8003172:	460c      	mov	r4, r1
 8003174:	461a      	mov	r2, r3
 8003176:	4b32      	ldr	r3, [pc, #200]	; (8003240 <UART_SetConfig+0x6f4>)
 8003178:	fba3 1302 	umull	r1, r3, r3, r2
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	2164      	movs	r1, #100	; 0x64
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	3332      	adds	r3, #50	; 0x32
 800318a:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <UART_SetConfig+0x6f4>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003196:	4498      	add	r8, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	469b      	mov	fp, r3
 800319c:	f04f 0c00 	mov.w	ip, #0
 80031a0:	46d9      	mov	r9, fp
 80031a2:	46e2      	mov	sl, ip
 80031a4:	eb19 0309 	adds.w	r3, r9, r9
 80031a8:	eb4a 040a 	adc.w	r4, sl, sl
 80031ac:	4699      	mov	r9, r3
 80031ae:	46a2      	mov	sl, r4
 80031b0:	eb19 090b 	adds.w	r9, r9, fp
 80031b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031cc:	4689      	mov	r9, r1
 80031ce:	4692      	mov	sl, r2
 80031d0:	eb1b 0509 	adds.w	r5, fp, r9
 80031d4:	eb4c 060a 	adc.w	r6, ip, sl
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4619      	mov	r1, r3
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	f04f 0400 	mov.w	r4, #0
 80031ea:	0094      	lsls	r4, r2, #2
 80031ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031f0:	008b      	lsls	r3, r1, #2
 80031f2:	461a      	mov	r2, r3
 80031f4:	4623      	mov	r3, r4
 80031f6:	4628      	mov	r0, r5
 80031f8:	4631      	mov	r1, r6
 80031fa:	f7fd f841 	bl	8000280 <__aeabi_uldivmod>
 80031fe:	4603      	mov	r3, r0
 8003200:	460c      	mov	r4, r1
 8003202:	461a      	mov	r2, r3
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <UART_SetConfig+0x6f4>)
 8003206:	fba3 1302 	umull	r1, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2164      	movs	r1, #100	; 0x64
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	3332      	adds	r3, #50	; 0x32
 8003218:	4a09      	ldr	r2, [pc, #36]	; (8003240 <UART_SetConfig+0x6f4>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4442      	add	r2, r8
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	e7ff      	b.n	800322e <UART_SetConfig+0x6e2>
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003238:	40011000 	.word	0x40011000
 800323c:	40011400 	.word	0x40011400
 8003240:	51eb851f 	.word	0x51eb851f

08003244 <atoi>:
 8003244:	220a      	movs	r2, #10
 8003246:	2100      	movs	r1, #0
 8003248:	f000 b90a 	b.w	8003460 <strtol>

0800324c <__errno>:
 800324c:	4b01      	ldr	r3, [pc, #4]	; (8003254 <__errno+0x8>)
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	200001c0 	.word	0x200001c0

08003258 <__libc_init_array>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	4e0d      	ldr	r6, [pc, #52]	; (8003290 <__libc_init_array+0x38>)
 800325c:	4c0d      	ldr	r4, [pc, #52]	; (8003294 <__libc_init_array+0x3c>)
 800325e:	1ba4      	subs	r4, r4, r6
 8003260:	10a4      	asrs	r4, r4, #2
 8003262:	2500      	movs	r5, #0
 8003264:	42a5      	cmp	r5, r4
 8003266:	d109      	bne.n	800327c <__libc_init_array+0x24>
 8003268:	4e0b      	ldr	r6, [pc, #44]	; (8003298 <__libc_init_array+0x40>)
 800326a:	4c0c      	ldr	r4, [pc, #48]	; (800329c <__libc_init_array+0x44>)
 800326c:	f000 fd18 	bl	8003ca0 <_init>
 8003270:	1ba4      	subs	r4, r4, r6
 8003272:	10a4      	asrs	r4, r4, #2
 8003274:	2500      	movs	r5, #0
 8003276:	42a5      	cmp	r5, r4
 8003278:	d105      	bne.n	8003286 <__libc_init_array+0x2e>
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003280:	4798      	blx	r3
 8003282:	3501      	adds	r5, #1
 8003284:	e7ee      	b.n	8003264 <__libc_init_array+0xc>
 8003286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800328a:	4798      	blx	r3
 800328c:	3501      	adds	r5, #1
 800328e:	e7f2      	b.n	8003276 <__libc_init_array+0x1e>
 8003290:	08004214 	.word	0x08004214
 8003294:	08004214 	.word	0x08004214
 8003298:	08004214 	.word	0x08004214
 800329c:	08004218 	.word	0x08004218

080032a0 <memset>:
 80032a0:	4402      	add	r2, r0
 80032a2:	4603      	mov	r3, r0
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d100      	bne.n	80032aa <memset+0xa>
 80032a8:	4770      	bx	lr
 80032aa:	f803 1b01 	strb.w	r1, [r3], #1
 80032ae:	e7f9      	b.n	80032a4 <memset+0x4>

080032b0 <sniprintf>:
 80032b0:	b40c      	push	{r2, r3}
 80032b2:	b530      	push	{r4, r5, lr}
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <sniprintf+0x64>)
 80032b6:	1e0c      	subs	r4, r1, #0
 80032b8:	b09d      	sub	sp, #116	; 0x74
 80032ba:	681d      	ldr	r5, [r3, #0]
 80032bc:	da08      	bge.n	80032d0 <sniprintf+0x20>
 80032be:	238b      	movs	r3, #139	; 0x8b
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	f04f 30ff 	mov.w	r0, #4294967295
 80032c6:	b01d      	add	sp, #116	; 0x74
 80032c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032cc:	b002      	add	sp, #8
 80032ce:	4770      	bx	lr
 80032d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80032d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80032d8:	bf14      	ite	ne
 80032da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80032de:	4623      	moveq	r3, r4
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	9307      	str	r3, [sp, #28]
 80032e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032e8:	9002      	str	r0, [sp, #8]
 80032ea:	9006      	str	r0, [sp, #24]
 80032ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80032f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032f2:	ab21      	add	r3, sp, #132	; 0x84
 80032f4:	a902      	add	r1, sp, #8
 80032f6:	4628      	mov	r0, r5
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	f000 f937 	bl	800356c <_svfiprintf_r>
 80032fe:	1c43      	adds	r3, r0, #1
 8003300:	bfbc      	itt	lt
 8003302:	238b      	movlt	r3, #139	; 0x8b
 8003304:	602b      	strlt	r3, [r5, #0]
 8003306:	2c00      	cmp	r4, #0
 8003308:	d0dd      	beq.n	80032c6 <sniprintf+0x16>
 800330a:	9b02      	ldr	r3, [sp, #8]
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e7d9      	b.n	80032c6 <sniprintf+0x16>
 8003312:	bf00      	nop
 8003314:	200001c0 	.word	0x200001c0

08003318 <strcat>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4603      	mov	r3, r0
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	1c5c      	adds	r4, r3, #1
 8003320:	b93a      	cbnz	r2, 8003332 <strcat+0x1a>
 8003322:	3b01      	subs	r3, #1
 8003324:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003328:	f803 2f01 	strb.w	r2, [r3, #1]!
 800332c:	2a00      	cmp	r2, #0
 800332e:	d1f9      	bne.n	8003324 <strcat+0xc>
 8003330:	bd10      	pop	{r4, pc}
 8003332:	4623      	mov	r3, r4
 8003334:	e7f2      	b.n	800331c <strcat+0x4>

08003336 <strstr>:
 8003336:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003338:	7803      	ldrb	r3, [r0, #0]
 800333a:	b17b      	cbz	r3, 800335c <strstr+0x26>
 800333c:	4604      	mov	r4, r0
 800333e:	7823      	ldrb	r3, [r4, #0]
 8003340:	4620      	mov	r0, r4
 8003342:	1c66      	adds	r6, r4, #1
 8003344:	b17b      	cbz	r3, 8003366 <strstr+0x30>
 8003346:	1e4a      	subs	r2, r1, #1
 8003348:	1e63      	subs	r3, r4, #1
 800334a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800334e:	b14d      	cbz	r5, 8003364 <strstr+0x2e>
 8003350:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003354:	42af      	cmp	r7, r5
 8003356:	4634      	mov	r4, r6
 8003358:	d0f7      	beq.n	800334a <strstr+0x14>
 800335a:	e7f0      	b.n	800333e <strstr+0x8>
 800335c:	780b      	ldrb	r3, [r1, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf18      	it	ne
 8003362:	2000      	movne	r0, #0
 8003364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003366:	4618      	mov	r0, r3
 8003368:	e7fc      	b.n	8003364 <strstr+0x2e>

0800336a <_strtol_l.isra.0>:
 800336a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336e:	4680      	mov	r8, r0
 8003370:	4689      	mov	r9, r1
 8003372:	4692      	mov	sl, r2
 8003374:	461e      	mov	r6, r3
 8003376:	460f      	mov	r7, r1
 8003378:	463d      	mov	r5, r7
 800337a:	9808      	ldr	r0, [sp, #32]
 800337c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003380:	f000 f884 	bl	800348c <__locale_ctype_ptr_l>
 8003384:	4420      	add	r0, r4
 8003386:	7843      	ldrb	r3, [r0, #1]
 8003388:	f013 0308 	ands.w	r3, r3, #8
 800338c:	d132      	bne.n	80033f4 <_strtol_l.isra.0+0x8a>
 800338e:	2c2d      	cmp	r4, #45	; 0x2d
 8003390:	d132      	bne.n	80033f8 <_strtol_l.isra.0+0x8e>
 8003392:	787c      	ldrb	r4, [r7, #1]
 8003394:	1cbd      	adds	r5, r7, #2
 8003396:	2201      	movs	r2, #1
 8003398:	2e00      	cmp	r6, #0
 800339a:	d05d      	beq.n	8003458 <_strtol_l.isra.0+0xee>
 800339c:	2e10      	cmp	r6, #16
 800339e:	d109      	bne.n	80033b4 <_strtol_l.isra.0+0x4a>
 80033a0:	2c30      	cmp	r4, #48	; 0x30
 80033a2:	d107      	bne.n	80033b4 <_strtol_l.isra.0+0x4a>
 80033a4:	782b      	ldrb	r3, [r5, #0]
 80033a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80033aa:	2b58      	cmp	r3, #88	; 0x58
 80033ac:	d14f      	bne.n	800344e <_strtol_l.isra.0+0xe4>
 80033ae:	786c      	ldrb	r4, [r5, #1]
 80033b0:	2610      	movs	r6, #16
 80033b2:	3502      	adds	r5, #2
 80033b4:	2a00      	cmp	r2, #0
 80033b6:	bf14      	ite	ne
 80033b8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80033bc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80033c0:	2700      	movs	r7, #0
 80033c2:	fbb1 fcf6 	udiv	ip, r1, r6
 80033c6:	4638      	mov	r0, r7
 80033c8:	fb06 1e1c 	mls	lr, r6, ip, r1
 80033cc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d817      	bhi.n	8003404 <_strtol_l.isra.0+0x9a>
 80033d4:	461c      	mov	r4, r3
 80033d6:	42a6      	cmp	r6, r4
 80033d8:	dd23      	ble.n	8003422 <_strtol_l.isra.0+0xb8>
 80033da:	1c7b      	adds	r3, r7, #1
 80033dc:	d007      	beq.n	80033ee <_strtol_l.isra.0+0x84>
 80033de:	4584      	cmp	ip, r0
 80033e0:	d31c      	bcc.n	800341c <_strtol_l.isra.0+0xb2>
 80033e2:	d101      	bne.n	80033e8 <_strtol_l.isra.0+0x7e>
 80033e4:	45a6      	cmp	lr, r4
 80033e6:	db19      	blt.n	800341c <_strtol_l.isra.0+0xb2>
 80033e8:	fb00 4006 	mla	r0, r0, r6, r4
 80033ec:	2701      	movs	r7, #1
 80033ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80033f2:	e7eb      	b.n	80033cc <_strtol_l.isra.0+0x62>
 80033f4:	462f      	mov	r7, r5
 80033f6:	e7bf      	b.n	8003378 <_strtol_l.isra.0+0xe>
 80033f8:	2c2b      	cmp	r4, #43	; 0x2b
 80033fa:	bf04      	itt	eq
 80033fc:	1cbd      	addeq	r5, r7, #2
 80033fe:	787c      	ldrbeq	r4, [r7, #1]
 8003400:	461a      	mov	r2, r3
 8003402:	e7c9      	b.n	8003398 <_strtol_l.isra.0+0x2e>
 8003404:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003408:	2b19      	cmp	r3, #25
 800340a:	d801      	bhi.n	8003410 <_strtol_l.isra.0+0xa6>
 800340c:	3c37      	subs	r4, #55	; 0x37
 800340e:	e7e2      	b.n	80033d6 <_strtol_l.isra.0+0x6c>
 8003410:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003414:	2b19      	cmp	r3, #25
 8003416:	d804      	bhi.n	8003422 <_strtol_l.isra.0+0xb8>
 8003418:	3c57      	subs	r4, #87	; 0x57
 800341a:	e7dc      	b.n	80033d6 <_strtol_l.isra.0+0x6c>
 800341c:	f04f 37ff 	mov.w	r7, #4294967295
 8003420:	e7e5      	b.n	80033ee <_strtol_l.isra.0+0x84>
 8003422:	1c7b      	adds	r3, r7, #1
 8003424:	d108      	bne.n	8003438 <_strtol_l.isra.0+0xce>
 8003426:	2322      	movs	r3, #34	; 0x22
 8003428:	f8c8 3000 	str.w	r3, [r8]
 800342c:	4608      	mov	r0, r1
 800342e:	f1ba 0f00 	cmp.w	sl, #0
 8003432:	d107      	bne.n	8003444 <_strtol_l.isra.0+0xda>
 8003434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003438:	b102      	cbz	r2, 800343c <_strtol_l.isra.0+0xd2>
 800343a:	4240      	negs	r0, r0
 800343c:	f1ba 0f00 	cmp.w	sl, #0
 8003440:	d0f8      	beq.n	8003434 <_strtol_l.isra.0+0xca>
 8003442:	b10f      	cbz	r7, 8003448 <_strtol_l.isra.0+0xde>
 8003444:	f105 39ff 	add.w	r9, r5, #4294967295
 8003448:	f8ca 9000 	str.w	r9, [sl]
 800344c:	e7f2      	b.n	8003434 <_strtol_l.isra.0+0xca>
 800344e:	2430      	movs	r4, #48	; 0x30
 8003450:	2e00      	cmp	r6, #0
 8003452:	d1af      	bne.n	80033b4 <_strtol_l.isra.0+0x4a>
 8003454:	2608      	movs	r6, #8
 8003456:	e7ad      	b.n	80033b4 <_strtol_l.isra.0+0x4a>
 8003458:	2c30      	cmp	r4, #48	; 0x30
 800345a:	d0a3      	beq.n	80033a4 <_strtol_l.isra.0+0x3a>
 800345c:	260a      	movs	r6, #10
 800345e:	e7a9      	b.n	80033b4 <_strtol_l.isra.0+0x4a>

08003460 <strtol>:
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <strtol+0x24>)
 8003462:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003464:	681c      	ldr	r4, [r3, #0]
 8003466:	4d08      	ldr	r5, [pc, #32]	; (8003488 <strtol+0x28>)
 8003468:	6a23      	ldr	r3, [r4, #32]
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf08      	it	eq
 800346e:	462b      	moveq	r3, r5
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	460a      	mov	r2, r1
 8003476:	4601      	mov	r1, r0
 8003478:	4620      	mov	r0, r4
 800347a:	f7ff ff76 	bl	800336a <_strtol_l.isra.0>
 800347e:	b003      	add	sp, #12
 8003480:	bd30      	pop	{r4, r5, pc}
 8003482:	bf00      	nop
 8003484:	200001c0 	.word	0x200001c0
 8003488:	20000224 	.word	0x20000224

0800348c <__locale_ctype_ptr_l>:
 800348c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003490:	4770      	bx	lr

08003492 <__ascii_mbtowc>:
 8003492:	b082      	sub	sp, #8
 8003494:	b901      	cbnz	r1, 8003498 <__ascii_mbtowc+0x6>
 8003496:	a901      	add	r1, sp, #4
 8003498:	b142      	cbz	r2, 80034ac <__ascii_mbtowc+0x1a>
 800349a:	b14b      	cbz	r3, 80034b0 <__ascii_mbtowc+0x1e>
 800349c:	7813      	ldrb	r3, [r2, #0]
 800349e:	600b      	str	r3, [r1, #0]
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	1c10      	adds	r0, r2, #0
 80034a4:	bf18      	it	ne
 80034a6:	2001      	movne	r0, #1
 80034a8:	b002      	add	sp, #8
 80034aa:	4770      	bx	lr
 80034ac:	4610      	mov	r0, r2
 80034ae:	e7fb      	b.n	80034a8 <__ascii_mbtowc+0x16>
 80034b0:	f06f 0001 	mvn.w	r0, #1
 80034b4:	e7f8      	b.n	80034a8 <__ascii_mbtowc+0x16>

080034b6 <__ssputs_r>:
 80034b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ba:	688e      	ldr	r6, [r1, #8]
 80034bc:	429e      	cmp	r6, r3
 80034be:	4682      	mov	sl, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	4690      	mov	r8, r2
 80034c4:	4699      	mov	r9, r3
 80034c6:	d837      	bhi.n	8003538 <__ssputs_r+0x82>
 80034c8:	898a      	ldrh	r2, [r1, #12]
 80034ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034ce:	d031      	beq.n	8003534 <__ssputs_r+0x7e>
 80034d0:	6825      	ldr	r5, [r4, #0]
 80034d2:	6909      	ldr	r1, [r1, #16]
 80034d4:	1a6f      	subs	r7, r5, r1
 80034d6:	6965      	ldr	r5, [r4, #20]
 80034d8:	2302      	movs	r3, #2
 80034da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034de:	fb95 f5f3 	sdiv	r5, r5, r3
 80034e2:	f109 0301 	add.w	r3, r9, #1
 80034e6:	443b      	add	r3, r7
 80034e8:	429d      	cmp	r5, r3
 80034ea:	bf38      	it	cc
 80034ec:	461d      	movcc	r5, r3
 80034ee:	0553      	lsls	r3, r2, #21
 80034f0:	d530      	bpl.n	8003554 <__ssputs_r+0x9e>
 80034f2:	4629      	mov	r1, r5
 80034f4:	f000 fb3a 	bl	8003b6c <_malloc_r>
 80034f8:	4606      	mov	r6, r0
 80034fa:	b950      	cbnz	r0, 8003512 <__ssputs_r+0x5c>
 80034fc:	230c      	movs	r3, #12
 80034fe:	f8ca 3000 	str.w	r3, [sl]
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	f04f 30ff 	mov.w	r0, #4294967295
 800350e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003512:	463a      	mov	r2, r7
 8003514:	6921      	ldr	r1, [r4, #16]
 8003516:	f000 fab6 	bl	8003a86 <memcpy>
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	6126      	str	r6, [r4, #16]
 8003528:	6165      	str	r5, [r4, #20]
 800352a:	443e      	add	r6, r7
 800352c:	1bed      	subs	r5, r5, r7
 800352e:	6026      	str	r6, [r4, #0]
 8003530:	60a5      	str	r5, [r4, #8]
 8003532:	464e      	mov	r6, r9
 8003534:	454e      	cmp	r6, r9
 8003536:	d900      	bls.n	800353a <__ssputs_r+0x84>
 8003538:	464e      	mov	r6, r9
 800353a:	4632      	mov	r2, r6
 800353c:	4641      	mov	r1, r8
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	f000 faac 	bl	8003a9c <memmove>
 8003544:	68a3      	ldr	r3, [r4, #8]
 8003546:	1b9b      	subs	r3, r3, r6
 8003548:	60a3      	str	r3, [r4, #8]
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	441e      	add	r6, r3
 800354e:	6026      	str	r6, [r4, #0]
 8003550:	2000      	movs	r0, #0
 8003552:	e7dc      	b.n	800350e <__ssputs_r+0x58>
 8003554:	462a      	mov	r2, r5
 8003556:	f000 fb63 	bl	8003c20 <_realloc_r>
 800355a:	4606      	mov	r6, r0
 800355c:	2800      	cmp	r0, #0
 800355e:	d1e2      	bne.n	8003526 <__ssputs_r+0x70>
 8003560:	6921      	ldr	r1, [r4, #16]
 8003562:	4650      	mov	r0, sl
 8003564:	f000 fab4 	bl	8003ad0 <_free_r>
 8003568:	e7c8      	b.n	80034fc <__ssputs_r+0x46>
	...

0800356c <_svfiprintf_r>:
 800356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003570:	461d      	mov	r5, r3
 8003572:	898b      	ldrh	r3, [r1, #12]
 8003574:	061f      	lsls	r7, r3, #24
 8003576:	b09d      	sub	sp, #116	; 0x74
 8003578:	4680      	mov	r8, r0
 800357a:	460c      	mov	r4, r1
 800357c:	4616      	mov	r6, r2
 800357e:	d50f      	bpl.n	80035a0 <_svfiprintf_r+0x34>
 8003580:	690b      	ldr	r3, [r1, #16]
 8003582:	b96b      	cbnz	r3, 80035a0 <_svfiprintf_r+0x34>
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	f000 faf1 	bl	8003b6c <_malloc_r>
 800358a:	6020      	str	r0, [r4, #0]
 800358c:	6120      	str	r0, [r4, #16]
 800358e:	b928      	cbnz	r0, 800359c <_svfiprintf_r+0x30>
 8003590:	230c      	movs	r3, #12
 8003592:	f8c8 3000 	str.w	r3, [r8]
 8003596:	f04f 30ff 	mov.w	r0, #4294967295
 800359a:	e0c8      	b.n	800372e <_svfiprintf_r+0x1c2>
 800359c:	2340      	movs	r3, #64	; 0x40
 800359e:	6163      	str	r3, [r4, #20]
 80035a0:	2300      	movs	r3, #0
 80035a2:	9309      	str	r3, [sp, #36]	; 0x24
 80035a4:	2320      	movs	r3, #32
 80035a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035aa:	2330      	movs	r3, #48	; 0x30
 80035ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035b0:	9503      	str	r5, [sp, #12]
 80035b2:	f04f 0b01 	mov.w	fp, #1
 80035b6:	4637      	mov	r7, r6
 80035b8:	463d      	mov	r5, r7
 80035ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035be:	b10b      	cbz	r3, 80035c4 <_svfiprintf_r+0x58>
 80035c0:	2b25      	cmp	r3, #37	; 0x25
 80035c2:	d13e      	bne.n	8003642 <_svfiprintf_r+0xd6>
 80035c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80035c8:	d00b      	beq.n	80035e2 <_svfiprintf_r+0x76>
 80035ca:	4653      	mov	r3, sl
 80035cc:	4632      	mov	r2, r6
 80035ce:	4621      	mov	r1, r4
 80035d0:	4640      	mov	r0, r8
 80035d2:	f7ff ff70 	bl	80034b6 <__ssputs_r>
 80035d6:	3001      	adds	r0, #1
 80035d8:	f000 80a4 	beq.w	8003724 <_svfiprintf_r+0x1b8>
 80035dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035de:	4453      	add	r3, sl
 80035e0:	9309      	str	r3, [sp, #36]	; 0x24
 80035e2:	783b      	ldrb	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 809d 	beq.w	8003724 <_svfiprintf_r+0x1b8>
 80035ea:	2300      	movs	r3, #0
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	9307      	str	r3, [sp, #28]
 80035f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035fc:	931a      	str	r3, [sp, #104]	; 0x68
 80035fe:	462f      	mov	r7, r5
 8003600:	2205      	movs	r2, #5
 8003602:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003606:	4850      	ldr	r0, [pc, #320]	; (8003748 <_svfiprintf_r+0x1dc>)
 8003608:	f7fc fdea 	bl	80001e0 <memchr>
 800360c:	9b04      	ldr	r3, [sp, #16]
 800360e:	b9d0      	cbnz	r0, 8003646 <_svfiprintf_r+0xda>
 8003610:	06d9      	lsls	r1, r3, #27
 8003612:	bf44      	itt	mi
 8003614:	2220      	movmi	r2, #32
 8003616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800361a:	071a      	lsls	r2, r3, #28
 800361c:	bf44      	itt	mi
 800361e:	222b      	movmi	r2, #43	; 0x2b
 8003620:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003624:	782a      	ldrb	r2, [r5, #0]
 8003626:	2a2a      	cmp	r2, #42	; 0x2a
 8003628:	d015      	beq.n	8003656 <_svfiprintf_r+0xea>
 800362a:	9a07      	ldr	r2, [sp, #28]
 800362c:	462f      	mov	r7, r5
 800362e:	2000      	movs	r0, #0
 8003630:	250a      	movs	r5, #10
 8003632:	4639      	mov	r1, r7
 8003634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003638:	3b30      	subs	r3, #48	; 0x30
 800363a:	2b09      	cmp	r3, #9
 800363c:	d94d      	bls.n	80036da <_svfiprintf_r+0x16e>
 800363e:	b1b8      	cbz	r0, 8003670 <_svfiprintf_r+0x104>
 8003640:	e00f      	b.n	8003662 <_svfiprintf_r+0xf6>
 8003642:	462f      	mov	r7, r5
 8003644:	e7b8      	b.n	80035b8 <_svfiprintf_r+0x4c>
 8003646:	4a40      	ldr	r2, [pc, #256]	; (8003748 <_svfiprintf_r+0x1dc>)
 8003648:	1a80      	subs	r0, r0, r2
 800364a:	fa0b f000 	lsl.w	r0, fp, r0
 800364e:	4318      	orrs	r0, r3
 8003650:	9004      	str	r0, [sp, #16]
 8003652:	463d      	mov	r5, r7
 8003654:	e7d3      	b.n	80035fe <_svfiprintf_r+0x92>
 8003656:	9a03      	ldr	r2, [sp, #12]
 8003658:	1d11      	adds	r1, r2, #4
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	9103      	str	r1, [sp, #12]
 800365e:	2a00      	cmp	r2, #0
 8003660:	db01      	blt.n	8003666 <_svfiprintf_r+0xfa>
 8003662:	9207      	str	r2, [sp, #28]
 8003664:	e004      	b.n	8003670 <_svfiprintf_r+0x104>
 8003666:	4252      	negs	r2, r2
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	9207      	str	r2, [sp, #28]
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	783b      	ldrb	r3, [r7, #0]
 8003672:	2b2e      	cmp	r3, #46	; 0x2e
 8003674:	d10c      	bne.n	8003690 <_svfiprintf_r+0x124>
 8003676:	787b      	ldrb	r3, [r7, #1]
 8003678:	2b2a      	cmp	r3, #42	; 0x2a
 800367a:	d133      	bne.n	80036e4 <_svfiprintf_r+0x178>
 800367c:	9b03      	ldr	r3, [sp, #12]
 800367e:	1d1a      	adds	r2, r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	9203      	str	r2, [sp, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	bfb8      	it	lt
 8003688:	f04f 33ff 	movlt.w	r3, #4294967295
 800368c:	3702      	adds	r7, #2
 800368e:	9305      	str	r3, [sp, #20]
 8003690:	4d2e      	ldr	r5, [pc, #184]	; (800374c <_svfiprintf_r+0x1e0>)
 8003692:	7839      	ldrb	r1, [r7, #0]
 8003694:	2203      	movs	r2, #3
 8003696:	4628      	mov	r0, r5
 8003698:	f7fc fda2 	bl	80001e0 <memchr>
 800369c:	b138      	cbz	r0, 80036ae <_svfiprintf_r+0x142>
 800369e:	2340      	movs	r3, #64	; 0x40
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	fa03 f000 	lsl.w	r0, r3, r0
 80036a6:	9b04      	ldr	r3, [sp, #16]
 80036a8:	4303      	orrs	r3, r0
 80036aa:	3701      	adds	r7, #1
 80036ac:	9304      	str	r3, [sp, #16]
 80036ae:	7839      	ldrb	r1, [r7, #0]
 80036b0:	4827      	ldr	r0, [pc, #156]	; (8003750 <_svfiprintf_r+0x1e4>)
 80036b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036b6:	2206      	movs	r2, #6
 80036b8:	1c7e      	adds	r6, r7, #1
 80036ba:	f7fc fd91 	bl	80001e0 <memchr>
 80036be:	2800      	cmp	r0, #0
 80036c0:	d038      	beq.n	8003734 <_svfiprintf_r+0x1c8>
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <_svfiprintf_r+0x1e8>)
 80036c4:	bb13      	cbnz	r3, 800370c <_svfiprintf_r+0x1a0>
 80036c6:	9b03      	ldr	r3, [sp, #12]
 80036c8:	3307      	adds	r3, #7
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	3308      	adds	r3, #8
 80036d0:	9303      	str	r3, [sp, #12]
 80036d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d4:	444b      	add	r3, r9
 80036d6:	9309      	str	r3, [sp, #36]	; 0x24
 80036d8:	e76d      	b.n	80035b6 <_svfiprintf_r+0x4a>
 80036da:	fb05 3202 	mla	r2, r5, r2, r3
 80036de:	2001      	movs	r0, #1
 80036e0:	460f      	mov	r7, r1
 80036e2:	e7a6      	b.n	8003632 <_svfiprintf_r+0xc6>
 80036e4:	2300      	movs	r3, #0
 80036e6:	3701      	adds	r7, #1
 80036e8:	9305      	str	r3, [sp, #20]
 80036ea:	4619      	mov	r1, r3
 80036ec:	250a      	movs	r5, #10
 80036ee:	4638      	mov	r0, r7
 80036f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036f4:	3a30      	subs	r2, #48	; 0x30
 80036f6:	2a09      	cmp	r2, #9
 80036f8:	d903      	bls.n	8003702 <_svfiprintf_r+0x196>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0c8      	beq.n	8003690 <_svfiprintf_r+0x124>
 80036fe:	9105      	str	r1, [sp, #20]
 8003700:	e7c6      	b.n	8003690 <_svfiprintf_r+0x124>
 8003702:	fb05 2101 	mla	r1, r5, r1, r2
 8003706:	2301      	movs	r3, #1
 8003708:	4607      	mov	r7, r0
 800370a:	e7f0      	b.n	80036ee <_svfiprintf_r+0x182>
 800370c:	ab03      	add	r3, sp, #12
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4622      	mov	r2, r4
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <_svfiprintf_r+0x1ec>)
 8003714:	a904      	add	r1, sp, #16
 8003716:	4640      	mov	r0, r8
 8003718:	f3af 8000 	nop.w
 800371c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003720:	4681      	mov	r9, r0
 8003722:	d1d6      	bne.n	80036d2 <_svfiprintf_r+0x166>
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	065b      	lsls	r3, r3, #25
 8003728:	f53f af35 	bmi.w	8003596 <_svfiprintf_r+0x2a>
 800372c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800372e:	b01d      	add	sp, #116	; 0x74
 8003730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003734:	ab03      	add	r3, sp, #12
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4622      	mov	r2, r4
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <_svfiprintf_r+0x1ec>)
 800373c:	a904      	add	r1, sp, #16
 800373e:	4640      	mov	r0, r8
 8003740:	f000 f882 	bl	8003848 <_printf_i>
 8003744:	e7ea      	b.n	800371c <_svfiprintf_r+0x1b0>
 8003746:	bf00      	nop
 8003748:	080040d6 	.word	0x080040d6
 800374c:	080040dc 	.word	0x080040dc
 8003750:	080040e0 	.word	0x080040e0
 8003754:	00000000 	.word	0x00000000
 8003758:	080034b7 	.word	0x080034b7

0800375c <_printf_common>:
 800375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	4691      	mov	r9, r2
 8003762:	461f      	mov	r7, r3
 8003764:	688a      	ldr	r2, [r1, #8]
 8003766:	690b      	ldr	r3, [r1, #16]
 8003768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800376c:	4293      	cmp	r3, r2
 800376e:	bfb8      	it	lt
 8003770:	4613      	movlt	r3, r2
 8003772:	f8c9 3000 	str.w	r3, [r9]
 8003776:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800377a:	4606      	mov	r6, r0
 800377c:	460c      	mov	r4, r1
 800377e:	b112      	cbz	r2, 8003786 <_printf_common+0x2a>
 8003780:	3301      	adds	r3, #1
 8003782:	f8c9 3000 	str.w	r3, [r9]
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	0699      	lsls	r1, r3, #26
 800378a:	bf42      	ittt	mi
 800378c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003790:	3302      	addmi	r3, #2
 8003792:	f8c9 3000 	strmi.w	r3, [r9]
 8003796:	6825      	ldr	r5, [r4, #0]
 8003798:	f015 0506 	ands.w	r5, r5, #6
 800379c:	d107      	bne.n	80037ae <_printf_common+0x52>
 800379e:	f104 0a19 	add.w	sl, r4, #25
 80037a2:	68e3      	ldr	r3, [r4, #12]
 80037a4:	f8d9 2000 	ldr.w	r2, [r9]
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	42ab      	cmp	r3, r5
 80037ac:	dc28      	bgt.n	8003800 <_printf_common+0xa4>
 80037ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	3300      	adds	r3, #0
 80037b6:	bf18      	it	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	0692      	lsls	r2, r2, #26
 80037bc:	d42d      	bmi.n	800381a <_printf_common+0xbe>
 80037be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037c2:	4639      	mov	r1, r7
 80037c4:	4630      	mov	r0, r6
 80037c6:	47c0      	blx	r8
 80037c8:	3001      	adds	r0, #1
 80037ca:	d020      	beq.n	800380e <_printf_common+0xb2>
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	68e5      	ldr	r5, [r4, #12]
 80037d0:	f8d9 2000 	ldr.w	r2, [r9]
 80037d4:	f003 0306 	and.w	r3, r3, #6
 80037d8:	2b04      	cmp	r3, #4
 80037da:	bf08      	it	eq
 80037dc:	1aad      	subeq	r5, r5, r2
 80037de:	68a3      	ldr	r3, [r4, #8]
 80037e0:	6922      	ldr	r2, [r4, #16]
 80037e2:	bf0c      	ite	eq
 80037e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037e8:	2500      	movne	r5, #0
 80037ea:	4293      	cmp	r3, r2
 80037ec:	bfc4      	itt	gt
 80037ee:	1a9b      	subgt	r3, r3, r2
 80037f0:	18ed      	addgt	r5, r5, r3
 80037f2:	f04f 0900 	mov.w	r9, #0
 80037f6:	341a      	adds	r4, #26
 80037f8:	454d      	cmp	r5, r9
 80037fa:	d11a      	bne.n	8003832 <_printf_common+0xd6>
 80037fc:	2000      	movs	r0, #0
 80037fe:	e008      	b.n	8003812 <_printf_common+0xb6>
 8003800:	2301      	movs	r3, #1
 8003802:	4652      	mov	r2, sl
 8003804:	4639      	mov	r1, r7
 8003806:	4630      	mov	r0, r6
 8003808:	47c0      	blx	r8
 800380a:	3001      	adds	r0, #1
 800380c:	d103      	bne.n	8003816 <_printf_common+0xba>
 800380e:	f04f 30ff 	mov.w	r0, #4294967295
 8003812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003816:	3501      	adds	r5, #1
 8003818:	e7c3      	b.n	80037a2 <_printf_common+0x46>
 800381a:	18e1      	adds	r1, r4, r3
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	2030      	movs	r0, #48	; 0x30
 8003820:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003824:	4422      	add	r2, r4
 8003826:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800382a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800382e:	3302      	adds	r3, #2
 8003830:	e7c5      	b.n	80037be <_printf_common+0x62>
 8003832:	2301      	movs	r3, #1
 8003834:	4622      	mov	r2, r4
 8003836:	4639      	mov	r1, r7
 8003838:	4630      	mov	r0, r6
 800383a:	47c0      	blx	r8
 800383c:	3001      	adds	r0, #1
 800383e:	d0e6      	beq.n	800380e <_printf_common+0xb2>
 8003840:	f109 0901 	add.w	r9, r9, #1
 8003844:	e7d8      	b.n	80037f8 <_printf_common+0x9c>
	...

08003848 <_printf_i>:
 8003848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800384c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003850:	460c      	mov	r4, r1
 8003852:	7e09      	ldrb	r1, [r1, #24]
 8003854:	b085      	sub	sp, #20
 8003856:	296e      	cmp	r1, #110	; 0x6e
 8003858:	4617      	mov	r7, r2
 800385a:	4606      	mov	r6, r0
 800385c:	4698      	mov	r8, r3
 800385e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003860:	f000 80b3 	beq.w	80039ca <_printf_i+0x182>
 8003864:	d822      	bhi.n	80038ac <_printf_i+0x64>
 8003866:	2963      	cmp	r1, #99	; 0x63
 8003868:	d036      	beq.n	80038d8 <_printf_i+0x90>
 800386a:	d80a      	bhi.n	8003882 <_printf_i+0x3a>
 800386c:	2900      	cmp	r1, #0
 800386e:	f000 80b9 	beq.w	80039e4 <_printf_i+0x19c>
 8003872:	2958      	cmp	r1, #88	; 0x58
 8003874:	f000 8083 	beq.w	800397e <_printf_i+0x136>
 8003878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800387c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003880:	e032      	b.n	80038e8 <_printf_i+0xa0>
 8003882:	2964      	cmp	r1, #100	; 0x64
 8003884:	d001      	beq.n	800388a <_printf_i+0x42>
 8003886:	2969      	cmp	r1, #105	; 0x69
 8003888:	d1f6      	bne.n	8003878 <_printf_i+0x30>
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	6813      	ldr	r3, [r2, #0]
 800388e:	0605      	lsls	r5, r0, #24
 8003890:	f103 0104 	add.w	r1, r3, #4
 8003894:	d52a      	bpl.n	80038ec <_printf_i+0xa4>
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	da03      	bge.n	80038a6 <_printf_i+0x5e>
 800389e:	222d      	movs	r2, #45	; 0x2d
 80038a0:	425b      	negs	r3, r3
 80038a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038a6:	486f      	ldr	r0, [pc, #444]	; (8003a64 <_printf_i+0x21c>)
 80038a8:	220a      	movs	r2, #10
 80038aa:	e039      	b.n	8003920 <_printf_i+0xd8>
 80038ac:	2973      	cmp	r1, #115	; 0x73
 80038ae:	f000 809d 	beq.w	80039ec <_printf_i+0x1a4>
 80038b2:	d808      	bhi.n	80038c6 <_printf_i+0x7e>
 80038b4:	296f      	cmp	r1, #111	; 0x6f
 80038b6:	d020      	beq.n	80038fa <_printf_i+0xb2>
 80038b8:	2970      	cmp	r1, #112	; 0x70
 80038ba:	d1dd      	bne.n	8003878 <_printf_i+0x30>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	f043 0320 	orr.w	r3, r3, #32
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	e003      	b.n	80038ce <_printf_i+0x86>
 80038c6:	2975      	cmp	r1, #117	; 0x75
 80038c8:	d017      	beq.n	80038fa <_printf_i+0xb2>
 80038ca:	2978      	cmp	r1, #120	; 0x78
 80038cc:	d1d4      	bne.n	8003878 <_printf_i+0x30>
 80038ce:	2378      	movs	r3, #120	; 0x78
 80038d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038d4:	4864      	ldr	r0, [pc, #400]	; (8003a68 <_printf_i+0x220>)
 80038d6:	e055      	b.n	8003984 <_printf_i+0x13c>
 80038d8:	6813      	ldr	r3, [r2, #0]
 80038da:	1d19      	adds	r1, r3, #4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6011      	str	r1, [r2, #0]
 80038e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038e8:	2301      	movs	r3, #1
 80038ea:	e08c      	b.n	8003a06 <_printf_i+0x1be>
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6011      	str	r1, [r2, #0]
 80038f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038f4:	bf18      	it	ne
 80038f6:	b21b      	sxthne	r3, r3
 80038f8:	e7cf      	b.n	800389a <_printf_i+0x52>
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	6825      	ldr	r5, [r4, #0]
 80038fe:	1d18      	adds	r0, r3, #4
 8003900:	6010      	str	r0, [r2, #0]
 8003902:	0628      	lsls	r0, r5, #24
 8003904:	d501      	bpl.n	800390a <_printf_i+0xc2>
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	e002      	b.n	8003910 <_printf_i+0xc8>
 800390a:	0668      	lsls	r0, r5, #25
 800390c:	d5fb      	bpl.n	8003906 <_printf_i+0xbe>
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	4854      	ldr	r0, [pc, #336]	; (8003a64 <_printf_i+0x21c>)
 8003912:	296f      	cmp	r1, #111	; 0x6f
 8003914:	bf14      	ite	ne
 8003916:	220a      	movne	r2, #10
 8003918:	2208      	moveq	r2, #8
 800391a:	2100      	movs	r1, #0
 800391c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003920:	6865      	ldr	r5, [r4, #4]
 8003922:	60a5      	str	r5, [r4, #8]
 8003924:	2d00      	cmp	r5, #0
 8003926:	f2c0 8095 	blt.w	8003a54 <_printf_i+0x20c>
 800392a:	6821      	ldr	r1, [r4, #0]
 800392c:	f021 0104 	bic.w	r1, r1, #4
 8003930:	6021      	str	r1, [r4, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d13d      	bne.n	80039b2 <_printf_i+0x16a>
 8003936:	2d00      	cmp	r5, #0
 8003938:	f040 808e 	bne.w	8003a58 <_printf_i+0x210>
 800393c:	4665      	mov	r5, ip
 800393e:	2a08      	cmp	r2, #8
 8003940:	d10b      	bne.n	800395a <_printf_i+0x112>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	07db      	lsls	r3, r3, #31
 8003946:	d508      	bpl.n	800395a <_printf_i+0x112>
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	6862      	ldr	r2, [r4, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	bfde      	ittt	le
 8003950:	2330      	movle	r3, #48	; 0x30
 8003952:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003956:	f105 35ff 	addle.w	r5, r5, #4294967295
 800395a:	ebac 0305 	sub.w	r3, ip, r5
 800395e:	6123      	str	r3, [r4, #16]
 8003960:	f8cd 8000 	str.w	r8, [sp]
 8003964:	463b      	mov	r3, r7
 8003966:	aa03      	add	r2, sp, #12
 8003968:	4621      	mov	r1, r4
 800396a:	4630      	mov	r0, r6
 800396c:	f7ff fef6 	bl	800375c <_printf_common>
 8003970:	3001      	adds	r0, #1
 8003972:	d14d      	bne.n	8003a10 <_printf_i+0x1c8>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	b005      	add	sp, #20
 800397a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800397e:	4839      	ldr	r0, [pc, #228]	; (8003a64 <_printf_i+0x21c>)
 8003980:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	6821      	ldr	r1, [r4, #0]
 8003988:	1d1d      	adds	r5, r3, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6015      	str	r5, [r2, #0]
 800398e:	060a      	lsls	r2, r1, #24
 8003990:	d50b      	bpl.n	80039aa <_printf_i+0x162>
 8003992:	07ca      	lsls	r2, r1, #31
 8003994:	bf44      	itt	mi
 8003996:	f041 0120 	orrmi.w	r1, r1, #32
 800399a:	6021      	strmi	r1, [r4, #0]
 800399c:	b91b      	cbnz	r3, 80039a6 <_printf_i+0x15e>
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	f022 0220 	bic.w	r2, r2, #32
 80039a4:	6022      	str	r2, [r4, #0]
 80039a6:	2210      	movs	r2, #16
 80039a8:	e7b7      	b.n	800391a <_printf_i+0xd2>
 80039aa:	064d      	lsls	r5, r1, #25
 80039ac:	bf48      	it	mi
 80039ae:	b29b      	uxthmi	r3, r3
 80039b0:	e7ef      	b.n	8003992 <_printf_i+0x14a>
 80039b2:	4665      	mov	r5, ip
 80039b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039b8:	fb02 3311 	mls	r3, r2, r1, r3
 80039bc:	5cc3      	ldrb	r3, [r0, r3]
 80039be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039c2:	460b      	mov	r3, r1
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d1f5      	bne.n	80039b4 <_printf_i+0x16c>
 80039c8:	e7b9      	b.n	800393e <_printf_i+0xf6>
 80039ca:	6813      	ldr	r3, [r2, #0]
 80039cc:	6825      	ldr	r5, [r4, #0]
 80039ce:	6961      	ldr	r1, [r4, #20]
 80039d0:	1d18      	adds	r0, r3, #4
 80039d2:	6010      	str	r0, [r2, #0]
 80039d4:	0628      	lsls	r0, r5, #24
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	d501      	bpl.n	80039de <_printf_i+0x196>
 80039da:	6019      	str	r1, [r3, #0]
 80039dc:	e002      	b.n	80039e4 <_printf_i+0x19c>
 80039de:	066a      	lsls	r2, r5, #25
 80039e0:	d5fb      	bpl.n	80039da <_printf_i+0x192>
 80039e2:	8019      	strh	r1, [r3, #0]
 80039e4:	2300      	movs	r3, #0
 80039e6:	6123      	str	r3, [r4, #16]
 80039e8:	4665      	mov	r5, ip
 80039ea:	e7b9      	b.n	8003960 <_printf_i+0x118>
 80039ec:	6813      	ldr	r3, [r2, #0]
 80039ee:	1d19      	adds	r1, r3, #4
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	681d      	ldr	r5, [r3, #0]
 80039f4:	6862      	ldr	r2, [r4, #4]
 80039f6:	2100      	movs	r1, #0
 80039f8:	4628      	mov	r0, r5
 80039fa:	f7fc fbf1 	bl	80001e0 <memchr>
 80039fe:	b108      	cbz	r0, 8003a04 <_printf_i+0x1bc>
 8003a00:	1b40      	subs	r0, r0, r5
 8003a02:	6060      	str	r0, [r4, #4]
 8003a04:	6863      	ldr	r3, [r4, #4]
 8003a06:	6123      	str	r3, [r4, #16]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a0e:	e7a7      	b.n	8003960 <_printf_i+0x118>
 8003a10:	6923      	ldr	r3, [r4, #16]
 8003a12:	462a      	mov	r2, r5
 8003a14:	4639      	mov	r1, r7
 8003a16:	4630      	mov	r0, r6
 8003a18:	47c0      	blx	r8
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d0aa      	beq.n	8003974 <_printf_i+0x12c>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	079b      	lsls	r3, r3, #30
 8003a22:	d413      	bmi.n	8003a4c <_printf_i+0x204>
 8003a24:	68e0      	ldr	r0, [r4, #12]
 8003a26:	9b03      	ldr	r3, [sp, #12]
 8003a28:	4298      	cmp	r0, r3
 8003a2a:	bfb8      	it	lt
 8003a2c:	4618      	movlt	r0, r3
 8003a2e:	e7a3      	b.n	8003978 <_printf_i+0x130>
 8003a30:	2301      	movs	r3, #1
 8003a32:	464a      	mov	r2, r9
 8003a34:	4639      	mov	r1, r7
 8003a36:	4630      	mov	r0, r6
 8003a38:	47c0      	blx	r8
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	d09a      	beq.n	8003974 <_printf_i+0x12c>
 8003a3e:	3501      	adds	r5, #1
 8003a40:	68e3      	ldr	r3, [r4, #12]
 8003a42:	9a03      	ldr	r2, [sp, #12]
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	42ab      	cmp	r3, r5
 8003a48:	dcf2      	bgt.n	8003a30 <_printf_i+0x1e8>
 8003a4a:	e7eb      	b.n	8003a24 <_printf_i+0x1dc>
 8003a4c:	2500      	movs	r5, #0
 8003a4e:	f104 0919 	add.w	r9, r4, #25
 8003a52:	e7f5      	b.n	8003a40 <_printf_i+0x1f8>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ac      	bne.n	80039b2 <_printf_i+0x16a>
 8003a58:	7803      	ldrb	r3, [r0, #0]
 8003a5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a62:	e76c      	b.n	800393e <_printf_i+0xf6>
 8003a64:	080040e7 	.word	0x080040e7
 8003a68:	080040f8 	.word	0x080040f8

08003a6c <__ascii_wctomb>:
 8003a6c:	b149      	cbz	r1, 8003a82 <__ascii_wctomb+0x16>
 8003a6e:	2aff      	cmp	r2, #255	; 0xff
 8003a70:	bf85      	ittet	hi
 8003a72:	238a      	movhi	r3, #138	; 0x8a
 8003a74:	6003      	strhi	r3, [r0, #0]
 8003a76:	700a      	strbls	r2, [r1, #0]
 8003a78:	f04f 30ff 	movhi.w	r0, #4294967295
 8003a7c:	bf98      	it	ls
 8003a7e:	2001      	movls	r0, #1
 8003a80:	4770      	bx	lr
 8003a82:	4608      	mov	r0, r1
 8003a84:	4770      	bx	lr

08003a86 <memcpy>:
 8003a86:	b510      	push	{r4, lr}
 8003a88:	1e43      	subs	r3, r0, #1
 8003a8a:	440a      	add	r2, r1
 8003a8c:	4291      	cmp	r1, r2
 8003a8e:	d100      	bne.n	8003a92 <memcpy+0xc>
 8003a90:	bd10      	pop	{r4, pc}
 8003a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a9a:	e7f7      	b.n	8003a8c <memcpy+0x6>

08003a9c <memmove>:
 8003a9c:	4288      	cmp	r0, r1
 8003a9e:	b510      	push	{r4, lr}
 8003aa0:	eb01 0302 	add.w	r3, r1, r2
 8003aa4:	d807      	bhi.n	8003ab6 <memmove+0x1a>
 8003aa6:	1e42      	subs	r2, r0, #1
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	d00a      	beq.n	8003ac2 <memmove+0x26>
 8003aac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ab0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ab4:	e7f8      	b.n	8003aa8 <memmove+0xc>
 8003ab6:	4283      	cmp	r3, r0
 8003ab8:	d9f5      	bls.n	8003aa6 <memmove+0xa>
 8003aba:	1881      	adds	r1, r0, r2
 8003abc:	1ad2      	subs	r2, r2, r3
 8003abe:	42d3      	cmn	r3, r2
 8003ac0:	d100      	bne.n	8003ac4 <memmove+0x28>
 8003ac2:	bd10      	pop	{r4, pc}
 8003ac4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ac8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003acc:	e7f7      	b.n	8003abe <memmove+0x22>
	...

08003ad0 <_free_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	d045      	beq.n	8003b64 <_free_r+0x94>
 8003ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003adc:	1f0c      	subs	r4, r1, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfb8      	it	lt
 8003ae2:	18e4      	addlt	r4, r4, r3
 8003ae4:	f000 f8d2 	bl	8003c8c <__malloc_lock>
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <_free_r+0x98>)
 8003aea:	6813      	ldr	r3, [r2, #0]
 8003aec:	4610      	mov	r0, r2
 8003aee:	b933      	cbnz	r3, 8003afe <_free_r+0x2e>
 8003af0:	6063      	str	r3, [r4, #4]
 8003af2:	6014      	str	r4, [r2, #0]
 8003af4:	4628      	mov	r0, r5
 8003af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003afa:	f000 b8c8 	b.w	8003c8e <__malloc_unlock>
 8003afe:	42a3      	cmp	r3, r4
 8003b00:	d90c      	bls.n	8003b1c <_free_r+0x4c>
 8003b02:	6821      	ldr	r1, [r4, #0]
 8003b04:	1862      	adds	r2, r4, r1
 8003b06:	4293      	cmp	r3, r2
 8003b08:	bf04      	itt	eq
 8003b0a:	681a      	ldreq	r2, [r3, #0]
 8003b0c:	685b      	ldreq	r3, [r3, #4]
 8003b0e:	6063      	str	r3, [r4, #4]
 8003b10:	bf04      	itt	eq
 8003b12:	1852      	addeq	r2, r2, r1
 8003b14:	6022      	streq	r2, [r4, #0]
 8003b16:	6004      	str	r4, [r0, #0]
 8003b18:	e7ec      	b.n	8003af4 <_free_r+0x24>
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	b10a      	cbz	r2, 8003b24 <_free_r+0x54>
 8003b20:	42a2      	cmp	r2, r4
 8003b22:	d9fa      	bls.n	8003b1a <_free_r+0x4a>
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	1858      	adds	r0, r3, r1
 8003b28:	42a0      	cmp	r0, r4
 8003b2a:	d10b      	bne.n	8003b44 <_free_r+0x74>
 8003b2c:	6820      	ldr	r0, [r4, #0]
 8003b2e:	4401      	add	r1, r0
 8003b30:	1858      	adds	r0, r3, r1
 8003b32:	4282      	cmp	r2, r0
 8003b34:	6019      	str	r1, [r3, #0]
 8003b36:	d1dd      	bne.n	8003af4 <_free_r+0x24>
 8003b38:	6810      	ldr	r0, [r2, #0]
 8003b3a:	6852      	ldr	r2, [r2, #4]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	4401      	add	r1, r0
 8003b40:	6019      	str	r1, [r3, #0]
 8003b42:	e7d7      	b.n	8003af4 <_free_r+0x24>
 8003b44:	d902      	bls.n	8003b4c <_free_r+0x7c>
 8003b46:	230c      	movs	r3, #12
 8003b48:	602b      	str	r3, [r5, #0]
 8003b4a:	e7d3      	b.n	8003af4 <_free_r+0x24>
 8003b4c:	6820      	ldr	r0, [r4, #0]
 8003b4e:	1821      	adds	r1, r4, r0
 8003b50:	428a      	cmp	r2, r1
 8003b52:	bf04      	itt	eq
 8003b54:	6811      	ldreq	r1, [r2, #0]
 8003b56:	6852      	ldreq	r2, [r2, #4]
 8003b58:	6062      	str	r2, [r4, #4]
 8003b5a:	bf04      	itt	eq
 8003b5c:	1809      	addeq	r1, r1, r0
 8003b5e:	6021      	streq	r1, [r4, #0]
 8003b60:	605c      	str	r4, [r3, #4]
 8003b62:	e7c7      	b.n	8003af4 <_free_r+0x24>
 8003b64:	bd38      	pop	{r3, r4, r5, pc}
 8003b66:	bf00      	nop
 8003b68:	200003d8 	.word	0x200003d8

08003b6c <_malloc_r>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	1ccd      	adds	r5, r1, #3
 8003b70:	f025 0503 	bic.w	r5, r5, #3
 8003b74:	3508      	adds	r5, #8
 8003b76:	2d0c      	cmp	r5, #12
 8003b78:	bf38      	it	cc
 8003b7a:	250c      	movcc	r5, #12
 8003b7c:	2d00      	cmp	r5, #0
 8003b7e:	4606      	mov	r6, r0
 8003b80:	db01      	blt.n	8003b86 <_malloc_r+0x1a>
 8003b82:	42a9      	cmp	r1, r5
 8003b84:	d903      	bls.n	8003b8e <_malloc_r+0x22>
 8003b86:	230c      	movs	r3, #12
 8003b88:	6033      	str	r3, [r6, #0]
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	f000 f87d 	bl	8003c8c <__malloc_lock>
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <_malloc_r+0xac>)
 8003b94:	6814      	ldr	r4, [r2, #0]
 8003b96:	4621      	mov	r1, r4
 8003b98:	b991      	cbnz	r1, 8003bc0 <_malloc_r+0x54>
 8003b9a:	4c20      	ldr	r4, [pc, #128]	; (8003c1c <_malloc_r+0xb0>)
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	b91b      	cbnz	r3, 8003ba8 <_malloc_r+0x3c>
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f863 	bl	8003c6c <_sbrk_r>
 8003ba6:	6020      	str	r0, [r4, #0]
 8003ba8:	4629      	mov	r1, r5
 8003baa:	4630      	mov	r0, r6
 8003bac:	f000 f85e 	bl	8003c6c <_sbrk_r>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d124      	bne.n	8003bfe <_malloc_r+0x92>
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	6033      	str	r3, [r6, #0]
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f868 	bl	8003c8e <__malloc_unlock>
 8003bbe:	e7e4      	b.n	8003b8a <_malloc_r+0x1e>
 8003bc0:	680b      	ldr	r3, [r1, #0]
 8003bc2:	1b5b      	subs	r3, r3, r5
 8003bc4:	d418      	bmi.n	8003bf8 <_malloc_r+0x8c>
 8003bc6:	2b0b      	cmp	r3, #11
 8003bc8:	d90f      	bls.n	8003bea <_malloc_r+0x7e>
 8003bca:	600b      	str	r3, [r1, #0]
 8003bcc:	50cd      	str	r5, [r1, r3]
 8003bce:	18cc      	adds	r4, r1, r3
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 f85c 	bl	8003c8e <__malloc_unlock>
 8003bd6:	f104 000b 	add.w	r0, r4, #11
 8003bda:	1d23      	adds	r3, r4, #4
 8003bdc:	f020 0007 	bic.w	r0, r0, #7
 8003be0:	1ac3      	subs	r3, r0, r3
 8003be2:	d0d3      	beq.n	8003b8c <_malloc_r+0x20>
 8003be4:	425a      	negs	r2, r3
 8003be6:	50e2      	str	r2, [r4, r3]
 8003be8:	e7d0      	b.n	8003b8c <_malloc_r+0x20>
 8003bea:	428c      	cmp	r4, r1
 8003bec:	684b      	ldr	r3, [r1, #4]
 8003bee:	bf16      	itet	ne
 8003bf0:	6063      	strne	r3, [r4, #4]
 8003bf2:	6013      	streq	r3, [r2, #0]
 8003bf4:	460c      	movne	r4, r1
 8003bf6:	e7eb      	b.n	8003bd0 <_malloc_r+0x64>
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	6849      	ldr	r1, [r1, #4]
 8003bfc:	e7cc      	b.n	8003b98 <_malloc_r+0x2c>
 8003bfe:	1cc4      	adds	r4, r0, #3
 8003c00:	f024 0403 	bic.w	r4, r4, #3
 8003c04:	42a0      	cmp	r0, r4
 8003c06:	d005      	beq.n	8003c14 <_malloc_r+0xa8>
 8003c08:	1a21      	subs	r1, r4, r0
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 f82e 	bl	8003c6c <_sbrk_r>
 8003c10:	3001      	adds	r0, #1
 8003c12:	d0cf      	beq.n	8003bb4 <_malloc_r+0x48>
 8003c14:	6025      	str	r5, [r4, #0]
 8003c16:	e7db      	b.n	8003bd0 <_malloc_r+0x64>
 8003c18:	200003d8 	.word	0x200003d8
 8003c1c:	200003dc 	.word	0x200003dc

08003c20 <_realloc_r>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	4607      	mov	r7, r0
 8003c24:	4614      	mov	r4, r2
 8003c26:	460e      	mov	r6, r1
 8003c28:	b921      	cbnz	r1, 8003c34 <_realloc_r+0x14>
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c30:	f7ff bf9c 	b.w	8003b6c <_malloc_r>
 8003c34:	b922      	cbnz	r2, 8003c40 <_realloc_r+0x20>
 8003c36:	f7ff ff4b 	bl	8003ad0 <_free_r>
 8003c3a:	4625      	mov	r5, r4
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c40:	f000 f826 	bl	8003c90 <_malloc_usable_size_r>
 8003c44:	42a0      	cmp	r0, r4
 8003c46:	d20f      	bcs.n	8003c68 <_realloc_r+0x48>
 8003c48:	4621      	mov	r1, r4
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f7ff ff8e 	bl	8003b6c <_malloc_r>
 8003c50:	4605      	mov	r5, r0
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d0f2      	beq.n	8003c3c <_realloc_r+0x1c>
 8003c56:	4631      	mov	r1, r6
 8003c58:	4622      	mov	r2, r4
 8003c5a:	f7ff ff14 	bl	8003a86 <memcpy>
 8003c5e:	4631      	mov	r1, r6
 8003c60:	4638      	mov	r0, r7
 8003c62:	f7ff ff35 	bl	8003ad0 <_free_r>
 8003c66:	e7e9      	b.n	8003c3c <_realloc_r+0x1c>
 8003c68:	4635      	mov	r5, r6
 8003c6a:	e7e7      	b.n	8003c3c <_realloc_r+0x1c>

08003c6c <_sbrk_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4c06      	ldr	r4, [pc, #24]	; (8003c88 <_sbrk_r+0x1c>)
 8003c70:	2300      	movs	r3, #0
 8003c72:	4605      	mov	r5, r0
 8003c74:	4608      	mov	r0, r1
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	f7fd fbca 	bl	8001410 <_sbrk>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d102      	bne.n	8003c86 <_sbrk_r+0x1a>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	b103      	cbz	r3, 8003c86 <_sbrk_r+0x1a>
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	20000644 	.word	0x20000644

08003c8c <__malloc_lock>:
 8003c8c:	4770      	bx	lr

08003c8e <__malloc_unlock>:
 8003c8e:	4770      	bx	lr

08003c90 <_malloc_usable_size_r>:
 8003c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c94:	1f18      	subs	r0, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bfbc      	itt	lt
 8003c9a:	580b      	ldrlt	r3, [r1, r0]
 8003c9c:	18c0      	addlt	r0, r0, r3
 8003c9e:	4770      	bx	lr

08003ca0 <_init>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	bf00      	nop
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr

08003cac <_fini>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

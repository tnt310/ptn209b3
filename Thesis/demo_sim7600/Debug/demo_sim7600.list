
demo_sim7600.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d7c  08003d7c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d84  08003d84  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08003d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000204  08003f90  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08003f90  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009017  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001985  00000000  00000000  0002924b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020121  00000000  00000000  0002b938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c9f  00000000  00000000  0004ba59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c162b  00000000  00000000  000526f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113d23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002078  00000000  00000000  00113da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003970 	.word	0x08003970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	08003970 	.word	0x08003970

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <UARTIntHandler>:
uint8_t commandBufferIndex = 0;
uint8_t connect9;
err_t err;
/***************************************Response from SIM7600**************************************************************/
void UARTIntHandler(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
	uint8_t receivedChar = (uint8_t)((huart2).Instance->DR);
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <UARTIntHandler+0x80>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <UARTIntHandler+0x80>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <UARTIntHandler+0x80>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f042 0220 	orr.w	r2, r2, #32
 800059c:	60da      	str	r2, [r3, #12]
	if (__HAL_UART_GET_FLAG(&huart2, UART_IT_RXNE) == RESET) // if flag is set, data in DR register
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <UARTIntHandler+0x80>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <UARTIntHandler+0x84>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	4a16      	ldr	r2, [pc, #88]	; (8000604 <UARTIntHandler+0x84>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d00b      	beq.n	80005c6 <UARTIntHandler+0x46>
		{
			commandBuffer[commandBufferIndex] = receivedChar;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <UARTIntHandler+0x88>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	4a15      	ldr	r2, [pc, #84]	; (800060c <UARTIntHandler+0x8c>)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	5453      	strb	r3, [r2, r1]
			commandBufferIndex++;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <UARTIntHandler+0x88>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <UARTIntHandler+0x88>)
 80005c4:	701a      	strb	r2, [r3, #0]
		}
	if (strcat(commandBuffer,"+CMQTTRXTOPIC") != NULL){
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <UARTIntHandler+0x8c>)
 80005c8:	f7ff fe02 	bl	80001d0 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <UARTIntHandler+0x8c>)
 80005d2:	4413      	add	r3, r2
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <UARTIntHandler+0x90>)
 80005d6:	461c      	mov	r4, r3
 80005d8:	4613      	mov	r3, r2
 80005da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005dc:	6020      	str	r0, [r4, #0]
 80005de:	6061      	str	r1, [r4, #4]
 80005e0:	60a2      	str	r2, [r4, #8]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	81a3      	strh	r3, [r4, #12]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <UARTIntHandler+0x8c>)
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <UARTIntHandler+0x72>
		connect9 = 1;}
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <UARTIntHandler+0x94>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
	gotCommandFlag = 1;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <UARTIntHandler+0x98>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	20000308 	.word	0x20000308
 8000604:	10000020 	.word	0x10000020
 8000608:	20000221 	.word	0x20000221
 800060c:	20000230 	.word	0x20000230
 8000610:	08003988 	.word	0x08003988
 8000614:	20000294 	.word	0x20000294
 8000618:	20000220 	.word	0x20000220

0800061c <sendATcommand>:
/*---------------------Send AT command---------------------------------------------------------------------------------------*/
uint8_t sendATcommand(char* ATcommand,char *respect_answer_1, uint32_t timeout)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
	uint8_t status;
	volatile uint8_t answer = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,1000);
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f7ff fdcf 	bl	80001d0 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29b      	uxth	r3, r3
 8000636:	3301      	adds	r3, #1
 8000638:	b29a      	uxth	r2, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	68f9      	ldr	r1, [r7, #12]
 8000640:	4820      	ldr	r0, [pc, #128]	; (80006c4 <sendATcommand+0xa8>)
 8000642:	f001 fdd6 	bl	80021f2 <HAL_UART_Transmit>
	uint32_t  tickstart = HAL_GetTick();
 8000646:	f000 fe35 	bl	80012b4 <HAL_GetTick>
 800064a:	6178      	str	r0, [r7, #20]
	timeout += (uint32_t)(uwTickFreq); // HERE
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <sendATcommand+0xac>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	607b      	str	r3, [r7, #4]
	do
	{
		if (gotCommandFlag == 1)
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <sendATcommand+0xb0>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b01      	cmp	r3, #1
 8000660:	d112      	bne.n	8000688 <sendATcommand+0x6c>
		{
			if (strstr(commandBuffer,respect_answer_1) != NULL)
 8000662:	68b9      	ldr	r1, [r7, #8]
 8000664:	481a      	ldr	r0, [pc, #104]	; (80006d0 <sendATcommand+0xb4>)
 8000666:	f002 fccd 	bl	8003004 <strstr>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <sendATcommand+0x5a>
			{
				answer = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	74bb      	strb	r3, [r7, #18]
 8000674:	e008      	b.n	8000688 <sendATcommand+0x6c>
			}
			else
			{
				status = ReturnCode(commandBuffer);
 8000676:	4816      	ldr	r0, [pc, #88]	; (80006d0 <sendATcommand+0xb4>)
 8000678:	f000 f852 	bl	8000720 <ReturnCode>
 800067c:	4603      	mov	r3, r0
 800067e:	74fb      	strb	r3, [r7, #19]
				Handler_Err(status);
 8000680:	7cfb      	ldrb	r3, [r7, #19]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f828 	bl	80006d8 <Handler_Err>
			}
		}
	}
	while((answer == 0) && ((HAL_GetTick() - tickstart) < timeout));
 8000688:	7cbb      	ldrb	r3, [r7, #18]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d107      	bne.n	80006a0 <sendATcommand+0x84>
 8000690:	f000 fe10 	bl	80012b4 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8db      	bhi.n	8000658 <sendATcommand+0x3c>
	gotCommandFlag = 0;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <sendATcommand+0xb0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	commandBufferIndex = 0;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <sendATcommand+0xb8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	memset(commandBuffer,'\0',100);
 80006ac:	2264      	movs	r2, #100	; 0x64
 80006ae:	2100      	movs	r1, #0
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <sendATcommand+0xb4>)
 80006b2:	f002 fc6b 	bl	8002f8c <memset>
	return answer;
 80006b6:	7cbb      	ldrb	r3, [r7, #18]
 80006b8:	b2db      	uxtb	r3, r3
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000308 	.word	0x20000308
 80006c8:	20000030 	.word	0x20000030
 80006cc:	20000220 	.word	0x20000220
 80006d0:	20000230 	.word	0x20000230
 80006d4:	20000221 	.word	0x20000221

080006d8 <Handler_Err>:
/*---------------------Handler ERROR------------------------------------------------------------------*/
uint8_t Handler_Err(uint8_t err_state)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	switch (err_state)
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b07      	cmp	r3, #7
 80006e6:	d813      	bhi.n	8000710 <Handler_Err+0x38>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <Handler_Err+0x18>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000711 	.word	0x08000711
 80006f4:	08000711 	.word	0x08000711
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000711 	.word	0x08000711
 8000700:	08000711 	.word	0x08000711
 8000704:	08000711 	.word	0x08000711
 8000708:	08000711 	.word	0x08000711
 800070c:	08000711 	.word	0x08000711
		case CMQTTPUB:
			break;
		case CMQTTSUB:
			break;
		}
}
 8000710:	bf00      	nop
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <ReturnCode>:
/*-----------------RETURN CODE--------------------------------------------------------------------------------*/
uint8_t ReturnCode(char str[])
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	char err[2];
	for (uint8_t i = 0; i< strlen(str); i++)
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	e014      	b.n	8000758 <ReturnCode+0x38>
	{
		if (str[i] == ','){
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b2c      	cmp	r3, #44	; 0x2c
 8000738:	d10b      	bne.n	8000752 <ReturnCode+0x32>
			err[0] = str[i+1];
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	3301      	adds	r3, #1
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	733b      	strb	r3, [r7, #12]
			err[1] = str[i+2];
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	3302      	adds	r3, #2
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i< strlen(str); i++)
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	3301      	adds	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	7bfc      	ldrb	r4, [r7, #15]
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff fd38 	bl	80001d0 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	429c      	cmp	r4, r3
 8000764:	d3e3      	bcc.n	800072e <ReturnCode+0xe>
		}
	}
	return atoi(err);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fbe0 	bl	8002f30 <atoi>
 8000770:	4603      	mov	r3, r0
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <sendATcommand_2>:
//
//	return &buf[i + 1];
//}
/*---------------------Send AT command with 2 respect_answer------------------------------------------------------------------*/
uint8_t sendATcommand_2(char* ATcommand,char *respect_answer_1,char *respect_answer_2,uint32_t timeout)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	603b      	str	r3, [r7, #0]
	uint8_t status;
	volatile uint8_t answer = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,(uint8_t*)ATcommand,strlen(ATcommand)+1,1000);
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f7ff fd1e 	bl	80001d0 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	b29b      	uxth	r3, r3
 8000798:	3301      	adds	r3, #1
 800079a:	b29a      	uxth	r2, r3
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	4820      	ldr	r0, [pc, #128]	; (8000824 <sendATcommand_2+0xa8>)
 80007a4:	f001 fd25 	bl	80021f2 <HAL_UART_Transmit>
	uint32_t  tickstart = HAL_GetTick();
 80007a8:	f000 fd84 	bl	80012b4 <HAL_GetTick>
 80007ac:	6178      	str	r0, [r7, #20]
	timeout += (uint32_t)(uwTickFreq); // HERE
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <sendATcommand_2+0xac>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	603b      	str	r3, [r7, #0]
	do
	{
		if (gotCommandFlag == 1)
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <sendATcommand_2+0xb0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d112      	bne.n	80007ea <sendATcommand_2+0x6e>
		{
			if (strstr(commandBuffer,respect_answer_1) != NULL)
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	481a      	ldr	r0, [pc, #104]	; (8000830 <sendATcommand_2+0xb4>)
 80007c8:	f002 fc1c 	bl	8003004 <strstr>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <sendATcommand_2+0x5c>
			{
				answer = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	74fb      	strb	r3, [r7, #19]
 80007d6:	e008      	b.n	80007ea <sendATcommand_2+0x6e>
			}
			else if (strstr(commandBuffer,respect_answer_2) != NULL)
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	4815      	ldr	r0, [pc, #84]	; (8000830 <sendATcommand_2+0xb4>)
 80007dc:	f002 fc12 	bl	8003004 <strstr>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <sendATcommand_2+0x6e>
			{
				answer = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	74fb      	strb	r3, [r7, #19]
			}
		}
	}
	while((answer == 0) && ((HAL_GetTick() - tickstart) < timeout));
 80007ea:	7cfb      	ldrb	r3, [r7, #19]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d107      	bne.n	8000802 <sendATcommand_2+0x86>
 80007f2:	f000 fd5f 	bl	80012b4 <HAL_GetTick>
 80007f6:	4602      	mov	r2, r0
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d8db      	bhi.n	80007ba <sendATcommand_2+0x3e>
	gotCommandFlag = 0;
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <sendATcommand_2+0xb0>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
	commandBufferIndex = 0;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <sendATcommand_2+0xb8>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	memset(commandBuffer,'\0',100);
 800080e:	2264      	movs	r2, #100	; 0x64
 8000810:	2100      	movs	r1, #0
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <sendATcommand_2+0xb4>)
 8000814:	f002 fbba 	bl	8002f8c <memset>
	return answer;
 8000818:	7cfb      	ldrb	r3, [r7, #19]
 800081a:	b2db      	uxtb	r3, r3
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000308 	.word	0x20000308
 8000828:	20000030 	.word	0x20000030
 800082c:	20000220 	.word	0x20000220
 8000830:	20000230 	.word	0x20000230
 8000834:	20000221 	.word	0x20000221

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fcd4 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f844 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 f900 	bl	8000a48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000848:	f000 f8aa 	bl	80009a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800084c:	f000 f8d2 	bl	80009f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <main+0x74>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <main+0x74>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0220 	orr.w	r2, r2, #32
 800085e:	60da      	str	r2, [r3, #12]
//  answer = sendATcommand("AT\r\n","OK",2000);
// 	  answer_1 = sendATcommand("ATE0\r\n","OK",2000);
// 	  answer_2 = sendATcommand("AT&W\r\n","OK",2000);
// 	 //answer_3 = sendATcommand("AT+NETOPEN\r\n","already opened",2000);
// 	  answer_3 = sendATcommand_2("AT+NETOPEN\r\n","already opened","+NETOPEN: 0",2000);
  sendATcommand("AT+NETCLOSE\r\n","OK",2000);
 8000860:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000864:	4912      	ldr	r1, [pc, #72]	; (80008b0 <main+0x78>)
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <main+0x7c>)
 8000868:	f7ff fed8 	bl	800061c <sendATcommand>
//  sendATcommand("AT+CMQTTDISC=0,120\r\n","OK",2000);
//  sendATcommand("AT+CMQTTREL=0\r\n","OK",2000);
  answer = Init_SIM7600();
 800086c:	f000 f946 	bl	8000afc <Init_SIM7600>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <main+0x80>)
 8000876:	701a      	strb	r2, [r3, #0]
  answer_1 =  Check_NETSIMstate();
 8000878:	f000 f986 	bl	8000b88 <Check_NETSIMstate>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <main+0x84>)
 8000882:	701a      	strb	r2, [r3, #0]
  setupCONNECTION();
 8000884:	f000 f9c0 	bl	8000c08 <setupCONNECTION>
  Subscibe(sub);
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <main+0x88>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fa5b 	bl	8000d48 <Subscibe>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Publish(pub,payload,1);
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <main+0x8c>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <main+0x90>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2201      	movs	r2, #1
 800089c:	4619      	mov	r1, r3
 800089e:	f000 fa93 	bl	8000dc8 <Publish>
	  HAL_Delay(3000);
 80008a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008a6:	f000 fd11 	bl	80012cc <HAL_Delay>
	  Publish(pub,payload,1);
 80008aa:	e7f2      	b.n	8000892 <main+0x5a>
 80008ac:	20000308 	.word	0x20000308
 80008b0:	08003a3c 	.word	0x08003a3c
 80008b4:	08003a40 	.word	0x08003a40
 80008b8:	20000304 	.word	0x20000304
 80008bc:	200002dc 	.word	0x200002dc
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000004 	.word	0x20000004
 80008c8:	20000008 	.word	0x20000008

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	2230      	movs	r2, #48	; 0x30
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fb56 	bl	8002f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <SystemClock_Config+0xcc>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a27      	ldr	r2, [pc, #156]	; (8000998 <SystemClock_Config+0xcc>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <SystemClock_Config+0xcc>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <SystemClock_Config+0xd0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <SystemClock_Config+0xd0>)
 8000916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <SystemClock_Config+0xd0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2310      	movs	r3, #16
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800093c:	2308      	movs	r3, #8
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000940:	23a8      	movs	r3, #168	; 0xa8
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	4618      	mov	r0, r3
 8000952:	f000 ffc5 	bl	80018e0 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800095c:	f000 f8c6 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800096c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2105      	movs	r1, #5
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fa1e 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800098a:	f000 f8af 	bl	8000aec <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART1_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009d8:	f001 fbbe 	bl	8002158 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 f883 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000029c 	.word	0x2000029c
 80009f0:	40011000 	.word	0x40011000

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f001 fb94 	bl	8002158 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f859 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000308 	.word	0x20000308
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a18      	ldr	r2, [pc, #96]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <MX_GPIO_Init+0xa0>)
 8000aba:	f000 fef7 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000abe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_GPIO_Init+0xa0>)
 8000ad8:	f000 fd4e 	bl	8001578 <HAL_GPIO_Init>

}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <Init_SIM7600>:
/**AT+CPIN?<CR><LF>  kiểm tra SIM
 * AT+CREG?<CR><LF>  kiểm tra đăng ký mạng
 * AT+CSQ<CR><LF>  kiểm tra chất lượng mạng
 */
uint8_t Init_SIM7600(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	volatile uint8_t  status = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71bb      	strb	r3, [r7, #6]
	// kích chân PEN để mở nguồn module
	if (sendATcommand("AT\r\n","OK",2000) == 1 && sendATcommand("AT\r\n","OK",2000) == 1 && sendATcommand("ATE0\r\n","OK",2000) == 1 && sendATcommand("AT&W\r\n","OK",2000))
 8000b06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b0a:	491b      	ldr	r1, [pc, #108]	; (8000b78 <Init_SIM7600+0x7c>)
 8000b0c:	481b      	ldr	r0, [pc, #108]	; (8000b7c <Init_SIM7600+0x80>)
 8000b0e:	f7ff fd85 	bl	800061c <sendATcommand>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d11d      	bne.n	8000b54 <Init_SIM7600+0x58>
 8000b18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b1c:	4916      	ldr	r1, [pc, #88]	; (8000b78 <Init_SIM7600+0x7c>)
 8000b1e:	4817      	ldr	r0, [pc, #92]	; (8000b7c <Init_SIM7600+0x80>)
 8000b20:	f7ff fd7c 	bl	800061c <sendATcommand>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d114      	bne.n	8000b54 <Init_SIM7600+0x58>
 8000b2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b2e:	4912      	ldr	r1, [pc, #72]	; (8000b78 <Init_SIM7600+0x7c>)
 8000b30:	4813      	ldr	r0, [pc, #76]	; (8000b80 <Init_SIM7600+0x84>)
 8000b32:	f7ff fd73 	bl	800061c <sendATcommand>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d10b      	bne.n	8000b54 <Init_SIM7600+0x58>
 8000b3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b40:	490d      	ldr	r1, [pc, #52]	; (8000b78 <Init_SIM7600+0x7c>)
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <Init_SIM7600+0x88>)
 8000b44:	f7ff fd6a 	bl	800061c <sendATcommand>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <Init_SIM7600+0x58>
	{
		status = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	71bb      	strb	r3, [r7, #6]
 8000b52:	e00a      	b.n	8000b6a <Init_SIM7600+0x6e>
	}
	else
		for (uint8_t i = 0 ; i < 3; i++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	e004      	b.n	8000b64 <Init_SIM7600+0x68>
		{
			Init_SIM7600();}
 8000b5a:	f7ff ffcf 	bl	8000afc <Init_SIM7600>
		for (uint8_t i = 0 ; i < 3; i++)
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	3301      	adds	r3, #1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d9f7      	bls.n	8000b5a <Init_SIM7600+0x5e>
	return status;
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	b2db      	uxtb	r3, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	08003a88 	.word	0x08003a88
 8000b7c:	08003a8c 	.word	0x08003a8c
 8000b80:	08003a94 	.word	0x08003a94
 8000b84:	08003a9c 	.word	0x08003a9c

08000b88 <Check_NETSIMstate>:
/*------------------------------------CHECK SIM STATE --------------------------------------------------------*/
uint8_t Check_NETSIMstate(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	volatile uint8_t status = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	71bb      	strb	r3, [r7, #6]
	if (sendATcommand("AT\r\n","OK",2000) == 1 && sendATcommand("AT+CPIN?\r\n","READY",2000) == 1 && sendATcommand("AT+CREG?\r\n","+CREG: 0,1",1000) == 1)
 8000b92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b96:	4916      	ldr	r1, [pc, #88]	; (8000bf0 <Check_NETSIMstate+0x68>)
 8000b98:	4816      	ldr	r0, [pc, #88]	; (8000bf4 <Check_NETSIMstate+0x6c>)
 8000b9a:	f7ff fd3f 	bl	800061c <sendATcommand>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d114      	bne.n	8000bce <Check_NETSIMstate+0x46>
 8000ba4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ba8:	4913      	ldr	r1, [pc, #76]	; (8000bf8 <Check_NETSIMstate+0x70>)
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <Check_NETSIMstate+0x74>)
 8000bac:	f7ff fd36 	bl	800061c <sendATcommand>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d10b      	bne.n	8000bce <Check_NETSIMstate+0x46>
 8000bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bba:	4911      	ldr	r1, [pc, #68]	; (8000c00 <Check_NETSIMstate+0x78>)
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <Check_NETSIMstate+0x7c>)
 8000bbe:	f7ff fd2d 	bl	800061c <sendATcommand>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d102      	bne.n	8000bce <Check_NETSIMstate+0x46>
	{
		status = 1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	71bb      	strb	r3, [r7, #6]
 8000bcc:	e00a      	b.n	8000be4 <Check_NETSIMstate+0x5c>
	}
	else
		for (uint8_t i = 0 ; i < 3; i++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	e004      	b.n	8000bde <Check_NETSIMstate+0x56>
		{
			Check_NETSIMstate();}
 8000bd4:	f7ff ffd8 	bl	8000b88 <Check_NETSIMstate>
		for (uint8_t i = 0 ; i < 3; i++)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d9f7      	bls.n	8000bd4 <Check_NETSIMstate+0x4c>
	return status;
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	b2db      	uxtb	r3, r3
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08003a88 	.word	0x08003a88
 8000bf4:	08003a8c 	.word	0x08003a8c
 8000bf8:	08003aa4 	.word	0x08003aa4
 8000bfc:	08003aac 	.word	0x08003aac
 8000c00:	08003ab8 	.word	0x08003ab8
 8000c04:	08003ac4 	.word	0x08003ac4

08000c08 <setupCONNECTION>:
/*------------------------------------CONNECT TO SERVER--------------------------------------------------------*/
/*
 * CMQTTACCQ : 0
 * CMQTTCONNECT : 1*/
uint8_t setupCONNECTION(void)
{
 8000c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af08      	add	r7, sp, #32

	connect1 = sendATcommand_2("AT+NETOPEN\r\n","already opened","+NETOPEN: 0",2000);
 8000c0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c12:	4a33      	ldr	r2, [pc, #204]	; (8000ce0 <setupCONNECTION+0xd8>)
 8000c14:	4933      	ldr	r1, [pc, #204]	; (8000ce4 <setupCONNECTION+0xdc>)
 8000c16:	4834      	ldr	r0, [pc, #208]	; (8000ce8 <setupCONNECTION+0xe0>)
 8000c18:	f7ff fdb0 	bl	800077c <sendATcommand_2>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b32      	ldr	r3, [pc, #200]	; (8000cec <setupCONNECTION+0xe4>)
 8000c22:	701a      	strb	r2, [r3, #0]
	connect2 = sendATcommand_2("AT+CMQTTSTART\r\n","+CMQTTSTART: 0","ERROR",2000);
 8000c24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <setupCONNECTION+0xe8>)
 8000c2a:	4932      	ldr	r1, [pc, #200]	; (8000cf4 <setupCONNECTION+0xec>)
 8000c2c:	4832      	ldr	r0, [pc, #200]	; (8000cf8 <setupCONNECTION+0xf0>)
 8000c2e:	f7ff fda5 	bl	800077c <sendATcommand_2>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <setupCONNECTION+0xf4>)
 8000c38:	701a      	strb	r2, [r3, #0]

	memset(aux_str,0,100);
 8000c3a:	2264      	movs	r2, #100	; 0x64
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4830      	ldr	r0, [pc, #192]	; (8000d00 <setupCONNECTION+0xf8>)
 8000c40:	f002 f9a4 	bl	8002f8c <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTACCQ=%d,\"%s\"%s",index,client,enter);
 8000c44:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <setupCONNECTION+0xfc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <setupCONNECTION+0x100>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <setupCONNECTION+0x104>)
 8000c50:	9201      	str	r2, [sp, #4]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	460b      	mov	r3, r1
 8000c56:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <setupCONNECTION+0x108>)
 8000c58:	2164      	movs	r1, #100	; 0x64
 8000c5a:	4829      	ldr	r0, [pc, #164]	; (8000d00 <setupCONNECTION+0xf8>)
 8000c5c:	f002 f99e 	bl	8002f9c <sniprintf>
	connect3 = sendATcommand_2(aux_str,"OK","+CMQTTACCQ: 0,19",2000);
 8000c60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c64:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <setupCONNECTION+0x10c>)
 8000c66:	492c      	ldr	r1, [pc, #176]	; (8000d18 <setupCONNECTION+0x110>)
 8000c68:	4825      	ldr	r0, [pc, #148]	; (8000d00 <setupCONNECTION+0xf8>)
 8000c6a:	f7ff fd87 	bl	800077c <sendATcommand_2>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <setupCONNECTION+0x114>)
 8000c74:	701a      	strb	r2, [r3, #0]

	memset(aux_str,0,100);
 8000c76:	2264      	movs	r2, #100	; 0x64
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4821      	ldr	r0, [pc, #132]	; (8000d00 <setupCONNECTION+0xf8>)
 8000c7c:	f002 f986 	bl	8002f8c <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTCONNECT=%d,\"tcp://%s:%d\",%d,%d,\"%s\",\"%s\"%s",index,server,port,keepalive,cleansession,username,password,enter);
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <setupCONNECTION+0xfc>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	469c      	mov	ip, r3
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <setupCONNECTION+0x118>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a26      	ldr	r2, [pc, #152]	; (8000d24 <setupCONNECTION+0x11c>)
 8000c8c:	8812      	ldrh	r2, [r2, #0]
 8000c8e:	4614      	mov	r4, r2
 8000c90:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <setupCONNECTION+0x120>)
 8000c92:	8812      	ldrh	r2, [r2, #0]
 8000c94:	4615      	mov	r5, r2
 8000c96:	4a25      	ldr	r2, [pc, #148]	; (8000d2c <setupCONNECTION+0x124>)
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	4616      	mov	r6, r2
 8000c9c:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <setupCONNECTION+0x128>)
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	4924      	ldr	r1, [pc, #144]	; (8000d34 <setupCONNECTION+0x12c>)
 8000ca2:	6809      	ldr	r1, [r1, #0]
 8000ca4:	4819      	ldr	r0, [pc, #100]	; (8000d0c <setupCONNECTION+0x104>)
 8000ca6:	9006      	str	r0, [sp, #24]
 8000ca8:	9105      	str	r1, [sp, #20]
 8000caa:	9204      	str	r2, [sp, #16]
 8000cac:	9603      	str	r6, [sp, #12]
 8000cae:	9502      	str	r5, [sp, #8]
 8000cb0:	9401      	str	r4, [sp, #4]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4663      	mov	r3, ip
 8000cb6:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <setupCONNECTION+0x130>)
 8000cb8:	2164      	movs	r1, #100	; 0x64
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <setupCONNECTION+0xf8>)
 8000cbc:	f002 f96e 	bl	8002f9c <sniprintf>
	connect4 = sendATcommand_2(aux_str,"+CMQTTCONNECT: 0,0","+CMQTTCONNECT: 0,19",3000);
 8000cc0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <setupCONNECTION+0x134>)
 8000cc6:	491e      	ldr	r1, [pc, #120]	; (8000d40 <setupCONNECTION+0x138>)
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <setupCONNECTION+0xf8>)
 8000cca:	f7ff fd57 	bl	800077c <sendATcommand_2>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <setupCONNECTION+0x13c>)
 8000cd4:	701a      	strb	r2, [r3, #0]
//AT+CMQTTSTART<CR><LF>
//AT+CMQTTACCQ=0,"SIMCom_client01",1<CR><LF>
//AT+CMQTTCONNECT=0,"tcp://m14.cloudmqtt.com:19613",180,1,"yktdxpqb","VKCG6yboYrYd"<CR><LF>
}
 8000cd6:	bf00      	nop
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3704      	adds	r7, #4
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce0:	08003ad0 	.word	0x08003ad0
 8000ce4:	08003adc 	.word	0x08003adc
 8000ce8:	08003aec 	.word	0x08003aec
 8000cec:	2000034f 	.word	0x2000034f
 8000cf0:	08003afc 	.word	0x08003afc
 8000cf4:	08003b04 	.word	0x08003b04
 8000cf8:	08003b14 	.word	0x08003b14
 8000cfc:	2000041c 	.word	0x2000041c
 8000d00:	20000354 	.word	0x20000354
 8000d04:	20000222 	.word	0x20000222
 8000d08:	20000010 	.word	0x20000010
 8000d0c:	2000000c 	.word	0x2000000c
 8000d10:	08003b24 	.word	0x08003b24
 8000d14:	08003b3c 	.word	0x08003b3c
 8000d18:	08003a88 	.word	0x08003a88
 8000d1c:	2000034c 	.word	0x2000034c
 8000d20:	20000014 	.word	0x20000014
 8000d24:	20000024 	.word	0x20000024
 8000d28:	20000020 	.word	0x20000020
 8000d2c:	20000022 	.word	0x20000022
 8000d30:	20000018 	.word	0x20000018
 8000d34:	2000001c 	.word	0x2000001c
 8000d38:	08003b50 	.word	0x08003b50
 8000d3c:	08003b84 	.word	0x08003b84
 8000d40:	08003b98 	.word	0x08003b98
 8000d44:	20000350 	.word	0x20000350

08000d48 <Subscibe>:
/*------------------------------------SUBSCIBE --------------------------------------------------------*/
// CMQTTSUBTOPIC : 2
uint8_t Subscibe(char *sub_topic)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af04      	add	r7, sp, #16
 8000d4e:	6078      	str	r0, [r7, #4]
	memset(aux_str,0,100);
 8000d50:	2264      	movs	r2, #100	; 0x64
 8000d52:	2100      	movs	r1, #0
 8000d54:	4815      	ldr	r0, [pc, #84]	; (8000dac <Subscibe+0x64>)
 8000d56:	f002 f919 	bl	8002f8c <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTSUB=%d,%d,%d,%d%s",index,strlen(sub_topic),0,1,enter);
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <Subscibe+0x68>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461c      	mov	r4, r3
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff fa35 	bl	80001d0 <strlen>
 8000d66:	4602      	mov	r2, r0
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <Subscibe+0x6c>)
 8000d6a:	9303      	str	r3, [sp, #12]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	2300      	movs	r3, #0
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	9200      	str	r2, [sp, #0]
 8000d76:	4623      	mov	r3, r4
 8000d78:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <Subscibe+0x70>)
 8000d7a:	2164      	movs	r1, #100	; 0x64
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <Subscibe+0x64>)
 8000d7e:	f002 f90d 	bl	8002f9c <sniprintf>
	connect8 = sendATcommand(aux_str,">",2000);
 8000d82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <Subscibe+0x74>)
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <Subscibe+0x64>)
 8000d8a:	f7ff fc47 	bl	800061c <sendATcommand>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <Subscibe+0x78>)
 8000d94:	701a      	strb	r2, [r3, #0]
	sendATcommand(sub_topic,"OK",2000);
 8000d96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d9a:	490a      	ldr	r1, [pc, #40]	; (8000dc4 <Subscibe+0x7c>)
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fc3d 	bl	800061c <sendATcommand>
//	AT+CMQTTSUBTOPIC=0,9,0,1<CR><LF> // subscribed  AT+CMQTTSUB=0,9,0,1

}
 8000da2:	bf00      	nop
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	20000354 	.word	0x20000354
 8000db0:	20000222 	.word	0x20000222
 8000db4:	2000000c 	.word	0x2000000c
 8000db8:	08003bac 	.word	0x08003bac
 8000dbc:	08003bc8 	.word	0x08003bc8
 8000dc0:	2000041e 	.word	0x2000041e
 8000dc4:	08003a88 	.word	0x08003a88

08000dc8 <Publish>:
 * CMQTTTOPIC : 3
 * CMQTTPAYLOAD : 4
 * CMQTTPUB : 5*/

uint8_t Publish(char *pub_topic, char *payload, uint8_t qos)
{
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	71fb      	strb	r3, [r7, #7]
	memset(aux_str,0,100);
 8000dd6:	2264      	movs	r2, #100	; 0x64
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4839      	ldr	r0, [pc, #228]	; (8000ec0 <Publish+0xf8>)
 8000ddc:	f002 f8d6 	bl	8002f8c <memset>
	snprintf(aux_str, sizeof(aux_str),"AT+CMQTTTOPIC=%d,%d%s",index,strlen(pub_topic),enter);
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <Publish+0xfc>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461c      	mov	r4, r3
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f7ff f9f2 	bl	80001d0 <strlen>
 8000dec:	4602      	mov	r2, r0
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <Publish+0x100>)
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	9200      	str	r2, [sp, #0]
 8000df4:	4623      	mov	r3, r4
 8000df6:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <Publish+0x104>)
 8000df8:	2164      	movs	r1, #100	; 0x64
 8000dfa:	4831      	ldr	r0, [pc, #196]	; (8000ec0 <Publish+0xf8>)
 8000dfc:	f002 f8ce 	bl	8002f9c <sniprintf>
	connect5 = sendATcommand(aux_str,">",2000);
 8000e00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e04:	4932      	ldr	r1, [pc, #200]	; (8000ed0 <Publish+0x108>)
 8000e06:	482e      	ldr	r0, [pc, #184]	; (8000ec0 <Publish+0xf8>)
 8000e08:	f7ff fc08 	bl	800061c <sendATcommand>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <Publish+0x10c>)
 8000e12:	701a      	strb	r2, [r3, #0]
    sendATcommand(pub_topic,"OK",2000);
 8000e14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e18:	492f      	ldr	r1, [pc, #188]	; (8000ed8 <Publish+0x110>)
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff fbfe 	bl	800061c <sendATcommand>

    memset(aux_str,0,100);
 8000e20:	2264      	movs	r2, #100	; 0x64
 8000e22:	2100      	movs	r1, #0
 8000e24:	4826      	ldr	r0, [pc, #152]	; (8000ec0 <Publish+0xf8>)
 8000e26:	f002 f8b1 	bl	8002f8c <memset>
    snprintf(aux_str, sizeof(aux_str),"AT+CMQTTPAYLOAD=%d,%d%s",index,strlen(payload),enter);
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <Publish+0xfc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461c      	mov	r4, r3
 8000e30:	68b8      	ldr	r0, [r7, #8]
 8000e32:	f7ff f9cd 	bl	80001d0 <strlen>
 8000e36:	4602      	mov	r2, r0
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <Publish+0x100>)
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	9200      	str	r2, [sp, #0]
 8000e3e:	4623      	mov	r3, r4
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <Publish+0x114>)
 8000e42:	2164      	movs	r1, #100	; 0x64
 8000e44:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <Publish+0xf8>)
 8000e46:	f002 f8a9 	bl	8002f9c <sniprintf>
    connect6 = sendATcommand(aux_str,">",2000);
 8000e4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e4e:	4920      	ldr	r1, [pc, #128]	; (8000ed0 <Publish+0x108>)
 8000e50:	481b      	ldr	r0, [pc, #108]	; (8000ec0 <Publish+0xf8>)
 8000e52:	f7ff fbe3 	bl	800061c <sendATcommand>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <Publish+0x118>)
 8000e5c:	701a      	strb	r2, [r3, #0]
    sendATcommand(payload,"OK",2000);
 8000e5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e62:	491d      	ldr	r1, [pc, #116]	; (8000ed8 <Publish+0x110>)
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f7ff fbd9 	bl	800061c <sendATcommand>

    memset(aux_str,0,100);
 8000e6a:	2264      	movs	r2, #100	; 0x64
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <Publish+0xf8>)
 8000e70:	f002 f88c 	bl	8002f8c <memset>
    snprintf(aux_str, sizeof(aux_str),"AT+CMQTTPUB=%d,%d,%d%s",index,qos, strlen(payload)+strlen(pub_topic), enter);
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <Publish+0xfc>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461e      	mov	r6, r3
 8000e7a:	79fc      	ldrb	r4, [r7, #7]
 8000e7c:	68b8      	ldr	r0, [r7, #8]
 8000e7e:	f7ff f9a7 	bl	80001d0 <strlen>
 8000e82:	4605      	mov	r5, r0
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f7ff f9a3 	bl	80001d0 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	442b      	add	r3, r5
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <Publish+0x100>)
 8000e90:	9202      	str	r2, [sp, #8]
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	9400      	str	r4, [sp, #0]
 8000e96:	4633      	mov	r3, r6
 8000e98:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <Publish+0x11c>)
 8000e9a:	2164      	movs	r1, #100	; 0x64
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <Publish+0xf8>)
 8000e9e:	f002 f87d 	bl	8002f9c <sniprintf>
    connect7 = sendATcommand(aux_str,"+CMQTTPUB: 0,0",2000);
 8000ea2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ea6:	4910      	ldr	r1, [pc, #64]	; (8000ee8 <Publish+0x120>)
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <Publish+0xf8>)
 8000eaa:	f7ff fbb7 	bl	800061c <sendATcommand>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <Publish+0x124>)
 8000eb4:	701a      	strb	r2, [r3, #0]

//	AT+CMQTTTOPIC=0,21<CR><LF>  //Set the topic for the PUBLISH message
//	AT+CMQTTPAYLOAD=0,38<CR><LF>//Set the payload for the PUBLISH message
//	AT+CMQTTPUB=0,1,60<CR><LF>  //Publish topic and message

	}
 8000eb6:	bf00      	nop
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec0:	20000354 	.word	0x20000354
 8000ec4:	20000222 	.word	0x20000222
 8000ec8:	2000000c 	.word	0x2000000c
 8000ecc:	08003bcc 	.word	0x08003bcc
 8000ed0:	08003bc8 	.word	0x08003bc8
 8000ed4:	2000041d 	.word	0x2000041d
 8000ed8:	08003a88 	.word	0x08003a88
 8000edc:	08003be4 	.word	0x08003be4
 8000ee0:	2000034e 	.word	0x2000034e
 8000ee4:	08003bfc 	.word	0x08003bfc
 8000ee8:	08003c14 	.word	0x08003c14
 8000eec:	20000351 	.word	0x20000351

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <HAL_UART_MspInit+0x108>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d135      	bne.n	8000fce <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a38      	ldr	r2, [pc, #224]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fac:	2307      	movs	r3, #7
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4826      	ldr	r0, [pc, #152]	; (8001050 <HAL_UART_MspInit+0x110>)
 8000fb8:	f000 fade 	bl	8001578 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2025      	movs	r0, #37	; 0x25
 8000fc2:	f000 fa80 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fc6:	2025      	movs	r0, #37	; 0x25
 8000fc8:	f000 fa99 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fcc:	e038      	b.n	8001040 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_UART_MspInit+0x114>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d133      	bne.n	8001040 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0x10c>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001010:	230c      	movs	r3, #12
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001020:	2307      	movs	r3, #7
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_UART_MspInit+0x110>)
 800102c:	f000 faa4 	bl	8001578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2026      	movs	r0, #38	; 0x26
 8001036:	f000 fa46 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800103a:	2026      	movs	r0, #38	; 0x26
 800103c:	f000 fa5f 	bl	80014fe <HAL_NVIC_EnableIRQ>
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40011000 	.word	0x40011000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40004400 	.word	0x40004400

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f8ee 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <USART1_IRQHandler+0x10>)
 80010ba:	f001 f933 	bl	8002324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000029c 	.word	0x2000029c

080010c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	UARTIntHandler();
 80010ce:	f7ff fa57 	bl	8000580 <UARTIntHandler>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <USART2_IRQHandler+0x30>)
 80010d4:	f001 f926 	bl	8002324 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	__HAL_UART_CLEAR_PEFLAG(&huart2);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <USART2_IRQHandler+0x30>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <USART2_IRQHandler+0x30>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END USART1_IRQn 1 */
	}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000308 	.word	0x20000308

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f001 ff04 	bl	8002f38 <__errno>
 8001130:	4602      	mov	r2, r0
 8001132:	230c      	movs	r3, #12
 8001134:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20020000 	.word	0x20020000
 800115c:	00000400 	.word	0x00000400
 8001160:	20000224 	.word	0x20000224
 8001164:	20000428 	.word	0x20000428

08001168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <SystemInit+0x28>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <SystemInit+0x28>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x28>)
 800117e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001182:	609a      	str	r2, [r3, #8]
#endif
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001198:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800119a:	e003      	b.n	80011a4 <LoopCopyDataInit>

0800119c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800119e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011a2:	3104      	adds	r1, #4

080011a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011ac:	d3f6      	bcc.n	800119c <CopyDataInit>
  ldr  r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011b0:	e002      	b.n	80011b8 <LoopFillZerobss>

080011b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011b4:	f842 3b04 	str.w	r3, [r2], #4

080011b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011bc:	d3f9      	bcc.n	80011b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011be:	f7ff ffd3 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f001 febf 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fb37 	bl	8000838 <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011d0:	08003d8c 	.word	0x08003d8c
  ldr  r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011d8:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80011dc:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 80011e0:	20000428 	.word	0x20000428

080011e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f94d 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fe68 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f965 	bl	800151a <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f92d 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000028 	.word	0x20000028
 8001284:	20000030 	.word	0x20000030
 8001288:	2000002c 	.word	0x2000002c

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000030 	.word	0x20000030
 80012b0:	20000420 	.word	0x20000420

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000420 	.word	0x20000420

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_Delay+0x40>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000030 	.word	0x20000030

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4907      	ldr	r1, [pc, #28]	; (80013ac <__NVIC_EnableIRQ+0x38>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff8e 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff29 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff3e 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff8e 	bl	8001404 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff31 	bl	8001374 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa2 	bl	800146c <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d004      	beq.n	8001550 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e00c      	b.n	800156a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2205      	movs	r2, #5
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e16b      	b.n	800186c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001594:	2201      	movs	r2, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 815a 	bne.w	8001866 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d00b      	beq.n	80015d2 <HAL_GPIO_Init+0x5a>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c6:	2b11      	cmp	r3, #17
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d130      	bne.n	8001634 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 0201 	and.w	r2, r3, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0xfc>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b12      	cmp	r3, #18
 8001672:	d123      	bne.n	80016bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80b4 	beq.w	8001866 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b5f      	ldr	r3, [pc, #380]	; (8001880 <HAL_GPIO_Init+0x308>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a5e      	ldr	r2, [pc, #376]	; (8001880 <HAL_GPIO_Init+0x308>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b5c      	ldr	r3, [pc, #368]	; (8001880 <HAL_GPIO_Init+0x308>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171a:	4a5a      	ldr	r2, [pc, #360]	; (8001884 <HAL_GPIO_Init+0x30c>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a51      	ldr	r2, [pc, #324]	; (8001888 <HAL_GPIO_Init+0x310>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d02b      	beq.n	800179e <HAL_GPIO_Init+0x226>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a50      	ldr	r2, [pc, #320]	; (800188c <HAL_GPIO_Init+0x314>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d025      	beq.n	800179a <HAL_GPIO_Init+0x222>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <HAL_GPIO_Init+0x318>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01f      	beq.n	8001796 <HAL_GPIO_Init+0x21e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_GPIO_Init+0x31c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x21a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <HAL_GPIO_Init+0x320>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x216>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_GPIO_Init+0x324>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x212>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_GPIO_Init+0x328>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4a      	ldr	r2, [pc, #296]	; (80018a4 <HAL_GPIO_Init+0x32c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x20a>
 800177e:	2307      	movs	r3, #7
 8001780:	e00e      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001782:	2308      	movs	r3, #8
 8001784:	e00c      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001786:	2306      	movs	r3, #6
 8001788:	e00a      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800178a:	2305      	movs	r3, #5
 800178c:	e008      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800178e:	2304      	movs	r3, #4
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800179e:	2300      	movs	r3, #0
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b0:	4934      	ldr	r1, [pc, #208]	; (8001884 <HAL_GPIO_Init+0x30c>)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <HAL_GPIO_Init+0x330>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e2:	4a31      	ldr	r2, [pc, #196]	; (80018a8 <HAL_GPIO_Init+0x330>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017e8:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <HAL_GPIO_Init+0x330>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180c:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <HAL_GPIO_Init+0x330>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001812:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_GPIO_Init+0x330>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001836:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <HAL_GPIO_Init+0x330>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_GPIO_Init+0x330>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001860:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_GPIO_Init+0x330>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	f67f ae90 	bls.w	8001594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001874:	bf00      	nop
 8001876:	3724      	adds	r7, #36	; 0x24
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40023800 	.word	0x40023800
 8001884:	40013800 	.word	0x40013800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021000 	.word	0x40021000
 800189c:	40021400 	.word	0x40021400
 80018a0:	40021800 	.word	0x40021800
 80018a4:	40021c00 	.word	0x40021c00
 80018a8:	40013c00 	.word	0x40013c00

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	041a      	lsls	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	619a      	str	r2, [r3, #24]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e25b      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d075      	beq.n	80019ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fe:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b04      	cmp	r3, #4
 8001908:	d00c      	beq.n	8001924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190a:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001912:	2b08      	cmp	r3, #8
 8001914:	d112      	bne.n	800193c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001916:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001922:	d10b      	bne.n	800193c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	4b99      	ldr	r3, [pc, #612]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d05b      	beq.n	80019e8 <HAL_RCC_OscConfig+0x108>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d157      	bne.n	80019e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e236      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d106      	bne.n	8001954 <HAL_RCC_OscConfig+0x74>
 8001946:	4b91      	ldr	r3, [pc, #580]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a90      	ldr	r2, [pc, #576]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e01d      	b.n	8001990 <HAL_RCC_OscConfig+0xb0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x98>
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a8a      	ldr	r2, [pc, #552]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a87      	ldr	r2, [pc, #540]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0xb0>
 8001978:	4b84      	ldr	r3, [pc, #528]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a83      	ldr	r2, [pc, #524]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a80      	ldr	r2, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fc8c 	bl	80012b4 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fc88 	bl	80012b4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1fb      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0xc0>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fc78 	bl	80012b4 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fc74 	bl	80012b4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1e7      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	4b6c      	ldr	r3, [pc, #432]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0xe8>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d063      	beq.n	8001abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f6:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a02:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d11c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d116      	bne.n	8001a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x152>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1bb      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4952      	ldr	r1, [pc, #328]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <HAL_RCC_OscConfig+0x2b0>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff fc2d 	bl	80012b4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fc29 	bl	80012b4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e19c      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4940      	ldr	r1, [pc, #256]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x2b0>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fc0c 	bl	80012b4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fc08 	bl	80012b4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e17b      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d030      	beq.n	8001b2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x2b4>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fbec 	bl	80012b4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fbe8 	bl	80012b4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e15b      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x200>
 8001afe:	e015      	b.n	8001b2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x2b4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fbd5 	bl	80012b4 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fbd1 	bl	80012b4 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e144      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a0 	beq.w	8001c7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d121      	bne.n	8001bba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b82:	f7ff fb97 	bl	80012b4 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	e011      	b.n	8001bae <HAL_RCC_OscConfig+0x2ce>
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	42470000 	.word	0x42470000
 8001b94:	42470e80 	.word	0x42470e80
 8001b98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7ff fb8a 	bl	80012b4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0fd      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4b81      	ldr	r3, [pc, #516]	; (8001db4 <HAL_RCC_OscConfig+0x4d4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d106      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
 8001bc2:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a7c      	ldr	r2, [pc, #496]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bce:	e01c      	b.n	8001c0a <HAL_RCC_OscConfig+0x32a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x312>
 8001bd8:	4b77      	ldr	r3, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a76      	ldr	r2, [pc, #472]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	4b74      	ldr	r3, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a73      	ldr	r2, [pc, #460]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCC_OscConfig+0x32a>
 8001bf2:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	4a70      	ldr	r2, [pc, #448]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfe:	4b6e      	ldr	r3, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	4a6d      	ldr	r2, [pc, #436]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d015      	beq.n	8001c3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff fb4f 	bl	80012b4 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fb4b 	bl	80012b4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0bc      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ee      	beq.n	8001c1a <HAL_RCC_OscConfig+0x33a>
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fb39 	bl	80012b4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7ff fb35 	bl	80012b4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0a6      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ee      	bne.n	8001c46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d105      	bne.n	8001c7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6e:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8092 	beq.w	8001da8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c84:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d05c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d141      	bne.n	8001d1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <HAL_RCC_OscConfig+0x4dc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb09 	bl	80012b4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff fb05 	bl	80012b4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e078      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	019b      	lsls	r3, r3, #6
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	061b      	lsls	r3, r3, #24
 8001ce8:	4933      	ldr	r1, [pc, #204]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <HAL_RCC_OscConfig+0x4dc>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fade 	bl	80012b4 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff fada 	bl	80012b4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e04d      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x41c>
 8001d1a:	e045      	b.n	8001da8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x4dc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff fac7 	bl	80012b4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff fac3 	bl	80012b4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e036      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x44a>
 8001d48:	e02e      	b.n	8001da8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e029      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d115      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10d      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40007000 	.word	0x40007000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	42470060 	.word	0x42470060

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0cc      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d90c      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d044      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e067      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4934      	ldr	r1, [pc, #208]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7ff fa00 	bl	80012b4 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7ff f9fc 	bl	80012b4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e04f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20c      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f960 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08003c24 	.word	0x08003c24
 8001f84:	20000028 	.word	0x20000028
 8001f88:	2000002c 	.word	0x2000002c

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fa2:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d007      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x32>
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d008      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x38>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 808d 	bne.w	80020d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fba:	60bb      	str	r3, [r7, #8]
       break;
 8001fbc:	e08c      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001fc0:	60bb      	str	r3, [r7, #8]
      break;
 8001fc2:	e089      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc4:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fce:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d023      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fda:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	099b      	lsrs	r3, r3, #6
 8001fe0:	f04f 0400 	mov.w	r4, #0
 8001fe4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	ea03 0501 	and.w	r5, r3, r1
 8001ff0:	ea04 0602 	and.w	r6, r4, r2
 8001ff4:	4a3d      	ldr	r2, [pc, #244]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001ff6:	fb02 f106 	mul.w	r1, r2, r6
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	fb02 f205 	mul.w	r2, r2, r5
 8002000:	440a      	add	r2, r1
 8002002:	493a      	ldr	r1, [pc, #232]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 8002004:	fba5 0101 	umull	r0, r1, r5, r1
 8002008:	1853      	adds	r3, r2, r1
 800200a:	4619      	mov	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	461a      	mov	r2, r3
 8002014:	4623      	mov	r3, r4
 8002016:	f7fe f933 	bl	8000280 <__aeabi_uldivmod>
 800201a:	4603      	mov	r3, r0
 800201c:	460c      	mov	r4, r1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e049      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	099b      	lsrs	r3, r3, #6
 8002028:	f04f 0400 	mov.w	r4, #0
 800202c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	ea03 0501 	and.w	r5, r3, r1
 8002038:	ea04 0602 	and.w	r6, r4, r2
 800203c:	4629      	mov	r1, r5
 800203e:	4632      	mov	r2, r6
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	0154      	lsls	r4, r2, #5
 800204a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800204e:	014b      	lsls	r3, r1, #5
 8002050:	4619      	mov	r1, r3
 8002052:	4622      	mov	r2, r4
 8002054:	1b49      	subs	r1, r1, r5
 8002056:	eb62 0206 	sbc.w	r2, r2, r6
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	f04f 0400 	mov.w	r4, #0
 8002062:	0194      	lsls	r4, r2, #6
 8002064:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002068:	018b      	lsls	r3, r1, #6
 800206a:	1a5b      	subs	r3, r3, r1
 800206c:	eb64 0402 	sbc.w	r4, r4, r2
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	00e2      	lsls	r2, r4, #3
 800207a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800207e:	00d9      	lsls	r1, r3, #3
 8002080:	460b      	mov	r3, r1
 8002082:	4614      	mov	r4, r2
 8002084:	195b      	adds	r3, r3, r5
 8002086:	eb44 0406 	adc.w	r4, r4, r6
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	02a2      	lsls	r2, r4, #10
 8002094:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002098:	0299      	lsls	r1, r3, #10
 800209a:	460b      	mov	r3, r1
 800209c:	4614      	mov	r4, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	4621      	mov	r1, r4
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f04f 0400 	mov.w	r4, #0
 80020a8:	461a      	mov	r2, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	f7fe f8e8 	bl	8000280 <__aeabi_uldivmod>
 80020b0:	4603      	mov	r3, r0
 80020b2:	460c      	mov	r4, r1
 80020b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	0c1b      	lsrs	r3, r3, #16
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	3301      	adds	r3, #1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	60bb      	str	r3, [r7, #8]
      break;
 80020d0:	e002      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020d4:	60bb      	str	r3, [r7, #8]
      break;
 80020d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d8:	68bb      	ldr	r3, [r7, #8]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	00f42400 	.word	0x00f42400
 80020ec:	017d7840 	.word	0x017d7840

080020f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_RCC_GetHCLKFreq+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000028 	.word	0x20000028

08002108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800210c:	f7ff fff0 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 8002110:	4601      	mov	r1, r0
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	0a9b      	lsrs	r3, r3, #10
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4a03      	ldr	r2, [pc, #12]	; (800212c <HAL_RCC_GetPCLK1Freq+0x24>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	08003c34 	.word	0x08003c34

08002130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002134:	f7ff ffdc 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 8002138:	4601      	mov	r1, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0b5b      	lsrs	r3, r3, #13
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	08003c34 	.word	0x08003c34

08002158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e03f      	b.n	80021ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe fede 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fb4b 	bl	8002838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b088      	sub	sp, #32
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b20      	cmp	r3, #32
 8002210:	f040 8083 	bne.w	800231a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_UART_Transmit+0x2e>
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e07b      	b.n	800231c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_UART_Transmit+0x40>
 800222e:	2302      	movs	r3, #2
 8002230:	e074      	b.n	800231c <HAL_UART_Transmit+0x12a>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2221      	movs	r2, #33	; 0x21
 8002244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002248:	f7ff f834 	bl	80012b4 <HAL_GetTick>
 800224c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002262:	e042      	b.n	80022ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	d122      	bne.n	80022c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2200      	movs	r2, #0
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f96a 	bl	8002560 <UART_WaitOnFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e042      	b.n	800231c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3302      	adds	r3, #2
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	e017      	b.n	80022ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	3301      	adds	r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	e013      	b.n	80022ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f947 	bl	8002560 <UART_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e01f      	b.n	800231c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1b7      	bne.n	8002264 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2140      	movs	r1, #64	; 0x40
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f92e 	bl	8002560 <UART_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e006      	b.n	800231c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_UART_IRQHandler+0x52>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f9e0 	bl	8002734 <UART_Receive_IT>
      return;
 8002374:	e0d1      	b.n	800251a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80b0 	beq.w	80024de <HAL_UART_IRQHandler+0x1ba>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_UART_IRQHandler+0x70>
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80a5 	beq.w	80024de <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_UART_IRQHandler+0x90>
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_UART_IRQHandler+0xb0>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	f043 0202 	orr.w	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_UART_IRQHandler+0xd0>
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00f      	beq.n	800241e <HAL_UART_IRQHandler+0xfa>
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d104      	bne.n	8002412 <HAL_UART_IRQHandler+0xee>
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	f043 0208 	orr.w	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d078      	beq.n	8002518 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_UART_IRQHandler+0x11c>
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f97a 	bl	8002734 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	bf0c      	ite	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	2300      	movne	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_UART_IRQHandler+0x144>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d031      	beq.n	80024cc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f8c3 	bl	80025f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d123      	bne.n	80024c4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	4a21      	ldr	r2, [pc, #132]	; (8002520 <HAL_UART_IRQHandler+0x1fc>)
 800249a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff f846 	bl	8001532 <HAL_DMA_Abort_IT>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d016      	beq.n	80024da <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024b6:	4610      	mov	r0, r2
 80024b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ba:	e00e      	b.n	80024da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f845 	bl	800254c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c2:	e00a      	b.n	80024da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f841 	bl	800254c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ca:	e006      	b.n	80024da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f83d 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80024d8:	e01e      	b.n	8002518 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024da:	bf00      	nop
    return;
 80024dc:	e01c      	b.n	8002518 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_UART_IRQHandler+0x1d6>
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8b0 	bl	8002658 <UART_Transmit_IT>
    return;
 80024f8:	e00f      	b.n	800251a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_UART_IRQHandler+0x1f6>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8f8 	bl	8002704 <UART_EndTransmit_IT>
    return;
 8002514:	bf00      	nop
 8002516:	e000      	b.n	800251a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002518:	bf00      	nop
  }
}
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	08002631 	.word	0x08002631

08002524 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002570:	e02c      	b.n	80025cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d028      	beq.n	80025cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <UART_WaitOnFlagUntilTimeout+0x30>
 8002580:	f7fe fe98 	bl	80012b4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	429a      	cmp	r2, r3
 800258e:	d21d      	bcs.n	80025cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800259e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e00f      	b.n	80025ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	4013      	ands	r3, r2
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	429a      	cmp	r2, r3
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d0c3      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800260a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff ff7e 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b21      	cmp	r3, #33	; 0x21
 800266a:	d144      	bne.n	80026f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002674:	d11a      	bne.n	80026ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800268a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	1c9a      	adds	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]
 800269e:	e00e      	b.n	80026be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	621a      	str	r2, [r3, #32]
 80026aa:	e008      	b.n	80026be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	1c59      	adds	r1, r3, #1
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6211      	str	r1, [r2, #32]
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4619      	mov	r1, r3
 80026cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff fefd 	bl	8002524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b22      	cmp	r3, #34	; 0x22
 8002746:	d171      	bne.n	800282c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002750:	d123      	bne.n	800279a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10e      	bne.n	800277e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	1c9a      	adds	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
 800277c:	e029      	b.n	80027d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	b29b      	uxth	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
 8002798:	e01b      	b.n	80027d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6858      	ldr	r0, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	1c59      	adds	r1, r3, #1
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6291      	str	r1, [r2, #40]	; 0x28
 80027b2:	b2c2      	uxtb	r2, r0
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e00c      	b.n	80027d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	1c58      	adds	r0, r3, #1
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	6288      	str	r0, [r1, #40]	; 0x28
 80027ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29b      	uxth	r3, r3
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4619      	mov	r1, r3
 80027e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d120      	bne.n	8002828 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0220 	bic.w	r2, r2, #32
 80027f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002804:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fe8a 	bl	8002538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e002      	b.n	800282e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e000      	b.n	800282e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
  }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800287a:	f023 030c 	bic.w	r3, r3, #12
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	68f9      	ldr	r1, [r7, #12]
 8002884:	430b      	orrs	r3, r1
 8002886:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a6:	f040 818b 	bne.w	8002bc0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4ac1      	ldr	r2, [pc, #772]	; (8002bb4 <UART_SetConfig+0x37c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d005      	beq.n	80028c0 <UART_SetConfig+0x88>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4abf      	ldr	r2, [pc, #764]	; (8002bb8 <UART_SetConfig+0x380>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	f040 80bd 	bne.w	8002a3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028c0:	f7ff fc36 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80028c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	461d      	mov	r5, r3
 80028ca:	f04f 0600 	mov.w	r6, #0
 80028ce:	46a8      	mov	r8, r5
 80028d0:	46b1      	mov	r9, r6
 80028d2:	eb18 0308 	adds.w	r3, r8, r8
 80028d6:	eb49 0409 	adc.w	r4, r9, r9
 80028da:	4698      	mov	r8, r3
 80028dc:	46a1      	mov	r9, r4
 80028de:	eb18 0805 	adds.w	r8, r8, r5
 80028e2:	eb49 0906 	adc.w	r9, r9, r6
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028fa:	4688      	mov	r8, r1
 80028fc:	4691      	mov	r9, r2
 80028fe:	eb18 0005 	adds.w	r0, r8, r5
 8002902:	eb49 0106 	adc.w	r1, r9, r6
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	461d      	mov	r5, r3
 800290c:	f04f 0600 	mov.w	r6, #0
 8002910:	196b      	adds	r3, r5, r5
 8002912:	eb46 0406 	adc.w	r4, r6, r6
 8002916:	461a      	mov	r2, r3
 8002918:	4623      	mov	r3, r4
 800291a:	f7fd fcb1 	bl	8000280 <__aeabi_uldivmod>
 800291e:	4603      	mov	r3, r0
 8002920:	460c      	mov	r4, r1
 8002922:	461a      	mov	r2, r3
 8002924:	4ba5      	ldr	r3, [pc, #660]	; (8002bbc <UART_SetConfig+0x384>)
 8002926:	fba3 2302 	umull	r2, r3, r3, r2
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	461d      	mov	r5, r3
 8002934:	f04f 0600 	mov.w	r6, #0
 8002938:	46a9      	mov	r9, r5
 800293a:	46b2      	mov	sl, r6
 800293c:	eb19 0309 	adds.w	r3, r9, r9
 8002940:	eb4a 040a 	adc.w	r4, sl, sl
 8002944:	4699      	mov	r9, r3
 8002946:	46a2      	mov	sl, r4
 8002948:	eb19 0905 	adds.w	r9, r9, r5
 800294c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002950:	f04f 0100 	mov.w	r1, #0
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800295c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002964:	4689      	mov	r9, r1
 8002966:	4692      	mov	sl, r2
 8002968:	eb19 0005 	adds.w	r0, r9, r5
 800296c:	eb4a 0106 	adc.w	r1, sl, r6
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	461d      	mov	r5, r3
 8002976:	f04f 0600 	mov.w	r6, #0
 800297a:	196b      	adds	r3, r5, r5
 800297c:	eb46 0406 	adc.w	r4, r6, r6
 8002980:	461a      	mov	r2, r3
 8002982:	4623      	mov	r3, r4
 8002984:	f7fd fc7c 	bl	8000280 <__aeabi_uldivmod>
 8002988:	4603      	mov	r3, r0
 800298a:	460c      	mov	r4, r1
 800298c:	461a      	mov	r2, r3
 800298e:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <UART_SetConfig+0x384>)
 8002990:	fba3 1302 	umull	r1, r3, r3, r2
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	2164      	movs	r1, #100	; 0x64
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	3332      	adds	r3, #50	; 0x32
 80029a2:	4a86      	ldr	r2, [pc, #536]	; (8002bbc <UART_SetConfig+0x384>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029b0:	4498      	add	r8, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	461d      	mov	r5, r3
 80029b6:	f04f 0600 	mov.w	r6, #0
 80029ba:	46a9      	mov	r9, r5
 80029bc:	46b2      	mov	sl, r6
 80029be:	eb19 0309 	adds.w	r3, r9, r9
 80029c2:	eb4a 040a 	adc.w	r4, sl, sl
 80029c6:	4699      	mov	r9, r3
 80029c8:	46a2      	mov	sl, r4
 80029ca:	eb19 0905 	adds.w	r9, r9, r5
 80029ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029e6:	4689      	mov	r9, r1
 80029e8:	4692      	mov	sl, r2
 80029ea:	eb19 0005 	adds.w	r0, r9, r5
 80029ee:	eb4a 0106 	adc.w	r1, sl, r6
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	461d      	mov	r5, r3
 80029f8:	f04f 0600 	mov.w	r6, #0
 80029fc:	196b      	adds	r3, r5, r5
 80029fe:	eb46 0406 	adc.w	r4, r6, r6
 8002a02:	461a      	mov	r2, r3
 8002a04:	4623      	mov	r3, r4
 8002a06:	f7fd fc3b 	bl	8000280 <__aeabi_uldivmod>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <UART_SetConfig+0x384>)
 8002a12:	fba3 1302 	umull	r1, r3, r3, r2
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2164      	movs	r1, #100	; 0x64
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	3332      	adds	r3, #50	; 0x32
 8002a24:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <UART_SetConfig+0x384>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	f003 0207 	and.w	r2, r3, #7
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4442      	add	r2, r8
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	e26f      	b.n	8002f1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a3a:	f7ff fb65 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 8002a3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	461d      	mov	r5, r3
 8002a44:	f04f 0600 	mov.w	r6, #0
 8002a48:	46a8      	mov	r8, r5
 8002a4a:	46b1      	mov	r9, r6
 8002a4c:	eb18 0308 	adds.w	r3, r8, r8
 8002a50:	eb49 0409 	adc.w	r4, r9, r9
 8002a54:	4698      	mov	r8, r3
 8002a56:	46a1      	mov	r9, r4
 8002a58:	eb18 0805 	adds.w	r8, r8, r5
 8002a5c:	eb49 0906 	adc.w	r9, r9, r6
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a74:	4688      	mov	r8, r1
 8002a76:	4691      	mov	r9, r2
 8002a78:	eb18 0005 	adds.w	r0, r8, r5
 8002a7c:	eb49 0106 	adc.w	r1, r9, r6
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	461d      	mov	r5, r3
 8002a86:	f04f 0600 	mov.w	r6, #0
 8002a8a:	196b      	adds	r3, r5, r5
 8002a8c:	eb46 0406 	adc.w	r4, r6, r6
 8002a90:	461a      	mov	r2, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	f7fd fbf4 	bl	8000280 <__aeabi_uldivmod>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	460c      	mov	r4, r1
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <UART_SetConfig+0x384>)
 8002aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	461d      	mov	r5, r3
 8002aae:	f04f 0600 	mov.w	r6, #0
 8002ab2:	46a9      	mov	r9, r5
 8002ab4:	46b2      	mov	sl, r6
 8002ab6:	eb19 0309 	adds.w	r3, r9, r9
 8002aba:	eb4a 040a 	adc.w	r4, sl, sl
 8002abe:	4699      	mov	r9, r3
 8002ac0:	46a2      	mov	sl, r4
 8002ac2:	eb19 0905 	adds.w	r9, r9, r5
 8002ac6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ada:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ade:	4689      	mov	r9, r1
 8002ae0:	4692      	mov	sl, r2
 8002ae2:	eb19 0005 	adds.w	r0, r9, r5
 8002ae6:	eb4a 0106 	adc.w	r1, sl, r6
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	461d      	mov	r5, r3
 8002af0:	f04f 0600 	mov.w	r6, #0
 8002af4:	196b      	adds	r3, r5, r5
 8002af6:	eb46 0406 	adc.w	r4, r6, r6
 8002afa:	461a      	mov	r2, r3
 8002afc:	4623      	mov	r3, r4
 8002afe:	f7fd fbbf 	bl	8000280 <__aeabi_uldivmod>
 8002b02:	4603      	mov	r3, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <UART_SetConfig+0x384>)
 8002b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2164      	movs	r1, #100	; 0x64
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	3332      	adds	r3, #50	; 0x32
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <UART_SetConfig+0x384>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b2a:	4498      	add	r8, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	461d      	mov	r5, r3
 8002b30:	f04f 0600 	mov.w	r6, #0
 8002b34:	46a9      	mov	r9, r5
 8002b36:	46b2      	mov	sl, r6
 8002b38:	eb19 0309 	adds.w	r3, r9, r9
 8002b3c:	eb4a 040a 	adc.w	r4, sl, sl
 8002b40:	4699      	mov	r9, r3
 8002b42:	46a2      	mov	sl, r4
 8002b44:	eb19 0905 	adds.w	r9, r9, r5
 8002b48:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b60:	4689      	mov	r9, r1
 8002b62:	4692      	mov	sl, r2
 8002b64:	eb19 0005 	adds.w	r0, r9, r5
 8002b68:	eb4a 0106 	adc.w	r1, sl, r6
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	461d      	mov	r5, r3
 8002b72:	f04f 0600 	mov.w	r6, #0
 8002b76:	196b      	adds	r3, r5, r5
 8002b78:	eb46 0406 	adc.w	r4, r6, r6
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4623      	mov	r3, r4
 8002b80:	f7fd fb7e 	bl	8000280 <__aeabi_uldivmod>
 8002b84:	4603      	mov	r3, r0
 8002b86:	460c      	mov	r4, r1
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <UART_SetConfig+0x384>)
 8002b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	2164      	movs	r1, #100	; 0x64
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	3332      	adds	r3, #50	; 0x32
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <UART_SetConfig+0x384>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	f003 0207 	and.w	r2, r3, #7
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4442      	add	r2, r8
 8002bb0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002bb2:	e1b2      	b.n	8002f1a <UART_SetConfig+0x6e2>
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40011400 	.word	0x40011400
 8002bbc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4ad7      	ldr	r2, [pc, #860]	; (8002f24 <UART_SetConfig+0x6ec>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d005      	beq.n	8002bd6 <UART_SetConfig+0x39e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4ad6      	ldr	r2, [pc, #856]	; (8002f28 <UART_SetConfig+0x6f0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	f040 80d1 	bne.w	8002d78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bd6:	f7ff faab 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 8002bda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	469a      	mov	sl, r3
 8002be0:	f04f 0b00 	mov.w	fp, #0
 8002be4:	46d0      	mov	r8, sl
 8002be6:	46d9      	mov	r9, fp
 8002be8:	eb18 0308 	adds.w	r3, r8, r8
 8002bec:	eb49 0409 	adc.w	r4, r9, r9
 8002bf0:	4698      	mov	r8, r3
 8002bf2:	46a1      	mov	r9, r4
 8002bf4:	eb18 080a 	adds.w	r8, r8, sl
 8002bf8:	eb49 090b 	adc.w	r9, r9, fp
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c10:	4688      	mov	r8, r1
 8002c12:	4691      	mov	r9, r2
 8002c14:	eb1a 0508 	adds.w	r5, sl, r8
 8002c18:	eb4b 0609 	adc.w	r6, fp, r9
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	f04f 0400 	mov.w	r4, #0
 8002c2e:	0094      	lsls	r4, r2, #2
 8002c30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c34:	008b      	lsls	r3, r1, #2
 8002c36:	461a      	mov	r2, r3
 8002c38:	4623      	mov	r3, r4
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	4631      	mov	r1, r6
 8002c3e:	f7fd fb1f 	bl	8000280 <__aeabi_uldivmod>
 8002c42:	4603      	mov	r3, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	461a      	mov	r2, r3
 8002c48:	4bb8      	ldr	r3, [pc, #736]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	469b      	mov	fp, r3
 8002c58:	f04f 0c00 	mov.w	ip, #0
 8002c5c:	46d9      	mov	r9, fp
 8002c5e:	46e2      	mov	sl, ip
 8002c60:	eb19 0309 	adds.w	r3, r9, r9
 8002c64:	eb4a 040a 	adc.w	r4, sl, sl
 8002c68:	4699      	mov	r9, r3
 8002c6a:	46a2      	mov	sl, r4
 8002c6c:	eb19 090b 	adds.w	r9, r9, fp
 8002c70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c88:	4689      	mov	r9, r1
 8002c8a:	4692      	mov	sl, r2
 8002c8c:	eb1b 0509 	adds.w	r5, fp, r9
 8002c90:	eb4c 060a 	adc.w	r6, ip, sl
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	f04f 0400 	mov.w	r4, #0
 8002ca6:	0094      	lsls	r4, r2, #2
 8002ca8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cac:	008b      	lsls	r3, r1, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4623      	mov	r3, r4
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	4631      	mov	r1, r6
 8002cb6:	f7fd fae3 	bl	8000280 <__aeabi_uldivmod>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b9a      	ldr	r3, [pc, #616]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2164      	movs	r1, #100	; 0x64
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	3332      	adds	r3, #50	; 0x32
 8002cd4:	4a95      	ldr	r2, [pc, #596]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce0:	4498      	add	r8, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	469b      	mov	fp, r3
 8002ce6:	f04f 0c00 	mov.w	ip, #0
 8002cea:	46d9      	mov	r9, fp
 8002cec:	46e2      	mov	sl, ip
 8002cee:	eb19 0309 	adds.w	r3, r9, r9
 8002cf2:	eb4a 040a 	adc.w	r4, sl, sl
 8002cf6:	4699      	mov	r9, r3
 8002cf8:	46a2      	mov	sl, r4
 8002cfa:	eb19 090b 	adds.w	r9, r9, fp
 8002cfe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d16:	4689      	mov	r9, r1
 8002d18:	4692      	mov	sl, r2
 8002d1a:	eb1b 0509 	adds.w	r5, fp, r9
 8002d1e:	eb4c 060a 	adc.w	r6, ip, sl
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	f04f 0400 	mov.w	r4, #0
 8002d34:	0094      	lsls	r4, r2, #2
 8002d36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	4628      	mov	r0, r5
 8002d42:	4631      	mov	r1, r6
 8002d44:	f7fd fa9c 	bl	8000280 <__aeabi_uldivmod>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002d50:	fba3 1302 	umull	r1, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2164      	movs	r1, #100	; 0x64
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	4a72      	ldr	r2, [pc, #456]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4442      	add	r2, r8
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	e0d0      	b.n	8002f1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d78:	f7ff f9c6 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 8002d7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	469a      	mov	sl, r3
 8002d82:	f04f 0b00 	mov.w	fp, #0
 8002d86:	46d0      	mov	r8, sl
 8002d88:	46d9      	mov	r9, fp
 8002d8a:	eb18 0308 	adds.w	r3, r8, r8
 8002d8e:	eb49 0409 	adc.w	r4, r9, r9
 8002d92:	4698      	mov	r8, r3
 8002d94:	46a1      	mov	r9, r4
 8002d96:	eb18 080a 	adds.w	r8, r8, sl
 8002d9a:	eb49 090b 	adc.w	r9, r9, fp
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002daa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002db2:	4688      	mov	r8, r1
 8002db4:	4691      	mov	r9, r2
 8002db6:	eb1a 0508 	adds.w	r5, sl, r8
 8002dba:	eb4b 0609 	adc.w	r6, fp, r9
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	0094      	lsls	r4, r2, #2
 8002dd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dd6:	008b      	lsls	r3, r1, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4623      	mov	r3, r4
 8002ddc:	4628      	mov	r0, r5
 8002dde:	4631      	mov	r1, r6
 8002de0:	f7fd fa4e 	bl	8000280 <__aeabi_uldivmod>
 8002de4:	4603      	mov	r3, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002dec:	fba3 2302 	umull	r2, r3, r3, r2
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	469b      	mov	fp, r3
 8002dfa:	f04f 0c00 	mov.w	ip, #0
 8002dfe:	46d9      	mov	r9, fp
 8002e00:	46e2      	mov	sl, ip
 8002e02:	eb19 0309 	adds.w	r3, r9, r9
 8002e06:	eb4a 040a 	adc.w	r4, sl, sl
 8002e0a:	4699      	mov	r9, r3
 8002e0c:	46a2      	mov	sl, r4
 8002e0e:	eb19 090b 	adds.w	r9, r9, fp
 8002e12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e2a:	4689      	mov	r9, r1
 8002e2c:	4692      	mov	sl, r2
 8002e2e:	eb1b 0509 	adds.w	r5, fp, r9
 8002e32:	eb4c 060a 	adc.w	r6, ip, sl
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	f04f 0400 	mov.w	r4, #0
 8002e48:	0094      	lsls	r4, r2, #2
 8002e4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e4e:	008b      	lsls	r3, r1, #2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	4628      	mov	r0, r5
 8002e56:	4631      	mov	r1, r6
 8002e58:	f7fd fa12 	bl	8000280 <__aeabi_uldivmod>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	460c      	mov	r4, r1
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002e64:	fba3 1302 	umull	r1, r3, r3, r2
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	2164      	movs	r1, #100	; 0x64
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	3332      	adds	r3, #50	; 0x32
 8002e76:	4a2d      	ldr	r2, [pc, #180]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e82:	4498      	add	r8, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	469b      	mov	fp, r3
 8002e88:	f04f 0c00 	mov.w	ip, #0
 8002e8c:	46d9      	mov	r9, fp
 8002e8e:	46e2      	mov	sl, ip
 8002e90:	eb19 0309 	adds.w	r3, r9, r9
 8002e94:	eb4a 040a 	adc.w	r4, sl, sl
 8002e98:	4699      	mov	r9, r3
 8002e9a:	46a2      	mov	sl, r4
 8002e9c:	eb19 090b 	adds.w	r9, r9, fp
 8002ea0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eb8:	4689      	mov	r9, r1
 8002eba:	4692      	mov	sl, r2
 8002ebc:	eb1b 0509 	adds.w	r5, fp, r9
 8002ec0:	eb4c 060a 	adc.w	r6, ip, sl
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	f04f 0400 	mov.w	r4, #0
 8002ed6:	0094      	lsls	r4, r2, #2
 8002ed8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002edc:	008b      	lsls	r3, r1, #2
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	4631      	mov	r1, r6
 8002ee6:	f7fd f9cb 	bl	8000280 <__aeabi_uldivmod>
 8002eea:	4603      	mov	r3, r0
 8002eec:	460c      	mov	r4, r1
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2164      	movs	r1, #100	; 0x64
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	3332      	adds	r3, #50	; 0x32
 8002f04:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <UART_SetConfig+0x6f4>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	f003 020f 	and.w	r2, r3, #15
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4442      	add	r2, r8
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	e7ff      	b.n	8002f1a <UART_SetConfig+0x6e2>
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f24:	40011000 	.word	0x40011000
 8002f28:	40011400 	.word	0x40011400
 8002f2c:	51eb851f 	.word	0x51eb851f

08002f30 <atoi>:
 8002f30:	220a      	movs	r2, #10
 8002f32:	2100      	movs	r1, #0
 8002f34:	f000 b8fc 	b.w	8003130 <strtol>

08002f38 <__errno>:
 8002f38:	4b01      	ldr	r3, [pc, #4]	; (8002f40 <__errno+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000034 	.word	0x20000034

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	4e0d      	ldr	r6, [pc, #52]	; (8002f7c <__libc_init_array+0x38>)
 8002f48:	4c0d      	ldr	r4, [pc, #52]	; (8002f80 <__libc_init_array+0x3c>)
 8002f4a:	1ba4      	subs	r4, r4, r6
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	2500      	movs	r5, #0
 8002f50:	42a5      	cmp	r5, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	4e0b      	ldr	r6, [pc, #44]	; (8002f84 <__libc_init_array+0x40>)
 8002f56:	4c0c      	ldr	r4, [pc, #48]	; (8002f88 <__libc_init_array+0x44>)
 8002f58:	f000 fd0a 	bl	8003970 <_init>
 8002f5c:	1ba4      	subs	r4, r4, r6
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	2500      	movs	r5, #0
 8002f62:	42a5      	cmp	r5, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6c:	4798      	blx	r3
 8002f6e:	3501      	adds	r5, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f76:	4798      	blx	r3
 8002f78:	3501      	adds	r5, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	08003d84 	.word	0x08003d84
 8002f80:	08003d84 	.word	0x08003d84
 8002f84:	08003d84 	.word	0x08003d84
 8002f88:	08003d88 	.word	0x08003d88

08002f8c <memset>:
 8002f8c:	4402      	add	r2, r0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d100      	bne.n	8002f96 <memset+0xa>
 8002f94:	4770      	bx	lr
 8002f96:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9a:	e7f9      	b.n	8002f90 <memset+0x4>

08002f9c <sniprintf>:
 8002f9c:	b40c      	push	{r2, r3}
 8002f9e:	b530      	push	{r4, r5, lr}
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <sniprintf+0x64>)
 8002fa2:	1e0c      	subs	r4, r1, #0
 8002fa4:	b09d      	sub	sp, #116	; 0x74
 8002fa6:	681d      	ldr	r5, [r3, #0]
 8002fa8:	da08      	bge.n	8002fbc <sniprintf+0x20>
 8002faa:	238b      	movs	r3, #139	; 0x8b
 8002fac:	602b      	str	r3, [r5, #0]
 8002fae:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb2:	b01d      	add	sp, #116	; 0x74
 8002fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fb8:	b002      	add	sp, #8
 8002fba:	4770      	bx	lr
 8002fbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002fc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002fc4:	bf14      	ite	ne
 8002fc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002fca:	4623      	moveq	r3, r4
 8002fcc:	9304      	str	r3, [sp, #16]
 8002fce:	9307      	str	r3, [sp, #28]
 8002fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fd4:	9002      	str	r0, [sp, #8]
 8002fd6:	9006      	str	r0, [sp, #24]
 8002fd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002fdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002fde:	ab21      	add	r3, sp, #132	; 0x84
 8002fe0:	a902      	add	r1, sp, #8
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	f000 f929 	bl	800323c <_svfiprintf_r>
 8002fea:	1c43      	adds	r3, r0, #1
 8002fec:	bfbc      	itt	lt
 8002fee:	238b      	movlt	r3, #139	; 0x8b
 8002ff0:	602b      	strlt	r3, [r5, #0]
 8002ff2:	2c00      	cmp	r4, #0
 8002ff4:	d0dd      	beq.n	8002fb2 <sniprintf+0x16>
 8002ff6:	9b02      	ldr	r3, [sp, #8]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e7d9      	b.n	8002fb2 <sniprintf+0x16>
 8002ffe:	bf00      	nop
 8003000:	20000034 	.word	0x20000034

08003004 <strstr>:
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	7803      	ldrb	r3, [r0, #0]
 8003008:	b17b      	cbz	r3, 800302a <strstr+0x26>
 800300a:	4604      	mov	r4, r0
 800300c:	7823      	ldrb	r3, [r4, #0]
 800300e:	4620      	mov	r0, r4
 8003010:	1c66      	adds	r6, r4, #1
 8003012:	b17b      	cbz	r3, 8003034 <strstr+0x30>
 8003014:	1e4a      	subs	r2, r1, #1
 8003016:	1e63      	subs	r3, r4, #1
 8003018:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800301c:	b14d      	cbz	r5, 8003032 <strstr+0x2e>
 800301e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003022:	42af      	cmp	r7, r5
 8003024:	4634      	mov	r4, r6
 8003026:	d0f7      	beq.n	8003018 <strstr+0x14>
 8003028:	e7f0      	b.n	800300c <strstr+0x8>
 800302a:	780b      	ldrb	r3, [r1, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf18      	it	ne
 8003030:	2000      	movne	r0, #0
 8003032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003034:	4618      	mov	r0, r3
 8003036:	e7fc      	b.n	8003032 <strstr+0x2e>

08003038 <_strtol_l.isra.0>:
 8003038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800303c:	4680      	mov	r8, r0
 800303e:	4689      	mov	r9, r1
 8003040:	4692      	mov	sl, r2
 8003042:	461e      	mov	r6, r3
 8003044:	460f      	mov	r7, r1
 8003046:	463d      	mov	r5, r7
 8003048:	9808      	ldr	r0, [sp, #32]
 800304a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800304e:	f000 f885 	bl	800315c <__locale_ctype_ptr_l>
 8003052:	4420      	add	r0, r4
 8003054:	7843      	ldrb	r3, [r0, #1]
 8003056:	f013 0308 	ands.w	r3, r3, #8
 800305a:	d132      	bne.n	80030c2 <_strtol_l.isra.0+0x8a>
 800305c:	2c2d      	cmp	r4, #45	; 0x2d
 800305e:	d132      	bne.n	80030c6 <_strtol_l.isra.0+0x8e>
 8003060:	787c      	ldrb	r4, [r7, #1]
 8003062:	1cbd      	adds	r5, r7, #2
 8003064:	2201      	movs	r2, #1
 8003066:	2e00      	cmp	r6, #0
 8003068:	d05d      	beq.n	8003126 <_strtol_l.isra.0+0xee>
 800306a:	2e10      	cmp	r6, #16
 800306c:	d109      	bne.n	8003082 <_strtol_l.isra.0+0x4a>
 800306e:	2c30      	cmp	r4, #48	; 0x30
 8003070:	d107      	bne.n	8003082 <_strtol_l.isra.0+0x4a>
 8003072:	782b      	ldrb	r3, [r5, #0]
 8003074:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003078:	2b58      	cmp	r3, #88	; 0x58
 800307a:	d14f      	bne.n	800311c <_strtol_l.isra.0+0xe4>
 800307c:	786c      	ldrb	r4, [r5, #1]
 800307e:	2610      	movs	r6, #16
 8003080:	3502      	adds	r5, #2
 8003082:	2a00      	cmp	r2, #0
 8003084:	bf14      	ite	ne
 8003086:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800308a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800308e:	2700      	movs	r7, #0
 8003090:	fbb1 fcf6 	udiv	ip, r1, r6
 8003094:	4638      	mov	r0, r7
 8003096:	fb06 1e1c 	mls	lr, r6, ip, r1
 800309a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800309e:	2b09      	cmp	r3, #9
 80030a0:	d817      	bhi.n	80030d2 <_strtol_l.isra.0+0x9a>
 80030a2:	461c      	mov	r4, r3
 80030a4:	42a6      	cmp	r6, r4
 80030a6:	dd23      	ble.n	80030f0 <_strtol_l.isra.0+0xb8>
 80030a8:	1c7b      	adds	r3, r7, #1
 80030aa:	d007      	beq.n	80030bc <_strtol_l.isra.0+0x84>
 80030ac:	4584      	cmp	ip, r0
 80030ae:	d31c      	bcc.n	80030ea <_strtol_l.isra.0+0xb2>
 80030b0:	d101      	bne.n	80030b6 <_strtol_l.isra.0+0x7e>
 80030b2:	45a6      	cmp	lr, r4
 80030b4:	db19      	blt.n	80030ea <_strtol_l.isra.0+0xb2>
 80030b6:	fb00 4006 	mla	r0, r0, r6, r4
 80030ba:	2701      	movs	r7, #1
 80030bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80030c0:	e7eb      	b.n	800309a <_strtol_l.isra.0+0x62>
 80030c2:	462f      	mov	r7, r5
 80030c4:	e7bf      	b.n	8003046 <_strtol_l.isra.0+0xe>
 80030c6:	2c2b      	cmp	r4, #43	; 0x2b
 80030c8:	bf04      	itt	eq
 80030ca:	1cbd      	addeq	r5, r7, #2
 80030cc:	787c      	ldrbeq	r4, [r7, #1]
 80030ce:	461a      	mov	r2, r3
 80030d0:	e7c9      	b.n	8003066 <_strtol_l.isra.0+0x2e>
 80030d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80030d6:	2b19      	cmp	r3, #25
 80030d8:	d801      	bhi.n	80030de <_strtol_l.isra.0+0xa6>
 80030da:	3c37      	subs	r4, #55	; 0x37
 80030dc:	e7e2      	b.n	80030a4 <_strtol_l.isra.0+0x6c>
 80030de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80030e2:	2b19      	cmp	r3, #25
 80030e4:	d804      	bhi.n	80030f0 <_strtol_l.isra.0+0xb8>
 80030e6:	3c57      	subs	r4, #87	; 0x57
 80030e8:	e7dc      	b.n	80030a4 <_strtol_l.isra.0+0x6c>
 80030ea:	f04f 37ff 	mov.w	r7, #4294967295
 80030ee:	e7e5      	b.n	80030bc <_strtol_l.isra.0+0x84>
 80030f0:	1c7b      	adds	r3, r7, #1
 80030f2:	d108      	bne.n	8003106 <_strtol_l.isra.0+0xce>
 80030f4:	2322      	movs	r3, #34	; 0x22
 80030f6:	f8c8 3000 	str.w	r3, [r8]
 80030fa:	4608      	mov	r0, r1
 80030fc:	f1ba 0f00 	cmp.w	sl, #0
 8003100:	d107      	bne.n	8003112 <_strtol_l.isra.0+0xda>
 8003102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003106:	b102      	cbz	r2, 800310a <_strtol_l.isra.0+0xd2>
 8003108:	4240      	negs	r0, r0
 800310a:	f1ba 0f00 	cmp.w	sl, #0
 800310e:	d0f8      	beq.n	8003102 <_strtol_l.isra.0+0xca>
 8003110:	b10f      	cbz	r7, 8003116 <_strtol_l.isra.0+0xde>
 8003112:	f105 39ff 	add.w	r9, r5, #4294967295
 8003116:	f8ca 9000 	str.w	r9, [sl]
 800311a:	e7f2      	b.n	8003102 <_strtol_l.isra.0+0xca>
 800311c:	2430      	movs	r4, #48	; 0x30
 800311e:	2e00      	cmp	r6, #0
 8003120:	d1af      	bne.n	8003082 <_strtol_l.isra.0+0x4a>
 8003122:	2608      	movs	r6, #8
 8003124:	e7ad      	b.n	8003082 <_strtol_l.isra.0+0x4a>
 8003126:	2c30      	cmp	r4, #48	; 0x30
 8003128:	d0a3      	beq.n	8003072 <_strtol_l.isra.0+0x3a>
 800312a:	260a      	movs	r6, #10
 800312c:	e7a9      	b.n	8003082 <_strtol_l.isra.0+0x4a>
	...

08003130 <strtol>:
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <strtol+0x24>)
 8003132:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003134:	681c      	ldr	r4, [r3, #0]
 8003136:	4d08      	ldr	r5, [pc, #32]	; (8003158 <strtol+0x28>)
 8003138:	6a23      	ldr	r3, [r4, #32]
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf08      	it	eq
 800313e:	462b      	moveq	r3, r5
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	4613      	mov	r3, r2
 8003144:	460a      	mov	r2, r1
 8003146:	4601      	mov	r1, r0
 8003148:	4620      	mov	r0, r4
 800314a:	f7ff ff75 	bl	8003038 <_strtol_l.isra.0>
 800314e:	b003      	add	sp, #12
 8003150:	bd30      	pop	{r4, r5, pc}
 8003152:	bf00      	nop
 8003154:	20000034 	.word	0x20000034
 8003158:	20000098 	.word	0x20000098

0800315c <__locale_ctype_ptr_l>:
 800315c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003160:	4770      	bx	lr

08003162 <__ascii_mbtowc>:
 8003162:	b082      	sub	sp, #8
 8003164:	b901      	cbnz	r1, 8003168 <__ascii_mbtowc+0x6>
 8003166:	a901      	add	r1, sp, #4
 8003168:	b142      	cbz	r2, 800317c <__ascii_mbtowc+0x1a>
 800316a:	b14b      	cbz	r3, 8003180 <__ascii_mbtowc+0x1e>
 800316c:	7813      	ldrb	r3, [r2, #0]
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	7812      	ldrb	r2, [r2, #0]
 8003172:	1c10      	adds	r0, r2, #0
 8003174:	bf18      	it	ne
 8003176:	2001      	movne	r0, #1
 8003178:	b002      	add	sp, #8
 800317a:	4770      	bx	lr
 800317c:	4610      	mov	r0, r2
 800317e:	e7fb      	b.n	8003178 <__ascii_mbtowc+0x16>
 8003180:	f06f 0001 	mvn.w	r0, #1
 8003184:	e7f8      	b.n	8003178 <__ascii_mbtowc+0x16>

08003186 <__ssputs_r>:
 8003186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318a:	688e      	ldr	r6, [r1, #8]
 800318c:	429e      	cmp	r6, r3
 800318e:	4682      	mov	sl, r0
 8003190:	460c      	mov	r4, r1
 8003192:	4690      	mov	r8, r2
 8003194:	4699      	mov	r9, r3
 8003196:	d837      	bhi.n	8003208 <__ssputs_r+0x82>
 8003198:	898a      	ldrh	r2, [r1, #12]
 800319a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800319e:	d031      	beq.n	8003204 <__ssputs_r+0x7e>
 80031a0:	6825      	ldr	r5, [r4, #0]
 80031a2:	6909      	ldr	r1, [r1, #16]
 80031a4:	1a6f      	subs	r7, r5, r1
 80031a6:	6965      	ldr	r5, [r4, #20]
 80031a8:	2302      	movs	r3, #2
 80031aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ae:	fb95 f5f3 	sdiv	r5, r5, r3
 80031b2:	f109 0301 	add.w	r3, r9, #1
 80031b6:	443b      	add	r3, r7
 80031b8:	429d      	cmp	r5, r3
 80031ba:	bf38      	it	cc
 80031bc:	461d      	movcc	r5, r3
 80031be:	0553      	lsls	r3, r2, #21
 80031c0:	d530      	bpl.n	8003224 <__ssputs_r+0x9e>
 80031c2:	4629      	mov	r1, r5
 80031c4:	f000 fb3a 	bl	800383c <_malloc_r>
 80031c8:	4606      	mov	r6, r0
 80031ca:	b950      	cbnz	r0, 80031e2 <__ssputs_r+0x5c>
 80031cc:	230c      	movs	r3, #12
 80031ce:	f8ca 3000 	str.w	r3, [sl]
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d8:	81a3      	strh	r3, [r4, #12]
 80031da:	f04f 30ff 	mov.w	r0, #4294967295
 80031de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e2:	463a      	mov	r2, r7
 80031e4:	6921      	ldr	r1, [r4, #16]
 80031e6:	f000 fab6 	bl	8003756 <memcpy>
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f4:	81a3      	strh	r3, [r4, #12]
 80031f6:	6126      	str	r6, [r4, #16]
 80031f8:	6165      	str	r5, [r4, #20]
 80031fa:	443e      	add	r6, r7
 80031fc:	1bed      	subs	r5, r5, r7
 80031fe:	6026      	str	r6, [r4, #0]
 8003200:	60a5      	str	r5, [r4, #8]
 8003202:	464e      	mov	r6, r9
 8003204:	454e      	cmp	r6, r9
 8003206:	d900      	bls.n	800320a <__ssputs_r+0x84>
 8003208:	464e      	mov	r6, r9
 800320a:	4632      	mov	r2, r6
 800320c:	4641      	mov	r1, r8
 800320e:	6820      	ldr	r0, [r4, #0]
 8003210:	f000 faac 	bl	800376c <memmove>
 8003214:	68a3      	ldr	r3, [r4, #8]
 8003216:	1b9b      	subs	r3, r3, r6
 8003218:	60a3      	str	r3, [r4, #8]
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	441e      	add	r6, r3
 800321e:	6026      	str	r6, [r4, #0]
 8003220:	2000      	movs	r0, #0
 8003222:	e7dc      	b.n	80031de <__ssputs_r+0x58>
 8003224:	462a      	mov	r2, r5
 8003226:	f000 fb63 	bl	80038f0 <_realloc_r>
 800322a:	4606      	mov	r6, r0
 800322c:	2800      	cmp	r0, #0
 800322e:	d1e2      	bne.n	80031f6 <__ssputs_r+0x70>
 8003230:	6921      	ldr	r1, [r4, #16]
 8003232:	4650      	mov	r0, sl
 8003234:	f000 fab4 	bl	80037a0 <_free_r>
 8003238:	e7c8      	b.n	80031cc <__ssputs_r+0x46>
	...

0800323c <_svfiprintf_r>:
 800323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003240:	461d      	mov	r5, r3
 8003242:	898b      	ldrh	r3, [r1, #12]
 8003244:	061f      	lsls	r7, r3, #24
 8003246:	b09d      	sub	sp, #116	; 0x74
 8003248:	4680      	mov	r8, r0
 800324a:	460c      	mov	r4, r1
 800324c:	4616      	mov	r6, r2
 800324e:	d50f      	bpl.n	8003270 <_svfiprintf_r+0x34>
 8003250:	690b      	ldr	r3, [r1, #16]
 8003252:	b96b      	cbnz	r3, 8003270 <_svfiprintf_r+0x34>
 8003254:	2140      	movs	r1, #64	; 0x40
 8003256:	f000 faf1 	bl	800383c <_malloc_r>
 800325a:	6020      	str	r0, [r4, #0]
 800325c:	6120      	str	r0, [r4, #16]
 800325e:	b928      	cbnz	r0, 800326c <_svfiprintf_r+0x30>
 8003260:	230c      	movs	r3, #12
 8003262:	f8c8 3000 	str.w	r3, [r8]
 8003266:	f04f 30ff 	mov.w	r0, #4294967295
 800326a:	e0c8      	b.n	80033fe <_svfiprintf_r+0x1c2>
 800326c:	2340      	movs	r3, #64	; 0x40
 800326e:	6163      	str	r3, [r4, #20]
 8003270:	2300      	movs	r3, #0
 8003272:	9309      	str	r3, [sp, #36]	; 0x24
 8003274:	2320      	movs	r3, #32
 8003276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800327a:	2330      	movs	r3, #48	; 0x30
 800327c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003280:	9503      	str	r5, [sp, #12]
 8003282:	f04f 0b01 	mov.w	fp, #1
 8003286:	4637      	mov	r7, r6
 8003288:	463d      	mov	r5, r7
 800328a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800328e:	b10b      	cbz	r3, 8003294 <_svfiprintf_r+0x58>
 8003290:	2b25      	cmp	r3, #37	; 0x25
 8003292:	d13e      	bne.n	8003312 <_svfiprintf_r+0xd6>
 8003294:	ebb7 0a06 	subs.w	sl, r7, r6
 8003298:	d00b      	beq.n	80032b2 <_svfiprintf_r+0x76>
 800329a:	4653      	mov	r3, sl
 800329c:	4632      	mov	r2, r6
 800329e:	4621      	mov	r1, r4
 80032a0:	4640      	mov	r0, r8
 80032a2:	f7ff ff70 	bl	8003186 <__ssputs_r>
 80032a6:	3001      	adds	r0, #1
 80032a8:	f000 80a4 	beq.w	80033f4 <_svfiprintf_r+0x1b8>
 80032ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ae:	4453      	add	r3, sl
 80032b0:	9309      	str	r3, [sp, #36]	; 0x24
 80032b2:	783b      	ldrb	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 809d 	beq.w	80033f4 <_svfiprintf_r+0x1b8>
 80032ba:	2300      	movs	r3, #0
 80032bc:	f04f 32ff 	mov.w	r2, #4294967295
 80032c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c4:	9304      	str	r3, [sp, #16]
 80032c6:	9307      	str	r3, [sp, #28]
 80032c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032cc:	931a      	str	r3, [sp, #104]	; 0x68
 80032ce:	462f      	mov	r7, r5
 80032d0:	2205      	movs	r2, #5
 80032d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80032d6:	4850      	ldr	r0, [pc, #320]	; (8003418 <_svfiprintf_r+0x1dc>)
 80032d8:	f7fc ff82 	bl	80001e0 <memchr>
 80032dc:	9b04      	ldr	r3, [sp, #16]
 80032de:	b9d0      	cbnz	r0, 8003316 <_svfiprintf_r+0xda>
 80032e0:	06d9      	lsls	r1, r3, #27
 80032e2:	bf44      	itt	mi
 80032e4:	2220      	movmi	r2, #32
 80032e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032ea:	071a      	lsls	r2, r3, #28
 80032ec:	bf44      	itt	mi
 80032ee:	222b      	movmi	r2, #43	; 0x2b
 80032f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032f4:	782a      	ldrb	r2, [r5, #0]
 80032f6:	2a2a      	cmp	r2, #42	; 0x2a
 80032f8:	d015      	beq.n	8003326 <_svfiprintf_r+0xea>
 80032fa:	9a07      	ldr	r2, [sp, #28]
 80032fc:	462f      	mov	r7, r5
 80032fe:	2000      	movs	r0, #0
 8003300:	250a      	movs	r5, #10
 8003302:	4639      	mov	r1, r7
 8003304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003308:	3b30      	subs	r3, #48	; 0x30
 800330a:	2b09      	cmp	r3, #9
 800330c:	d94d      	bls.n	80033aa <_svfiprintf_r+0x16e>
 800330e:	b1b8      	cbz	r0, 8003340 <_svfiprintf_r+0x104>
 8003310:	e00f      	b.n	8003332 <_svfiprintf_r+0xf6>
 8003312:	462f      	mov	r7, r5
 8003314:	e7b8      	b.n	8003288 <_svfiprintf_r+0x4c>
 8003316:	4a40      	ldr	r2, [pc, #256]	; (8003418 <_svfiprintf_r+0x1dc>)
 8003318:	1a80      	subs	r0, r0, r2
 800331a:	fa0b f000 	lsl.w	r0, fp, r0
 800331e:	4318      	orrs	r0, r3
 8003320:	9004      	str	r0, [sp, #16]
 8003322:	463d      	mov	r5, r7
 8003324:	e7d3      	b.n	80032ce <_svfiprintf_r+0x92>
 8003326:	9a03      	ldr	r2, [sp, #12]
 8003328:	1d11      	adds	r1, r2, #4
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	9103      	str	r1, [sp, #12]
 800332e:	2a00      	cmp	r2, #0
 8003330:	db01      	blt.n	8003336 <_svfiprintf_r+0xfa>
 8003332:	9207      	str	r2, [sp, #28]
 8003334:	e004      	b.n	8003340 <_svfiprintf_r+0x104>
 8003336:	4252      	negs	r2, r2
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	9207      	str	r2, [sp, #28]
 800333e:	9304      	str	r3, [sp, #16]
 8003340:	783b      	ldrb	r3, [r7, #0]
 8003342:	2b2e      	cmp	r3, #46	; 0x2e
 8003344:	d10c      	bne.n	8003360 <_svfiprintf_r+0x124>
 8003346:	787b      	ldrb	r3, [r7, #1]
 8003348:	2b2a      	cmp	r3, #42	; 0x2a
 800334a:	d133      	bne.n	80033b4 <_svfiprintf_r+0x178>
 800334c:	9b03      	ldr	r3, [sp, #12]
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	9203      	str	r2, [sp, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	bfb8      	it	lt
 8003358:	f04f 33ff 	movlt.w	r3, #4294967295
 800335c:	3702      	adds	r7, #2
 800335e:	9305      	str	r3, [sp, #20]
 8003360:	4d2e      	ldr	r5, [pc, #184]	; (800341c <_svfiprintf_r+0x1e0>)
 8003362:	7839      	ldrb	r1, [r7, #0]
 8003364:	2203      	movs	r2, #3
 8003366:	4628      	mov	r0, r5
 8003368:	f7fc ff3a 	bl	80001e0 <memchr>
 800336c:	b138      	cbz	r0, 800337e <_svfiprintf_r+0x142>
 800336e:	2340      	movs	r3, #64	; 0x40
 8003370:	1b40      	subs	r0, r0, r5
 8003372:	fa03 f000 	lsl.w	r0, r3, r0
 8003376:	9b04      	ldr	r3, [sp, #16]
 8003378:	4303      	orrs	r3, r0
 800337a:	3701      	adds	r7, #1
 800337c:	9304      	str	r3, [sp, #16]
 800337e:	7839      	ldrb	r1, [r7, #0]
 8003380:	4827      	ldr	r0, [pc, #156]	; (8003420 <_svfiprintf_r+0x1e4>)
 8003382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003386:	2206      	movs	r2, #6
 8003388:	1c7e      	adds	r6, r7, #1
 800338a:	f7fc ff29 	bl	80001e0 <memchr>
 800338e:	2800      	cmp	r0, #0
 8003390:	d038      	beq.n	8003404 <_svfiprintf_r+0x1c8>
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <_svfiprintf_r+0x1e8>)
 8003394:	bb13      	cbnz	r3, 80033dc <_svfiprintf_r+0x1a0>
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	3307      	adds	r3, #7
 800339a:	f023 0307 	bic.w	r3, r3, #7
 800339e:	3308      	adds	r3, #8
 80033a0:	9303      	str	r3, [sp, #12]
 80033a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a4:	444b      	add	r3, r9
 80033a6:	9309      	str	r3, [sp, #36]	; 0x24
 80033a8:	e76d      	b.n	8003286 <_svfiprintf_r+0x4a>
 80033aa:	fb05 3202 	mla	r2, r5, r2, r3
 80033ae:	2001      	movs	r0, #1
 80033b0:	460f      	mov	r7, r1
 80033b2:	e7a6      	b.n	8003302 <_svfiprintf_r+0xc6>
 80033b4:	2300      	movs	r3, #0
 80033b6:	3701      	adds	r7, #1
 80033b8:	9305      	str	r3, [sp, #20]
 80033ba:	4619      	mov	r1, r3
 80033bc:	250a      	movs	r5, #10
 80033be:	4638      	mov	r0, r7
 80033c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c4:	3a30      	subs	r2, #48	; 0x30
 80033c6:	2a09      	cmp	r2, #9
 80033c8:	d903      	bls.n	80033d2 <_svfiprintf_r+0x196>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0c8      	beq.n	8003360 <_svfiprintf_r+0x124>
 80033ce:	9105      	str	r1, [sp, #20]
 80033d0:	e7c6      	b.n	8003360 <_svfiprintf_r+0x124>
 80033d2:	fb05 2101 	mla	r1, r5, r1, r2
 80033d6:	2301      	movs	r3, #1
 80033d8:	4607      	mov	r7, r0
 80033da:	e7f0      	b.n	80033be <_svfiprintf_r+0x182>
 80033dc:	ab03      	add	r3, sp, #12
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	4622      	mov	r2, r4
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <_svfiprintf_r+0x1ec>)
 80033e4:	a904      	add	r1, sp, #16
 80033e6:	4640      	mov	r0, r8
 80033e8:	f3af 8000 	nop.w
 80033ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033f0:	4681      	mov	r9, r0
 80033f2:	d1d6      	bne.n	80033a2 <_svfiprintf_r+0x166>
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	065b      	lsls	r3, r3, #25
 80033f8:	f53f af35 	bmi.w	8003266 <_svfiprintf_r+0x2a>
 80033fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033fe:	b01d      	add	sp, #116	; 0x74
 8003400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003404:	ab03      	add	r3, sp, #12
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	4622      	mov	r2, r4
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <_svfiprintf_r+0x1ec>)
 800340c:	a904      	add	r1, sp, #16
 800340e:	4640      	mov	r0, r8
 8003410:	f000 f882 	bl	8003518 <_printf_i>
 8003414:	e7ea      	b.n	80033ec <_svfiprintf_r+0x1b0>
 8003416:	bf00      	nop
 8003418:	08003c46 	.word	0x08003c46
 800341c:	08003c4c 	.word	0x08003c4c
 8003420:	08003c50 	.word	0x08003c50
 8003424:	00000000 	.word	0x00000000
 8003428:	08003187 	.word	0x08003187

0800342c <_printf_common>:
 800342c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003430:	4691      	mov	r9, r2
 8003432:	461f      	mov	r7, r3
 8003434:	688a      	ldr	r2, [r1, #8]
 8003436:	690b      	ldr	r3, [r1, #16]
 8003438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800343c:	4293      	cmp	r3, r2
 800343e:	bfb8      	it	lt
 8003440:	4613      	movlt	r3, r2
 8003442:	f8c9 3000 	str.w	r3, [r9]
 8003446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800344a:	4606      	mov	r6, r0
 800344c:	460c      	mov	r4, r1
 800344e:	b112      	cbz	r2, 8003456 <_printf_common+0x2a>
 8003450:	3301      	adds	r3, #1
 8003452:	f8c9 3000 	str.w	r3, [r9]
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	0699      	lsls	r1, r3, #26
 800345a:	bf42      	ittt	mi
 800345c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003460:	3302      	addmi	r3, #2
 8003462:	f8c9 3000 	strmi.w	r3, [r9]
 8003466:	6825      	ldr	r5, [r4, #0]
 8003468:	f015 0506 	ands.w	r5, r5, #6
 800346c:	d107      	bne.n	800347e <_printf_common+0x52>
 800346e:	f104 0a19 	add.w	sl, r4, #25
 8003472:	68e3      	ldr	r3, [r4, #12]
 8003474:	f8d9 2000 	ldr.w	r2, [r9]
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	42ab      	cmp	r3, r5
 800347c:	dc28      	bgt.n	80034d0 <_printf_common+0xa4>
 800347e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	3300      	adds	r3, #0
 8003486:	bf18      	it	ne
 8003488:	2301      	movne	r3, #1
 800348a:	0692      	lsls	r2, r2, #26
 800348c:	d42d      	bmi.n	80034ea <_printf_common+0xbe>
 800348e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003492:	4639      	mov	r1, r7
 8003494:	4630      	mov	r0, r6
 8003496:	47c0      	blx	r8
 8003498:	3001      	adds	r0, #1
 800349a:	d020      	beq.n	80034de <_printf_common+0xb2>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	68e5      	ldr	r5, [r4, #12]
 80034a0:	f8d9 2000 	ldr.w	r2, [r9]
 80034a4:	f003 0306 	and.w	r3, r3, #6
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	bf08      	it	eq
 80034ac:	1aad      	subeq	r5, r5, r2
 80034ae:	68a3      	ldr	r3, [r4, #8]
 80034b0:	6922      	ldr	r2, [r4, #16]
 80034b2:	bf0c      	ite	eq
 80034b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b8:	2500      	movne	r5, #0
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bfc4      	itt	gt
 80034be:	1a9b      	subgt	r3, r3, r2
 80034c0:	18ed      	addgt	r5, r5, r3
 80034c2:	f04f 0900 	mov.w	r9, #0
 80034c6:	341a      	adds	r4, #26
 80034c8:	454d      	cmp	r5, r9
 80034ca:	d11a      	bne.n	8003502 <_printf_common+0xd6>
 80034cc:	2000      	movs	r0, #0
 80034ce:	e008      	b.n	80034e2 <_printf_common+0xb6>
 80034d0:	2301      	movs	r3, #1
 80034d2:	4652      	mov	r2, sl
 80034d4:	4639      	mov	r1, r7
 80034d6:	4630      	mov	r0, r6
 80034d8:	47c0      	blx	r8
 80034da:	3001      	adds	r0, #1
 80034dc:	d103      	bne.n	80034e6 <_printf_common+0xba>
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e6:	3501      	adds	r5, #1
 80034e8:	e7c3      	b.n	8003472 <_printf_common+0x46>
 80034ea:	18e1      	adds	r1, r4, r3
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	2030      	movs	r0, #48	; 0x30
 80034f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034f4:	4422      	add	r2, r4
 80034f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034fe:	3302      	adds	r3, #2
 8003500:	e7c5      	b.n	800348e <_printf_common+0x62>
 8003502:	2301      	movs	r3, #1
 8003504:	4622      	mov	r2, r4
 8003506:	4639      	mov	r1, r7
 8003508:	4630      	mov	r0, r6
 800350a:	47c0      	blx	r8
 800350c:	3001      	adds	r0, #1
 800350e:	d0e6      	beq.n	80034de <_printf_common+0xb2>
 8003510:	f109 0901 	add.w	r9, r9, #1
 8003514:	e7d8      	b.n	80034c8 <_printf_common+0x9c>
	...

08003518 <_printf_i>:
 8003518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800351c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003520:	460c      	mov	r4, r1
 8003522:	7e09      	ldrb	r1, [r1, #24]
 8003524:	b085      	sub	sp, #20
 8003526:	296e      	cmp	r1, #110	; 0x6e
 8003528:	4617      	mov	r7, r2
 800352a:	4606      	mov	r6, r0
 800352c:	4698      	mov	r8, r3
 800352e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003530:	f000 80b3 	beq.w	800369a <_printf_i+0x182>
 8003534:	d822      	bhi.n	800357c <_printf_i+0x64>
 8003536:	2963      	cmp	r1, #99	; 0x63
 8003538:	d036      	beq.n	80035a8 <_printf_i+0x90>
 800353a:	d80a      	bhi.n	8003552 <_printf_i+0x3a>
 800353c:	2900      	cmp	r1, #0
 800353e:	f000 80b9 	beq.w	80036b4 <_printf_i+0x19c>
 8003542:	2958      	cmp	r1, #88	; 0x58
 8003544:	f000 8083 	beq.w	800364e <_printf_i+0x136>
 8003548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800354c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003550:	e032      	b.n	80035b8 <_printf_i+0xa0>
 8003552:	2964      	cmp	r1, #100	; 0x64
 8003554:	d001      	beq.n	800355a <_printf_i+0x42>
 8003556:	2969      	cmp	r1, #105	; 0x69
 8003558:	d1f6      	bne.n	8003548 <_printf_i+0x30>
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	6813      	ldr	r3, [r2, #0]
 800355e:	0605      	lsls	r5, r0, #24
 8003560:	f103 0104 	add.w	r1, r3, #4
 8003564:	d52a      	bpl.n	80035bc <_printf_i+0xa4>
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6011      	str	r1, [r2, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	da03      	bge.n	8003576 <_printf_i+0x5e>
 800356e:	222d      	movs	r2, #45	; 0x2d
 8003570:	425b      	negs	r3, r3
 8003572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003576:	486f      	ldr	r0, [pc, #444]	; (8003734 <_printf_i+0x21c>)
 8003578:	220a      	movs	r2, #10
 800357a:	e039      	b.n	80035f0 <_printf_i+0xd8>
 800357c:	2973      	cmp	r1, #115	; 0x73
 800357e:	f000 809d 	beq.w	80036bc <_printf_i+0x1a4>
 8003582:	d808      	bhi.n	8003596 <_printf_i+0x7e>
 8003584:	296f      	cmp	r1, #111	; 0x6f
 8003586:	d020      	beq.n	80035ca <_printf_i+0xb2>
 8003588:	2970      	cmp	r1, #112	; 0x70
 800358a:	d1dd      	bne.n	8003548 <_printf_i+0x30>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	f043 0320 	orr.w	r3, r3, #32
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	e003      	b.n	800359e <_printf_i+0x86>
 8003596:	2975      	cmp	r1, #117	; 0x75
 8003598:	d017      	beq.n	80035ca <_printf_i+0xb2>
 800359a:	2978      	cmp	r1, #120	; 0x78
 800359c:	d1d4      	bne.n	8003548 <_printf_i+0x30>
 800359e:	2378      	movs	r3, #120	; 0x78
 80035a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035a4:	4864      	ldr	r0, [pc, #400]	; (8003738 <_printf_i+0x220>)
 80035a6:	e055      	b.n	8003654 <_printf_i+0x13c>
 80035a8:	6813      	ldr	r3, [r2, #0]
 80035aa:	1d19      	adds	r1, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6011      	str	r1, [r2, #0]
 80035b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035b8:	2301      	movs	r3, #1
 80035ba:	e08c      	b.n	80036d6 <_printf_i+0x1be>
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6011      	str	r1, [r2, #0]
 80035c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035c4:	bf18      	it	ne
 80035c6:	b21b      	sxthne	r3, r3
 80035c8:	e7cf      	b.n	800356a <_printf_i+0x52>
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	6825      	ldr	r5, [r4, #0]
 80035ce:	1d18      	adds	r0, r3, #4
 80035d0:	6010      	str	r0, [r2, #0]
 80035d2:	0628      	lsls	r0, r5, #24
 80035d4:	d501      	bpl.n	80035da <_printf_i+0xc2>
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e002      	b.n	80035e0 <_printf_i+0xc8>
 80035da:	0668      	lsls	r0, r5, #25
 80035dc:	d5fb      	bpl.n	80035d6 <_printf_i+0xbe>
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	4854      	ldr	r0, [pc, #336]	; (8003734 <_printf_i+0x21c>)
 80035e2:	296f      	cmp	r1, #111	; 0x6f
 80035e4:	bf14      	ite	ne
 80035e6:	220a      	movne	r2, #10
 80035e8:	2208      	moveq	r2, #8
 80035ea:	2100      	movs	r1, #0
 80035ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035f0:	6865      	ldr	r5, [r4, #4]
 80035f2:	60a5      	str	r5, [r4, #8]
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	f2c0 8095 	blt.w	8003724 <_printf_i+0x20c>
 80035fa:	6821      	ldr	r1, [r4, #0]
 80035fc:	f021 0104 	bic.w	r1, r1, #4
 8003600:	6021      	str	r1, [r4, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d13d      	bne.n	8003682 <_printf_i+0x16a>
 8003606:	2d00      	cmp	r5, #0
 8003608:	f040 808e 	bne.w	8003728 <_printf_i+0x210>
 800360c:	4665      	mov	r5, ip
 800360e:	2a08      	cmp	r2, #8
 8003610:	d10b      	bne.n	800362a <_printf_i+0x112>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	07db      	lsls	r3, r3, #31
 8003616:	d508      	bpl.n	800362a <_printf_i+0x112>
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	6862      	ldr	r2, [r4, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	bfde      	ittt	le
 8003620:	2330      	movle	r3, #48	; 0x30
 8003622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800362a:	ebac 0305 	sub.w	r3, ip, r5
 800362e:	6123      	str	r3, [r4, #16]
 8003630:	f8cd 8000 	str.w	r8, [sp]
 8003634:	463b      	mov	r3, r7
 8003636:	aa03      	add	r2, sp, #12
 8003638:	4621      	mov	r1, r4
 800363a:	4630      	mov	r0, r6
 800363c:	f7ff fef6 	bl	800342c <_printf_common>
 8003640:	3001      	adds	r0, #1
 8003642:	d14d      	bne.n	80036e0 <_printf_i+0x1c8>
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	b005      	add	sp, #20
 800364a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800364e:	4839      	ldr	r0, [pc, #228]	; (8003734 <_printf_i+0x21c>)
 8003650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003654:	6813      	ldr	r3, [r2, #0]
 8003656:	6821      	ldr	r1, [r4, #0]
 8003658:	1d1d      	adds	r5, r3, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6015      	str	r5, [r2, #0]
 800365e:	060a      	lsls	r2, r1, #24
 8003660:	d50b      	bpl.n	800367a <_printf_i+0x162>
 8003662:	07ca      	lsls	r2, r1, #31
 8003664:	bf44      	itt	mi
 8003666:	f041 0120 	orrmi.w	r1, r1, #32
 800366a:	6021      	strmi	r1, [r4, #0]
 800366c:	b91b      	cbnz	r3, 8003676 <_printf_i+0x15e>
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	f022 0220 	bic.w	r2, r2, #32
 8003674:	6022      	str	r2, [r4, #0]
 8003676:	2210      	movs	r2, #16
 8003678:	e7b7      	b.n	80035ea <_printf_i+0xd2>
 800367a:	064d      	lsls	r5, r1, #25
 800367c:	bf48      	it	mi
 800367e:	b29b      	uxthmi	r3, r3
 8003680:	e7ef      	b.n	8003662 <_printf_i+0x14a>
 8003682:	4665      	mov	r5, ip
 8003684:	fbb3 f1f2 	udiv	r1, r3, r2
 8003688:	fb02 3311 	mls	r3, r2, r1, r3
 800368c:	5cc3      	ldrb	r3, [r0, r3]
 800368e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003692:	460b      	mov	r3, r1
 8003694:	2900      	cmp	r1, #0
 8003696:	d1f5      	bne.n	8003684 <_printf_i+0x16c>
 8003698:	e7b9      	b.n	800360e <_printf_i+0xf6>
 800369a:	6813      	ldr	r3, [r2, #0]
 800369c:	6825      	ldr	r5, [r4, #0]
 800369e:	6961      	ldr	r1, [r4, #20]
 80036a0:	1d18      	adds	r0, r3, #4
 80036a2:	6010      	str	r0, [r2, #0]
 80036a4:	0628      	lsls	r0, r5, #24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	d501      	bpl.n	80036ae <_printf_i+0x196>
 80036aa:	6019      	str	r1, [r3, #0]
 80036ac:	e002      	b.n	80036b4 <_printf_i+0x19c>
 80036ae:	066a      	lsls	r2, r5, #25
 80036b0:	d5fb      	bpl.n	80036aa <_printf_i+0x192>
 80036b2:	8019      	strh	r1, [r3, #0]
 80036b4:	2300      	movs	r3, #0
 80036b6:	6123      	str	r3, [r4, #16]
 80036b8:	4665      	mov	r5, ip
 80036ba:	e7b9      	b.n	8003630 <_printf_i+0x118>
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	1d19      	adds	r1, r3, #4
 80036c0:	6011      	str	r1, [r2, #0]
 80036c2:	681d      	ldr	r5, [r3, #0]
 80036c4:	6862      	ldr	r2, [r4, #4]
 80036c6:	2100      	movs	r1, #0
 80036c8:	4628      	mov	r0, r5
 80036ca:	f7fc fd89 	bl	80001e0 <memchr>
 80036ce:	b108      	cbz	r0, 80036d4 <_printf_i+0x1bc>
 80036d0:	1b40      	subs	r0, r0, r5
 80036d2:	6060      	str	r0, [r4, #4]
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	2300      	movs	r3, #0
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036de:	e7a7      	b.n	8003630 <_printf_i+0x118>
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	462a      	mov	r2, r5
 80036e4:	4639      	mov	r1, r7
 80036e6:	4630      	mov	r0, r6
 80036e8:	47c0      	blx	r8
 80036ea:	3001      	adds	r0, #1
 80036ec:	d0aa      	beq.n	8003644 <_printf_i+0x12c>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	079b      	lsls	r3, r3, #30
 80036f2:	d413      	bmi.n	800371c <_printf_i+0x204>
 80036f4:	68e0      	ldr	r0, [r4, #12]
 80036f6:	9b03      	ldr	r3, [sp, #12]
 80036f8:	4298      	cmp	r0, r3
 80036fa:	bfb8      	it	lt
 80036fc:	4618      	movlt	r0, r3
 80036fe:	e7a3      	b.n	8003648 <_printf_i+0x130>
 8003700:	2301      	movs	r3, #1
 8003702:	464a      	mov	r2, r9
 8003704:	4639      	mov	r1, r7
 8003706:	4630      	mov	r0, r6
 8003708:	47c0      	blx	r8
 800370a:	3001      	adds	r0, #1
 800370c:	d09a      	beq.n	8003644 <_printf_i+0x12c>
 800370e:	3501      	adds	r5, #1
 8003710:	68e3      	ldr	r3, [r4, #12]
 8003712:	9a03      	ldr	r2, [sp, #12]
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	42ab      	cmp	r3, r5
 8003718:	dcf2      	bgt.n	8003700 <_printf_i+0x1e8>
 800371a:	e7eb      	b.n	80036f4 <_printf_i+0x1dc>
 800371c:	2500      	movs	r5, #0
 800371e:	f104 0919 	add.w	r9, r4, #25
 8003722:	e7f5      	b.n	8003710 <_printf_i+0x1f8>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ac      	bne.n	8003682 <_printf_i+0x16a>
 8003728:	7803      	ldrb	r3, [r0, #0]
 800372a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800372e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003732:	e76c      	b.n	800360e <_printf_i+0xf6>
 8003734:	08003c57 	.word	0x08003c57
 8003738:	08003c68 	.word	0x08003c68

0800373c <__ascii_wctomb>:
 800373c:	b149      	cbz	r1, 8003752 <__ascii_wctomb+0x16>
 800373e:	2aff      	cmp	r2, #255	; 0xff
 8003740:	bf85      	ittet	hi
 8003742:	238a      	movhi	r3, #138	; 0x8a
 8003744:	6003      	strhi	r3, [r0, #0]
 8003746:	700a      	strbls	r2, [r1, #0]
 8003748:	f04f 30ff 	movhi.w	r0, #4294967295
 800374c:	bf98      	it	ls
 800374e:	2001      	movls	r0, #1
 8003750:	4770      	bx	lr
 8003752:	4608      	mov	r0, r1
 8003754:	4770      	bx	lr

08003756 <memcpy>:
 8003756:	b510      	push	{r4, lr}
 8003758:	1e43      	subs	r3, r0, #1
 800375a:	440a      	add	r2, r1
 800375c:	4291      	cmp	r1, r2
 800375e:	d100      	bne.n	8003762 <memcpy+0xc>
 8003760:	bd10      	pop	{r4, pc}
 8003762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800376a:	e7f7      	b.n	800375c <memcpy+0x6>

0800376c <memmove>:
 800376c:	4288      	cmp	r0, r1
 800376e:	b510      	push	{r4, lr}
 8003770:	eb01 0302 	add.w	r3, r1, r2
 8003774:	d807      	bhi.n	8003786 <memmove+0x1a>
 8003776:	1e42      	subs	r2, r0, #1
 8003778:	4299      	cmp	r1, r3
 800377a:	d00a      	beq.n	8003792 <memmove+0x26>
 800377c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003780:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003784:	e7f8      	b.n	8003778 <memmove+0xc>
 8003786:	4283      	cmp	r3, r0
 8003788:	d9f5      	bls.n	8003776 <memmove+0xa>
 800378a:	1881      	adds	r1, r0, r2
 800378c:	1ad2      	subs	r2, r2, r3
 800378e:	42d3      	cmn	r3, r2
 8003790:	d100      	bne.n	8003794 <memmove+0x28>
 8003792:	bd10      	pop	{r4, pc}
 8003794:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003798:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800379c:	e7f7      	b.n	800378e <memmove+0x22>
	...

080037a0 <_free_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4605      	mov	r5, r0
 80037a4:	2900      	cmp	r1, #0
 80037a6:	d045      	beq.n	8003834 <_free_r+0x94>
 80037a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ac:	1f0c      	subs	r4, r1, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bfb8      	it	lt
 80037b2:	18e4      	addlt	r4, r4, r3
 80037b4:	f000 f8d2 	bl	800395c <__malloc_lock>
 80037b8:	4a1f      	ldr	r2, [pc, #124]	; (8003838 <_free_r+0x98>)
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	4610      	mov	r0, r2
 80037be:	b933      	cbnz	r3, 80037ce <_free_r+0x2e>
 80037c0:	6063      	str	r3, [r4, #4]
 80037c2:	6014      	str	r4, [r2, #0]
 80037c4:	4628      	mov	r0, r5
 80037c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ca:	f000 b8c8 	b.w	800395e <__malloc_unlock>
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	d90c      	bls.n	80037ec <_free_r+0x4c>
 80037d2:	6821      	ldr	r1, [r4, #0]
 80037d4:	1862      	adds	r2, r4, r1
 80037d6:	4293      	cmp	r3, r2
 80037d8:	bf04      	itt	eq
 80037da:	681a      	ldreq	r2, [r3, #0]
 80037dc:	685b      	ldreq	r3, [r3, #4]
 80037de:	6063      	str	r3, [r4, #4]
 80037e0:	bf04      	itt	eq
 80037e2:	1852      	addeq	r2, r2, r1
 80037e4:	6022      	streq	r2, [r4, #0]
 80037e6:	6004      	str	r4, [r0, #0]
 80037e8:	e7ec      	b.n	80037c4 <_free_r+0x24>
 80037ea:	4613      	mov	r3, r2
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	b10a      	cbz	r2, 80037f4 <_free_r+0x54>
 80037f0:	42a2      	cmp	r2, r4
 80037f2:	d9fa      	bls.n	80037ea <_free_r+0x4a>
 80037f4:	6819      	ldr	r1, [r3, #0]
 80037f6:	1858      	adds	r0, r3, r1
 80037f8:	42a0      	cmp	r0, r4
 80037fa:	d10b      	bne.n	8003814 <_free_r+0x74>
 80037fc:	6820      	ldr	r0, [r4, #0]
 80037fe:	4401      	add	r1, r0
 8003800:	1858      	adds	r0, r3, r1
 8003802:	4282      	cmp	r2, r0
 8003804:	6019      	str	r1, [r3, #0]
 8003806:	d1dd      	bne.n	80037c4 <_free_r+0x24>
 8003808:	6810      	ldr	r0, [r2, #0]
 800380a:	6852      	ldr	r2, [r2, #4]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	4401      	add	r1, r0
 8003810:	6019      	str	r1, [r3, #0]
 8003812:	e7d7      	b.n	80037c4 <_free_r+0x24>
 8003814:	d902      	bls.n	800381c <_free_r+0x7c>
 8003816:	230c      	movs	r3, #12
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	e7d3      	b.n	80037c4 <_free_r+0x24>
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	1821      	adds	r1, r4, r0
 8003820:	428a      	cmp	r2, r1
 8003822:	bf04      	itt	eq
 8003824:	6811      	ldreq	r1, [r2, #0]
 8003826:	6852      	ldreq	r2, [r2, #4]
 8003828:	6062      	str	r2, [r4, #4]
 800382a:	bf04      	itt	eq
 800382c:	1809      	addeq	r1, r1, r0
 800382e:	6021      	streq	r1, [r4, #0]
 8003830:	605c      	str	r4, [r3, #4]
 8003832:	e7c7      	b.n	80037c4 <_free_r+0x24>
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	bf00      	nop
 8003838:	20000228 	.word	0x20000228

0800383c <_malloc_r>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	1ccd      	adds	r5, r1, #3
 8003840:	f025 0503 	bic.w	r5, r5, #3
 8003844:	3508      	adds	r5, #8
 8003846:	2d0c      	cmp	r5, #12
 8003848:	bf38      	it	cc
 800384a:	250c      	movcc	r5, #12
 800384c:	2d00      	cmp	r5, #0
 800384e:	4606      	mov	r6, r0
 8003850:	db01      	blt.n	8003856 <_malloc_r+0x1a>
 8003852:	42a9      	cmp	r1, r5
 8003854:	d903      	bls.n	800385e <_malloc_r+0x22>
 8003856:	230c      	movs	r3, #12
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	2000      	movs	r0, #0
 800385c:	bd70      	pop	{r4, r5, r6, pc}
 800385e:	f000 f87d 	bl	800395c <__malloc_lock>
 8003862:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <_malloc_r+0xac>)
 8003864:	6814      	ldr	r4, [r2, #0]
 8003866:	4621      	mov	r1, r4
 8003868:	b991      	cbnz	r1, 8003890 <_malloc_r+0x54>
 800386a:	4c20      	ldr	r4, [pc, #128]	; (80038ec <_malloc_r+0xb0>)
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	b91b      	cbnz	r3, 8003878 <_malloc_r+0x3c>
 8003870:	4630      	mov	r0, r6
 8003872:	f000 f863 	bl	800393c <_sbrk_r>
 8003876:	6020      	str	r0, [r4, #0]
 8003878:	4629      	mov	r1, r5
 800387a:	4630      	mov	r0, r6
 800387c:	f000 f85e 	bl	800393c <_sbrk_r>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d124      	bne.n	80038ce <_malloc_r+0x92>
 8003884:	230c      	movs	r3, #12
 8003886:	6033      	str	r3, [r6, #0]
 8003888:	4630      	mov	r0, r6
 800388a:	f000 f868 	bl	800395e <__malloc_unlock>
 800388e:	e7e4      	b.n	800385a <_malloc_r+0x1e>
 8003890:	680b      	ldr	r3, [r1, #0]
 8003892:	1b5b      	subs	r3, r3, r5
 8003894:	d418      	bmi.n	80038c8 <_malloc_r+0x8c>
 8003896:	2b0b      	cmp	r3, #11
 8003898:	d90f      	bls.n	80038ba <_malloc_r+0x7e>
 800389a:	600b      	str	r3, [r1, #0]
 800389c:	50cd      	str	r5, [r1, r3]
 800389e:	18cc      	adds	r4, r1, r3
 80038a0:	4630      	mov	r0, r6
 80038a2:	f000 f85c 	bl	800395e <__malloc_unlock>
 80038a6:	f104 000b 	add.w	r0, r4, #11
 80038aa:	1d23      	adds	r3, r4, #4
 80038ac:	f020 0007 	bic.w	r0, r0, #7
 80038b0:	1ac3      	subs	r3, r0, r3
 80038b2:	d0d3      	beq.n	800385c <_malloc_r+0x20>
 80038b4:	425a      	negs	r2, r3
 80038b6:	50e2      	str	r2, [r4, r3]
 80038b8:	e7d0      	b.n	800385c <_malloc_r+0x20>
 80038ba:	428c      	cmp	r4, r1
 80038bc:	684b      	ldr	r3, [r1, #4]
 80038be:	bf16      	itet	ne
 80038c0:	6063      	strne	r3, [r4, #4]
 80038c2:	6013      	streq	r3, [r2, #0]
 80038c4:	460c      	movne	r4, r1
 80038c6:	e7eb      	b.n	80038a0 <_malloc_r+0x64>
 80038c8:	460c      	mov	r4, r1
 80038ca:	6849      	ldr	r1, [r1, #4]
 80038cc:	e7cc      	b.n	8003868 <_malloc_r+0x2c>
 80038ce:	1cc4      	adds	r4, r0, #3
 80038d0:	f024 0403 	bic.w	r4, r4, #3
 80038d4:	42a0      	cmp	r0, r4
 80038d6:	d005      	beq.n	80038e4 <_malloc_r+0xa8>
 80038d8:	1a21      	subs	r1, r4, r0
 80038da:	4630      	mov	r0, r6
 80038dc:	f000 f82e 	bl	800393c <_sbrk_r>
 80038e0:	3001      	adds	r0, #1
 80038e2:	d0cf      	beq.n	8003884 <_malloc_r+0x48>
 80038e4:	6025      	str	r5, [r4, #0]
 80038e6:	e7db      	b.n	80038a0 <_malloc_r+0x64>
 80038e8:	20000228 	.word	0x20000228
 80038ec:	2000022c 	.word	0x2000022c

080038f0 <_realloc_r>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	4607      	mov	r7, r0
 80038f4:	4614      	mov	r4, r2
 80038f6:	460e      	mov	r6, r1
 80038f8:	b921      	cbnz	r1, 8003904 <_realloc_r+0x14>
 80038fa:	4611      	mov	r1, r2
 80038fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003900:	f7ff bf9c 	b.w	800383c <_malloc_r>
 8003904:	b922      	cbnz	r2, 8003910 <_realloc_r+0x20>
 8003906:	f7ff ff4b 	bl	80037a0 <_free_r>
 800390a:	4625      	mov	r5, r4
 800390c:	4628      	mov	r0, r5
 800390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003910:	f000 f826 	bl	8003960 <_malloc_usable_size_r>
 8003914:	42a0      	cmp	r0, r4
 8003916:	d20f      	bcs.n	8003938 <_realloc_r+0x48>
 8003918:	4621      	mov	r1, r4
 800391a:	4638      	mov	r0, r7
 800391c:	f7ff ff8e 	bl	800383c <_malloc_r>
 8003920:	4605      	mov	r5, r0
 8003922:	2800      	cmp	r0, #0
 8003924:	d0f2      	beq.n	800390c <_realloc_r+0x1c>
 8003926:	4631      	mov	r1, r6
 8003928:	4622      	mov	r2, r4
 800392a:	f7ff ff14 	bl	8003756 <memcpy>
 800392e:	4631      	mov	r1, r6
 8003930:	4638      	mov	r0, r7
 8003932:	f7ff ff35 	bl	80037a0 <_free_r>
 8003936:	e7e9      	b.n	800390c <_realloc_r+0x1c>
 8003938:	4635      	mov	r5, r6
 800393a:	e7e7      	b.n	800390c <_realloc_r+0x1c>

0800393c <_sbrk_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	4c06      	ldr	r4, [pc, #24]	; (8003958 <_sbrk_r+0x1c>)
 8003940:	2300      	movs	r3, #0
 8003942:	4605      	mov	r5, r0
 8003944:	4608      	mov	r0, r1
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	f7fd fbd8 	bl	80010fc <_sbrk>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d102      	bne.n	8003956 <_sbrk_r+0x1a>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	b103      	cbz	r3, 8003956 <_sbrk_r+0x1a>
 8003954:	602b      	str	r3, [r5, #0]
 8003956:	bd38      	pop	{r3, r4, r5, pc}
 8003958:	20000424 	.word	0x20000424

0800395c <__malloc_lock>:
 800395c:	4770      	bx	lr

0800395e <__malloc_unlock>:
 800395e:	4770      	bx	lr

08003960 <_malloc_usable_size_r>:
 8003960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003964:	1f18      	subs	r0, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	bfbc      	itt	lt
 800396a:	580b      	ldrlt	r3, [r1, r0]
 800396c:	18c0      	addlt	r0, r0, r3
 800396e:	4770      	bx	lr

08003970 <_init>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr

0800397c <_fini>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	bf00      	nop
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr
